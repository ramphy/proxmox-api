{
  "openapi": "3.0.0",
  "info": {
    "title": "Proxmox VE API",
    "version": "1.0.0",
    "description": "API for Proxmox Virtual Environment"
  },
  "paths": {
    "/cluster": {
      "get": {
        "summary": "Cluster index.",
        "description": "Cluster index.",
        "tags": [
          "cluster"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {},
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{name}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/cluster/replication": {
      "get": {
        "summary": "List replication jobs.",
        "description": "List replication jobs.",
        "tags": [
          "cluster"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {},
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{id}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new replication job",
        "description": "Create a new replication job",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "comment",
            "in": "query",
            "description": "Description.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 4096
            }
          },
          {
            "name": "disable",
            "in": "query",
            "description": "Flag to disable/deactivate the entry.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "Replication Job ID. The ID is composed of a Guest ID and a job number, separated by a hyphen, i.e. '<GUEST>-<JOBNUM>'.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-replication-job-id",
              "pattern": "[1-9][0-9]{2,8}-\\d{1,9}"
            }
          },
          {
            "name": "rate",
            "in": "query",
            "description": "Rate limit in mbps (megabytes per second) as floating point number.",
            "required": false,
            "schema": {
              "type": "number",
              "minimum": 1
            }
          },
          {
            "name": "remove_job",
            "in": "query",
            "description": "Mark the replication job for removal. The job will remove all local replication snapshots. When set to 'full', it also tries to remove replicated volumes on the target. The job then removes itself from the configuration file.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "local",
                "full"
              ]
            }
          },
          {
            "name": "schedule",
            "in": "query",
            "description": "Storage replication schedule. The format is a subset of `systemd` calendar events.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "*/15",
              "format": "pve-calendar-event",
              "maxLength": 128
            }
          },
          {
            "name": "source",
            "in": "query",
            "description": "For internal use, to detect if the guest was stolen.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "target",
            "in": "query",
            "description": "Target node.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Section type.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "local"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/cluster/replication/{id}": {
      "delete": {
        "summary": "Mark replication job for removal.",
        "description": "Mark replication job for removal.",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "force",
            "in": "query",
            "description": "Will remove the jobconfig entry, but will not cleanup.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Replication Job ID. The ID is composed of a Guest ID and a job number, separated by a hyphen, i.e. '<GUEST>-<JOBNUM>'.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-replication-job-id",
              "pattern": "[1-9][0-9]{2,8}-\\d{1,9}"
            }
          },
          {
            "name": "keep",
            "in": "query",
            "description": "Keep replicated data at target (do not remove).",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Read replication job configuration.",
        "description": "Read replication job configuration.",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Replication Job ID. The ID is composed of a Guest ID and a job number, separated by a hyphen, i.e. '<GUEST>-<JOBNUM>'.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-replication-job-id",
              "pattern": "[1-9][0-9]{2,8}-\\d{1,9}"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update replication job configuration.",
        "description": "Update replication job configuration.",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "comment",
            "in": "query",
            "description": "Description.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 4096
            }
          },
          {
            "name": "delete",
            "in": "query",
            "description": "A list of settings you want to delete.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-configid-list",
              "maxLength": 4096
            }
          },
          {
            "name": "digest",
            "in": "query",
            "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 64
            }
          },
          {
            "name": "disable",
            "in": "query",
            "description": "Flag to disable/deactivate the entry.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Replication Job ID. The ID is composed of a Guest ID and a job number, separated by a hyphen, i.e. '<GUEST>-<JOBNUM>'.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-replication-job-id",
              "pattern": "[1-9][0-9]{2,8}-\\d{1,9}"
            }
          },
          {
            "name": "rate",
            "in": "query",
            "description": "Rate limit in mbps (megabytes per second) as floating point number.",
            "required": false,
            "schema": {
              "type": "number",
              "minimum": 1
            }
          },
          {
            "name": "remove_job",
            "in": "query",
            "description": "Mark the replication job for removal. The job will remove all local replication snapshots. When set to 'full', it also tries to remove replicated volumes on the target. The job then removes itself from the configuration file.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "local",
                "full"
              ]
            }
          },
          {
            "name": "schedule",
            "in": "query",
            "description": "Storage replication schedule. The format is a subset of `systemd` calendar events.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "*/15",
              "format": "pve-calendar-event",
              "maxLength": 128
            }
          },
          {
            "name": "source",
            "in": "query",
            "description": "For internal use, to detect if the guest was stolen.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/cluster/metrics": {
      "get": {
        "summary": "Metrics index.",
        "description": "Metrics index.",
        "tags": [
          "cluster"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {},
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{name}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/cluster/metrics/server": {
      "get": {
        "summary": "List configured metric servers.",
        "description": "List configured metric servers.",
        "tags": [
          "cluster"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "disable": {
                        "description": "Flag to disable the plugin.",
                        "type": "boolean"
                      },
                      "id": {
                        "description": "The ID of the entry.",
                        "type": "string"
                      },
                      "port": {
                        "description": "Server network port",
                        "type": "integer"
                      },
                      "server": {
                        "description": "Server dns name or IP address",
                        "type": "string"
                      },
                      "type": {
                        "description": "Plugin type.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{id}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/cluster/metrics/server/{id}": {
      "delete": {
        "summary": "Remove Metric server.",
        "description": "Remove Metric server.",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-configid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Read metric server configuration.",
        "description": "Read metric server configuration.",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-configid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new external metric server config",
        "description": "Create a new external metric server config",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "api-path-prefix",
            "in": "query",
            "description": "An API path prefix inserted between '<host>:<port>/' and '/api2/'. Can be useful if the InfluxDB service runs behind a reverse proxy.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "bucket",
            "in": "query",
            "description": "The InfluxDB bucket/db. Only necessary when using the http v2 api.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "disable",
            "in": "query",
            "description": "Flag to disable the plugin.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the entry.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-configid"
            }
          },
          {
            "name": "influxdbproto",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "udp",
              "enum": [
                "udp",
                "http",
                "https"
              ]
            }
          },
          {
            "name": "max-body-size",
            "in": "query",
            "description": "InfluxDB max-body-size in bytes. Requests are batched up to this size.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 25000000,
              "minimum": 1
            }
          },
          {
            "name": "mtu",
            "in": "query",
            "description": "MTU for metrics transmission over UDP",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1500,
              "minimum": 512,
              "maximum": 65536
            }
          },
          {
            "name": "organization",
            "in": "query",
            "description": "The InfluxDB organization. Only necessary when using the http v2 api. Has no meaning when using v2 compatibility api.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "otel-compression",
            "in": "query",
            "description": "Compression algorithm for requests",
            "required": false,
            "schema": {
              "type": "string",
              "default": "gzip",
              "enum": [
                "none",
                "gzip"
              ]
            }
          },
          {
            "name": "otel-headers",
            "in": "query",
            "description": "Custom HTTP headers (JSON format, base64 encoded)",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 1024
            }
          },
          {
            "name": "otel-max-body-size",
            "in": "query",
            "description": "Maximum request body size in bytes",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10000000,
              "minimum": 1024
            }
          },
          {
            "name": "otel-path",
            "in": "query",
            "description": "OTLP endpoint path",
            "required": false,
            "schema": {
              "type": "string",
              "default": "/v1/metrics"
            }
          },
          {
            "name": "otel-protocol",
            "in": "query",
            "description": "HTTP protocol",
            "required": false,
            "schema": {
              "type": "string",
              "default": "https",
              "enum": [
                "http",
                "https"
              ]
            }
          },
          {
            "name": "otel-resource-attributes",
            "in": "query",
            "description": "Additional resource attributes as JSON, base64 encoded",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 1024
            }
          },
          {
            "name": "otel-timeout",
            "in": "query",
            "description": "HTTP request timeout in seconds",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 5,
              "minimum": 1,
              "maximum": 10
            }
          },
          {
            "name": "otel-verify-ssl",
            "in": "query",
            "description": "Verify SSL certificates",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 1
            }
          },
          {
            "name": "path",
            "in": "query",
            "description": "root graphite path (ex: proxmox.mycluster.mykey)",
            "required": false,
            "schema": {
              "type": "string",
              "format": "graphite-path"
            }
          },
          {
            "name": "port",
            "in": "query",
            "description": "server network port",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 65536
            }
          },
          {
            "name": "proto",
            "in": "query",
            "description": "Protocol to send graphite data. TCP or UDP (default)",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "udp",
                "tcp"
              ]
            }
          },
          {
            "name": "server",
            "in": "query",
            "description": "server dns name or IP address",
            "required": true,
            "schema": {
              "type": "string",
              "format": "address"
            }
          },
          {
            "name": "timeout",
            "in": "query",
            "description": "graphite TCP socket timeout (default=1)",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 0
            }
          },
          {
            "name": "token",
            "in": "query",
            "description": "The InfluxDB access token. Only necessary when using the http v2 api. If the v2 compatibility api is used, use 'user:password' instead.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Plugin type.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-configid",
              "enum": [
                "graphite",
                "influxdb",
                "opentelemetry"
              ]
            }
          },
          {
            "name": "verify-certificate",
            "in": "query",
            "description": "Set to 0 to disable certificate verification for https endpoints.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update metric server configuration.",
        "description": "Update metric server configuration.",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "api-path-prefix",
            "in": "query",
            "description": "An API path prefix inserted between '<host>:<port>/' and '/api2/'. Can be useful if the InfluxDB service runs behind a reverse proxy.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "bucket",
            "in": "query",
            "description": "The InfluxDB bucket/db. Only necessary when using the http v2 api.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "delete",
            "in": "query",
            "description": "A list of settings you want to delete.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-configid-list",
              "maxLength": 4096
            }
          },
          {
            "name": "digest",
            "in": "query",
            "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 64
            }
          },
          {
            "name": "disable",
            "in": "query",
            "description": "Flag to disable the plugin.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the entry.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-configid"
            }
          },
          {
            "name": "influxdbproto",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "udp",
              "enum": [
                "udp",
                "http",
                "https"
              ]
            }
          },
          {
            "name": "max-body-size",
            "in": "query",
            "description": "InfluxDB max-body-size in bytes. Requests are batched up to this size.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 25000000,
              "minimum": 1
            }
          },
          {
            "name": "mtu",
            "in": "query",
            "description": "MTU for metrics transmission over UDP",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1500,
              "minimum": 512,
              "maximum": 65536
            }
          },
          {
            "name": "organization",
            "in": "query",
            "description": "The InfluxDB organization. Only necessary when using the http v2 api. Has no meaning when using v2 compatibility api.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "otel-compression",
            "in": "query",
            "description": "Compression algorithm for requests",
            "required": false,
            "schema": {
              "type": "string",
              "default": "gzip",
              "enum": [
                "none",
                "gzip"
              ]
            }
          },
          {
            "name": "otel-headers",
            "in": "query",
            "description": "Custom HTTP headers (JSON format, base64 encoded)",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 1024
            }
          },
          {
            "name": "otel-max-body-size",
            "in": "query",
            "description": "Maximum request body size in bytes",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10000000,
              "minimum": 1024
            }
          },
          {
            "name": "otel-path",
            "in": "query",
            "description": "OTLP endpoint path",
            "required": false,
            "schema": {
              "type": "string",
              "default": "/v1/metrics"
            }
          },
          {
            "name": "otel-protocol",
            "in": "query",
            "description": "HTTP protocol",
            "required": false,
            "schema": {
              "type": "string",
              "default": "https",
              "enum": [
                "http",
                "https"
              ]
            }
          },
          {
            "name": "otel-resource-attributes",
            "in": "query",
            "description": "Additional resource attributes as JSON, base64 encoded",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 1024
            }
          },
          {
            "name": "otel-timeout",
            "in": "query",
            "description": "HTTP request timeout in seconds",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 5,
              "minimum": 1,
              "maximum": 10
            }
          },
          {
            "name": "otel-verify-ssl",
            "in": "query",
            "description": "Verify SSL certificates",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 1
            }
          },
          {
            "name": "path",
            "in": "query",
            "description": "root graphite path (ex: proxmox.mycluster.mykey)",
            "required": false,
            "schema": {
              "type": "string",
              "format": "graphite-path"
            }
          },
          {
            "name": "port",
            "in": "query",
            "description": "server network port",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 65536
            }
          },
          {
            "name": "proto",
            "in": "query",
            "description": "Protocol to send graphite data. TCP or UDP (default)",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "udp",
                "tcp"
              ]
            }
          },
          {
            "name": "server",
            "in": "query",
            "description": "server dns name or IP address",
            "required": true,
            "schema": {
              "type": "string",
              "format": "address"
            }
          },
          {
            "name": "timeout",
            "in": "query",
            "description": "graphite TCP socket timeout (default=1)",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 0
            }
          },
          {
            "name": "token",
            "in": "query",
            "description": "The InfluxDB access token. Only necessary when using the http v2 api. If the v2 compatibility api is used, use 'user:password' instead.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "verify-certificate",
            "in": "query",
            "description": "Set to 0 to disable certificate verification for https endpoints.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/cluster/metrics/export": {
      "get": {
        "summary": "Retrieve metrics of the cluster.",
        "description": "Retrieve metrics of the cluster.",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "history",
            "in": "query",
            "description": "Also return historic values. Returns full available metric history unless `start-time` is also set",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "local-only",
            "in": "query",
            "description": "Only return metrics for the current node instead of the whole cluster",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "start-time",
            "in": "query",
            "description": "Only include metrics with a timestamp > start-time.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": 0,
                  "properties": {
                    "data": {
                      "description": "Array of system metrics. Metrics are sorted by their timestamp.",
                      "items": {
                        "additionalProperties": 0,
                        "properties": {
                          "id": {
                            "description": "Unique identifier for this metric object, for instance 'node/<nodename>' or 'qemu/<vmid>'.",
                            "type": "string"
                          },
                          "metric": {
                            "description": "Name of the metric.",
                            "type": "string"
                          },
                          "timestamp": {
                            "description": "Time at which this metric was observed",
                            "type": "integer"
                          },
                          "type": {
                            "description": "Type of the metric.",
                            "enum": [
                              "gauge",
                              "counter",
                              "derive"
                            ],
                            "type": "string"
                          },
                          "value": {
                            "description": "Metric value.",
                            "type": "number"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/cluster/notifications": {
      "get": {
        "summary": "Index for notification-related API endpoints.",
        "description": "Index for notification-related API endpoints.",
        "tags": [
          "cluster"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {},
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{name}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/cluster/notifications/matcher-fields": {
      "get": {
        "summary": "Returns known notification metadata fields",
        "description": "Returns known notification metadata fields",
        "tags": [
          "cluster"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "name": {
                        "description": "Name of the field.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{name}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/cluster/notifications/matcher-field-values": {
      "get": {
        "summary": "Returns known notification metadata fields and their known values",
        "description": "Returns known notification metadata fields and their known values",
        "tags": [
          "cluster"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "comment": {
                        "description": "Additional comment for this value.",
                        "optional": 1,
                        "type": "string"
                      },
                      "field": {
                        "description": "Field this value belongs to.",
                        "type": "string"
                      },
                      "value": {
                        "description": "Notification metadata value known by the system.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/cluster/notifications/endpoints": {
      "get": {
        "summary": "Index for all available endpoint types.",
        "description": "Index for all available endpoint types.",
        "tags": [
          "cluster"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {},
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{name}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/cluster/notifications/endpoints/sendmail": {
      "get": {
        "summary": "Returns a list of all sendmail endpoints",
        "description": "Returns a list of all sendmail endpoints",
        "tags": [
          "cluster"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "author": {
                        "description": "Author of the mail",
                        "optional": 1,
                        "type": "string"
                      },
                      "comment": {
                        "description": "Comment",
                        "optional": 1,
                        "type": "string"
                      },
                      "disable": {
                        "default": 0,
                        "description": "Disable this target",
                        "optional": 1,
                        "type": "boolean"
                      },
                      "from-address": {
                        "description": "`From` address for the mail",
                        "optional": 1,
                        "type": "string"
                      },
                      "mailto": {
                        "description": "List of email recipients",
                        "items": {
                          "format": "email-or-username",
                          "type": "string"
                        },
                        "optional": 1,
                        "type": "array"
                      },
                      "mailto-user": {
                        "description": "List of users",
                        "items": {
                          "format": "pve-userid",
                          "type": "string"
                        },
                        "optional": 1,
                        "type": "array"
                      },
                      "name": {
                        "description": "The name of the endpoint.",
                        "format": "pve-configid",
                        "type": "string"
                      },
                      "origin": {
                        "description": "Show if this entry was created by a user or was built-in",
                        "enum": [
                          "user-created",
                          "builtin",
                          "modified-builtin"
                        ],
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{name}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new sendmail endpoint",
        "description": "Create a new sendmail endpoint",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "author",
            "in": "query",
            "description": "Author of the mail",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "comment",
            "in": "query",
            "description": "Comment",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "disable",
            "in": "query",
            "description": "Disable this target",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "from-address",
            "in": "query",
            "description": "`From` address for the mail",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "mailto",
            "in": "query",
            "description": "List of email recipients",
            "required": false,
            "schema": {
              "type": "array"
            }
          },
          {
            "name": "mailto-user",
            "in": "query",
            "description": "List of users",
            "required": false,
            "schema": {
              "type": "array"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "The name of the endpoint.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-configid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/cluster/notifications/endpoints/sendmail/{name}": {
      "delete": {
        "summary": "Remove sendmail endpoint",
        "description": "Remove sendmail endpoint",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-configid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Return a specific sendmail endpoint",
        "description": "Return a specific sendmail endpoint",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-configid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "author": {
                      "description": "Author of the mail",
                      "optional": 1,
                      "type": "string"
                    },
                    "comment": {
                      "description": "Comment",
                      "optional": 1,
                      "type": "string"
                    },
                    "digest": {
                      "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
                      "maxLength": 64,
                      "optional": 1,
                      "type": "string"
                    },
                    "disable": {
                      "default": 0,
                      "description": "Disable this target",
                      "optional": 1,
                      "type": "boolean"
                    },
                    "from-address": {
                      "description": "`From` address for the mail",
                      "optional": 1,
                      "type": "string"
                    },
                    "mailto": {
                      "description": "List of email recipients",
                      "items": {
                        "format": "email-or-username",
                        "type": "string"
                      },
                      "optional": 1,
                      "type": "array"
                    },
                    "mailto-user": {
                      "description": "List of users",
                      "items": {
                        "format": "pve-userid",
                        "type": "string"
                      },
                      "optional": 1,
                      "type": "array"
                    },
                    "name": {
                      "description": "The name of the endpoint.",
                      "format": "pve-configid",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update existing sendmail endpoint",
        "description": "Update existing sendmail endpoint",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "author",
            "in": "query",
            "description": "Author of the mail",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "comment",
            "in": "query",
            "description": "Comment",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "delete",
            "in": "query",
            "description": "A list of settings you want to delete.",
            "required": false,
            "schema": {
              "type": "array"
            }
          },
          {
            "name": "digest",
            "in": "query",
            "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 64
            }
          },
          {
            "name": "disable",
            "in": "query",
            "description": "Disable this target",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "from-address",
            "in": "query",
            "description": "`From` address for the mail",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "mailto",
            "in": "query",
            "description": "List of email recipients",
            "required": false,
            "schema": {
              "type": "array"
            }
          },
          {
            "name": "mailto-user",
            "in": "query",
            "description": "List of users",
            "required": false,
            "schema": {
              "type": "array"
            }
          },
          {
            "name": "name",
            "in": "path",
            "description": "The name of the endpoint.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-configid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/cluster/notifications/endpoints/gotify": {
      "get": {
        "summary": "Returns a list of all gotify endpoints",
        "description": "Returns a list of all gotify endpoints",
        "tags": [
          "cluster"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "comment": {
                        "description": "Comment",
                        "optional": 1,
                        "type": "string"
                      },
                      "disable": {
                        "default": 0,
                        "description": "Disable this target",
                        "optional": 1,
                        "type": "boolean"
                      },
                      "name": {
                        "description": "The name of the endpoint.",
                        "format": "pve-configid",
                        "type": "string"
                      },
                      "origin": {
                        "description": "Show if this entry was created by a user or was built-in",
                        "enum": [
                          "user-created",
                          "builtin",
                          "modified-builtin"
                        ],
                        "type": "string"
                      },
                      "server": {
                        "description": "Server URL",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{name}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new gotify endpoint",
        "description": "Create a new gotify endpoint",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "comment",
            "in": "query",
            "description": "Comment",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "disable",
            "in": "query",
            "description": "Disable this target",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "The name of the endpoint.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-configid"
            }
          },
          {
            "name": "server",
            "in": "query",
            "description": "Server URL",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "token",
            "in": "query",
            "description": "Secret token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/cluster/notifications/endpoints/gotify/{name}": {
      "delete": {
        "summary": "Remove gotify endpoint",
        "description": "Remove gotify endpoint",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-configid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Return a specific gotify endpoint",
        "description": "Return a specific gotify endpoint",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Name of the endpoint.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-configid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "comment": {
                      "description": "Comment",
                      "optional": 1,
                      "type": "string"
                    },
                    "digest": {
                      "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
                      "maxLength": 64,
                      "optional": 1,
                      "type": "string"
                    },
                    "disable": {
                      "default": 0,
                      "description": "Disable this target",
                      "optional": 1,
                      "type": "boolean"
                    },
                    "name": {
                      "description": "The name of the endpoint.",
                      "format": "pve-configid",
                      "type": "string"
                    },
                    "server": {
                      "description": "Server URL",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update existing gotify endpoint",
        "description": "Update existing gotify endpoint",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "comment",
            "in": "query",
            "description": "Comment",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "delete",
            "in": "query",
            "description": "A list of settings you want to delete.",
            "required": false,
            "schema": {
              "type": "array"
            }
          },
          {
            "name": "digest",
            "in": "query",
            "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 64
            }
          },
          {
            "name": "disable",
            "in": "query",
            "description": "Disable this target",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "name",
            "in": "path",
            "description": "The name of the endpoint.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-configid"
            }
          },
          {
            "name": "server",
            "in": "query",
            "description": "Server URL",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "token",
            "in": "query",
            "description": "Secret token",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/cluster/notifications/endpoints/smtp": {
      "get": {
        "summary": "Returns a list of all smtp endpoints",
        "description": "Returns a list of all smtp endpoints",
        "tags": [
          "cluster"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "author": {
                        "description": "Author of the mail. Defaults to 'Proxmox VE'.",
                        "optional": 1,
                        "type": "string"
                      },
                      "comment": {
                        "description": "Comment",
                        "optional": 1,
                        "type": "string"
                      },
                      "disable": {
                        "default": 0,
                        "description": "Disable this target",
                        "optional": 1,
                        "type": "boolean"
                      },
                      "from-address": {
                        "description": "`From` address for the mail",
                        "type": "string"
                      },
                      "mailto": {
                        "description": "List of email recipients",
                        "items": {
                          "format": "email-or-username",
                          "type": "string"
                        },
                        "optional": 1,
                        "type": "array"
                      },
                      "mailto-user": {
                        "description": "List of users",
                        "items": {
                          "format": "pve-userid",
                          "type": "string"
                        },
                        "optional": 1,
                        "type": "array"
                      },
                      "mode": {
                        "default": "tls",
                        "description": "Determine which encryption method shall be used for the connection.",
                        "enum": [
                          "insecure",
                          "starttls",
                          "tls"
                        ],
                        "optional": 1,
                        "type": "string"
                      },
                      "name": {
                        "description": "The name of the endpoint.",
                        "format": "pve-configid",
                        "type": "string"
                      },
                      "origin": {
                        "description": "Show if this entry was created by a user or was built-in",
                        "enum": [
                          "user-created",
                          "builtin",
                          "modified-builtin"
                        ],
                        "type": "string"
                      },
                      "port": {
                        "description": "The port to be used. Defaults to 465 for TLS based connections, 587 for STARTTLS based connections and port 25 for insecure plain-text connections.",
                        "optional": 1,
                        "type": "integer"
                      },
                      "server": {
                        "description": "The address of the SMTP server.",
                        "type": "string"
                      },
                      "username": {
                        "description": "Username for SMTP authentication",
                        "optional": 1,
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{name}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new smtp endpoint",
        "description": "Create a new smtp endpoint",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "author",
            "in": "query",
            "description": "Author of the mail. Defaults to 'Proxmox VE'.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "comment",
            "in": "query",
            "description": "Comment",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "disable",
            "in": "query",
            "description": "Disable this target",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "from-address",
            "in": "query",
            "description": "`From` address for the mail",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "mailto",
            "in": "query",
            "description": "List of email recipients",
            "required": false,
            "schema": {
              "type": "array"
            }
          },
          {
            "name": "mailto-user",
            "in": "query",
            "description": "List of users",
            "required": false,
            "schema": {
              "type": "array"
            }
          },
          {
            "name": "mode",
            "in": "query",
            "description": "Determine which encryption method shall be used for the connection.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "tls",
              "enum": [
                "insecure",
                "starttls",
                "tls"
              ]
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "The name of the endpoint.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-configid"
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "Password for SMTP authentication",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "port",
            "in": "query",
            "description": "The port to be used. Defaults to 465 for TLS based connections, 587 for STARTTLS based connections and port 25 for insecure plain-text connections.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "server",
            "in": "query",
            "description": "The address of the SMTP server.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "username",
            "in": "query",
            "description": "Username for SMTP authentication",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/cluster/notifications/endpoints/smtp/{name}": {
      "delete": {
        "summary": "Remove smtp endpoint",
        "description": "Remove smtp endpoint",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-configid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Return a specific smtp endpoint",
        "description": "Return a specific smtp endpoint",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-configid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "author": {
                      "description": "Author of the mail. Defaults to 'Proxmox VE'.",
                      "optional": 1,
                      "type": "string"
                    },
                    "comment": {
                      "description": "Comment",
                      "optional": 1,
                      "type": "string"
                    },
                    "digest": {
                      "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
                      "maxLength": 64,
                      "optional": 1,
                      "type": "string"
                    },
                    "disable": {
                      "default": 0,
                      "description": "Disable this target",
                      "optional": 1,
                      "type": "boolean"
                    },
                    "from-address": {
                      "description": "`From` address for the mail",
                      "type": "string"
                    },
                    "mailto": {
                      "description": "List of email recipients",
                      "items": {
                        "format": "email-or-username",
                        "type": "string"
                      },
                      "optional": 1,
                      "type": "array"
                    },
                    "mailto-user": {
                      "description": "List of users",
                      "items": {
                        "format": "pve-userid",
                        "type": "string"
                      },
                      "optional": 1,
                      "type": "array"
                    },
                    "mode": {
                      "default": "tls",
                      "description": "Determine which encryption method shall be used for the connection.",
                      "enum": [
                        "insecure",
                        "starttls",
                        "tls"
                      ],
                      "optional": 1,
                      "type": "string"
                    },
                    "name": {
                      "description": "The name of the endpoint.",
                      "format": "pve-configid",
                      "type": "string"
                    },
                    "port": {
                      "description": "The port to be used. Defaults to 465 for TLS based connections, 587 for STARTTLS based connections and port 25 for insecure plain-text connections.",
                      "optional": 1,
                      "type": "integer"
                    },
                    "server": {
                      "description": "The address of the SMTP server.",
                      "type": "string"
                    },
                    "username": {
                      "description": "Username for SMTP authentication",
                      "optional": 1,
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update existing smtp endpoint",
        "description": "Update existing smtp endpoint",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "author",
            "in": "query",
            "description": "Author of the mail. Defaults to 'Proxmox VE'.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "comment",
            "in": "query",
            "description": "Comment",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "delete",
            "in": "query",
            "description": "A list of settings you want to delete.",
            "required": false,
            "schema": {
              "type": "array"
            }
          },
          {
            "name": "digest",
            "in": "query",
            "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 64
            }
          },
          {
            "name": "disable",
            "in": "query",
            "description": "Disable this target",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "from-address",
            "in": "query",
            "description": "`From` address for the mail",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "mailto",
            "in": "query",
            "description": "List of email recipients",
            "required": false,
            "schema": {
              "type": "array"
            }
          },
          {
            "name": "mailto-user",
            "in": "query",
            "description": "List of users",
            "required": false,
            "schema": {
              "type": "array"
            }
          },
          {
            "name": "mode",
            "in": "query",
            "description": "Determine which encryption method shall be used for the connection.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "tls",
              "enum": [
                "insecure",
                "starttls",
                "tls"
              ]
            }
          },
          {
            "name": "name",
            "in": "path",
            "description": "The name of the endpoint.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-configid"
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "Password for SMTP authentication",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "port",
            "in": "query",
            "description": "The port to be used. Defaults to 465 for TLS based connections, 587 for STARTTLS based connections and port 25 for insecure plain-text connections.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "server",
            "in": "query",
            "description": "The address of the SMTP server.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "username",
            "in": "query",
            "description": "Username for SMTP authentication",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/cluster/notifications/endpoints/webhook": {
      "get": {
        "summary": "Returns a list of all webhook endpoints",
        "description": "Returns a list of all webhook endpoints",
        "tags": [
          "cluster"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "body": {
                        "description": "HTTP body, base64 encoded",
                        "optional": 1,
                        "type": "string"
                      },
                      "comment": {
                        "description": "Comment",
                        "optional": 1,
                        "type": "string"
                      },
                      "disable": {
                        "default": 0,
                        "description": "Disable this target",
                        "optional": 1,
                        "type": "boolean"
                      },
                      "header": {
                        "description": "HTTP headers to set. These have to be formatted as a property string in the format name=<name>,value=<base64 of value>",
                        "items": {
                          "type": "string"
                        },
                        "optional": 1,
                        "type": "array"
                      },
                      "method": {
                        "description": "HTTP method",
                        "enum": [
                          "post",
                          "put",
                          "get"
                        ],
                        "type": "string"
                      },
                      "name": {
                        "description": "The name of the endpoint.",
                        "format": "pve-configid",
                        "type": "string"
                      },
                      "origin": {
                        "description": "Show if this entry was created by a user or was built-in",
                        "enum": [
                          "user-created",
                          "builtin",
                          "modified-builtin"
                        ],
                        "type": "string"
                      },
                      "secret": {
                        "description": "Secrets to set. These have to be formatted as a property string in the format name=<name>,value=<base64 of value>",
                        "items": {
                          "type": "string"
                        },
                        "optional": 1,
                        "type": "array"
                      },
                      "url": {
                        "description": "Server URL",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{name}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new webhook endpoint",
        "description": "Create a new webhook endpoint",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "query",
            "description": "HTTP body, base64 encoded",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "comment",
            "in": "query",
            "description": "Comment",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "disable",
            "in": "query",
            "description": "Disable this target",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "header",
            "in": "query",
            "description": "HTTP headers to set. These have to be formatted as a property string in the format name=<name>,value=<base64 of value>",
            "required": false,
            "schema": {
              "type": "array"
            }
          },
          {
            "name": "method",
            "in": "query",
            "description": "HTTP method",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "post",
                "put",
                "get"
              ]
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "The name of the endpoint.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-configid"
            }
          },
          {
            "name": "secret",
            "in": "query",
            "description": "Secrets to set. These have to be formatted as a property string in the format name=<name>,value=<base64 of value>",
            "required": false,
            "schema": {
              "type": "array"
            }
          },
          {
            "name": "url",
            "in": "query",
            "description": "Server URL",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/cluster/notifications/endpoints/webhook/{name}": {
      "delete": {
        "summary": "Remove webhook endpoint",
        "description": "Remove webhook endpoint",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-configid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Return a specific webhook endpoint",
        "description": "Return a specific webhook endpoint",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Name of the endpoint.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-configid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "body": {
                      "description": "HTTP body, base64 encoded",
                      "optional": 1,
                      "type": "string"
                    },
                    "comment": {
                      "description": "Comment",
                      "optional": 1,
                      "type": "string"
                    },
                    "digest": {
                      "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
                      "maxLength": 64,
                      "optional": 1,
                      "type": "string"
                    },
                    "disable": {
                      "default": 0,
                      "description": "Disable this target",
                      "optional": 1,
                      "type": "boolean"
                    },
                    "header": {
                      "description": "HTTP headers to set. These have to be formatted as a property string in the format name=<name>,value=<base64 of value>",
                      "items": {
                        "type": "string"
                      },
                      "optional": 1,
                      "type": "array"
                    },
                    "method": {
                      "description": "HTTP method",
                      "enum": [
                        "post",
                        "put",
                        "get"
                      ],
                      "type": "string"
                    },
                    "name": {
                      "description": "The name of the endpoint.",
                      "format": "pve-configid",
                      "type": "string"
                    },
                    "secret": {
                      "description": "Secrets to set. These have to be formatted as a property string in the format name=<name>,value=<base64 of value>",
                      "items": {
                        "type": "string"
                      },
                      "optional": 1,
                      "type": "array"
                    },
                    "url": {
                      "description": "Server URL",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update existing webhook endpoint",
        "description": "Update existing webhook endpoint",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "query",
            "description": "HTTP body, base64 encoded",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "comment",
            "in": "query",
            "description": "Comment",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "delete",
            "in": "query",
            "description": "A list of settings you want to delete.",
            "required": false,
            "schema": {
              "type": "array"
            }
          },
          {
            "name": "digest",
            "in": "query",
            "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 64
            }
          },
          {
            "name": "disable",
            "in": "query",
            "description": "Disable this target",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "header",
            "in": "query",
            "description": "HTTP headers to set. These have to be formatted as a property string in the format name=<name>,value=<base64 of value>",
            "required": false,
            "schema": {
              "type": "array"
            }
          },
          {
            "name": "method",
            "in": "query",
            "description": "HTTP method",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "post",
                "put",
                "get"
              ]
            }
          },
          {
            "name": "name",
            "in": "path",
            "description": "The name of the endpoint.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-configid"
            }
          },
          {
            "name": "secret",
            "in": "query",
            "description": "Secrets to set. These have to be formatted as a property string in the format name=<name>,value=<base64 of value>",
            "required": false,
            "schema": {
              "type": "array"
            }
          },
          {
            "name": "url",
            "in": "query",
            "description": "Server URL",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/cluster/notifications/targets": {
      "get": {
        "summary": "Returns a list of all entities that can be used as notification targets.",
        "description": "Returns a list of all entities that can be used as notification targets.",
        "tags": [
          "cluster"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "comment": {
                        "description": "Comment",
                        "optional": 1,
                        "type": "string"
                      },
                      "disable": {
                        "default": 0,
                        "description": "Show if this target is disabled",
                        "optional": 1,
                        "type": "boolean"
                      },
                      "name": {
                        "description": "Name of the target.",
                        "format": "pve-configid",
                        "type": "string"
                      },
                      "origin": {
                        "description": "Show if this entry was created by a user or was built-in",
                        "enum": [
                          "user-created",
                          "builtin",
                          "modified-builtin"
                        ],
                        "type": "string"
                      },
                      "type": {
                        "description": "Type of the target.",
                        "enum": [
                          "sendmail",
                          "gotify",
                          "smtp",
                          "webhook"
                        ],
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{name}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/cluster/notifications/targets/{name}/test": {
      "post": {
        "summary": "Send a test notification to a provided target.",
        "description": "Send a test notification to a provided target.",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Name of the target.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-configid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/cluster/notifications/matchers": {
      "get": {
        "summary": "Returns a list of all matchers",
        "description": "Returns a list of all matchers",
        "tags": [
          "cluster"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "comment": {
                        "description": "Comment",
                        "optional": 1,
                        "type": "string"
                      },
                      "disable": {
                        "default": 0,
                        "description": "Disable this matcher",
                        "optional": 1,
                        "type": "boolean"
                      },
                      "invert-match": {
                        "description": "Invert match of the whole matcher",
                        "optional": 1,
                        "type": "boolean"
                      },
                      "match-calendar": {
                        "description": "Match notification timestamp",
                        "items": {
                          "type": "string"
                        },
                        "optional": 1,
                        "type": "array"
                      },
                      "match-field": {
                        "description": "Metadata fields to match (regex or exact match). Must be in the form (regex|exact):<field>=<value>",
                        "items": {
                          "type": "string"
                        },
                        "optional": 1,
                        "type": "array"
                      },
                      "match-severity": {
                        "description": "Notification severities to match",
                        "items": {
                          "type": "string"
                        },
                        "optional": 1,
                        "type": "array"
                      },
                      "mode": {
                        "default": "all",
                        "description": "Choose between 'all' and 'any' for when multiple properties are specified",
                        "enum": [
                          "all",
                          "any"
                        ],
                        "optional": 1,
                        "type": "string"
                      },
                      "name": {
                        "description": "Name of the matcher.",
                        "format": "pve-configid",
                        "type": "string"
                      },
                      "origin": {
                        "description": "Show if this entry was created by a user or was built-in",
                        "enum": [
                          "user-created",
                          "builtin",
                          "modified-builtin"
                        ],
                        "type": "string"
                      },
                      "target": {
                        "description": "Targets to notify on match",
                        "items": {
                          "format": "pve-configid",
                          "type": "string"
                        },
                        "optional": 1,
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{name}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new matcher",
        "description": "Create a new matcher",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "comment",
            "in": "query",
            "description": "Comment",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "disable",
            "in": "query",
            "description": "Disable this matcher",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "invert-match",
            "in": "query",
            "description": "Invert match of the whole matcher",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "match-calendar",
            "in": "query",
            "description": "Match notification timestamp",
            "required": false,
            "schema": {
              "type": "array"
            }
          },
          {
            "name": "match-field",
            "in": "query",
            "description": "Metadata fields to match (regex or exact match). Must be in the form (regex|exact):<field>=<value>",
            "required": false,
            "schema": {
              "type": "array"
            }
          },
          {
            "name": "match-severity",
            "in": "query",
            "description": "Notification severities to match",
            "required": false,
            "schema": {
              "type": "array"
            }
          },
          {
            "name": "mode",
            "in": "query",
            "description": "Choose between 'all' and 'any' for when multiple properties are specified",
            "required": false,
            "schema": {
              "type": "string",
              "default": "all",
              "enum": [
                "all",
                "any"
              ]
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Name of the matcher.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-configid"
            }
          },
          {
            "name": "target",
            "in": "query",
            "description": "Targets to notify on match",
            "required": false,
            "schema": {
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/cluster/notifications/matchers/{name}": {
      "delete": {
        "summary": "Remove matcher",
        "description": "Remove matcher",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-configid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Return a specific matcher",
        "description": "Return a specific matcher",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-configid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "comment": {
                      "description": "Comment",
                      "optional": 1,
                      "type": "string"
                    },
                    "digest": {
                      "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
                      "maxLength": 64,
                      "optional": 1,
                      "type": "string"
                    },
                    "disable": {
                      "default": 0,
                      "description": "Disable this matcher",
                      "optional": 1,
                      "type": "boolean"
                    },
                    "invert-match": {
                      "description": "Invert match of the whole matcher",
                      "optional": 1,
                      "type": "boolean"
                    },
                    "match-calendar": {
                      "description": "Match notification timestamp",
                      "items": {
                        "type": "string"
                      },
                      "optional": 1,
                      "type": "array"
                    },
                    "match-field": {
                      "description": "Metadata fields to match (regex or exact match). Must be in the form (regex|exact):<field>=<value>",
                      "items": {
                        "type": "string"
                      },
                      "optional": 1,
                      "type": "array"
                    },
                    "match-severity": {
                      "description": "Notification severities to match",
                      "items": {
                        "type": "string"
                      },
                      "optional": 1,
                      "type": "array"
                    },
                    "mode": {
                      "default": "all",
                      "description": "Choose between 'all' and 'any' for when multiple properties are specified",
                      "enum": [
                        "all",
                        "any"
                      ],
                      "optional": 1,
                      "type": "string"
                    },
                    "name": {
                      "description": "Name of the matcher.",
                      "format": "pve-configid",
                      "type": "string"
                    },
                    "target": {
                      "description": "Targets to notify on match",
                      "items": {
                        "format": "pve-configid",
                        "type": "string"
                      },
                      "optional": 1,
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update existing matcher",
        "description": "Update existing matcher",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "comment",
            "in": "query",
            "description": "Comment",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "delete",
            "in": "query",
            "description": "A list of settings you want to delete.",
            "required": false,
            "schema": {
              "type": "array"
            }
          },
          {
            "name": "digest",
            "in": "query",
            "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 64
            }
          },
          {
            "name": "disable",
            "in": "query",
            "description": "Disable this matcher",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "invert-match",
            "in": "query",
            "description": "Invert match of the whole matcher",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "match-calendar",
            "in": "query",
            "description": "Match notification timestamp",
            "required": false,
            "schema": {
              "type": "array"
            }
          },
          {
            "name": "match-field",
            "in": "query",
            "description": "Metadata fields to match (regex or exact match). Must be in the form (regex|exact):<field>=<value>",
            "required": false,
            "schema": {
              "type": "array"
            }
          },
          {
            "name": "match-severity",
            "in": "query",
            "description": "Notification severities to match",
            "required": false,
            "schema": {
              "type": "array"
            }
          },
          {
            "name": "mode",
            "in": "query",
            "description": "Choose between 'all' and 'any' for when multiple properties are specified",
            "required": false,
            "schema": {
              "type": "string",
              "default": "all",
              "enum": [
                "all",
                "any"
              ]
            }
          },
          {
            "name": "name",
            "in": "path",
            "description": "Name of the matcher.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-configid"
            }
          },
          {
            "name": "target",
            "in": "query",
            "description": "Targets to notify on match",
            "required": false,
            "schema": {
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/cluster/config": {
      "get": {
        "summary": "Directory index.",
        "description": "Directory index.",
        "tags": [
          "cluster"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {},
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{name}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Generate new cluster configuration. If no links given, default to local IP address as link0.",
        "description": "Generate new cluster configuration. If no links given, default to local IP address as link0.",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "clustername",
            "in": "query",
            "description": "The name of the cluster.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node",
              "maxLength": 15
            }
          },
          {
            "name": "link[n]",
            "in": "query",
            "description": "Address and priority information of a single corosync link. (up to 8 links supported; link0..link7)",
            "required": false,
            "schema": {
              "type": "string",
              "format": {
                "address": {
                  "default_key": 1,
                  "description": "Hostname (or IP) of this corosync link address.",
                  "format": "address",
                  "format_description": "IP",
                  "type": "string"
                },
                "priority": {
                  "default": 0,
                  "description": "The priority for the link when knet is used in 'passive' mode (default). Lower value means higher priority. Only valid for cluster create, ignored on node add.",
                  "maximum": 255,
                  "minimum": 0,
                  "optional": 1,
                  "type": "integer"
                }
              }
            }
          },
          {
            "name": "nodeid",
            "in": "query",
            "description": "Node id for this node.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "votes",
            "in": "query",
            "description": "Number of votes for this node.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/cluster/config/apiversion": {
      "get": {
        "summary": "Return the version of the cluster join API available on this node.",
        "description": "Return the version of the cluster join API available on this node.",
        "tags": [
          "cluster"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Cluster Join API version, currently 1",
                  "minimum": 0,
                  "type": "integer"
                }
              }
            }
          }
        }
      }
    },
    "/cluster/config/nodes": {
      "get": {
        "summary": "Corosync node list.",
        "description": "Corosync node list.",
        "tags": [
          "cluster"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "node": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{node}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/cluster/config/nodes/{node}": {
      "delete": {
        "summary": "Removes a node from the cluster configuration.",
        "description": "Removes a node from the cluster configuration.",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Adds a node to the cluster configuration. This call is for internal use.",
        "description": "Adds a node to the cluster configuration. This call is for internal use.",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "apiversion",
            "in": "query",
            "description": "The JOIN_API_VERSION of the new node.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "force",
            "in": "query",
            "description": "Do not throw error if node already exists.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "link[n]",
            "in": "query",
            "description": "Address and priority information of a single corosync link. (up to 8 links supported; link0..link7)",
            "required": false,
            "schema": {
              "type": "string",
              "format": {
                "address": {
                  "default_key": 1,
                  "description": "Hostname (or IP) of this corosync link address.",
                  "format": "address",
                  "format_description": "IP",
                  "type": "string"
                },
                "priority": {
                  "default": 0,
                  "description": "The priority for the link when knet is used in 'passive' mode (default). Lower value means higher priority. Only valid for cluster create, ignored on node add.",
                  "maximum": 255,
                  "minimum": 0,
                  "optional": 1,
                  "type": "integer"
                }
              }
            }
          },
          {
            "name": "new_node_ip",
            "in": "query",
            "description": "IP Address of node to add. Used as fallback if no links are given.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "ip"
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "nodeid",
            "in": "query",
            "description": "Node id for this node.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "votes",
            "in": "query",
            "description": "Number of votes for this node",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "corosync_authkey": {
                      "type": "string"
                    },
                    "corosync_conf": {
                      "type": "string"
                    },
                    "warnings": {
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/cluster/config/join": {
      "get": {
        "summary": "Get information needed to join this cluster over the connected node.",
        "description": "Get information needed to join this cluster over the connected node.",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "query",
            "description": "The node for which the joinee gets the nodeinfo. ",
            "required": false,
            "schema": {
              "type": "string",
              "default": "current connected node",
              "format": "pve-node"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": 0,
                  "properties": {
                    "config_digest": {
                      "type": "string"
                    },
                    "nodelist": {
                      "items": {
                        "additionalProperties": 1,
                        "properties": {
                          "name": {
                            "description": "The cluster node name.",
                            "format": "pve-node",
                            "type": "string"
                          },
                          "nodeid": {
                            "description": "Node id for this node.",
                            "minimum": 1,
                            "optional": 1,
                            "type": "integer"
                          },
                          "pve_addr": {
                            "format": "ip",
                            "type": "string"
                          },
                          "pve_fp": {
                            "description": "Certificate SHA 256 fingerprint.",
                            "pattern": "([A-Fa-f0-9]{2}:){31}[A-Fa-f0-9]{2}",
                            "type": "string"
                          },
                          "quorum_votes": {
                            "minimum": 0,
                            "type": "integer"
                          },
                          "ring0_addr": {
                            "description": "Address and priority information of a single corosync link. (up to 8 links supported; link0..link7)",
                            "format": {
                              "address": {
                                "default_key": 1,
                                "description": "Hostname (or IP) of this corosync link address.",
                                "format": "address",
                                "format_description": "IP",
                                "type": "string"
                              },
                              "priority": {
                                "default": 0,
                                "description": "The priority for the link when knet is used in 'passive' mode (default). Lower value means higher priority. Only valid for cluster create, ignored on node add.",
                                "maximum": 255,
                                "minimum": 0,
                                "optional": 1,
                                "type": "integer"
                              }
                            },
                            "optional": 1,
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "preferred_node": {
                      "description": "The cluster node name.",
                      "format": "pve-node",
                      "type": "string"
                    },
                    "totem": {
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Joins this node into an existing cluster. If no links are given, default to IP resolved by node's hostname on single link (fallback fails for clusters with multiple links).",
        "description": "Joins this node into an existing cluster. If no links are given, default to IP resolved by node's hostname on single link (fallback fails for clusters with multiple links).",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "fingerprint",
            "in": "query",
            "description": "Certificate SHA 256 fingerprint.",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "([A-Fa-f0-9]{2}:){31}[A-Fa-f0-9]{2}"
            }
          },
          {
            "name": "force",
            "in": "query",
            "description": "Do not throw error if node already exists.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "hostname",
            "in": "query",
            "description": "Hostname (or IP) of an existing cluster member.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "link[n]",
            "in": "query",
            "description": "Address and priority information of a single corosync link. (up to 8 links supported; link0..link7)",
            "required": false,
            "schema": {
              "type": "string",
              "format": {
                "address": {
                  "default_key": 1,
                  "description": "Hostname (or IP) of this corosync link address.",
                  "format": "address",
                  "format_description": "IP",
                  "type": "string"
                },
                "priority": {
                  "default": 0,
                  "description": "The priority for the link when knet is used in 'passive' mode (default). Lower value means higher priority. Only valid for cluster create, ignored on node add.",
                  "maximum": 255,
                  "minimum": 0,
                  "optional": 1,
                  "type": "integer"
                }
              }
            }
          },
          {
            "name": "nodeid",
            "in": "query",
            "description": "Node id for this node.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "Superuser (root) password of peer node.",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 128
            }
          },
          {
            "name": "votes",
            "in": "query",
            "description": "Number of votes for this node",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/cluster/config/totem": {
      "get": {
        "summary": "Get corosync totem protocol settings.",
        "description": "Get corosync totem protocol settings.",
        "tags": [
          "cluster"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/cluster/config/qdevice": {
      "get": {
        "summary": "Get QDevice status",
        "description": "Get QDevice status",
        "tags": [
          "cluster"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/cluster/firewall": {
      "get": {
        "summary": "Directory index.",
        "description": "Directory index.",
        "tags": [
          "cluster"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {},
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{name}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/cluster/firewall/groups": {
      "get": {
        "summary": "List security groups.",
        "description": "List security groups.",
        "tags": [
          "cluster"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "comment": {
                        "optional": 1,
                        "type": "string"
                      },
                      "digest": {
                        "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
                        "maxLength": 64,
                        "optional": 0,
                        "type": "string"
                      },
                      "group": {
                        "description": "Security Group name.",
                        "maxLength": 18,
                        "minLength": 2,
                        "pattern": "[A-Za-z][A-Za-z0-9\\-\\_]+",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{group}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create new security group.",
        "description": "Create new security group.",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "comment",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "digest",
            "in": "query",
            "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 64
            }
          },
          {
            "name": "group",
            "in": "query",
            "description": "Security Group name.",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "[A-Za-z][A-Za-z0-9\\-\\_]+",
              "maxLength": 18
            }
          },
          {
            "name": "rename",
            "in": "query",
            "description": "Rename/update an existing security group. You can set 'rename' to the same value as 'name' to update the 'comment' of an existing group.",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "[A-Za-z][A-Za-z0-9\\-\\_]+",
              "maxLength": 18
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/cluster/firewall/groups/{group}": {
      "delete": {
        "summary": "Delete security group.",
        "description": "Delete security group.",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "group",
            "in": "path",
            "description": "Security Group name.",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "[A-Za-z][A-Za-z0-9\\-\\_]+",
              "maxLength": 18
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "List rules.",
        "description": "List rules.",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "group",
            "in": "path",
            "description": "Security Group name.",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "[A-Za-z][A-Za-z0-9\\-\\_]+",
              "maxLength": 18
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "pos": {
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{pos}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create new rule.",
        "description": "Create new rule.",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "action",
            "in": "query",
            "description": "Rule action ('ACCEPT', 'DROP', 'REJECT') or security group name.",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "[A-Za-z][A-Za-z0-9\\-\\_]+",
              "maxLength": 20
            }
          },
          {
            "name": "comment",
            "in": "query",
            "description": "Descriptive comment.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dest",
            "in": "query",
            "description": "Restrict packet destination address. This can refer to a single IP address, an IP set ('+ipsetname') or an IP alias definition. You can also specify an address range like '20.34.101.207-201.3.9.99', or a list of IP addresses and networks (entries are separated by comma). Please do not mix IPv4 and IPv6 addresses inside such lists.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-fw-addr-spec",
              "maxLength": 512
            }
          },
          {
            "name": "digest",
            "in": "query",
            "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 64
            }
          },
          {
            "name": "dport",
            "in": "query",
            "description": "Restrict TCP/UDP destination port. You can use service names or simple numbers (0-65535), as defined in '/etc/services'. Port ranges can be specified with '\\d+:\\d+', for example '80:85', and you can use comma separated list to match several ports or ranges.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-fw-dport-spec"
            }
          },
          {
            "name": "enable",
            "in": "query",
            "description": "Flag to enable/disable a rule.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "name": "group",
            "in": "path",
            "description": "Security Group name.",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "[A-Za-z][A-Za-z0-9\\-\\_]+",
              "maxLength": 18
            }
          },
          {
            "name": "icmp-type",
            "in": "query",
            "description": "Specify icmp-type. Only valid if proto equals 'icmp' or 'icmpv6'/'ipv6-icmp'.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-fw-icmp-type-spec"
            }
          },
          {
            "name": "iface",
            "in": "query",
            "description": "Network interface name. You have to use network configuration key names for VMs and containers ('net\\d+'). Host related rules can use arbitrary strings.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-iface",
              "maxLength": 20
            }
          },
          {
            "name": "log",
            "in": "query",
            "description": "Log level for firewall rule.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "emerg",
                "alert",
                "crit",
                "err",
                "warning",
                "notice",
                "info",
                "debug",
                "nolog"
              ]
            }
          },
          {
            "name": "macro",
            "in": "query",
            "description": "Use predefined standard macro.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 128
            }
          },
          {
            "name": "pos",
            "in": "query",
            "description": "Update rule at position <pos>.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "name": "proto",
            "in": "query",
            "description": "IP protocol. You can use protocol names ('tcp'/'udp') or simple numbers, as defined in '/etc/protocols'.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-fw-protocol-spec"
            }
          },
          {
            "name": "source",
            "in": "query",
            "description": "Restrict packet source address. This can refer to a single IP address, an IP set ('+ipsetname') or an IP alias definition. You can also specify an address range like '20.34.101.207-201.3.9.99', or a list of IP addresses and networks (entries are separated by comma). Please do not mix IPv4 and IPv6 addresses inside such lists.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-fw-addr-spec",
              "maxLength": 512
            }
          },
          {
            "name": "sport",
            "in": "query",
            "description": "Restrict TCP/UDP source port. You can use service names or simple numbers (0-65535), as defined in '/etc/services'. Port ranges can be specified with '\\d+:\\d+', for example '80:85', and you can use comma separated list to match several ports or ranges.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-fw-sport-spec"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Rule type.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "in",
                "out",
                "forward",
                "group"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/cluster/firewall/groups/{group}/{pos}": {
      "delete": {
        "summary": "Delete rule.",
        "description": "Delete rule.",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "digest",
            "in": "query",
            "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 64
            }
          },
          {
            "name": "group",
            "in": "path",
            "description": "Security Group name.",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "[A-Za-z][A-Za-z0-9\\-\\_]+",
              "maxLength": 18
            }
          },
          {
            "name": "pos",
            "in": "path",
            "description": "Update rule at position <pos>.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Get single rule data.",
        "description": "Get single rule data.",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "group",
            "in": "path",
            "description": "Security Group name.",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "[A-Za-z][A-Za-z0-9\\-\\_]+",
              "maxLength": 18
            }
          },
          {
            "name": "pos",
            "in": "path",
            "description": "Update rule at position <pos>.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "action": {
                      "type": "string"
                    },
                    "comment": {
                      "optional": 1,
                      "type": "string"
                    },
                    "dest": {
                      "optional": 1,
                      "type": "string"
                    },
                    "dport": {
                      "optional": 1,
                      "type": "string"
                    },
                    "enable": {
                      "optional": 1,
                      "type": "integer"
                    },
                    "icmp-type": {
                      "optional": 1,
                      "type": "string"
                    },
                    "iface": {
                      "optional": 1,
                      "type": "string"
                    },
                    "ipversion": {
                      "optional": 1,
                      "type": "integer"
                    },
                    "log": {
                      "description": "Log level for firewall rule",
                      "enum": [
                        "emerg",
                        "alert",
                        "crit",
                        "err",
                        "warning",
                        "notice",
                        "info",
                        "debug",
                        "nolog"
                      ],
                      "optional": 1,
                      "type": "string"
                    },
                    "macro": {
                      "optional": 1,
                      "type": "string"
                    },
                    "pos": {
                      "type": "integer"
                    },
                    "proto": {
                      "optional": 1,
                      "type": "string"
                    },
                    "source": {
                      "optional": 1,
                      "type": "string"
                    },
                    "sport": {
                      "optional": 1,
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Modify rule data.",
        "description": "Modify rule data.",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "action",
            "in": "query",
            "description": "Rule action ('ACCEPT', 'DROP', 'REJECT') or security group name.",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "[A-Za-z][A-Za-z0-9\\-\\_]+",
              "maxLength": 20
            }
          },
          {
            "name": "comment",
            "in": "query",
            "description": "Descriptive comment.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "delete",
            "in": "query",
            "description": "A list of settings you want to delete.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-configid-list"
            }
          },
          {
            "name": "dest",
            "in": "query",
            "description": "Restrict packet destination address. This can refer to a single IP address, an IP set ('+ipsetname') or an IP alias definition. You can also specify an address range like '20.34.101.207-201.3.9.99', or a list of IP addresses and networks (entries are separated by comma). Please do not mix IPv4 and IPv6 addresses inside such lists.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-fw-addr-spec",
              "maxLength": 512
            }
          },
          {
            "name": "digest",
            "in": "query",
            "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 64
            }
          },
          {
            "name": "dport",
            "in": "query",
            "description": "Restrict TCP/UDP destination port. You can use service names or simple numbers (0-65535), as defined in '/etc/services'. Port ranges can be specified with '\\d+:\\d+', for example '80:85', and you can use comma separated list to match several ports or ranges.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-fw-dport-spec"
            }
          },
          {
            "name": "enable",
            "in": "query",
            "description": "Flag to enable/disable a rule.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "name": "group",
            "in": "path",
            "description": "Security Group name.",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "[A-Za-z][A-Za-z0-9\\-\\_]+",
              "maxLength": 18
            }
          },
          {
            "name": "icmp-type",
            "in": "query",
            "description": "Specify icmp-type. Only valid if proto equals 'icmp' or 'icmpv6'/'ipv6-icmp'.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-fw-icmp-type-spec"
            }
          },
          {
            "name": "iface",
            "in": "query",
            "description": "Network interface name. You have to use network configuration key names for VMs and containers ('net\\d+'). Host related rules can use arbitrary strings.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-iface",
              "maxLength": 20
            }
          },
          {
            "name": "log",
            "in": "query",
            "description": "Log level for firewall rule.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "emerg",
                "alert",
                "crit",
                "err",
                "warning",
                "notice",
                "info",
                "debug",
                "nolog"
              ]
            }
          },
          {
            "name": "macro",
            "in": "query",
            "description": "Use predefined standard macro.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 128
            }
          },
          {
            "name": "moveto",
            "in": "query",
            "description": "Move rule to new position <moveto>. Other arguments are ignored.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "name": "pos",
            "in": "path",
            "description": "Update rule at position <pos>.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "name": "proto",
            "in": "query",
            "description": "IP protocol. You can use protocol names ('tcp'/'udp') or simple numbers, as defined in '/etc/protocols'.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-fw-protocol-spec"
            }
          },
          {
            "name": "source",
            "in": "query",
            "description": "Restrict packet source address. This can refer to a single IP address, an IP set ('+ipsetname') or an IP alias definition. You can also specify an address range like '20.34.101.207-201.3.9.99', or a list of IP addresses and networks (entries are separated by comma). Please do not mix IPv4 and IPv6 addresses inside such lists.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-fw-addr-spec",
              "maxLength": 512
            }
          },
          {
            "name": "sport",
            "in": "query",
            "description": "Restrict TCP/UDP source port. You can use service names or simple numbers (0-65535), as defined in '/etc/services'. Port ranges can be specified with '\\d+:\\d+', for example '80:85', and you can use comma separated list to match several ports or ranges.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-fw-sport-spec"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Rule type.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "in",
                "out",
                "forward",
                "group"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/cluster/firewall/rules": {
      "get": {
        "summary": "List rules.",
        "description": "List rules.",
        "tags": [
          "cluster"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "pos": {
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{pos}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create new rule.",
        "description": "Create new rule.",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "action",
            "in": "query",
            "description": "Rule action ('ACCEPT', 'DROP', 'REJECT') or security group name.",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "[A-Za-z][A-Za-z0-9\\-\\_]+",
              "maxLength": 20
            }
          },
          {
            "name": "comment",
            "in": "query",
            "description": "Descriptive comment.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dest",
            "in": "query",
            "description": "Restrict packet destination address. This can refer to a single IP address, an IP set ('+ipsetname') or an IP alias definition. You can also specify an address range like '20.34.101.207-201.3.9.99', or a list of IP addresses and networks (entries are separated by comma). Please do not mix IPv4 and IPv6 addresses inside such lists.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-fw-addr-spec",
              "maxLength": 512
            }
          },
          {
            "name": "digest",
            "in": "query",
            "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 64
            }
          },
          {
            "name": "dport",
            "in": "query",
            "description": "Restrict TCP/UDP destination port. You can use service names or simple numbers (0-65535), as defined in '/etc/services'. Port ranges can be specified with '\\d+:\\d+', for example '80:85', and you can use comma separated list to match several ports or ranges.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-fw-dport-spec"
            }
          },
          {
            "name": "enable",
            "in": "query",
            "description": "Flag to enable/disable a rule.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "name": "icmp-type",
            "in": "query",
            "description": "Specify icmp-type. Only valid if proto equals 'icmp' or 'icmpv6'/'ipv6-icmp'.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-fw-icmp-type-spec"
            }
          },
          {
            "name": "iface",
            "in": "query",
            "description": "Network interface name. You have to use network configuration key names for VMs and containers ('net\\d+'). Host related rules can use arbitrary strings.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-iface",
              "maxLength": 20
            }
          },
          {
            "name": "log",
            "in": "query",
            "description": "Log level for firewall rule.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "emerg",
                "alert",
                "crit",
                "err",
                "warning",
                "notice",
                "info",
                "debug",
                "nolog"
              ]
            }
          },
          {
            "name": "macro",
            "in": "query",
            "description": "Use predefined standard macro.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 128
            }
          },
          {
            "name": "pos",
            "in": "query",
            "description": "Update rule at position <pos>.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "name": "proto",
            "in": "query",
            "description": "IP protocol. You can use protocol names ('tcp'/'udp') or simple numbers, as defined in '/etc/protocols'.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-fw-protocol-spec"
            }
          },
          {
            "name": "source",
            "in": "query",
            "description": "Restrict packet source address. This can refer to a single IP address, an IP set ('+ipsetname') or an IP alias definition. You can also specify an address range like '20.34.101.207-201.3.9.99', or a list of IP addresses and networks (entries are separated by comma). Please do not mix IPv4 and IPv6 addresses inside such lists.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-fw-addr-spec",
              "maxLength": 512
            }
          },
          {
            "name": "sport",
            "in": "query",
            "description": "Restrict TCP/UDP source port. You can use service names or simple numbers (0-65535), as defined in '/etc/services'. Port ranges can be specified with '\\d+:\\d+', for example '80:85', and you can use comma separated list to match several ports or ranges.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-fw-sport-spec"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Rule type.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "in",
                "out",
                "forward",
                "group"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/cluster/firewall/rules/{pos}": {
      "delete": {
        "summary": "Delete rule.",
        "description": "Delete rule.",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "digest",
            "in": "query",
            "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 64
            }
          },
          {
            "name": "pos",
            "in": "path",
            "description": "Update rule at position <pos>.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Get single rule data.",
        "description": "Get single rule data.",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "pos",
            "in": "path",
            "description": "Update rule at position <pos>.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "action": {
                      "type": "string"
                    },
                    "comment": {
                      "optional": 1,
                      "type": "string"
                    },
                    "dest": {
                      "optional": 1,
                      "type": "string"
                    },
                    "dport": {
                      "optional": 1,
                      "type": "string"
                    },
                    "enable": {
                      "optional": 1,
                      "type": "integer"
                    },
                    "icmp-type": {
                      "optional": 1,
                      "type": "string"
                    },
                    "iface": {
                      "optional": 1,
                      "type": "string"
                    },
                    "ipversion": {
                      "optional": 1,
                      "type": "integer"
                    },
                    "log": {
                      "description": "Log level for firewall rule",
                      "enum": [
                        "emerg",
                        "alert",
                        "crit",
                        "err",
                        "warning",
                        "notice",
                        "info",
                        "debug",
                        "nolog"
                      ],
                      "optional": 1,
                      "type": "string"
                    },
                    "macro": {
                      "optional": 1,
                      "type": "string"
                    },
                    "pos": {
                      "type": "integer"
                    },
                    "proto": {
                      "optional": 1,
                      "type": "string"
                    },
                    "source": {
                      "optional": 1,
                      "type": "string"
                    },
                    "sport": {
                      "optional": 1,
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Modify rule data.",
        "description": "Modify rule data.",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "action",
            "in": "query",
            "description": "Rule action ('ACCEPT', 'DROP', 'REJECT') or security group name.",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "[A-Za-z][A-Za-z0-9\\-\\_]+",
              "maxLength": 20
            }
          },
          {
            "name": "comment",
            "in": "query",
            "description": "Descriptive comment.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "delete",
            "in": "query",
            "description": "A list of settings you want to delete.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-configid-list"
            }
          },
          {
            "name": "dest",
            "in": "query",
            "description": "Restrict packet destination address. This can refer to a single IP address, an IP set ('+ipsetname') or an IP alias definition. You can also specify an address range like '20.34.101.207-201.3.9.99', or a list of IP addresses and networks (entries are separated by comma). Please do not mix IPv4 and IPv6 addresses inside such lists.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-fw-addr-spec",
              "maxLength": 512
            }
          },
          {
            "name": "digest",
            "in": "query",
            "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 64
            }
          },
          {
            "name": "dport",
            "in": "query",
            "description": "Restrict TCP/UDP destination port. You can use service names or simple numbers (0-65535), as defined in '/etc/services'. Port ranges can be specified with '\\d+:\\d+', for example '80:85', and you can use comma separated list to match several ports or ranges.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-fw-dport-spec"
            }
          },
          {
            "name": "enable",
            "in": "query",
            "description": "Flag to enable/disable a rule.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "name": "icmp-type",
            "in": "query",
            "description": "Specify icmp-type. Only valid if proto equals 'icmp' or 'icmpv6'/'ipv6-icmp'.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-fw-icmp-type-spec"
            }
          },
          {
            "name": "iface",
            "in": "query",
            "description": "Network interface name. You have to use network configuration key names for VMs and containers ('net\\d+'). Host related rules can use arbitrary strings.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-iface",
              "maxLength": 20
            }
          },
          {
            "name": "log",
            "in": "query",
            "description": "Log level for firewall rule.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "emerg",
                "alert",
                "crit",
                "err",
                "warning",
                "notice",
                "info",
                "debug",
                "nolog"
              ]
            }
          },
          {
            "name": "macro",
            "in": "query",
            "description": "Use predefined standard macro.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 128
            }
          },
          {
            "name": "moveto",
            "in": "query",
            "description": "Move rule to new position <moveto>. Other arguments are ignored.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "name": "pos",
            "in": "path",
            "description": "Update rule at position <pos>.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "name": "proto",
            "in": "query",
            "description": "IP protocol. You can use protocol names ('tcp'/'udp') or simple numbers, as defined in '/etc/protocols'.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-fw-protocol-spec"
            }
          },
          {
            "name": "source",
            "in": "query",
            "description": "Restrict packet source address. This can refer to a single IP address, an IP set ('+ipsetname') or an IP alias definition. You can also specify an address range like '20.34.101.207-201.3.9.99', or a list of IP addresses and networks (entries are separated by comma). Please do not mix IPv4 and IPv6 addresses inside such lists.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-fw-addr-spec",
              "maxLength": 512
            }
          },
          {
            "name": "sport",
            "in": "query",
            "description": "Restrict TCP/UDP source port. You can use service names or simple numbers (0-65535), as defined in '/etc/services'. Port ranges can be specified with '\\d+:\\d+', for example '80:85', and you can use comma separated list to match several ports or ranges.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-fw-sport-spec"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Rule type.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "in",
                "out",
                "forward",
                "group"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/cluster/firewall/ipset": {
      "get": {
        "summary": "List IPSets",
        "description": "List IPSets",
        "tags": [
          "cluster"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "comment": {
                        "optional": 1,
                        "type": "string"
                      },
                      "digest": {
                        "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
                        "maxLength": 64,
                        "optional": 0,
                        "type": "string"
                      },
                      "name": {
                        "description": "IP set name.",
                        "maxLength": 64,
                        "minLength": 2,
                        "pattern": "[A-Za-z][A-Za-z0-9\\-\\_]+",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{name}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create new IPSet",
        "description": "Create new IPSet",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "comment",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "digest",
            "in": "query",
            "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 64
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "IP set name.",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "[A-Za-z][A-Za-z0-9\\-\\_]+",
              "maxLength": 64
            }
          },
          {
            "name": "rename",
            "in": "query",
            "description": "Rename an existing IPSet. You can set 'rename' to the same value as 'name' to update the 'comment' of an existing IPSet.",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "[A-Za-z][A-Za-z0-9\\-\\_]+",
              "maxLength": 64
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/cluster/firewall/ipset/{name}": {
      "delete": {
        "summary": "Delete IPSet",
        "description": "Delete IPSet",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "force",
            "in": "query",
            "description": "Delete all members of the IPSet, if there are any.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "name",
            "in": "path",
            "description": "IP set name.",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "[A-Za-z][A-Za-z0-9\\-\\_]+",
              "maxLength": 64
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "List IPSet content",
        "description": "List IPSet content",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "IP set name.",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "[A-Za-z][A-Za-z0-9\\-\\_]+",
              "maxLength": 64
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "cidr": {
                        "type": "string"
                      },
                      "comment": {
                        "optional": 1,
                        "type": "string"
                      },
                      "digest": {
                        "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
                        "maxLength": 64,
                        "optional": 0,
                        "type": "string"
                      },
                      "nomatch": {
                        "optional": 1,
                        "type": "boolean"
                      }
                    },
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{cidr}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Add IP or Network to IPSet.",
        "description": "Add IP or Network to IPSet.",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "cidr",
            "in": "query",
            "description": "Network/IP specification in CIDR format.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "IPorCIDRorAlias"
            }
          },
          {
            "name": "comment",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "path",
            "description": "IP set name.",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "[A-Za-z][A-Za-z0-9\\-\\_]+",
              "maxLength": 64
            }
          },
          {
            "name": "nomatch",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/cluster/firewall/ipset/{name}/{cidr}": {
      "delete": {
        "summary": "Remove IP or Network from IPSet.",
        "description": "Remove IP or Network from IPSet.",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "cidr",
            "in": "path",
            "description": "Network/IP specification in CIDR format.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "IPorCIDRorAlias"
            }
          },
          {
            "name": "digest",
            "in": "query",
            "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 64
            }
          },
          {
            "name": "name",
            "in": "path",
            "description": "IP set name.",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "[A-Za-z][A-Za-z0-9\\-\\_]+",
              "maxLength": 64
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Read IP or Network settings from IPSet.",
        "description": "Read IP or Network settings from IPSet.",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "cidr",
            "in": "path",
            "description": "Network/IP specification in CIDR format.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "IPorCIDRorAlias"
            }
          },
          {
            "name": "name",
            "in": "path",
            "description": "IP set name.",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "[A-Za-z][A-Za-z0-9\\-\\_]+",
              "maxLength": 64
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update IP or Network settings",
        "description": "Update IP or Network settings",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "cidr",
            "in": "path",
            "description": "Network/IP specification in CIDR format.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "IPorCIDRorAlias"
            }
          },
          {
            "name": "comment",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "digest",
            "in": "query",
            "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 64
            }
          },
          {
            "name": "name",
            "in": "path",
            "description": "IP set name.",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "[A-Za-z][A-Za-z0-9\\-\\_]+",
              "maxLength": 64
            }
          },
          {
            "name": "nomatch",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/cluster/firewall/aliases": {
      "get": {
        "summary": "List aliases",
        "description": "List aliases",
        "tags": [
          "cluster"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "cidr": {
                        "type": "string"
                      },
                      "comment": {
                        "optional": 1,
                        "type": "string"
                      },
                      "digest": {
                        "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
                        "maxLength": 64,
                        "optional": 0,
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{name}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create IP or Network Alias.",
        "description": "Create IP or Network Alias.",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "cidr",
            "in": "query",
            "description": "Network/IP specification in CIDR format.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "IPorCIDR"
            }
          },
          {
            "name": "comment",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Alias name.",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "[A-Za-z][A-Za-z0-9\\-\\_]+",
              "maxLength": 64
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/cluster/firewall/aliases/{name}": {
      "delete": {
        "summary": "Remove IP or Network alias.",
        "description": "Remove IP or Network alias.",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "digest",
            "in": "query",
            "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 64
            }
          },
          {
            "name": "name",
            "in": "path",
            "description": "Alias name.",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "[A-Za-z][A-Za-z0-9\\-\\_]+",
              "maxLength": 64
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Read alias.",
        "description": "Read alias.",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Alias name.",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "[A-Za-z][A-Za-z0-9\\-\\_]+",
              "maxLength": 64
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update IP or Network alias.",
        "description": "Update IP or Network alias.",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "cidr",
            "in": "query",
            "description": "Network/IP specification in CIDR format.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "IPorCIDR"
            }
          },
          {
            "name": "comment",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "digest",
            "in": "query",
            "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 64
            }
          },
          {
            "name": "name",
            "in": "path",
            "description": "Alias name.",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "[A-Za-z][A-Za-z0-9\\-\\_]+",
              "maxLength": 64
            }
          },
          {
            "name": "rename",
            "in": "query",
            "description": "Rename an existing alias.",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "[A-Za-z][A-Za-z0-9\\-\\_]+",
              "maxLength": 64
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/cluster/firewall/options": {
      "get": {
        "summary": "Get Firewall options.",
        "description": "Get Firewall options.",
        "tags": [
          "cluster"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "ebtables": {
                      "default": 1,
                      "description": "Enable ebtables rules cluster wide.",
                      "optional": 1,
                      "type": "boolean"
                    },
                    "enable": {
                      "description": "Enable or disable the firewall cluster wide.",
                      "minimum": 0,
                      "optional": 1,
                      "type": "integer"
                    },
                    "log_ratelimit": {
                      "description": "Log ratelimiting settings",
                      "format": {
                        "burst": {
                          "default": 5,
                          "description": "Initial burst of packages which will always get logged before the rate is applied",
                          "minimum": 0,
                          "optional": 1,
                          "type": "integer"
                        },
                        "enable": {
                          "default": "1",
                          "default_key": 1,
                          "description": "Enable or disable log rate limiting",
                          "type": "boolean"
                        },
                        "rate": {
                          "default": "1/second",
                          "description": "Frequency with which the burst bucket gets refilled",
                          "format_description": "rate",
                          "optional": 1,
                          "pattern": "[1-9][0-9]*\\/(second|minute|hour|day)",
                          "type": "string"
                        }
                      },
                      "optional": 1,
                      "type": "string"
                    },
                    "policy_forward": {
                      "description": "Forward policy.",
                      "enum": [
                        "ACCEPT",
                        "DROP"
                      ],
                      "optional": 1,
                      "type": "string"
                    },
                    "policy_in": {
                      "description": "Input policy.",
                      "enum": [
                        "ACCEPT",
                        "REJECT",
                        "DROP"
                      ],
                      "optional": 1,
                      "type": "string"
                    },
                    "policy_out": {
                      "description": "Output policy.",
                      "enum": [
                        "ACCEPT",
                        "REJECT",
                        "DROP"
                      ],
                      "optional": 1,
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Set Firewall options.",
        "description": "Set Firewall options.",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "delete",
            "in": "query",
            "description": "A list of settings you want to delete.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-configid-list"
            }
          },
          {
            "name": "digest",
            "in": "query",
            "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 64
            }
          },
          {
            "name": "ebtables",
            "in": "query",
            "description": "Enable ebtables rules cluster wide.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 1
            }
          },
          {
            "name": "enable",
            "in": "query",
            "description": "Enable or disable the firewall cluster wide.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "name": "log_ratelimit",
            "in": "query",
            "description": "Log ratelimiting settings",
            "required": false,
            "schema": {
              "type": "string",
              "format": {
                "burst": {
                  "default": 5,
                  "description": "Initial burst of packages which will always get logged before the rate is applied",
                  "minimum": 0,
                  "optional": 1,
                  "type": "integer"
                },
                "enable": {
                  "default": "1",
                  "default_key": 1,
                  "description": "Enable or disable log rate limiting",
                  "type": "boolean"
                },
                "rate": {
                  "default": "1/second",
                  "description": "Frequency with which the burst bucket gets refilled",
                  "format_description": "rate",
                  "optional": 1,
                  "pattern": "[1-9][0-9]*\\/(second|minute|hour|day)",
                  "type": "string"
                }
              }
            }
          },
          {
            "name": "policy_forward",
            "in": "query",
            "description": "Forward policy.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "ACCEPT",
                "DROP"
              ]
            }
          },
          {
            "name": "policy_in",
            "in": "query",
            "description": "Input policy.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "ACCEPT",
                "REJECT",
                "DROP"
              ]
            }
          },
          {
            "name": "policy_out",
            "in": "query",
            "description": "Output policy.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "ACCEPT",
                "REJECT",
                "DROP"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/cluster/firewall/macros": {
      "get": {
        "summary": "List available macros",
        "description": "List available macros",
        "tags": [
          "cluster"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "descr": {
                        "description": "More verbose description (if available).",
                        "type": "string"
                      },
                      "macro": {
                        "description": "Macro name.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/cluster/firewall/refs": {
      "get": {
        "summary": "Lists possible IPSet/Alias reference which are allowed in source/dest properties.",
        "description": "Lists possible IPSet/Alias reference which are allowed in source/dest properties.",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "description": "Only list references of specified type.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "alias",
                "ipset"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "comment": {
                        "optional": 1,
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      },
                      "ref": {
                        "type": "string"
                      },
                      "scope": {
                        "type": "string"
                      },
                      "type": {
                        "enum": [
                          "alias",
                          "ipset"
                        ],
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/cluster/backup": {
      "get": {
        "summary": "List vzdump backup schedule.",
        "description": "List vzdump backup schedule.",
        "tags": [
          "cluster"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "id": {
                        "description": "The job ID.",
                        "maxLength": 50,
                        "pattern": "\\S+",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{id}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create new vzdump backup job.",
        "description": "Create new vzdump backup job.",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "all",
            "in": "query",
            "description": "Backup all known guest systems on this host.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "bwlimit",
            "in": "query",
            "description": "Limit I/O bandwidth (in KiB/s).",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0,
              "minimum": 0
            }
          },
          {
            "name": "comment",
            "in": "query",
            "description": "Description for the Job.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 512
            }
          },
          {
            "name": "compress",
            "in": "query",
            "description": "Compress dump file.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "0",
              "enum": [
                "0",
                "1",
                "gzip",
                "lzo",
                "zstd"
              ]
            }
          },
          {
            "name": "dow",
            "in": "query",
            "description": "Day of week selection.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "mon,tue,wed,thu,fri,sat,sun",
              "format": "pve-day-of-week-list"
            }
          },
          {
            "name": "dumpdir",
            "in": "query",
            "description": "Store resulting files to specified directory.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "enabled",
            "in": "query",
            "description": "Enable or disable the job.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": "1"
            }
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Exclude specified guest systems (assumes --all)",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-vmid-list"
            }
          },
          {
            "name": "exclude-path",
            "in": "query",
            "description": "Exclude certain files/directories (shell globs). Paths starting with '/' are anchored to the container's root, other paths match relative to each subdirectory.",
            "required": false,
            "schema": {
              "type": "array"
            }
          },
          {
            "name": "fleecing",
            "in": "query",
            "description": "Options for backup fleecing (VM only).",
            "required": false,
            "schema": {
              "type": "string",
              "format": "backup-fleecing"
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "Job ID (will be autogenerated).",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-configid"
            }
          },
          {
            "name": "ionice",
            "in": "query",
            "description": "Set IO priority when using the BFQ scheduler. For snapshot and suspend mode backups of VMs, this only affects the compressor. A value of 8 means the idle priority is used, otherwise the best-effort priority is used with the specified value.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 7,
              "minimum": 0,
              "maximum": 8
            }
          },
          {
            "name": "lockwait",
            "in": "query",
            "description": "Maximal time to wait for the global lock (minutes).",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 180,
              "minimum": 0
            }
          },
          {
            "name": "mailnotification",
            "in": "query",
            "description": "Deprecated: use notification targets/matchers instead. Specify when to send a notification mail",
            "required": false,
            "schema": {
              "type": "string",
              "default": "always",
              "enum": [
                "always",
                "failure"
              ]
            }
          },
          {
            "name": "mailto",
            "in": "query",
            "description": "Deprecated: Use notification targets/matchers instead. Comma-separated list of email addresses or users that should receive email notifications.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "email-or-username-list"
            }
          },
          {
            "name": "maxfiles",
            "in": "query",
            "description": "Deprecated: use 'prune-backups' instead. Maximal number of backup files per guest system.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "mode",
            "in": "query",
            "description": "Backup mode.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "snapshot",
              "enum": [
                "snapshot",
                "suspend",
                "stop"
              ]
            }
          },
          {
            "name": "node",
            "in": "query",
            "description": "Only run if executed on this node.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "notes-template",
            "in": "query",
            "description": "Template string for generating notes for the backup(s). It can contain variables which will be replaced by their values. Currently supported are {{cluster}}, {{guestname}}, {{node}}, and {{vmid}}, but more might be added in the future. Needs to be a single line, newline and backslash need to be escaped as '\\n' and '\\\\' respectively.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 1024
            }
          },
          {
            "name": "notification-mode",
            "in": "query",
            "description": "Determine which notification system to use. If set to 'legacy-sendmail', vzdump will consider the mailto/mailnotification parameters and send emails to the specified address(es) via the 'sendmail' command. If set to 'notification-system', a notification will be sent via PVE's notification system, and the mailto and mailnotification will be ignored. If set to 'auto' (default setting), an email will be sent if mailto is set, and the notification system will be used if not.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "auto",
              "enum": [
                "auto",
                "legacy-sendmail",
                "notification-system"
              ]
            }
          },
          {
            "name": "pbs-change-detection-mode",
            "in": "query",
            "description": "PBS mode used to detect file changes and switch encoding format for container backups.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "legacy",
                "data",
                "metadata"
              ]
            }
          },
          {
            "name": "performance",
            "in": "query",
            "description": "Other performance-related settings.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "backup-performance"
            }
          },
          {
            "name": "pigz",
            "in": "query",
            "description": "Use pigz instead of gzip when N>0. N=1 uses half of cores, N>1 uses N as thread count.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "pool",
            "in": "query",
            "description": "Backup all known guest systems included in the specified pool.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "protected",
            "in": "query",
            "description": "If true, mark backup(s) as protected.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "prune-backups",
            "in": "query",
            "description": "Use these retention options instead of those from the storage configuration.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "keep-all=1",
              "format": "prune-backups"
            }
          },
          {
            "name": "quiet",
            "in": "query",
            "description": "Be quiet.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "remove",
            "in": "query",
            "description": "Prune older backups according to 'prune-backups'.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 1
            }
          },
          {
            "name": "repeat-missed",
            "in": "query",
            "description": "If true, the job will be run as soon as possible if it was missed while the scheduler was not running.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "schedule",
            "in": "query",
            "description": "Backup schedule. The format is a subset of `systemd` calendar events.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-calendar-event",
              "maxLength": 128
            }
          },
          {
            "name": "script",
            "in": "query",
            "description": "Use specified hook script.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "starttime",
            "in": "query",
            "description": "Job Start time.",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "\\d{1,2}:\\d{1,2}"
            }
          },
          {
            "name": "stdexcludes",
            "in": "query",
            "description": "Exclude temporary files and logs.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 1
            }
          },
          {
            "name": "stop",
            "in": "query",
            "description": "Stop running backup jobs on this host.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "stopwait",
            "in": "query",
            "description": "Maximal time to wait until a guest system is stopped (minutes).",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 0
            }
          },
          {
            "name": "storage",
            "in": "query",
            "description": "Store resulting file to this storage.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-storage-id"
            }
          },
          {
            "name": "tmpdir",
            "in": "query",
            "description": "Store temporary files to specified directory.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "vmid",
            "in": "query",
            "description": "The ID of the guest system you want to backup.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-vmid-list"
            }
          },
          {
            "name": "zstd",
            "in": "query",
            "description": "Zstd threads. N=0 uses half of the available cores, if N is set to a value bigger than 0, N is used as thread count.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/cluster/backup/{id}": {
      "delete": {
        "summary": "Delete vzdump backup job definition.",
        "description": "Delete vzdump backup job definition.",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The job ID.",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "\\S+",
              "maxLength": 50
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Read vzdump backup job definition.",
        "description": "Read vzdump backup job definition.",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The job ID.",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "\\S+",
              "maxLength": 50
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update vzdump backup job definition.",
        "description": "Update vzdump backup job definition.",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "all",
            "in": "query",
            "description": "Backup all known guest systems on this host.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "bwlimit",
            "in": "query",
            "description": "Limit I/O bandwidth (in KiB/s).",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0,
              "minimum": 0
            }
          },
          {
            "name": "comment",
            "in": "query",
            "description": "Description for the Job.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 512
            }
          },
          {
            "name": "compress",
            "in": "query",
            "description": "Compress dump file.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "0",
              "enum": [
                "0",
                "1",
                "gzip",
                "lzo",
                "zstd"
              ]
            }
          },
          {
            "name": "delete",
            "in": "query",
            "description": "A list of settings you want to delete.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-configid-list"
            }
          },
          {
            "name": "dow",
            "in": "query",
            "description": "Day of week selection.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-day-of-week-list"
            }
          },
          {
            "name": "dumpdir",
            "in": "query",
            "description": "Store resulting files to specified directory.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "enabled",
            "in": "query",
            "description": "Enable or disable the job.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": "1"
            }
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Exclude specified guest systems (assumes --all)",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-vmid-list"
            }
          },
          {
            "name": "exclude-path",
            "in": "query",
            "description": "Exclude certain files/directories (shell globs). Paths starting with '/' are anchored to the container's root, other paths match relative to each subdirectory.",
            "required": false,
            "schema": {
              "type": "array"
            }
          },
          {
            "name": "fleecing",
            "in": "query",
            "description": "Options for backup fleecing (VM only).",
            "required": false,
            "schema": {
              "type": "string",
              "format": "backup-fleecing"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The job ID.",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "\\S+",
              "maxLength": 50
            }
          },
          {
            "name": "ionice",
            "in": "query",
            "description": "Set IO priority when using the BFQ scheduler. For snapshot and suspend mode backups of VMs, this only affects the compressor. A value of 8 means the idle priority is used, otherwise the best-effort priority is used with the specified value.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 7,
              "minimum": 0,
              "maximum": 8
            }
          },
          {
            "name": "lockwait",
            "in": "query",
            "description": "Maximal time to wait for the global lock (minutes).",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 180,
              "minimum": 0
            }
          },
          {
            "name": "mailnotification",
            "in": "query",
            "description": "Deprecated: use notification targets/matchers instead. Specify when to send a notification mail",
            "required": false,
            "schema": {
              "type": "string",
              "default": "always",
              "enum": [
                "always",
                "failure"
              ]
            }
          },
          {
            "name": "mailto",
            "in": "query",
            "description": "Deprecated: Use notification targets/matchers instead. Comma-separated list of email addresses or users that should receive email notifications.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "email-or-username-list"
            }
          },
          {
            "name": "maxfiles",
            "in": "query",
            "description": "Deprecated: use 'prune-backups' instead. Maximal number of backup files per guest system.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "mode",
            "in": "query",
            "description": "Backup mode.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "snapshot",
              "enum": [
                "snapshot",
                "suspend",
                "stop"
              ]
            }
          },
          {
            "name": "node",
            "in": "query",
            "description": "Only run if executed on this node.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "notes-template",
            "in": "query",
            "description": "Template string for generating notes for the backup(s). It can contain variables which will be replaced by their values. Currently supported are {{cluster}}, {{guestname}}, {{node}}, and {{vmid}}, but more might be added in the future. Needs to be a single line, newline and backslash need to be escaped as '\\n' and '\\\\' respectively.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 1024
            }
          },
          {
            "name": "notification-mode",
            "in": "query",
            "description": "Determine which notification system to use. If set to 'legacy-sendmail', vzdump will consider the mailto/mailnotification parameters and send emails to the specified address(es) via the 'sendmail' command. If set to 'notification-system', a notification will be sent via PVE's notification system, and the mailto and mailnotification will be ignored. If set to 'auto' (default setting), an email will be sent if mailto is set, and the notification system will be used if not.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "auto",
              "enum": [
                "auto",
                "legacy-sendmail",
                "notification-system"
              ]
            }
          },
          {
            "name": "pbs-change-detection-mode",
            "in": "query",
            "description": "PBS mode used to detect file changes and switch encoding format for container backups.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "legacy",
                "data",
                "metadata"
              ]
            }
          },
          {
            "name": "performance",
            "in": "query",
            "description": "Other performance-related settings.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "backup-performance"
            }
          },
          {
            "name": "pigz",
            "in": "query",
            "description": "Use pigz instead of gzip when N>0. N=1 uses half of cores, N>1 uses N as thread count.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "pool",
            "in": "query",
            "description": "Backup all known guest systems included in the specified pool.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "protected",
            "in": "query",
            "description": "If true, mark backup(s) as protected.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "prune-backups",
            "in": "query",
            "description": "Use these retention options instead of those from the storage configuration.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "keep-all=1",
              "format": "prune-backups"
            }
          },
          {
            "name": "quiet",
            "in": "query",
            "description": "Be quiet.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "remove",
            "in": "query",
            "description": "Prune older backups according to 'prune-backups'.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 1
            }
          },
          {
            "name": "repeat-missed",
            "in": "query",
            "description": "If true, the job will be run as soon as possible if it was missed while the scheduler was not running.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "schedule",
            "in": "query",
            "description": "Backup schedule. The format is a subset of `systemd` calendar events.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-calendar-event",
              "maxLength": 128
            }
          },
          {
            "name": "script",
            "in": "query",
            "description": "Use specified hook script.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "starttime",
            "in": "query",
            "description": "Job Start time.",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "\\d{1,2}:\\d{1,2}"
            }
          },
          {
            "name": "stdexcludes",
            "in": "query",
            "description": "Exclude temporary files and logs.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 1
            }
          },
          {
            "name": "stop",
            "in": "query",
            "description": "Stop running backup jobs on this host.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "stopwait",
            "in": "query",
            "description": "Maximal time to wait until a guest system is stopped (minutes).",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 0
            }
          },
          {
            "name": "storage",
            "in": "query",
            "description": "Store resulting file to this storage.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-storage-id"
            }
          },
          {
            "name": "tmpdir",
            "in": "query",
            "description": "Store temporary files to specified directory.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "vmid",
            "in": "query",
            "description": "The ID of the guest system you want to backup.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-vmid-list"
            }
          },
          {
            "name": "zstd",
            "in": "query",
            "description": "Zstd threads. N=0 uses half of the available cores, if N is set to a value bigger than 0, N is used as thread count.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/cluster/backup/{id}/included_volumes": {
      "get": {
        "summary": "Returns included guests and the backup status of their disks. Optimized to be used in ExtJS tree views.",
        "description": "Returns included guests and the backup status of their disks. Optimized to be used in ExtJS tree views.",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The job ID.",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "\\S+",
              "maxLength": 50
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Root node of the tree object. Children represent guests, grandchildren represent volumes of that guest.",
                  "properties": {
                    "children": {
                      "items": {
                        "properties": {
                          "children": {
                            "description": "The volumes of the guest with the information if they will be included in backups.",
                            "items": {
                              "properties": {
                                "id": {
                                  "description": "Configuration key of the volume.",
                                  "type": "string"
                                },
                                "included": {
                                  "description": "Whether the volume is included in the backup or not.",
                                  "type": "boolean"
                                },
                                "name": {
                                  "description": "Name of the volume.",
                                  "type": "string"
                                },
                                "reason": {
                                  "description": "The reason why the volume is included (or excluded).",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "optional": 1,
                            "type": "array"
                          },
                          "id": {
                            "description": "VMID of the guest.",
                            "type": "integer"
                          },
                          "name": {
                            "description": "Name of the guest",
                            "optional": 1,
                            "type": "string"
                          },
                          "type": {
                            "description": "Type of the guest, VM, CT or unknown for removed but not purged guests.",
                            "enum": [
                              "qemu",
                              "lxc",
                              "unknown"
                            ],
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/cluster/backup-info": {
      "get": {
        "summary": "Index for backup info related endpoints",
        "description": "Index for backup info related endpoints",
        "tags": [
          "cluster"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Directory index.",
                  "items": {
                    "properties": {
                      "subdir": {
                        "description": "API sub-directory endpoint",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{subdir}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/cluster/backup-info/not-backed-up": {
      "get": {
        "summary": "Shows all guests which are not covered by any backup job.",
        "description": "Shows all guests which are not covered by any backup job.",
        "tags": [
          "cluster"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Contains the guest objects.",
                  "items": {
                    "properties": {
                      "name": {
                        "description": "Name of the guest",
                        "optional": 1,
                        "type": "string"
                      },
                      "type": {
                        "description": "Type of the guest.",
                        "enum": [
                          "qemu",
                          "lxc"
                        ],
                        "type": "string"
                      },
                      "vmid": {
                        "description": "VMID of the guest.",
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/cluster/ha": {
      "get": {
        "summary": "Directory index.",
        "description": "Directory index.",
        "tags": [
          "cluster"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "id": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{id}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/cluster/ha/resources": {
      "get": {
        "summary": "List HA resources.",
        "description": "List HA resources.",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "description": "Only list resources of specific type",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "ct",
                "vm"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "sid": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{sid}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new HA resource.",
        "description": "Create a new HA resource.",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "comment",
            "in": "query",
            "description": "Description.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 4096
            }
          },
          {
            "name": "failback",
            "in": "query",
            "description": "Automatically migrate HA resource to the node with the highest priority according to their node affinity  rules, if a node with a higher priority than the current node comes online.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 1
            }
          },
          {
            "name": "group",
            "in": "query",
            "description": "The HA group identifier.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-configid"
            }
          },
          {
            "name": "max_relocate",
            "in": "query",
            "description": "Maximal number of service relocate tries when a service failes to start.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 0
            }
          },
          {
            "name": "max_restart",
            "in": "query",
            "description": "Maximal number of tries to restart the service on a node after its start failed.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 0
            }
          },
          {
            "name": "sid",
            "in": "query",
            "description": "HA resource ID. This consists of a resource type followed by a resource specific name, separated with colon (example: vm:100 / ct:100). For virtual machines and containers, you can simply use the VM or CT id as a shortcut (example: 100).",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-ha-resource-or-vm-id"
            }
          },
          {
            "name": "state",
            "in": "query",
            "description": "Requested resource state.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "started",
              "enum": [
                "started",
                "stopped",
                "enabled",
                "disabled",
                "ignored"
              ]
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Resource type.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "ct",
                "vm"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/cluster/ha/resources/{sid}": {
      "delete": {
        "summary": "Delete resource configuration.",
        "description": "Delete resource configuration.",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "sid",
            "in": "path",
            "description": "HA resource ID. This consists of a resource type followed by a resource specific name, separated with colon (example: vm:100 / ct:100). For virtual machines and containers, you can simply use the VM or CT id as a shortcut (example: 100).",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-ha-resource-or-vm-id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Read resource configuration.",
        "description": "Read resource configuration.",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "sid",
            "in": "path",
            "description": "HA resource ID. This consists of a resource type followed by a resource specific name, separated with colon (example: vm:100 / ct:100). For virtual machines and containers, you can simply use the VM or CT id as a shortcut (example: 100).",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-ha-resource-or-vm-id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "comment": {
                      "description": "Description.",
                      "optional": 1,
                      "type": "string"
                    },
                    "digest": {
                      "description": "Can be used to prevent concurrent modifications.",
                      "type": "string"
                    },
                    "failback": {
                      "default": 1,
                      "description": "The HA resource is automatically migrated to the node with the highest priority according to their node affinity rule, if a node with a higher priority than the current node comes online.",
                      "optional": 1,
                      "type": "boolean"
                    },
                    "group": {
                      "description": "The HA group identifier.",
                      "format": "pve-configid",
                      "optional": 1,
                      "type": "string"
                    },
                    "max_relocate": {
                      "description": "Maximal number of service relocate tries when a service failes to start.",
                      "optional": 1,
                      "type": "integer"
                    },
                    "max_restart": {
                      "description": "Maximal number of tries to restart the service on a node after its start failed.",
                      "optional": 1,
                      "type": "integer"
                    },
                    "sid": {
                      "description": "HA resource ID. This consists of a resource type followed by a resource specific name, separated with colon (example: vm:100 / ct:100). For virtual machines and containers, you can simply use the VM or CT id as a shortcut (example: 100).",
                      "format": "pve-ha-resource-or-vm-id",
                      "type": "string",
                      "typetext": "<type>:<name>"
                    },
                    "state": {
                      "description": "Requested resource state.",
                      "enum": [
                        "started",
                        "stopped",
                        "enabled",
                        "disabled",
                        "ignored"
                      ],
                      "optional": 1,
                      "type": "string"
                    },
                    "type": {
                      "description": "The type of the resources.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update resource configuration.",
        "description": "Update resource configuration.",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "comment",
            "in": "query",
            "description": "Description.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 4096
            }
          },
          {
            "name": "delete",
            "in": "query",
            "description": "A list of settings you want to delete.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-configid-list",
              "maxLength": 4096
            }
          },
          {
            "name": "digest",
            "in": "query",
            "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 64
            }
          },
          {
            "name": "failback",
            "in": "query",
            "description": "Automatically migrate HA resource to the node with the highest priority according to their node affinity  rules, if a node with a higher priority than the current node comes online.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 1
            }
          },
          {
            "name": "group",
            "in": "query",
            "description": "The HA group identifier.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-configid"
            }
          },
          {
            "name": "max_relocate",
            "in": "query",
            "description": "Maximal number of service relocate tries when a service failes to start.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 0
            }
          },
          {
            "name": "max_restart",
            "in": "query",
            "description": "Maximal number of tries to restart the service on a node after its start failed.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 0
            }
          },
          {
            "name": "sid",
            "in": "path",
            "description": "HA resource ID. This consists of a resource type followed by a resource specific name, separated with colon (example: vm:100 / ct:100). For virtual machines and containers, you can simply use the VM or CT id as a shortcut (example: 100).",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-ha-resource-or-vm-id"
            }
          },
          {
            "name": "state",
            "in": "query",
            "description": "Requested resource state.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "started",
              "enum": [
                "started",
                "stopped",
                "enabled",
                "disabled",
                "ignored"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/cluster/ha/resources/{sid}/migrate": {
      "post": {
        "summary": "Request resource migration (online) to another node.",
        "description": "Request resource migration (online) to another node.",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "query",
            "description": "Target node.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "sid",
            "in": "path",
            "description": "HA resource ID. This consists of a resource type followed by a resource specific name, separated with colon (example: vm:100 / ct:100). For virtual machines and containers, you can simply use the VM or CT id as a shortcut (example: 100).",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-ha-resource-or-vm-id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "blocking-resources": {
                      "description": "HA resources, which are blocking the given HA resource from being migrated to the requested target node.",
                      "items": {
                        "description": "A blocking HA resource",
                        "properties": {
                          "cause": {
                            "description": "The reason why the HA resource is blocking the migration.",
                            "enum": [
                              "resource-affinity"
                            ],
                            "type": "string"
                          },
                          "sid": {
                            "description": "The blocking HA resource id",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "optional": 1,
                      "type": "array"
                    },
                    "comigrated-resources": {
                      "description": "HA resources, which are migrated to the same requested target node as the given HA resource, because these are in positive affinity with the HA resource.",
                      "optional": 1,
                      "type": "array"
                    },
                    "requested-node": {
                      "description": "Node, which was requested to be migrated to.",
                      "optional": 0,
                      "type": "string"
                    },
                    "sid": {
                      "description": "HA resource, which is requested to be migrated.",
                      "optional": 0,
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/cluster/ha/resources/{sid}/relocate": {
      "post": {
        "summary": "Request resource relocatzion to another node. This stops the service on the old node, and restarts it on the target node.",
        "description": "Request resource relocatzion to another node. This stops the service on the old node, and restarts it on the target node.",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "query",
            "description": "Target node.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "sid",
            "in": "path",
            "description": "HA resource ID. This consists of a resource type followed by a resource specific name, separated with colon (example: vm:100 / ct:100). For virtual machines and containers, you can simply use the VM or CT id as a shortcut (example: 100).",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-ha-resource-or-vm-id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "blocking-resources": {
                      "description": "HA resources, which are blocking the given HA resource from being relocated to the requested target node.",
                      "items": {
                        "description": "A blocking HA resource",
                        "properties": {
                          "cause": {
                            "description": "The reason why the HA resource is blocking the relocation.",
                            "enum": [
                              "resource-affinity"
                            ],
                            "type": "string"
                          },
                          "sid": {
                            "description": "The blocking HA resource id",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "optional": 1,
                      "type": "array"
                    },
                    "comigrated-resources": {
                      "description": "HA resources, which are relocated to the same requested target node as the given HA resource, because these are in positive affinity with the HA resource.",
                      "items": {
                        "description": "A comigrated HA resource",
                        "type": "string"
                      },
                      "optional": 1,
                      "type": "array"
                    },
                    "requested-node": {
                      "description": "Node, which was requested to be relocated to.",
                      "optional": 0,
                      "type": "string"
                    },
                    "sid": {
                      "description": "HA resource, which is requested to be relocated.",
                      "optional": 0,
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/cluster/ha/groups": {
      "get": {
        "summary": "Get HA groups. (deprecated in favor of HA rules)",
        "description": "Get HA groups. (deprecated in favor of HA rules)",
        "tags": [
          "cluster"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "group": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{group}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new HA group. (deprecated in favor of HA rules)",
        "description": "Create a new HA group. (deprecated in favor of HA rules)",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "comment",
            "in": "query",
            "description": "Description.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 4096
            }
          },
          {
            "name": "group",
            "in": "query",
            "description": "The HA group identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-configid"
            }
          },
          {
            "name": "nodes",
            "in": "query",
            "description": "List of cluster node names with optional priority.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-ha-group-node-list"
            }
          },
          {
            "name": "nofailback",
            "in": "query",
            "description": "The CRM tries to run services on the node with the highest priority. If a node with higher priority comes online, the CRM migrates the service to that node. Enabling nofailback prevents that behavior.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "restricted",
            "in": "query",
            "description": "Resources bound to restricted groups may only run on nodes defined by the group.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Group type.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "group"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/cluster/ha/groups/{group}": {
      "delete": {
        "summary": "Delete ha group configuration. (deprecated in favor of HA rules)",
        "description": "Delete ha group configuration. (deprecated in favor of HA rules)",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "group",
            "in": "path",
            "description": "The HA group identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-configid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Read ha group configuration. (deprecated in favor of HA rules)",
        "description": "Read ha group configuration. (deprecated in favor of HA rules)",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "group",
            "in": "path",
            "description": "The HA group identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-configid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update ha group configuration. (deprecated in favor of HA rules)",
        "description": "Update ha group configuration. (deprecated in favor of HA rules)",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "comment",
            "in": "query",
            "description": "Description.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 4096
            }
          },
          {
            "name": "delete",
            "in": "query",
            "description": "A list of settings you want to delete.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-configid-list",
              "maxLength": 4096
            }
          },
          {
            "name": "digest",
            "in": "query",
            "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 64
            }
          },
          {
            "name": "group",
            "in": "path",
            "description": "The HA group identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-configid"
            }
          },
          {
            "name": "nodes",
            "in": "query",
            "description": "List of cluster node names with optional priority.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-ha-group-node-list"
            }
          },
          {
            "name": "nofailback",
            "in": "query",
            "description": "The CRM tries to run services on the node with the highest priority. If a node with higher priority comes online, the CRM migrates the service to that node. Enabling nofailback prevents that behavior.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "restricted",
            "in": "query",
            "description": "Resources bound to restricted groups may only run on nodes defined by the group.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/cluster/ha/rules": {
      "get": {
        "summary": "Get HA rules.",
        "description": "Get HA rules.",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "resource",
            "in": "query",
            "description": "Limit the returned list to rules affecting the specified resource.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Limit the returned list to the specified rule type.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "node-affinity",
                "resource-affinity"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "links": [
                      {
                        "href": "{rule}",
                        "rel": "child"
                      }
                    ],
                    "properties": {
                      "rule": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create HA rule.",
        "description": "Create HA rule.",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "affinity",
            "in": "query",
            "description": "Describes whether the HA resources are supposed to be kept on the same node ('positive'), or are supposed to be kept on separate nodes ('negative').",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "positive",
                "negative"
              ]
            }
          },
          {
            "name": "comment",
            "in": "query",
            "description": "HA rule description.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 4096
            }
          },
          {
            "name": "disable",
            "in": "query",
            "description": "Whether the HA rule is disabled.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "nodes",
            "in": "query",
            "description": "List of cluster node names with optional priority.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-ha-group-node-list"
            }
          },
          {
            "name": "resources",
            "in": "query",
            "description": "List of HA resource IDs. This consists of a list of resource types followed by a resource specific name separated with a colon (example: vm:100,ct:101).",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-ha-resource-id-list"
            }
          },
          {
            "name": "rule",
            "in": "query",
            "description": "HA rule identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-configid"
            }
          },
          {
            "name": "strict",
            "in": "query",
            "description": "Describes whether the node affinity rule is strict or non-strict.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "HA rule type.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "node-affinity",
                "resource-affinity"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/cluster/ha/rules/{rule}": {
      "delete": {
        "summary": "Delete HA rule.",
        "description": "Delete HA rule.",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "rule",
            "in": "path",
            "description": "HA rule identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-configid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Read HA rule.",
        "description": "Read HA rule.",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "rule",
            "in": "path",
            "description": "HA rule identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-configid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "rule": {
                      "description": "HA rule identifier.",
                      "format": "pve-configid",
                      "type": "string"
                    },
                    "type": {
                      "description": "HA rule type.",
                      "enum": [
                        "node-affinity",
                        "resource-affinity"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update HA rule.",
        "description": "Update HA rule.",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "affinity",
            "in": "query",
            "description": "Describes whether the HA resources are supposed to be kept on the same node ('positive'), or are supposed to be kept on separate nodes ('negative').",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "positive",
                "negative"
              ]
            }
          },
          {
            "name": "comment",
            "in": "query",
            "description": "HA rule description.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 4096
            }
          },
          {
            "name": "delete",
            "in": "query",
            "description": "A list of settings you want to delete.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-configid-list",
              "maxLength": 4096
            }
          },
          {
            "name": "digest",
            "in": "query",
            "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 64
            }
          },
          {
            "name": "disable",
            "in": "query",
            "description": "Whether the HA rule is disabled.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "nodes",
            "in": "query",
            "description": "List of cluster node names with optional priority.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-ha-group-node-list"
            }
          },
          {
            "name": "resources",
            "in": "query",
            "description": "List of HA resource IDs. This consists of a list of resource types followed by a resource specific name separated with a colon (example: vm:100,ct:101).",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-ha-resource-id-list"
            }
          },
          {
            "name": "rule",
            "in": "path",
            "description": "HA rule identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-configid"
            }
          },
          {
            "name": "strict",
            "in": "query",
            "description": "Describes whether the node affinity rule is strict or non-strict.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "HA rule type.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "node-affinity",
                "resource-affinity"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/cluster/ha/status": {
      "get": {
        "summary": "Directory index.",
        "description": "Directory index.",
        "tags": [
          "cluster"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {},
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{name}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/cluster/ha/status/current": {
      "get": {
        "summary": "Get HA manger status.",
        "description": "Get HA manger status.",
        "tags": [
          "cluster"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "crm_state": {
                        "description": "For type 'service'. Service state as seen by the CRM.",
                        "optional": 1,
                        "type": "string"
                      },
                      "failback": {
                        "default": 1,
                        "description": "The HA resource is automatically migrated to the node with the highest priority according to their node affinity rule, if a node with a higher priority than the current node comes online.",
                        "optional": 1,
                        "type": "boolean"
                      },
                      "id": {
                        "description": "Status entry ID (quorum, master, lrm:<node>, service:<sid>).",
                        "type": "string"
                      },
                      "max_relocate": {
                        "description": "For type 'service'.",
                        "optional": 1,
                        "type": "integer"
                      },
                      "max_restart": {
                        "description": "For type 'service'.",
                        "optional": 1,
                        "type": "integer"
                      },
                      "node": {
                        "description": "Node associated to status entry.",
                        "type": "string"
                      },
                      "quorate": {
                        "description": "For type 'quorum'. Whether the cluster is quorate or not.",
                        "optional": 1,
                        "type": "boolean"
                      },
                      "request_state": {
                        "description": "For type 'service'. Requested service state.",
                        "optional": 1,
                        "type": "string"
                      },
                      "sid": {
                        "description": "For type 'service'. Service ID.",
                        "optional": 1,
                        "type": "string"
                      },
                      "state": {
                        "description": "For type 'service'. Verbose service state.",
                        "optional": 1,
                        "type": "string"
                      },
                      "status": {
                        "description": "Status of the entry (value depends on type).",
                        "type": "string"
                      },
                      "timestamp": {
                        "description": "For type 'lrm','master'. Timestamp of the status information.",
                        "optional": 1,
                        "type": "integer"
                      },
                      "type": {
                        "description": "Type of status entry.",
                        "enum": [
                          "quorum",
                          "master",
                          "lrm",
                          "service"
                        ]
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/cluster/ha/status/manager_status": {
      "get": {
        "summary": "Get full HA manger status, including LRM status.",
        "description": "Get full HA manger status, including LRM status.",
        "tags": [
          "cluster"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/cluster/acme": {
      "get": {
        "summary": "ACMEAccount index.",
        "description": "ACMEAccount index.",
        "tags": [
          "cluster"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {},
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{name}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/cluster/acme/plugins": {
      "get": {
        "summary": "ACME plugin index.",
        "description": "ACME plugin index.",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "description": "Only list ACME plugins of a specific type",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "dns",
                "standalone"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "plugin": {
                        "description": "Unique identifier for ACME plugin instance.",
                        "format": "pve-configid",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{plugin}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Add ACME plugin configuration.",
        "description": "Add ACME plugin configuration.",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "api",
            "in": "query",
            "description": "API plugin name",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "1984hosting",
                "acmedns",
                "acmeproxy",
                "active24",
                "ad",
                "ali",
                "alviy",
                "anx",
                "artfiles",
                "arvan",
                "aurora",
                "autodns",
                "aws",
                "azion",
                "azure",
                "beget",
                "bookmyname",
                "bunny",
                "cf",
                "clouddns",
                "cloudns",
                "cn",
                "conoha",
                "constellix",
                "cpanel",
                "curanet",
                "cyon",
                "da",
                "ddnss",
                "desec",
                "df",
                "dgon",
                "dnsexit",
                "dnshome",
                "dnsimple",
                "dnsservices",
                "doapi",
                "domeneshop",
                "dp",
                "dpi",
                "dreamhost",
                "duckdns",
                "durabledns",
                "dyn",
                "dynu",
                "dynv6",
                "easydns",
                "edgecenter",
                "edgedns",
                "euserv",
                "exoscale",
                "fornex",
                "freedns",
                "freemyip",
                "gandi_livedns",
                "gcloud",
                "gcore",
                "gd",
                "geoscaling",
                "googledomains",
                "he",
                "he_ddns",
                "hetzner",
                "hexonet",
                "hostingde",
                "huaweicloud",
                "infoblox",
                "infomaniak",
                "internetbs",
                "inwx",
                "ionos",
                "ionos_cloud",
                "ipv64",
                "ispconfig",
                "jd",
                "joker",
                "kappernet",
                "kas",
                "kinghost",
                "knot",
                "la",
                "leaseweb",
                "lexicon",
                "limacity",
                "linode",
                "linode_v4",
                "loopia",
                "lua",
                "maradns",
                "me",
                "miab",
                "mijnhost",
                "misaka",
                "myapi",
                "mydevil",
                "mydnsjp",
                "mythic_beasts",
                "namecheap",
                "namecom",
                "namesilo",
                "nanelo",
                "nederhost",
                "neodigit",
                "netcup",
                "netlify",
                "nic",
                "njalla",
                "nm",
                "nsd",
                "nsone",
                "nsupdate",
                "nw",
                "oci",
                "omglol",
                "one",
                "online",
                "openprovider",
                "openstack",
                "opnsense",
                "ovh",
                "pdns",
                "pleskxml",
                "pointhq",
                "porkbun",
                "rackcorp",
                "rackspace",
                "rage4",
                "rcode0",
                "regru",
                "scaleway",
                "schlundtech",
                "selectel",
                "selfhost",
                "servercow",
                "simply",
                "technitium",
                "tele3",
                "tencent",
                "timeweb",
                "transip",
                "udr",
                "ultra",
                "unoeuro",
                "variomedia",
                "veesp",
                "vercel",
                "vscale",
                "vultr",
                "websupport",
                "west_cn",
                "world4you",
                "yandex360",
                "yc",
                "zilore",
                "zone",
                "zoneedit",
                "zonomi"
              ]
            }
          },
          {
            "name": "data",
            "in": "query",
            "description": "DNS plugin data. (base64 encoded)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "disable",
            "in": "query",
            "description": "Flag to disable the config.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "ACME Plugin ID name",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-configid"
            }
          },
          {
            "name": "nodes",
            "in": "query",
            "description": "List of cluster node names.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-node-list"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "ACME challenge type.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "dns",
                "standalone"
              ]
            }
          },
          {
            "name": "validation-delay",
            "in": "query",
            "description": "Extra delay in seconds to wait before requesting validation. Allows to cope with a long TTL of DNS records.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 30,
              "minimum": 0,
              "maximum": 172800
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/cluster/acme/plugins/{id}": {
      "delete": {
        "summary": "Delete ACME plugin configuration.",
        "description": "Delete ACME plugin configuration.",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for ACME plugin instance.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-configid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Get ACME plugin configuration.",
        "description": "Get ACME plugin configuration.",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for ACME plugin instance.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-configid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update ACME plugin configuration.",
        "description": "Update ACME plugin configuration.",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "api",
            "in": "query",
            "description": "API plugin name",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "1984hosting",
                "acmedns",
                "acmeproxy",
                "active24",
                "ad",
                "ali",
                "alviy",
                "anx",
                "artfiles",
                "arvan",
                "aurora",
                "autodns",
                "aws",
                "azion",
                "azure",
                "beget",
                "bookmyname",
                "bunny",
                "cf",
                "clouddns",
                "cloudns",
                "cn",
                "conoha",
                "constellix",
                "cpanel",
                "curanet",
                "cyon",
                "da",
                "ddnss",
                "desec",
                "df",
                "dgon",
                "dnsexit",
                "dnshome",
                "dnsimple",
                "dnsservices",
                "doapi",
                "domeneshop",
                "dp",
                "dpi",
                "dreamhost",
                "duckdns",
                "durabledns",
                "dyn",
                "dynu",
                "dynv6",
                "easydns",
                "edgecenter",
                "edgedns",
                "euserv",
                "exoscale",
                "fornex",
                "freedns",
                "freemyip",
                "gandi_livedns",
                "gcloud",
                "gcore",
                "gd",
                "geoscaling",
                "googledomains",
                "he",
                "he_ddns",
                "hetzner",
                "hexonet",
                "hostingde",
                "huaweicloud",
                "infoblox",
                "infomaniak",
                "internetbs",
                "inwx",
                "ionos",
                "ionos_cloud",
                "ipv64",
                "ispconfig",
                "jd",
                "joker",
                "kappernet",
                "kas",
                "kinghost",
                "knot",
                "la",
                "leaseweb",
                "lexicon",
                "limacity",
                "linode",
                "linode_v4",
                "loopia",
                "lua",
                "maradns",
                "me",
                "miab",
                "mijnhost",
                "misaka",
                "myapi",
                "mydevil",
                "mydnsjp",
                "mythic_beasts",
                "namecheap",
                "namecom",
                "namesilo",
                "nanelo",
                "nederhost",
                "neodigit",
                "netcup",
                "netlify",
                "nic",
                "njalla",
                "nm",
                "nsd",
                "nsone",
                "nsupdate",
                "nw",
                "oci",
                "omglol",
                "one",
                "online",
                "openprovider",
                "openstack",
                "opnsense",
                "ovh",
                "pdns",
                "pleskxml",
                "pointhq",
                "porkbun",
                "rackcorp",
                "rackspace",
                "rage4",
                "rcode0",
                "regru",
                "scaleway",
                "schlundtech",
                "selectel",
                "selfhost",
                "servercow",
                "simply",
                "technitium",
                "tele3",
                "tencent",
                "timeweb",
                "transip",
                "udr",
                "ultra",
                "unoeuro",
                "variomedia",
                "veesp",
                "vercel",
                "vscale",
                "vultr",
                "websupport",
                "west_cn",
                "world4you",
                "yandex360",
                "yc",
                "zilore",
                "zone",
                "zoneedit",
                "zonomi"
              ]
            }
          },
          {
            "name": "data",
            "in": "query",
            "description": "DNS plugin data. (base64 encoded)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "delete",
            "in": "query",
            "description": "A list of settings you want to delete.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-configid-list",
              "maxLength": 4096
            }
          },
          {
            "name": "digest",
            "in": "query",
            "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 64
            }
          },
          {
            "name": "disable",
            "in": "query",
            "description": "Flag to disable the config.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ACME Plugin ID name",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-configid"
            }
          },
          {
            "name": "nodes",
            "in": "query",
            "description": "List of cluster node names.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-node-list"
            }
          },
          {
            "name": "validation-delay",
            "in": "query",
            "description": "Extra delay in seconds to wait before requesting validation. Allows to cope with a long TTL of DNS records.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 30,
              "minimum": 0,
              "maximum": 172800
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/cluster/acme/account": {
      "get": {
        "summary": "ACMEAccount index.",
        "description": "ACMEAccount index.",
        "tags": [
          "cluster"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {},
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{name}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Register a new ACME account with CA.",
        "description": "Register a new ACME account with CA.",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "contact",
            "in": "query",
            "description": "Contact email addresses.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "email-list"
            }
          },
          {
            "name": "directory",
            "in": "query",
            "description": "URL of ACME CA directory endpoint.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "https://acme-v02.api.letsencrypt.org/directory",
              "pattern": "^https?://.*"
            }
          },
          {
            "name": "eab-hmac-key",
            "in": "query",
            "description": "HMAC key for External Account Binding.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "eab-kid",
            "in": "query",
            "description": "Key Identifier for External Account Binding.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "ACME account config file name.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "default",
              "format": "pve-configid"
            }
          },
          {
            "name": "tos_url",
            "in": "query",
            "description": "URL of CA TermsOfService - setting this indicates agreement.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/cluster/acme/account/{name}": {
      "delete": {
        "summary": "Deactivate existing ACME account at CA.",
        "description": "Deactivate existing ACME account at CA.",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "ACME account config file name.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "default",
              "format": "pve-configid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Return existing ACME account information.",
        "description": "Return existing ACME account information.",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "ACME account config file name.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "default",
              "format": "pve-configid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": 0,
                  "properties": {
                    "account": {
                      "optional": 1,
                      "renderer": "yaml",
                      "type": "object"
                    },
                    "directory": {
                      "description": "URL of ACME CA directory endpoint.",
                      "optional": 1,
                      "pattern": "^https?://.*",
                      "type": "string"
                    },
                    "location": {
                      "optional": 1,
                      "type": "string"
                    },
                    "tos": {
                      "optional": 1,
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update existing ACME account information with CA. Note: not specifying any new account information triggers a refresh.",
        "description": "Update existing ACME account information with CA. Note: not specifying any new account information triggers a refresh.",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "contact",
            "in": "query",
            "description": "Contact email addresses.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "email-list"
            }
          },
          {
            "name": "name",
            "in": "path",
            "description": "ACME account config file name.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "default",
              "format": "pve-configid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/cluster/acme/tos": {
      "get": {
        "summary": "Retrieve ACME TermsOfService URL from CA. Deprecated, please use /cluster/acme/meta.",
        "description": "Retrieve ACME TermsOfService URL from CA. Deprecated, please use /cluster/acme/meta.",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "directory",
            "in": "query",
            "description": "URL of ACME CA directory endpoint.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "https://acme-v02.api.letsencrypt.org/directory",
              "pattern": "^https?://.*"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "description": "ACME TermsOfService URL.",
                  "optional": 1,
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/cluster/acme/meta": {
      "get": {
        "summary": "Retrieve ACME Directory Meta Information",
        "description": "Retrieve ACME Directory Meta Information",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "directory",
            "in": "query",
            "description": "URL of ACME CA directory endpoint.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "https://acme-v02.api.letsencrypt.org/directory",
              "pattern": "^https?://.*"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": 1,
                  "properties": {
                    "caaIdentities": {
                      "description": "Hostnames referring to the ACME servers.",
                      "items": {
                        "type": "string"
                      },
                      "optional": 1,
                      "type": "array"
                    },
                    "externalAccountRequired": {
                      "description": "EAB Required",
                      "optional": 1,
                      "type": "boolean"
                    },
                    "termsOfService": {
                      "description": "ACME TermsOfService URL.",
                      "optional": 1,
                      "type": "string"
                    },
                    "website": {
                      "description": "URL to more information about the ACME server.",
                      "optional": 1,
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/cluster/acme/directories": {
      "get": {
        "summary": "Get named known ACME directory endpoints.",
        "description": "Get named known ACME directory endpoints.",
        "tags": [
          "cluster"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "additionalProperties": 0,
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "url": {
                        "description": "URL of ACME CA directory endpoint.",
                        "pattern": "^https?://.*",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/cluster/acme/challenge-schema": {
      "get": {
        "summary": "Get schema of ACME challenge types.",
        "description": "Get schema of ACME challenge types.",
        "tags": [
          "cluster"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "additionalProperties": 0,
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "name": {
                        "description": "Human readable name, falls back to id",
                        "type": "string"
                      },
                      "schema": {
                        "type": "object"
                      },
                      "type": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/cluster/ceph": {
      "get": {
        "summary": "Cluster ceph index.",
        "description": "Cluster ceph index.",
        "tags": [
          "cluster"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {},
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{name}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/cluster/ceph/metadata": {
      "get": {
        "summary": "Get ceph metadata.",
        "description": "Get ceph metadata.",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "scope",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "all",
              "enum": [
                "all",
                "versions"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Items for each type of service containing objects for each instance.",
                  "properties": {
                    "mds": {
                      "description": "Metadata servers configured in the cluster and their properties.",
                      "properties": {
                        "{id}": {
                          "description": "Useful properties are listed, but not the full list.",
                          "properties": {
                            "addr": {
                              "description": "Bind addresses and ports.",
                              "type": "string"
                            },
                            "ceph_release": {
                              "description": "Ceph release codename currently used.",
                              "type": "string"
                            },
                            "ceph_version": {
                              "description": "Version info currently used by the service.",
                              "type": "string"
                            },
                            "ceph_version_short": {
                              "description": "Short version (numerical) info currently used by the service.",
                              "type": "string"
                            },
                            "hostname": {
                              "description": "Hostname on which the service is running.",
                              "type": "string"
                            },
                            "mem_swap_kb": {
                              "description": "Memory of the service currently in swap.",
                              "type": "integer"
                            },
                            "mem_total_kb": {
                              "description": "Memory consumption of the service.",
                              "type": "integer"
                            },
                            "name": {
                              "description": "Name of the service instance.",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "mgr": {
                      "description": "Managers configured in the cluster and their properties.",
                      "properties": {
                        "{id}": {
                          "description": "Useful properties are listed, but not the full list.",
                          "properties": {
                            "addr": {
                              "description": "Bind address",
                              "type": "string"
                            },
                            "ceph_release": {
                              "description": "Ceph release codename currently used.",
                              "type": "string"
                            },
                            "ceph_version": {
                              "description": "Version info currently used by the service.",
                              "type": "string"
                            },
                            "ceph_version_short": {
                              "description": "Short version (numerical) info currently used by the service.",
                              "type": "string"
                            },
                            "hostname": {
                              "description": "Hostname on which the service is running.",
                              "type": "string"
                            },
                            "mem_swap_kb": {
                              "description": "Memory of the service currently in swap.",
                              "type": "integer"
                            },
                            "mem_total_kb": {
                              "description": "Memory consumption of the service.",
                              "type": "integer"
                            },
                            "name": {
                              "description": "Name of the service instance.",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "mon": {
                      "description": "Monitors configured in the cluster and their properties.",
                      "properties": {
                        "{id}": {
                          "description": "Useful properties are listed, but not the full list.",
                          "properties": {
                            "addrs": {
                              "description": "Bind addresses and ports.",
                              "type": "string"
                            },
                            "ceph_release": {
                              "description": "Ceph release codename currently used.",
                              "type": "string"
                            },
                            "ceph_version": {
                              "description": "Version info currently used by the service.",
                              "type": "string"
                            },
                            "ceph_version_short": {
                              "description": "Short version (numerical) info currently used by the service.",
                              "type": "string"
                            },
                            "hostname": {
                              "description": "Hostname on which the service is running.",
                              "type": "string"
                            },
                            "mem_swap_kb": {
                              "description": "Memory of the service currently in swap.",
                              "type": "integer"
                            },
                            "mem_total_kb": {
                              "description": "Memory consumption of the service.",
                              "type": "integer"
                            },
                            "name": {
                              "description": "Name of the service instance.",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "node": {
                      "description": "Ceph version installed on the nodes.",
                      "properties": {
                        "{node}": {
                          "properties": {
                            "buildcommit": {
                              "description": "GIT commit used for the build.",
                              "type": "string"
                            },
                            "version": {
                              "description": "Version info.",
                              "properties": {
                                "parts": {
                                  "description": "major, minor & patch",
                                  "type": "array"
                                },
                                "str": {
                                  "description": "Version as single string.",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "osd": {
                      "description": "OSDs configured in the cluster and their properties.",
                      "properties": {
                        "{id}": {
                          "description": "Useful properties are listed, but not the full list.",
                          "properties": {
                            "back_addr": {
                              "description": "Bind addresses and ports for backend inter OSD traffic.",
                              "type": "string"
                            },
                            "ceph_release": {
                              "description": "Ceph release codename currently used.",
                              "type": "string"
                            },
                            "ceph_version": {
                              "description": "Version info currently used by the service.",
                              "type": "string"
                            },
                            "ceph_version_short": {
                              "description": "Short version (numerical) info currently used by the service.",
                              "type": "string"
                            },
                            "device_id": {
                              "description": "Devices used by the OSD.",
                              "type": "string"
                            },
                            "front_addr": {
                              "description": "Bind addresses and ports for frontend traffic to OSDs.",
                              "type": "string"
                            },
                            "hostname": {
                              "description": "Hostname on which the service is running.",
                              "type": "string"
                            },
                            "id": {
                              "description": "OSD ID.",
                              "type": "integer"
                            },
                            "mem_swap_kb": {
                              "description": "Memory of the service currently in swap.",
                              "type": "integer"
                            },
                            "mem_total_kb": {
                              "description": "Memory consumption of the service.",
                              "type": "integer"
                            },
                            "osd_data": {
                              "description": "Path to the OSD data directory.",
                              "type": "string"
                            },
                            "osd_objectstore": {
                              "description": "OSD objectstore type.",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/cluster/ceph/status": {
      "get": {
        "summary": "Get ceph status.",
        "description": "Get ceph status.",
        "tags": [
          "cluster"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/cluster/ceph/flags": {
      "get": {
        "summary": "get the status of all ceph flags",
        "description": "get the status of all ceph flags",
        "tags": [
          "cluster"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "additionalProperties": 1,
                    "properties": {
                      "description": {
                        "description": "Flag description.",
                        "type": "string"
                      },
                      "name": {
                        "description": "Flag name.",
                        "enum": [
                          "nobackfill",
                          "nodeep-scrub",
                          "nodown",
                          "noin",
                          "noout",
                          "norebalance",
                          "norecover",
                          "noscrub",
                          "notieragent",
                          "noup",
                          "pause"
                        ],
                        "type": "string"
                      },
                      "value": {
                        "description": "Flag value.",
                        "type": "boolean"
                      }
                    },
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{name}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Set/Unset multiple ceph flags at once.",
        "description": "Set/Unset multiple ceph flags at once.",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "nobackfill",
            "in": "query",
            "description": "Backfilling of PGs is suspended.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "nodeep-scrub",
            "in": "query",
            "description": "Deep Scrubbing is disabled.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "nodown",
            "in": "query",
            "description": "OSD failure reports are being ignored, such that the monitors will not mark OSDs down.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "noin",
            "in": "query",
            "description": "OSDs that were previously marked out will not be marked back in when they start.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "noout",
            "in": "query",
            "description": "OSDs will not automatically be marked out after the configured interval.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "norebalance",
            "in": "query",
            "description": "Rebalancing of PGs is suspended.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "norecover",
            "in": "query",
            "description": "Recovery of PGs is suspended.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "noscrub",
            "in": "query",
            "description": "Scrubbing is disabled.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "notieragent",
            "in": "query",
            "description": "Cache tiering activity is suspended.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "noup",
            "in": "query",
            "description": "OSDs are not allowed to start.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pause",
            "in": "query",
            "description": "Pauses read and writes.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/cluster/ceph/flags/{flag}": {
      "get": {
        "summary": "Get the status of a specific ceph flag.",
        "description": "Get the status of a specific ceph flag.",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "flag",
            "in": "path",
            "description": "The name of the flag name to get.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "nobackfill",
                "nodeep-scrub",
                "nodown",
                "noin",
                "noout",
                "norebalance",
                "norecover",
                "noscrub",
                "notieragent",
                "noup",
                "pause"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Set or clear (unset) a specific ceph flag",
        "description": "Set or clear (unset) a specific ceph flag",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "flag",
            "in": "path",
            "description": "The ceph flag to update",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "nobackfill",
                "nodeep-scrub",
                "nodown",
                "noin",
                "noout",
                "norebalance",
                "norecover",
                "noscrub",
                "notieragent",
                "noup",
                "pause"
              ]
            }
          },
          {
            "name": "value",
            "in": "query",
            "description": "The new value of the flag",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/cluster/jobs": {
      "get": {
        "summary": "Index for jobs related endpoints.",
        "description": "Index for jobs related endpoints.",
        "tags": [
          "cluster"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Directory index.",
                  "items": {
                    "properties": {
                      "subdir": {
                        "description": "API sub-directory endpoint",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{subdir}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/cluster/jobs/realm-sync": {
      "get": {
        "summary": "List configured realm-sync-jobs.",
        "description": "List configured realm-sync-jobs.",
        "tags": [
          "cluster"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "comment": {
                        "description": "A comment for the job.",
                        "optional": 1,
                        "type": "string"
                      },
                      "enabled": {
                        "description": "If the job is enabled or not.",
                        "type": "boolean"
                      },
                      "id": {
                        "description": "The ID of the entry.",
                        "type": "string"
                      },
                      "last-run": {
                        "description": "Last execution time of the job in seconds since the beginning of the UNIX epoch",
                        "optional": 1,
                        "type": "integer"
                      },
                      "next-run": {
                        "description": "Next planned execution time of the job in seconds since the beginning of the UNIX epoch.",
                        "optional": 1,
                        "type": "integer"
                      },
                      "realm": {
                        "description": "Authentication domain ID",
                        "format": "pve-realm",
                        "maxLength": 32,
                        "type": "string"
                      },
                      "remove-vanished": {
                        "default": "none",
                        "description": "A semicolon-separated list of things to remove when they or the user vanishes during a sync. The following values are possible: 'entry' removes the user/group when not returned from the sync. 'properties' removes the set properties on existing user/group that do not appear in the source (even custom ones). 'acl' removes acls when the user/group is not returned from the sync. Instead of a list it also can be 'none' (the default).",
                        "optional": "1",
                        "pattern": "(?:(?:(?:acl|properties|entry);)*(?:acl|properties|entry))|none",
                        "type": "string",
                        "typetext": "([acl];[properties];[entry])|none"
                      },
                      "schedule": {
                        "description": "The configured sync schedule.",
                        "type": "string"
                      },
                      "scope": {
                        "description": "Select what to sync.",
                        "enum": [
                          "users",
                          "groups",
                          "both"
                        ],
                        "optional": "1",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{id}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/cluster/jobs/realm-sync/{id}": {
      "delete": {
        "summary": "Delete realm-sync job definition.",
        "description": "Delete realm-sync job definition.",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-configid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Read realm-sync job definition.",
        "description": "Read realm-sync job definition.",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-configid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create new realm-sync job.",
        "description": "Create new realm-sync job.",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "comment",
            "in": "query",
            "description": "Description for the Job.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 512
            }
          },
          {
            "name": "enable-new",
            "in": "query",
            "description": "Enable newly synced users immediately.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": "1"
            }
          },
          {
            "name": "enabled",
            "in": "query",
            "description": "Determines if the job is enabled.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 1
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the job.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-configid",
              "maxLength": 64
            }
          },
          {
            "name": "realm",
            "in": "query",
            "description": "Authentication domain ID",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-realm",
              "maxLength": 32
            }
          },
          {
            "name": "remove-vanished",
            "in": "query",
            "description": "A semicolon-separated list of things to remove when they or the user vanishes during a sync. The following values are possible: 'entry' removes the user/group when not returned from the sync. 'properties' removes the set properties on existing user/group that do not appear in the source (even custom ones). 'acl' removes acls when the user/group is not returned from the sync. Instead of a list it also can be 'none' (the default).",
            "required": false,
            "schema": {
              "type": "string",
              "default": "none",
              "pattern": "(?:(?:(?:acl|properties|entry);)*(?:acl|properties|entry))|none"
            }
          },
          {
            "name": "schedule",
            "in": "query",
            "description": "Backup schedule. The format is a subset of `systemd` calendar events.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-calendar-event",
              "maxLength": 128
            }
          },
          {
            "name": "scope",
            "in": "query",
            "description": "Select what to sync.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "users",
                "groups",
                "both"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update realm-sync job definition.",
        "description": "Update realm-sync job definition.",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "comment",
            "in": "query",
            "description": "Description for the Job.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 512
            }
          },
          {
            "name": "delete",
            "in": "query",
            "description": "A list of settings you want to delete.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-configid-list",
              "maxLength": 4096
            }
          },
          {
            "name": "enable-new",
            "in": "query",
            "description": "Enable newly synced users immediately.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": "1"
            }
          },
          {
            "name": "enabled",
            "in": "query",
            "description": "Determines if the job is enabled.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 1
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the job.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-configid",
              "maxLength": 64
            }
          },
          {
            "name": "remove-vanished",
            "in": "query",
            "description": "A semicolon-separated list of things to remove when they or the user vanishes during a sync. The following values are possible: 'entry' removes the user/group when not returned from the sync. 'properties' removes the set properties on existing user/group that do not appear in the source (even custom ones). 'acl' removes acls when the user/group is not returned from the sync. Instead of a list it also can be 'none' (the default).",
            "required": false,
            "schema": {
              "type": "string",
              "default": "none",
              "pattern": "(?:(?:(?:acl|properties|entry);)*(?:acl|properties|entry))|none"
            }
          },
          {
            "name": "schedule",
            "in": "query",
            "description": "Backup schedule. The format is a subset of `systemd` calendar events.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-calendar-event",
              "maxLength": 128
            }
          },
          {
            "name": "scope",
            "in": "query",
            "description": "Select what to sync.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "users",
                "groups",
                "both"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/cluster/jobs/schedule-analyze": {
      "get": {
        "summary": "Returns a list of future schedule runtimes.",
        "description": "Returns a list of future schedule runtimes.",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "iterations",
            "in": "query",
            "description": "Number of event-iteration to simulate and return.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 1,
              "maximum": 100
            }
          },
          {
            "name": "schedule",
            "in": "query",
            "description": "Job schedule. The format is a subset of `systemd` calendar events.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-calendar-event",
              "maxLength": 128
            }
          },
          {
            "name": "starttime",
            "in": "query",
            "description": "UNIX timestamp to start the calculation from. Defaults to the current time.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "description": "An array of the next <iterations> events since <starttime>.",
                  "items": {
                    "properties": {
                      "timestamp": {
                        "description": "UNIX timestamp for the run.",
                        "type": "integer"
                      },
                      "utc": {
                        "description": "UTC timestamp for the run.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/cluster/mapping": {
      "get": {
        "summary": "List resource types.",
        "description": "List resource types.",
        "tags": [
          "cluster"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{name}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/cluster/mapping/dir": {
      "get": {
        "summary": "List directory mapping",
        "description": "List directory mapping",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "check-node",
            "in": "query",
            "description": "If given, checks the configurations on the given node for correctness, and adds relevant diagnostics for the directory to the response.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "checks": {
                        "description": "A list of checks, only present if 'check-node' is set.",
                        "items": {
                          "properties": {
                            "message": {
                              "description": "The message of the error",
                              "type": "string"
                            },
                            "severity": {
                              "description": "The severity of the error",
                              "enum": [
                                "warning",
                                "error"
                              ],
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "optional": 1,
                        "type": "array"
                      },
                      "description": {
                        "description": "A description of the logical mapping.",
                        "type": "string"
                      },
                      "id": {
                        "description": "The logical ID of the mapping.",
                        "type": "string"
                      },
                      "map": {
                        "description": "The entries of the mapping.",
                        "items": {
                          "description": "A mapping for a node.",
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{id}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new directory mapping.",
        "description": "Create a new directory mapping.",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "description",
            "in": "query",
            "description": "Description of the directory mapping",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 4096
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "The ID of the directory mapping",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-configid"
            }
          },
          {
            "name": "map",
            "in": "query",
            "description": "A list of maps for the cluster nodes.",
            "required": true,
            "schema": {
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/cluster/mapping/dir/{id}": {
      "delete": {
        "summary": "Remove directory mapping.",
        "description": "Remove directory mapping.",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-configid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Get directory mapping.",
        "description": "Get directory mapping.",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-configid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update a directory mapping.",
        "description": "Update a directory mapping.",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "delete",
            "in": "query",
            "description": "A list of settings you want to delete.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-configid-list",
              "maxLength": 4096
            }
          },
          {
            "name": "description",
            "in": "query",
            "description": "Description of the directory mapping",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 4096
            }
          },
          {
            "name": "digest",
            "in": "query",
            "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 64
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the directory mapping",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-configid"
            }
          },
          {
            "name": "map",
            "in": "query",
            "description": "A list of maps for the cluster nodes.",
            "required": false,
            "schema": {
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/cluster/mapping/pci": {
      "get": {
        "summary": "List PCI Hardware Mapping",
        "description": "List PCI Hardware Mapping",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "check-node",
            "in": "query",
            "description": "If given, checks the configurations on the given node for correctness, and adds relevant diagnostics for the devices to the response.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "checks": {
                        "description": "A list of checks, only present if 'check_node' is set.",
                        "items": {
                          "properties": {
                            "message": {
                              "description": "The message of the error",
                              "type": "string"
                            },
                            "severity": {
                              "description": "The severity of the error",
                              "enum": [
                                "warning",
                                "error"
                              ],
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "optional": 1,
                        "type": "array"
                      },
                      "description": {
                        "description": "A description of the logical mapping.",
                        "type": "string"
                      },
                      "id": {
                        "description": "The logical ID of the mapping.",
                        "type": "string"
                      },
                      "map": {
                        "description": "The entries of the mapping.",
                        "items": {
                          "description": "A mapping for a node.",
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{id}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new hardware mapping.",
        "description": "Create a new hardware mapping.",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "description",
            "in": "query",
            "description": "Description of the logical PCI device.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 4096
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "The ID of the logical PCI mapping.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-configid"
            }
          },
          {
            "name": "live-migration-capable",
            "in": "query",
            "description": "Marks the device(s) as being able to be live-migrated (Experimental). This needs hardware and driver support to work.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "map",
            "in": "query",
            "description": "A list of maps for the cluster nodes.",
            "required": true,
            "schema": {
              "type": "array"
            }
          },
          {
            "name": "mdev",
            "in": "query",
            "description": "Marks the device(s) as being capable of providing mediated devices.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/cluster/mapping/pci/{id}": {
      "delete": {
        "summary": "Remove Hardware Mapping.",
        "description": "Remove Hardware Mapping.",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-configid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Get PCI Mapping.",
        "description": "Get PCI Mapping.",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-configid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update a hardware mapping.",
        "description": "Update a hardware mapping.",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "delete",
            "in": "query",
            "description": "A list of settings you want to delete.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-configid-list",
              "maxLength": 4096
            }
          },
          {
            "name": "description",
            "in": "query",
            "description": "Description of the logical PCI device.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 4096
            }
          },
          {
            "name": "digest",
            "in": "query",
            "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 64
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the logical PCI mapping.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-configid"
            }
          },
          {
            "name": "live-migration-capable",
            "in": "query",
            "description": "Marks the device(s) as being able to be live-migrated (Experimental). This needs hardware and driver support to work.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "map",
            "in": "query",
            "description": "A list of maps for the cluster nodes.",
            "required": false,
            "schema": {
              "type": "array"
            }
          },
          {
            "name": "mdev",
            "in": "query",
            "description": "Marks the device(s) as being capable of providing mediated devices.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/cluster/mapping/usb": {
      "get": {
        "summary": "List USB Hardware Mappings",
        "description": "List USB Hardware Mappings",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "check-node",
            "in": "query",
            "description": "If given, checks the configurations on the given node for correctness, and adds relevant errors to the devices.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "description": {
                        "description": "A description of the logical mapping.",
                        "type": "string"
                      },
                      "error": {
                        "description": "A list of errors when 'check_node' is given.",
                        "items": {
                          "properties": {
                            "message": {
                              "description": "The message of the error",
                              "type": "string"
                            },
                            "severity": {
                              "description": "The severity of the error",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "id": {
                        "description": "The logical ID of the mapping.",
                        "type": "string"
                      },
                      "map": {
                        "description": "The entries of the mapping.",
                        "items": {
                          "description": "A mapping for a node.",
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{id}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new hardware mapping.",
        "description": "Create a new hardware mapping.",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "description",
            "in": "query",
            "description": "Description of the logical USB device.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 4096
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "The ID of the logical USB mapping.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-configid"
            }
          },
          {
            "name": "map",
            "in": "query",
            "description": "A list of maps for the cluster nodes.",
            "required": true,
            "schema": {
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/cluster/mapping/usb/{id}": {
      "delete": {
        "summary": "Remove Hardware Mapping.",
        "description": "Remove Hardware Mapping.",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-configid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Get USB Mapping.",
        "description": "Get USB Mapping.",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-configid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update a hardware mapping.",
        "description": "Update a hardware mapping.",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "delete",
            "in": "query",
            "description": "A list of settings you want to delete.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-configid-list",
              "maxLength": 4096
            }
          },
          {
            "name": "description",
            "in": "query",
            "description": "Description of the logical USB device.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 4096
            }
          },
          {
            "name": "digest",
            "in": "query",
            "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 64
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the logical USB mapping.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-configid"
            }
          },
          {
            "name": "map",
            "in": "query",
            "description": "A list of maps for the cluster nodes.",
            "required": true,
            "schema": {
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/cluster/sdn": {
      "get": {
        "summary": "Directory index.",
        "description": "Directory index.",
        "tags": [
          "cluster"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "id": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{id}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Apply sdn controller changes && reload.",
        "description": "Apply sdn controller changes && reload.",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "lock-token",
            "in": "query",
            "description": "the token for unlocking the global SDN configuration",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "release-lock",
            "in": "query",
            "description": "When lock-token has been provided and configuration successfully commited, release the lock automatically afterwards",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/cluster/sdn/vnets": {
      "get": {
        "summary": "SDN vnets index.",
        "description": "SDN vnets index.",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "pending",
            "in": "query",
            "description": "Display pending config.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "running",
            "in": "query",
            "description": "Display running config.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "alias": {
                        "description": "Alias name of the VNet.",
                        "maxLength": 256,
                        "optional": 1,
                        "pattern": "(?^i:[\\(\\)-_.\\w\\d\\s]{0,256})",
                        "type": "string"
                      },
                      "digest": {
                        "description": "Digest of the VNet section.",
                        "optional": 1,
                        "type": "string"
                      },
                      "isolate-ports": {
                        "description": "If true, sets the isolated property for all interfaces on the bridge of this VNet.",
                        "optional": 1,
                        "type": "boolean"
                      },
                      "pending": {
                        "description": "Changes that have not yet been applied to the running configuration.",
                        "optional": 1,
                        "properties": {
                          "alias": {
                            "description": "Alias name of the VNet.",
                            "maxLength": 256,
                            "optional": 1,
                            "pattern": "(?^i:[\\(\\)-_.\\w\\d\\s]{0,256})",
                            "type": "string"
                          },
                          "isolate-ports": {
                            "description": "If true, sets the isolated property for all interfaces on the bridge of this VNet.",
                            "optional": 1,
                            "type": "boolean"
                          },
                          "tag": {
                            "description": "VLAN Tag (for VLAN or QinQ zones) or VXLAN VNI (for VXLAN or EVPN zones).",
                            "maximum": 16777215,
                            "minimum": 1,
                            "optional": 1,
                            "type": "integer"
                          },
                          "vlanaware": {
                            "description": "Allow VLANs to pass through this VNet.",
                            "optional": 1,
                            "type": "boolean"
                          },
                          "zone": {
                            "description": "Name of the zone this VNet belongs to.",
                            "optional": 1,
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "state": {
                        "description": "State of the SDN configuration object.",
                        "enum": [
                          "new",
                          "changed",
                          "deleted"
                        ],
                        "optional": 1,
                        "type": "string"
                      },
                      "tag": {
                        "description": "VLAN Tag (for VLAN or QinQ zones) or VXLAN VNI (for VXLAN or EVPN zones).",
                        "maximum": 16777215,
                        "minimum": 1,
                        "optional": 1,
                        "type": "integer"
                      },
                      "type": {
                        "description": "Type of the VNet.",
                        "enum": [
                          "vnet"
                        ],
                        "optional": 0,
                        "type": "string"
                      },
                      "vlanaware": {
                        "description": "Allow VLANs to pass through this VNet.",
                        "optional": 1,
                        "type": "boolean"
                      },
                      "vnet": {
                        "description": "Name of the VNet.",
                        "optional": 0,
                        "type": "string"
                      },
                      "zone": {
                        "description": "Name of the zone this VNet belongs to.",
                        "optional": 1,
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{vnet}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new sdn vnet object.",
        "description": "Create a new sdn vnet object.",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "alias",
            "in": "query",
            "description": "Alias name of the VNet.",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "(?^i:[\\(\\)-_.\\w\\d\\s]{0,256})",
              "maxLength": 256
            }
          },
          {
            "name": "isolate-ports",
            "in": "query",
            "description": "If true, sets the isolated property for all interfaces on the bridge of this VNet.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lock-token",
            "in": "query",
            "description": "the token for unlocking the global SDN configuration",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tag",
            "in": "query",
            "description": "VLAN Tag (for VLAN or QinQ zones) or VXLAN VNI (for VXLAN or EVPN zones).",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 16777215
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Type of the VNet.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "vnet"
              ]
            }
          },
          {
            "name": "vlanaware",
            "in": "query",
            "description": "Allow VLANs to pass through this vnet.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "vnet",
            "in": "query",
            "description": "The SDN vnet object identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-sdn-vnet-id"
            }
          },
          {
            "name": "zone",
            "in": "query",
            "description": "Name of the zone this VNet belongs to.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/cluster/sdn/vnets/{vnet}": {
      "delete": {
        "summary": "Delete sdn vnet object configuration.",
        "description": "Delete sdn vnet object configuration.",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "lock-token",
            "in": "query",
            "description": "the token for unlocking the global SDN configuration",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "vnet",
            "in": "path",
            "description": "The SDN vnet object identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-sdn-vnet-id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Read sdn vnet configuration.",
        "description": "Read sdn vnet configuration.",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "pending",
            "in": "query",
            "description": "Display pending config.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "running",
            "in": "query",
            "description": "Display running config.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "vnet",
            "in": "path",
            "description": "The SDN vnet object identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-sdn-vnet-id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "alias": {
                      "description": "Alias name of the VNet.",
                      "maxLength": 256,
                      "optional": 1,
                      "pattern": "(?^i:[\\(\\)-_.\\w\\d\\s]{0,256})",
                      "type": "string"
                    },
                    "digest": {
                      "description": "Digest of the VNet section.",
                      "optional": 1,
                      "type": "string"
                    },
                    "isolate-ports": {
                      "description": "If true, sets the isolated property for all interfaces on the bridge of this VNet.",
                      "optional": 1,
                      "type": "boolean"
                    },
                    "pending": {
                      "description": "Changes that have not yet been applied to the running configuration.",
                      "optional": 1,
                      "properties": {
                        "alias": {
                          "description": "Alias name of the VNet.",
                          "maxLength": 256,
                          "optional": 1,
                          "pattern": "(?^i:[\\(\\)-_.\\w\\d\\s]{0,256})",
                          "type": "string"
                        },
                        "isolate-ports": {
                          "description": "If true, sets the isolated property for all interfaces on the bridge of this VNet.",
                          "optional": 1,
                          "type": "boolean"
                        },
                        "tag": {
                          "description": "VLAN Tag (for VLAN or QinQ zones) or VXLAN VNI (for VXLAN or EVPN zones).",
                          "maximum": 16777215,
                          "minimum": 1,
                          "optional": 1,
                          "type": "integer"
                        },
                        "vlanaware": {
                          "description": "Allow VLANs to pass through this VNet.",
                          "optional": 1,
                          "type": "boolean"
                        },
                        "zone": {
                          "description": "Name of the zone this VNet belongs to.",
                          "optional": 1,
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "state": {
                      "description": "State of the SDN configuration object.",
                      "enum": [
                        "new",
                        "changed",
                        "deleted"
                      ],
                      "optional": 1,
                      "type": "string"
                    },
                    "tag": {
                      "description": "VLAN Tag (for VLAN or QinQ zones) or VXLAN VNI (for VXLAN or EVPN zones).",
                      "maximum": 16777215,
                      "minimum": 1,
                      "optional": 1,
                      "type": "integer"
                    },
                    "type": {
                      "description": "Type of the VNet.",
                      "enum": [
                        "vnet"
                      ],
                      "optional": 0,
                      "type": "string"
                    },
                    "vlanaware": {
                      "description": "Allow VLANs to pass through this VNet.",
                      "optional": 1,
                      "type": "boolean"
                    },
                    "vnet": {
                      "description": "Name of the VNet.",
                      "optional": 0,
                      "type": "string"
                    },
                    "zone": {
                      "description": "Name of the zone this VNet belongs to.",
                      "optional": 1,
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update sdn vnet object configuration.",
        "description": "Update sdn vnet object configuration.",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "alias",
            "in": "query",
            "description": "Alias name of the VNet.",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "(?^i:[\\(\\)-_.\\w\\d\\s]{0,256})",
              "maxLength": 256
            }
          },
          {
            "name": "delete",
            "in": "query",
            "description": "A list of settings you want to delete.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-configid-list",
              "maxLength": 4096
            }
          },
          {
            "name": "digest",
            "in": "query",
            "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 64
            }
          },
          {
            "name": "isolate-ports",
            "in": "query",
            "description": "If true, sets the isolated property for all interfaces on the bridge of this VNet.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lock-token",
            "in": "query",
            "description": "the token for unlocking the global SDN configuration",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tag",
            "in": "query",
            "description": "VLAN Tag (for VLAN or QinQ zones) or VXLAN VNI (for VXLAN or EVPN zones).",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 16777215
            }
          },
          {
            "name": "vlanaware",
            "in": "query",
            "description": "Allow VLANs to pass through this vnet.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "vnet",
            "in": "path",
            "description": "The SDN vnet object identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-sdn-vnet-id"
            }
          },
          {
            "name": "zone",
            "in": "query",
            "description": "Name of the zone this VNet belongs to.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/cluster/sdn/vnets/{vnet}/firewall": {
      "get": {
        "summary": "Directory index.",
        "description": "Directory index.",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "vnet",
            "in": "path",
            "description": "The SDN vnet object identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-sdn-vnet-id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {},
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{name}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/cluster/sdn/vnets/{vnet}/firewall/rules": {
      "get": {
        "summary": "List rules.",
        "description": "List rules.",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "vnet",
            "in": "path",
            "description": "The SDN vnet object identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-sdn-vnet-id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "pos": {
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{pos}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create new rule.",
        "description": "Create new rule.",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "action",
            "in": "query",
            "description": "Rule action ('ACCEPT', 'DROP', 'REJECT') or security group name.",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "[A-Za-z][A-Za-z0-9\\-\\_]+",
              "maxLength": 20
            }
          },
          {
            "name": "comment",
            "in": "query",
            "description": "Descriptive comment.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dest",
            "in": "query",
            "description": "Restrict packet destination address. This can refer to a single IP address, an IP set ('+ipsetname') or an IP alias definition. You can also specify an address range like '20.34.101.207-201.3.9.99', or a list of IP addresses and networks (entries are separated by comma). Please do not mix IPv4 and IPv6 addresses inside such lists.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-fw-addr-spec",
              "maxLength": 512
            }
          },
          {
            "name": "digest",
            "in": "query",
            "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 64
            }
          },
          {
            "name": "dport",
            "in": "query",
            "description": "Restrict TCP/UDP destination port. You can use service names or simple numbers (0-65535), as defined in '/etc/services'. Port ranges can be specified with '\\d+:\\d+', for example '80:85', and you can use comma separated list to match several ports or ranges.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-fw-dport-spec"
            }
          },
          {
            "name": "enable",
            "in": "query",
            "description": "Flag to enable/disable a rule.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "name": "icmp-type",
            "in": "query",
            "description": "Specify icmp-type. Only valid if proto equals 'icmp' or 'icmpv6'/'ipv6-icmp'.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-fw-icmp-type-spec"
            }
          },
          {
            "name": "iface",
            "in": "query",
            "description": "Network interface name. You have to use network configuration key names for VMs and containers ('net\\d+'). Host related rules can use arbitrary strings.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-iface",
              "maxLength": 20
            }
          },
          {
            "name": "log",
            "in": "query",
            "description": "Log level for firewall rule.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "emerg",
                "alert",
                "crit",
                "err",
                "warning",
                "notice",
                "info",
                "debug",
                "nolog"
              ]
            }
          },
          {
            "name": "macro",
            "in": "query",
            "description": "Use predefined standard macro.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 128
            }
          },
          {
            "name": "pos",
            "in": "query",
            "description": "Update rule at position <pos>.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "name": "proto",
            "in": "query",
            "description": "IP protocol. You can use protocol names ('tcp'/'udp') or simple numbers, as defined in '/etc/protocols'.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-fw-protocol-spec"
            }
          },
          {
            "name": "source",
            "in": "query",
            "description": "Restrict packet source address. This can refer to a single IP address, an IP set ('+ipsetname') or an IP alias definition. You can also specify an address range like '20.34.101.207-201.3.9.99', or a list of IP addresses and networks (entries are separated by comma). Please do not mix IPv4 and IPv6 addresses inside such lists.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-fw-addr-spec",
              "maxLength": 512
            }
          },
          {
            "name": "sport",
            "in": "query",
            "description": "Restrict TCP/UDP source port. You can use service names or simple numbers (0-65535), as defined in '/etc/services'. Port ranges can be specified with '\\d+:\\d+', for example '80:85', and you can use comma separated list to match several ports or ranges.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-fw-sport-spec"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Rule type.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "in",
                "out",
                "forward",
                "group"
              ]
            }
          },
          {
            "name": "vnet",
            "in": "path",
            "description": "The SDN vnet object identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-sdn-vnet-id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/cluster/sdn/vnets/{vnet}/firewall/rules/{pos}": {
      "delete": {
        "summary": "Delete rule.",
        "description": "Delete rule.",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "digest",
            "in": "query",
            "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 64
            }
          },
          {
            "name": "pos",
            "in": "path",
            "description": "Update rule at position <pos>.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "name": "vnet",
            "in": "path",
            "description": "The SDN vnet object identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-sdn-vnet-id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Get single rule data.",
        "description": "Get single rule data.",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "pos",
            "in": "path",
            "description": "Update rule at position <pos>.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "name": "vnet",
            "in": "path",
            "description": "The SDN vnet object identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-sdn-vnet-id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "action": {
                      "type": "string"
                    },
                    "comment": {
                      "optional": 1,
                      "type": "string"
                    },
                    "dest": {
                      "optional": 1,
                      "type": "string"
                    },
                    "dport": {
                      "optional": 1,
                      "type": "string"
                    },
                    "enable": {
                      "optional": 1,
                      "type": "integer"
                    },
                    "icmp-type": {
                      "optional": 1,
                      "type": "string"
                    },
                    "iface": {
                      "optional": 1,
                      "type": "string"
                    },
                    "ipversion": {
                      "optional": 1,
                      "type": "integer"
                    },
                    "log": {
                      "description": "Log level for firewall rule",
                      "enum": [
                        "emerg",
                        "alert",
                        "crit",
                        "err",
                        "warning",
                        "notice",
                        "info",
                        "debug",
                        "nolog"
                      ],
                      "optional": 1,
                      "type": "string"
                    },
                    "macro": {
                      "optional": 1,
                      "type": "string"
                    },
                    "pos": {
                      "type": "integer"
                    },
                    "proto": {
                      "optional": 1,
                      "type": "string"
                    },
                    "source": {
                      "optional": 1,
                      "type": "string"
                    },
                    "sport": {
                      "optional": 1,
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Modify rule data.",
        "description": "Modify rule data.",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "action",
            "in": "query",
            "description": "Rule action ('ACCEPT', 'DROP', 'REJECT') or security group name.",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "[A-Za-z][A-Za-z0-9\\-\\_]+",
              "maxLength": 20
            }
          },
          {
            "name": "comment",
            "in": "query",
            "description": "Descriptive comment.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "delete",
            "in": "query",
            "description": "A list of settings you want to delete.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-configid-list"
            }
          },
          {
            "name": "dest",
            "in": "query",
            "description": "Restrict packet destination address. This can refer to a single IP address, an IP set ('+ipsetname') or an IP alias definition. You can also specify an address range like '20.34.101.207-201.3.9.99', or a list of IP addresses and networks (entries are separated by comma). Please do not mix IPv4 and IPv6 addresses inside such lists.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-fw-addr-spec",
              "maxLength": 512
            }
          },
          {
            "name": "digest",
            "in": "query",
            "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 64
            }
          },
          {
            "name": "dport",
            "in": "query",
            "description": "Restrict TCP/UDP destination port. You can use service names or simple numbers (0-65535), as defined in '/etc/services'. Port ranges can be specified with '\\d+:\\d+', for example '80:85', and you can use comma separated list to match several ports or ranges.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-fw-dport-spec"
            }
          },
          {
            "name": "enable",
            "in": "query",
            "description": "Flag to enable/disable a rule.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "name": "icmp-type",
            "in": "query",
            "description": "Specify icmp-type. Only valid if proto equals 'icmp' or 'icmpv6'/'ipv6-icmp'.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-fw-icmp-type-spec"
            }
          },
          {
            "name": "iface",
            "in": "query",
            "description": "Network interface name. You have to use network configuration key names for VMs and containers ('net\\d+'). Host related rules can use arbitrary strings.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-iface",
              "maxLength": 20
            }
          },
          {
            "name": "log",
            "in": "query",
            "description": "Log level for firewall rule.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "emerg",
                "alert",
                "crit",
                "err",
                "warning",
                "notice",
                "info",
                "debug",
                "nolog"
              ]
            }
          },
          {
            "name": "macro",
            "in": "query",
            "description": "Use predefined standard macro.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 128
            }
          },
          {
            "name": "moveto",
            "in": "query",
            "description": "Move rule to new position <moveto>. Other arguments are ignored.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "name": "pos",
            "in": "path",
            "description": "Update rule at position <pos>.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "name": "proto",
            "in": "query",
            "description": "IP protocol. You can use protocol names ('tcp'/'udp') or simple numbers, as defined in '/etc/protocols'.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-fw-protocol-spec"
            }
          },
          {
            "name": "source",
            "in": "query",
            "description": "Restrict packet source address. This can refer to a single IP address, an IP set ('+ipsetname') or an IP alias definition. You can also specify an address range like '20.34.101.207-201.3.9.99', or a list of IP addresses and networks (entries are separated by comma). Please do not mix IPv4 and IPv6 addresses inside such lists.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-fw-addr-spec",
              "maxLength": 512
            }
          },
          {
            "name": "sport",
            "in": "query",
            "description": "Restrict TCP/UDP source port. You can use service names or simple numbers (0-65535), as defined in '/etc/services'. Port ranges can be specified with '\\d+:\\d+', for example '80:85', and you can use comma separated list to match several ports or ranges.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-fw-sport-spec"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Rule type.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "in",
                "out",
                "forward",
                "group"
              ]
            }
          },
          {
            "name": "vnet",
            "in": "path",
            "description": "The SDN vnet object identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-sdn-vnet-id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/cluster/sdn/vnets/{vnet}/firewall/options": {
      "get": {
        "summary": "Get vnet firewall options.",
        "description": "Get vnet firewall options.",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "vnet",
            "in": "path",
            "description": "The SDN vnet object identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-sdn-vnet-id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "enable": {
                      "default": 0,
                      "description": "Enable/disable firewall rules.",
                      "optional": 1,
                      "type": "boolean"
                    },
                    "log_level_forward": {
                      "description": "Log level for forwarded traffic.",
                      "enum": [
                        "emerg",
                        "alert",
                        "crit",
                        "err",
                        "warning",
                        "notice",
                        "info",
                        "debug",
                        "nolog"
                      ],
                      "optional": 1,
                      "type": "string"
                    },
                    "policy_forward": {
                      "description": "Forward policy.",
                      "enum": [
                        "ACCEPT",
                        "DROP"
                      ],
                      "optional": 1,
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Set Firewall options.",
        "description": "Set Firewall options.",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "delete",
            "in": "query",
            "description": "A list of settings you want to delete.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-configid-list"
            }
          },
          {
            "name": "digest",
            "in": "query",
            "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 64
            }
          },
          {
            "name": "enable",
            "in": "query",
            "description": "Enable/disable firewall rules.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "log_level_forward",
            "in": "query",
            "description": "Log level for forwarded traffic.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "emerg",
                "alert",
                "crit",
                "err",
                "warning",
                "notice",
                "info",
                "debug",
                "nolog"
              ]
            }
          },
          {
            "name": "policy_forward",
            "in": "query",
            "description": "Forward policy.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "ACCEPT",
                "DROP"
              ]
            }
          },
          {
            "name": "vnet",
            "in": "path",
            "description": "The SDN vnet object identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-sdn-vnet-id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/cluster/sdn/vnets/{vnet}/subnets": {
      "get": {
        "summary": "SDN subnets index.",
        "description": "SDN subnets index.",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "pending",
            "in": "query",
            "description": "Display pending config.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "running",
            "in": "query",
            "description": "Display running config.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "vnet",
            "in": "path",
            "description": "The SDN vnet object identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-sdn-vnet-id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {},
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{subnet}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new sdn subnet object.",
        "description": "Create a new sdn subnet object.",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "dhcp-dns-server",
            "in": "query",
            "description": "IP address for the DNS server",
            "required": false,
            "schema": {
              "type": "string",
              "format": "ip"
            }
          },
          {
            "name": "dhcp-range",
            "in": "query",
            "description": "A list of DHCP ranges for this subnet",
            "required": false,
            "schema": {
              "type": "array"
            }
          },
          {
            "name": "dnszoneprefix",
            "in": "query",
            "description": "dns domain zone prefix  ex: 'adm' -> <hostname>.adm.mydomain.com",
            "required": false,
            "schema": {
              "type": "string",
              "format": "dns-name"
            }
          },
          {
            "name": "gateway",
            "in": "query",
            "description": "Subnet Gateway: Will be assign on vnet for layer3 zones",
            "required": false,
            "schema": {
              "type": "string",
              "format": "ip"
            }
          },
          {
            "name": "lock-token",
            "in": "query",
            "description": "the token for unlocking the global SDN configuration",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "snat",
            "in": "query",
            "description": "enable masquerade for this subnet if pve-firewall",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "subnet",
            "in": "query",
            "description": "The SDN subnet object identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-sdn-subnet-id"
            }
          },
          {
            "name": "type",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "subnet"
              ]
            }
          },
          {
            "name": "vnet",
            "in": "path",
            "description": "associated vnet",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/cluster/sdn/vnets/{vnet}/subnets/{subnet}": {
      "delete": {
        "summary": "Delete sdn subnet object configuration.",
        "description": "Delete sdn subnet object configuration.",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "lock-token",
            "in": "query",
            "description": "the token for unlocking the global SDN configuration",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subnet",
            "in": "path",
            "description": "The SDN subnet object identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-sdn-subnet-id"
            }
          },
          {
            "name": "vnet",
            "in": "path",
            "description": "The SDN vnet object identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-sdn-vnet-id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Read sdn subnet configuration.",
        "description": "Read sdn subnet configuration.",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "pending",
            "in": "query",
            "description": "Display pending config.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "running",
            "in": "query",
            "description": "Display running config.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "subnet",
            "in": "path",
            "description": "The SDN subnet object identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-sdn-subnet-id"
            }
          },
          {
            "name": "vnet",
            "in": "path",
            "description": "The SDN vnet object identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-sdn-vnet-id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update sdn subnet object configuration.",
        "description": "Update sdn subnet object configuration.",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "delete",
            "in": "query",
            "description": "A list of settings you want to delete.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-configid-list",
              "maxLength": 4096
            }
          },
          {
            "name": "dhcp-dns-server",
            "in": "query",
            "description": "IP address for the DNS server",
            "required": false,
            "schema": {
              "type": "string",
              "format": "ip"
            }
          },
          {
            "name": "dhcp-range",
            "in": "query",
            "description": "A list of DHCP ranges for this subnet",
            "required": false,
            "schema": {
              "type": "array"
            }
          },
          {
            "name": "digest",
            "in": "query",
            "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 64
            }
          },
          {
            "name": "dnszoneprefix",
            "in": "query",
            "description": "dns domain zone prefix  ex: 'adm' -> <hostname>.adm.mydomain.com",
            "required": false,
            "schema": {
              "type": "string",
              "format": "dns-name"
            }
          },
          {
            "name": "gateway",
            "in": "query",
            "description": "Subnet Gateway: Will be assign on vnet for layer3 zones",
            "required": false,
            "schema": {
              "type": "string",
              "format": "ip"
            }
          },
          {
            "name": "lock-token",
            "in": "query",
            "description": "the token for unlocking the global SDN configuration",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "snat",
            "in": "query",
            "description": "enable masquerade for this subnet if pve-firewall",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "subnet",
            "in": "path",
            "description": "The SDN subnet object identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-sdn-subnet-id"
            }
          },
          {
            "name": "vnet",
            "in": "path",
            "description": "associated vnet",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/cluster/sdn/vnets/{vnet}/ips": {
      "delete": {
        "summary": "Delete IP Mappings in a VNet",
        "description": "Delete IP Mappings in a VNet",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "ip",
            "in": "query",
            "description": "The IP address to delete",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ip"
            }
          },
          {
            "name": "mac",
            "in": "query",
            "description": "Unicast MAC address.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "mac-addr"
            }
          },
          {
            "name": "vnet",
            "in": "path",
            "description": "The SDN vnet object identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-sdn-vnet-id"
            }
          },
          {
            "name": "zone",
            "in": "query",
            "description": "The SDN zone object identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-sdn-zone-id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create IP Mapping in a VNet",
        "description": "Create IP Mapping in a VNet",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "ip",
            "in": "query",
            "description": "The IP address to associate with the given MAC address",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ip"
            }
          },
          {
            "name": "mac",
            "in": "query",
            "description": "Unicast MAC address.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "mac-addr"
            }
          },
          {
            "name": "vnet",
            "in": "path",
            "description": "The SDN vnet object identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-sdn-vnet-id"
            }
          },
          {
            "name": "zone",
            "in": "query",
            "description": "The SDN zone object identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-sdn-zone-id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update IP Mapping in a VNet",
        "description": "Update IP Mapping in a VNet",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "ip",
            "in": "query",
            "description": "The IP address to associate with the given MAC address",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ip"
            }
          },
          {
            "name": "mac",
            "in": "query",
            "description": "Unicast MAC address.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "mac-addr"
            }
          },
          {
            "name": "vmid",
            "in": "query",
            "description": "The (unique) ID of the VM.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          },
          {
            "name": "vnet",
            "in": "path",
            "description": "The SDN vnet object identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-sdn-vnet-id"
            }
          },
          {
            "name": "zone",
            "in": "query",
            "description": "The SDN zone object identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-sdn-zone-id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/cluster/sdn/zones": {
      "get": {
        "summary": "SDN zones index.",
        "description": "SDN zones index.",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "pending",
            "in": "query",
            "description": "Display pending config.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "running",
            "in": "query",
            "description": "Display running config.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Only list SDN zones of specific type",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "evpn",
                "faucet",
                "qinq",
                "simple",
                "vlan",
                "vxlan"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "advertise-subnets": {
                        "description": "Advertise IP prefixes (Type-5 routes) instead of MAC/IP pairs (Type-2 routes). EVPN zone only.",
                        "optional": 1,
                        "type": "boolean"
                      },
                      "bridge": {
                        "description": "the bridge for which VLANs should be managed. VLAN & QinQ zone only.",
                        "optional": 1,
                        "type": "string"
                      },
                      "bridge-disable-mac-learning": {
                        "description": "Disable auto mac learning. VLAN zone only.",
                        "optional": 1,
                        "type": "boolean"
                      },
                      "controller": {
                        "description": "ID of the controller for this zone. EVPN zone only.",
                        "optional": 1,
                        "type": "string"
                      },
                      "dhcp": {
                        "description": "Name of DHCP server backend for this zone.",
                        "enum": [
                          "dnsmasq"
                        ],
                        "optional": 1,
                        "type": "string"
                      },
                      "digest": {
                        "description": "Digest of the controller section.",
                        "optional": 1,
                        "type": "string"
                      },
                      "disable-arp-nd-suppression": {
                        "description": "Suppress IPv4 ARP && IPv6 Neighbour Discovery messages. EVPN zone only.",
                        "optional": 1,
                        "type": "boolean"
                      },
                      "dns": {
                        "description": "ID of the DNS server for this zone.",
                        "optional": 1,
                        "type": "string"
                      },
                      "dnszone": {
                        "description": "Domain name for this zone.",
                        "optional": 1,
                        "type": "string"
                      },
                      "exitnodes": {
                        "description": "List of PVE Nodes that should act as exit node for this zone. EVPN zone only.",
                        "format": "pve-node-list",
                        "optional": 1,
                        "type": "string"
                      },
                      "exitnodes-local-routing": {
                        "description": "Create routes on the exit nodes, so they can connect to EVPN guests. EVPN zone only.",
                        "optional": 1,
                        "type": "boolean"
                      },
                      "exitnodes-primary": {
                        "description": "Force traffic through this exitnode first. EVPN zone only.",
                        "format": "pve-node",
                        "optional": 1,
                        "type": "string"
                      },
                      "ipam": {
                        "description": "ID of the IPAM for this zone.",
                        "optional": 1,
                        "type": "string"
                      },
                      "mac": {
                        "description": "MAC address of the anycast router for this zone.",
                        "optional": 1,
                        "type": "string"
                      },
                      "mtu": {
                        "description": "MTU of the zone, will be used for the created VNet bridges.",
                        "optional": 1,
                        "type": "integer"
                      },
                      "nodes": {
                        "description": "Nodes where this zone should be created.",
                        "optional": 1,
                        "type": "string"
                      },
                      "peers": {
                        "description": "Comma-separated list of peers, that are part of the VXLAN zone. Usually the IPs of the nodes. VXLAN zone only.",
                        "format": "ip-list",
                        "optional": 1,
                        "type": "string"
                      },
                      "pending": {
                        "description": "Changes that have not yet been applied to the running configuration.",
                        "optional": 1,
                        "properties": {
                          "advertise-subnets": {
                            "description": "Advertise IP prefixes (Type-5 routes) instead of MAC/IP pairs (Type-2 routes). EVPN zone only.",
                            "optional": 1,
                            "type": "boolean"
                          },
                          "bridge": {
                            "description": "the bridge for which VLANs should be managed. VLAN & QinQ zone only.",
                            "optional": 1,
                            "type": "string"
                          },
                          "bridge-disable-mac-learning": {
                            "description": "Disable auto mac learning. VLAN zone only.",
                            "optional": 1,
                            "type": "boolean"
                          },
                          "controller": {
                            "description": "ID of the controller for this zone. EVPN zone only.",
                            "optional": 1,
                            "type": "string"
                          },
                          "dhcp": {
                            "description": "Name of DHCP server backend for this zone.",
                            "enum": [
                              "dnsmasq"
                            ],
                            "optional": 1,
                            "type": "string"
                          },
                          "disable-arp-nd-suppression": {
                            "description": "Suppress IPv4 ARP && IPv6 Neighbour Discovery messages. EVPN zone only.",
                            "optional": 1,
                            "type": "boolean"
                          },
                          "dns": {
                            "description": "ID of the DNS server for this zone.",
                            "optional": 1,
                            "type": "string"
                          },
                          "dnszone": {
                            "description": "Domain name for this zone.",
                            "optional": 1,
                            "type": "string"
                          },
                          "exitnodes": {
                            "description": "List of PVE Nodes that should act as exit node for this zone. EVPN zone only.",
                            "format": "pve-node-list",
                            "optional": 1,
                            "type": "string"
                          },
                          "exitnodes-local-routing": {
                            "description": "Create routes on the exit nodes, so they can connect to EVPN guests. EVPN zone only.",
                            "optional": 1,
                            "type": "boolean"
                          },
                          "exitnodes-primary": {
                            "description": "Force traffic through this exitnode first. EVPN zone only.",
                            "format": "pve-node",
                            "optional": 1,
                            "type": "string"
                          },
                          "ipam": {
                            "description": "ID of the IPAM for this zone.",
                            "optional": 1,
                            "type": "string"
                          },
                          "mac": {
                            "description": "MAC address of the anycast router for this zone.",
                            "optional": 1,
                            "type": "string"
                          },
                          "mtu": {
                            "description": "MTU of the zone, will be used for the created VNet bridges.",
                            "optional": 1,
                            "type": "integer"
                          },
                          "nodes": {
                            "description": "Nodes where this zone should be created.",
                            "optional": 1,
                            "type": "string"
                          },
                          "peers": {
                            "description": "Comma-separated list of peers, that are part of the VXLAN zone. Usually the IPs of the nodes. VXLAN zone only.",
                            "format": "ip-list",
                            "optional": 1,
                            "type": "string"
                          },
                          "reversedns": {
                            "description": "ID of the reverse DNS server for this zone.",
                            "optional": 1,
                            "type": "string"
                          },
                          "rt-import": {
                            "description": "Route-Targets that should be imported into the VRF of this zone via BGP. EVPN zone only.",
                            "format": "pve-sdn-bgp-rt-list",
                            "optional": 1,
                            "type": "string"
                          },
                          "tag": {
                            "description": "Service-VLAN Tag (outer VLAN). QinQ zone only",
                            "minimum": 0,
                            "optional": 1,
                            "type": "integer"
                          },
                          "vlan-protocol": {
                            "default": "802.1q",
                            "description": "VLAN protocol for the creation of the QinQ zone. QinQ zone only.",
                            "enum": [
                              "802.1q",
                              "802.1ad"
                            ],
                            "optional": 1,
                            "type": "string"
                          },
                          "vrf-vxlan": {
                            "description": "VNI for the zone VRF. EVPN zone only.",
                            "maximum": 16777215,
                            "minimum": 1,
                            "optional": 1,
                            "type": "integer"
                          },
                          "vxlan-port": {
                            "default": 4789,
                            "description": "UDP port that should be used for the VXLAN tunnel (default 4789). VXLAN zone only.",
                            "maximum": 65536,
                            "minimum": 1,
                            "optional": 1,
                            "type": "integer"
                          }
                        },
                        "type": "object"
                      },
                      "reversedns": {
                        "description": "ID of the reverse DNS server for this zone.",
                        "optional": 1,
                        "type": "string"
                      },
                      "rt-import": {
                        "description": "Route-Targets that should be imported into the VRF of this zone via BGP. EVPN zone only.",
                        "format": "pve-sdn-bgp-rt-list",
                        "optional": 1,
                        "type": "string"
                      },
                      "state": {
                        "description": "State of the SDN configuration object.",
                        "enum": [
                          "new",
                          "changed",
                          "deleted"
                        ],
                        "optional": 1,
                        "type": "string"
                      },
                      "tag": {
                        "description": "Service-VLAN Tag (outer VLAN). QinQ zone only",
                        "minimum": 0,
                        "optional": 1,
                        "type": "integer"
                      },
                      "type": {
                        "description": "Type of the zone.",
                        "enum": [
                          "evpn",
                          "faucet",
                          "qinq",
                          "simple",
                          "vlan",
                          "vxlan"
                        ],
                        "type": "string"
                      },
                      "vlan-protocol": {
                        "default": "802.1q",
                        "description": "VLAN protocol for the creation of the QinQ zone. QinQ zone only.",
                        "enum": [
                          "802.1q",
                          "802.1ad"
                        ],
                        "optional": 1,
                        "type": "string"
                      },
                      "vrf-vxlan": {
                        "description": "VNI for the zone VRF. EVPN zone only.",
                        "maximum": 16777215,
                        "minimum": 1,
                        "optional": 1,
                        "type": "integer"
                      },
                      "vxlan-port": {
                        "default": 4789,
                        "description": "UDP port that should be used for the VXLAN tunnel (default 4789). VXLAN zone only.",
                        "maximum": 65536,
                        "minimum": 1,
                        "optional": 1,
                        "type": "integer"
                      },
                      "zone": {
                        "description": "Name of the zone.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{zone}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new sdn zone object.",
        "description": "Create a new sdn zone object.",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "advertise-subnets",
            "in": "query",
            "description": "Advertise IP prefixes (Type-5 routes) instead of MAC/IP pairs (Type-2 routes).",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "bridge",
            "in": "query",
            "description": "The bridge for which VLANs should be managed.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "bridge-disable-mac-learning",
            "in": "query",
            "description": "Disable auto mac learning.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "controller",
            "in": "query",
            "description": "Controller for this zone.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dhcp",
            "in": "query",
            "description": "Type of the DHCP backend for this zone",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "dnsmasq"
              ]
            }
          },
          {
            "name": "disable-arp-nd-suppression",
            "in": "query",
            "description": "Suppress IPv4 ARP && IPv6 Neighbour Discovery messages.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "dns",
            "in": "query",
            "description": "dns api server",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dnszone",
            "in": "query",
            "description": "dns domain zone  ex: mydomain.com",
            "required": false,
            "schema": {
              "type": "string",
              "format": "dns-name"
            }
          },
          {
            "name": "dp-id",
            "in": "query",
            "description": "Faucet dataplane id",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "exitnodes",
            "in": "query",
            "description": "List of cluster node names.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-node-list"
            }
          },
          {
            "name": "exitnodes-local-routing",
            "in": "query",
            "description": "Allow exitnodes to connect to EVPN guests.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "exitnodes-primary",
            "in": "query",
            "description": "Force traffic through this exitnode first.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "fabric",
            "in": "query",
            "description": "SDN fabric to use as underlay for this VXLAN zone.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-sdn-fabric-id"
            }
          },
          {
            "name": "ipam",
            "in": "query",
            "description": "use a specific ipam",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lock-token",
            "in": "query",
            "description": "the token for unlocking the global SDN configuration",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "mac",
            "in": "query",
            "description": "Anycast logical router mac address.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "mac-addr"
            }
          },
          {
            "name": "mtu",
            "in": "query",
            "description": "MTU of the zone, will be used for the created VNet bridges.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "nodes",
            "in": "query",
            "description": "List of cluster node names.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-node-list"
            }
          },
          {
            "name": "peers",
            "in": "query",
            "description": "Comma-separated list of peers, that are part of the VXLAN zone. Usually the IPs of the nodes.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "ip-list"
            }
          },
          {
            "name": "reversedns",
            "in": "query",
            "description": "reverse dns api server",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rt-import",
            "in": "query",
            "description": "List of Route Targets that should be imported into the VRF of the zone.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-sdn-bgp-rt-list"
            }
          },
          {
            "name": "tag",
            "in": "query",
            "description": "Service-VLAN Tag (outer VLAN)",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Plugin type.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-configid",
              "enum": [
                "evpn",
                "faucet",
                "qinq",
                "simple",
                "vlan",
                "vxlan"
              ]
            }
          },
          {
            "name": "vlan-protocol",
            "in": "query",
            "description": "Which VLAN protocol should be used for the creation of the QinQ zone.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "802.1q",
              "enum": [
                "802.1q",
                "802.1ad"
              ]
            }
          },
          {
            "name": "vrf-vxlan",
            "in": "query",
            "description": "VNI for the zone VRF.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 16777215
            }
          },
          {
            "name": "vxlan-port",
            "in": "query",
            "description": "UDP port that should be used for the VXLAN tunnel (default 4789).",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 4789,
              "minimum": 1,
              "maximum": 65536
            }
          },
          {
            "name": "zone",
            "in": "query",
            "description": "The SDN zone object identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-sdn-zone-id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/cluster/sdn/zones/{zone}": {
      "delete": {
        "summary": "Delete sdn zone object configuration.",
        "description": "Delete sdn zone object configuration.",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "lock-token",
            "in": "query",
            "description": "the token for unlocking the global SDN configuration",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "zone",
            "in": "path",
            "description": "The SDN zone object identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-sdn-zone-id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Read sdn zone configuration.",
        "description": "Read sdn zone configuration.",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "pending",
            "in": "query",
            "description": "Display pending config.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "running",
            "in": "query",
            "description": "Display running config.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "zone",
            "in": "path",
            "description": "The SDN zone object identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-sdn-zone-id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "advertise-subnets": {
                      "description": "Advertise IP prefixes (Type-5 routes) instead of MAC/IP pairs (Type-2 routes). EVPN zone only.",
                      "optional": 1,
                      "type": "boolean"
                    },
                    "bridge": {
                      "description": "the bridge for which VLANs should be managed. VLAN & QinQ zone only.",
                      "optional": 1,
                      "type": "string"
                    },
                    "bridge-disable-mac-learning": {
                      "description": "Disable auto mac learning. VLAN zone only.",
                      "optional": 1,
                      "type": "boolean"
                    },
                    "controller": {
                      "description": "ID of the controller for this zone. EVPN zone only.",
                      "optional": 1,
                      "type": "string"
                    },
                    "dhcp": {
                      "description": "Name of DHCP server backend for this zone.",
                      "enum": [
                        "dnsmasq"
                      ],
                      "optional": 1,
                      "type": "string"
                    },
                    "digest": {
                      "description": "Digest of the controller section.",
                      "optional": 1,
                      "type": "string"
                    },
                    "disable-arp-nd-suppression": {
                      "description": "Suppress IPv4 ARP && IPv6 Neighbour Discovery messages. EVPN zone only.",
                      "optional": 1,
                      "type": "boolean"
                    },
                    "dns": {
                      "description": "ID of the DNS server for this zone.",
                      "optional": 1,
                      "type": "string"
                    },
                    "dnszone": {
                      "description": "Domain name for this zone.",
                      "optional": 1,
                      "type": "string"
                    },
                    "exitnodes": {
                      "description": "List of PVE Nodes that should act as exit node for this zone. EVPN zone only.",
                      "format": "pve-node-list",
                      "optional": 1,
                      "type": "string"
                    },
                    "exitnodes-local-routing": {
                      "description": "Create routes on the exit nodes, so they can connect to EVPN guests. EVPN zone only.",
                      "optional": 1,
                      "type": "boolean"
                    },
                    "exitnodes-primary": {
                      "description": "Force traffic through this exitnode first. EVPN zone only.",
                      "format": "pve-node",
                      "optional": 1,
                      "type": "string"
                    },
                    "ipam": {
                      "description": "ID of the IPAM for this zone.",
                      "optional": 1,
                      "type": "string"
                    },
                    "mac": {
                      "description": "MAC address of the anycast router for this zone.",
                      "optional": 1,
                      "type": "string"
                    },
                    "mtu": {
                      "description": "MTU of the zone, will be used for the created VNet bridges.",
                      "optional": 1,
                      "type": "integer"
                    },
                    "nodes": {
                      "description": "Nodes where this zone should be created.",
                      "optional": 1,
                      "type": "string"
                    },
                    "peers": {
                      "description": "Comma-separated list of peers, that are part of the VXLAN zone. Usually the IPs of the nodes. VXLAN zone only.",
                      "format": "ip-list",
                      "optional": 1,
                      "type": "string"
                    },
                    "pending": {
                      "description": "Changes that have not yet been applied to the running configuration.",
                      "optional": 1,
                      "properties": {
                        "advertise-subnets": {
                          "description": "Advertise IP prefixes (Type-5 routes) instead of MAC/IP pairs (Type-2 routes). EVPN zone only.",
                          "optional": 1,
                          "type": "boolean"
                        },
                        "bridge": {
                          "description": "the bridge for which VLANs should be managed. VLAN & QinQ zone only.",
                          "optional": 1,
                          "type": "string"
                        },
                        "bridge-disable-mac-learning": {
                          "description": "Disable auto mac learning. VLAN zone only.",
                          "optional": 1,
                          "type": "boolean"
                        },
                        "controller": {
                          "description": "ID of the controller for this zone. EVPN zone only.",
                          "optional": 1,
                          "type": "string"
                        },
                        "dhcp": {
                          "description": "Name of DHCP server backend for this zone.",
                          "enum": [
                            "dnsmasq"
                          ],
                          "optional": 1,
                          "type": "string"
                        },
                        "disable-arp-nd-suppression": {
                          "description": "Suppress IPv4 ARP && IPv6 Neighbour Discovery messages. EVPN zone only.",
                          "optional": 1,
                          "type": "boolean"
                        },
                        "dns": {
                          "description": "ID of the DNS server for this zone.",
                          "optional": 1,
                          "type": "string"
                        },
                        "dnszone": {
                          "description": "Domain name for this zone.",
                          "optional": 1,
                          "type": "string"
                        },
                        "exitnodes": {
                          "description": "List of PVE Nodes that should act as exit node for this zone. EVPN zone only.",
                          "format": "pve-node-list",
                          "optional": 1,
                          "type": "string"
                        },
                        "exitnodes-local-routing": {
                          "description": "Create routes on the exit nodes, so they can connect to EVPN guests. EVPN zone only.",
                          "optional": 1,
                          "type": "boolean"
                        },
                        "exitnodes-primary": {
                          "description": "Force traffic through this exitnode first. EVPN zone only.",
                          "format": "pve-node",
                          "optional": 1,
                          "type": "string"
                        },
                        "ipam": {
                          "description": "ID of the IPAM for this zone.",
                          "optional": 1,
                          "type": "string"
                        },
                        "mac": {
                          "description": "MAC address of the anycast router for this zone.",
                          "optional": 1,
                          "type": "string"
                        },
                        "mtu": {
                          "description": "MTU of the zone, will be used for the created VNet bridges.",
                          "optional": 1,
                          "type": "integer"
                        },
                        "nodes": {
                          "description": "Nodes where this zone should be created.",
                          "optional": 1,
                          "type": "string"
                        },
                        "peers": {
                          "description": "Comma-separated list of peers, that are part of the VXLAN zone. Usually the IPs of the nodes. VXLAN zone only.",
                          "format": "ip-list",
                          "optional": 1,
                          "type": "string"
                        },
                        "reversedns": {
                          "description": "ID of the reverse DNS server for this zone.",
                          "optional": 1,
                          "type": "string"
                        },
                        "rt-import": {
                          "description": "Route-Targets that should be imported into the VRF of this zone via BGP. EVPN zone only.",
                          "format": "pve-sdn-bgp-rt-list",
                          "optional": 1,
                          "type": "string"
                        },
                        "tag": {
                          "description": "Service-VLAN Tag (outer VLAN). QinQ zone only",
                          "minimum": 0,
                          "optional": 1,
                          "type": "integer"
                        },
                        "vlan-protocol": {
                          "default": "802.1q",
                          "description": "VLAN protocol for the creation of the QinQ zone. QinQ zone only.",
                          "enum": [
                            "802.1q",
                            "802.1ad"
                          ],
                          "optional": 1,
                          "type": "string"
                        },
                        "vrf-vxlan": {
                          "description": "VNI for the zone VRF. EVPN zone only.",
                          "maximum": 16777215,
                          "minimum": 1,
                          "optional": 1,
                          "type": "integer"
                        },
                        "vxlan-port": {
                          "default": 4789,
                          "description": "UDP port that should be used for the VXLAN tunnel (default 4789). VXLAN zone only.",
                          "maximum": 65536,
                          "minimum": 1,
                          "optional": 1,
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    },
                    "reversedns": {
                      "description": "ID of the reverse DNS server for this zone.",
                      "optional": 1,
                      "type": "string"
                    },
                    "rt-import": {
                      "description": "Route-Targets that should be imported into the VRF of this zone via BGP. EVPN zone only.",
                      "format": "pve-sdn-bgp-rt-list",
                      "optional": 1,
                      "type": "string"
                    },
                    "state": {
                      "description": "State of the SDN configuration object.",
                      "enum": [
                        "new",
                        "changed",
                        "deleted"
                      ],
                      "optional": 1,
                      "type": "string"
                    },
                    "tag": {
                      "description": "Service-VLAN Tag (outer VLAN). QinQ zone only",
                      "minimum": 0,
                      "optional": 1,
                      "type": "integer"
                    },
                    "type": {
                      "description": "Type of the zone.",
                      "enum": [
                        "evpn",
                        "faucet",
                        "qinq",
                        "simple",
                        "vlan",
                        "vxlan"
                      ],
                      "type": "string"
                    },
                    "vlan-protocol": {
                      "default": "802.1q",
                      "description": "VLAN protocol for the creation of the QinQ zone. QinQ zone only.",
                      "enum": [
                        "802.1q",
                        "802.1ad"
                      ],
                      "optional": 1,
                      "type": "string"
                    },
                    "vrf-vxlan": {
                      "description": "VNI for the zone VRF. EVPN zone only.",
                      "maximum": 16777215,
                      "minimum": 1,
                      "optional": 1,
                      "type": "integer"
                    },
                    "vxlan-port": {
                      "default": 4789,
                      "description": "UDP port that should be used for the VXLAN tunnel (default 4789). VXLAN zone only.",
                      "maximum": 65536,
                      "minimum": 1,
                      "optional": 1,
                      "type": "integer"
                    },
                    "zone": {
                      "description": "Name of the zone.",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update sdn zone object configuration.",
        "description": "Update sdn zone object configuration.",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "advertise-subnets",
            "in": "query",
            "description": "Advertise IP prefixes (Type-5 routes) instead of MAC/IP pairs (Type-2 routes).",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "bridge",
            "in": "query",
            "description": "The bridge for which VLANs should be managed.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "bridge-disable-mac-learning",
            "in": "query",
            "description": "Disable auto mac learning.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "controller",
            "in": "query",
            "description": "Controller for this zone.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "delete",
            "in": "query",
            "description": "A list of settings you want to delete.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-configid-list",
              "maxLength": 4096
            }
          },
          {
            "name": "dhcp",
            "in": "query",
            "description": "Type of the DHCP backend for this zone",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "dnsmasq"
              ]
            }
          },
          {
            "name": "digest",
            "in": "query",
            "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 64
            }
          },
          {
            "name": "disable-arp-nd-suppression",
            "in": "query",
            "description": "Suppress IPv4 ARP && IPv6 Neighbour Discovery messages.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "dns",
            "in": "query",
            "description": "dns api server",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dnszone",
            "in": "query",
            "description": "dns domain zone  ex: mydomain.com",
            "required": false,
            "schema": {
              "type": "string",
              "format": "dns-name"
            }
          },
          {
            "name": "dp-id",
            "in": "query",
            "description": "Faucet dataplane id",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "exitnodes",
            "in": "query",
            "description": "List of cluster node names.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-node-list"
            }
          },
          {
            "name": "exitnodes-local-routing",
            "in": "query",
            "description": "Allow exitnodes to connect to EVPN guests.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "exitnodes-primary",
            "in": "query",
            "description": "Force traffic through this exitnode first.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "fabric",
            "in": "query",
            "description": "SDN fabric to use as underlay for this VXLAN zone.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-sdn-fabric-id"
            }
          },
          {
            "name": "ipam",
            "in": "query",
            "description": "use a specific ipam",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lock-token",
            "in": "query",
            "description": "the token for unlocking the global SDN configuration",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "mac",
            "in": "query",
            "description": "Anycast logical router mac address.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "mac-addr"
            }
          },
          {
            "name": "mtu",
            "in": "query",
            "description": "MTU of the zone, will be used for the created VNet bridges.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "nodes",
            "in": "query",
            "description": "List of cluster node names.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-node-list"
            }
          },
          {
            "name": "peers",
            "in": "query",
            "description": "Comma-separated list of peers, that are part of the VXLAN zone. Usually the IPs of the nodes.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "ip-list"
            }
          },
          {
            "name": "reversedns",
            "in": "query",
            "description": "reverse dns api server",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rt-import",
            "in": "query",
            "description": "List of Route Targets that should be imported into the VRF of the zone.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-sdn-bgp-rt-list"
            }
          },
          {
            "name": "tag",
            "in": "query",
            "description": "Service-VLAN Tag (outer VLAN)",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "name": "vlan-protocol",
            "in": "query",
            "description": "Which VLAN protocol should be used for the creation of the QinQ zone.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "802.1q",
              "enum": [
                "802.1q",
                "802.1ad"
              ]
            }
          },
          {
            "name": "vrf-vxlan",
            "in": "query",
            "description": "VNI for the zone VRF.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 16777215
            }
          },
          {
            "name": "vxlan-port",
            "in": "query",
            "description": "UDP port that should be used for the VXLAN tunnel (default 4789).",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 4789,
              "minimum": 1,
              "maximum": 65536
            }
          },
          {
            "name": "zone",
            "in": "path",
            "description": "The SDN zone object identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-sdn-zone-id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/cluster/sdn/controllers": {
      "get": {
        "summary": "SDN controllers index.",
        "description": "SDN controllers index.",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "pending",
            "in": "query",
            "description": "Display pending config.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "running",
            "in": "query",
            "description": "Display running config.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Only list sdn controllers of specific type",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "bgp",
                "evpn",
                "faucet",
                "isis"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "asn": {
                        "description": "The local ASN of the controller. BGP & EVPN only.",
                        "maximum": 4294967295,
                        "minimum": 0,
                        "optional": 1,
                        "type": "integer"
                      },
                      "bgp-multipath-as-relax": {
                        "description": "Consider different AS paths of equal length for multipath computation. BGP only.",
                        "optional": 1,
                        "type": "boolean"
                      },
                      "controller": {
                        "description": "Name of the controller.",
                        "type": "string"
                      },
                      "digest": {
                        "description": "Digest of the controller section.",
                        "optional": 1,
                        "type": "string"
                      },
                      "ebgp": {
                        "description": "Enable eBGP (remote-as external). BGP only.",
                        "optional": 1,
                        "type": "boolean"
                      },
                      "ebgp-multihop": {
                        "description": "Set maximum amount of hops for eBGP peers. Needs ebgp set to 1. BGP only.",
                        "optional": 1,
                        "type": "integer"
                      },
                      "isis-domain": {
                        "description": "Name of the IS-IS domain. IS-IS only.",
                        "optional": 1,
                        "type": "string"
                      },
                      "isis-ifaces": {
                        "description": "Comma-separated list of interfaces where IS-IS should be active. IS-IS only.",
                        "format": "pve-iface-list",
                        "optional": 1,
                        "type": "string"
                      },
                      "isis-net": {
                        "description": "Network Entity title for this node in the IS-IS network. IS-IS only.",
                        "format": "pve-sdn-isis-net",
                        "optional": 1,
                        "type": "string"
                      },
                      "loopback": {
                        "description": "Name of the loopback/dummy interface that provides the Router-IP. BGP only.",
                        "optional": 1,
                        "type": "string"
                      },
                      "node": {
                        "description": "Node(s) where this controller is active.",
                        "optional": 1,
                        "type": "string"
                      },
                      "peers": {
                        "description": "Comma-separated list of the peers IP addresses.",
                        "optional": 1,
                        "type": "string"
                      },
                      "pending": {
                        "description": "Changes that have not yet been applied to the running configuration.",
                        "optional": 1,
                        "properties": {
                          "asn": {
                            "description": "The local ASN of the controller. BGP & EVPN only.",
                            "maximum": 4294967295,
                            "minimum": 0,
                            "optional": 1,
                            "type": "integer"
                          },
                          "bgp-multipath-as-relax": {
                            "description": "Consider different AS paths of equal length for multipath computation. BGP only.",
                            "optional": 1,
                            "type": "boolean"
                          },
                          "ebgp": {
                            "description": "Enable eBGP (remote-as external). BGP only.",
                            "optional": 1,
                            "type": "boolean"
                          },
                          "ebgp-multihop": {
                            "description": "Set maximum amount of hops for eBGP peers. Needs ebgp set to 1. BGP only.",
                            "optional": 1,
                            "type": "integer"
                          },
                          "isis-domain": {
                            "description": "Name of the IS-IS domain. IS-IS only.",
                            "optional": 1,
                            "type": "string"
                          },
                          "isis-ifaces": {
                            "description": "Comma-separated list of interfaces where IS-IS should be active. IS-IS only.",
                            "format": "pve-iface-list",
                            "optional": 1,
                            "type": "string"
                          },
                          "isis-net": {
                            "description": "Network Entity title for this node in the IS-IS network. IS-IS only.",
                            "format": "pve-sdn-isis-net",
                            "optional": 1,
                            "type": "string"
                          },
                          "loopback": {
                            "description": "Name of the loopback/dummy interface that provides the Router-IP. BGP only.",
                            "optional": 1,
                            "type": "string"
                          },
                          "node": {
                            "description": "Node(s) where this controller is active.",
                            "optional": 1,
                            "type": "string"
                          },
                          "peers": {
                            "description": "Comma-separated list of the peers IP addresses.",
                            "optional": 1,
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "state": {
                        "description": "State of the SDN configuration object.",
                        "enum": [
                          "new",
                          "changed",
                          "deleted"
                        ],
                        "optional": 1,
                        "type": "string"
                      },
                      "type": {
                        "description": "Type of the controller",
                        "enum": [
                          "bgp",
                          "evpn",
                          "faucet",
                          "isis"
                        ],
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{controller}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new sdn controller object.",
        "description": "Create a new sdn controller object.",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "asn",
            "in": "query",
            "description": "autonomous system number",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "maximum": 4294967295
            }
          },
          {
            "name": "bgp-multipath-as-path-relax",
            "in": "query",
            "description": "Consider different AS paths of equal length for multipath computation.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "controller",
            "in": "query",
            "description": "The SDN controller object identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-sdn-controller-id"
            }
          },
          {
            "name": "ebgp",
            "in": "query",
            "description": "Enable eBGP (remote-as external).",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "ebgp-multihop",
            "in": "query",
            "description": "Set maximum amount of hops for eBGP peers.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "fabric",
            "in": "query",
            "description": "SDN fabric to use as underlay for this EVPN controller.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-sdn-fabric-id"
            }
          },
          {
            "name": "isis-domain",
            "in": "query",
            "description": "Name of the IS-IS domain.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isis-ifaces",
            "in": "query",
            "description": "Comma-separated list of interfaces where IS-IS should be active.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-iface-list"
            }
          },
          {
            "name": "isis-net",
            "in": "query",
            "description": "Network Entity title for this node in the IS-IS network.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-sdn-isis-net"
            }
          },
          {
            "name": "lock-token",
            "in": "query",
            "description": "the token for unlocking the global SDN configuration",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "loopback",
            "in": "query",
            "description": "Name of the loopback/dummy interface that provides the Router-IP.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "node",
            "in": "query",
            "description": "The cluster node name.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "peers",
            "in": "query",
            "description": "peers address list.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "ip-list"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Plugin type.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-configid",
              "enum": [
                "bgp",
                "evpn",
                "faucet",
                "isis"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/cluster/sdn/controllers/{controller}": {
      "delete": {
        "summary": "Delete sdn controller object configuration.",
        "description": "Delete sdn controller object configuration.",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "controller",
            "in": "path",
            "description": "The SDN controller object identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-sdn-controller-id"
            }
          },
          {
            "name": "lock-token",
            "in": "query",
            "description": "the token for unlocking the global SDN configuration",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Read sdn controller configuration.",
        "description": "Read sdn controller configuration.",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "controller",
            "in": "path",
            "description": "The SDN controller object identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-sdn-controller-id"
            }
          },
          {
            "name": "pending",
            "in": "query",
            "description": "Display pending config.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "running",
            "in": "query",
            "description": "Display running config.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "asn": {
                      "description": "The local ASN of the controller. BGP & EVPN only.",
                      "maximum": 4294967295,
                      "minimum": 0,
                      "optional": 1,
                      "type": "integer"
                    },
                    "bgp-multipath-as-relax": {
                      "description": "Consider different AS paths of equal length for multipath computation. BGP only.",
                      "optional": 1,
                      "type": "boolean"
                    },
                    "controller": {
                      "description": "Name of the controller.",
                      "type": "string"
                    },
                    "digest": {
                      "description": "Digest of the controller section.",
                      "optional": 1,
                      "type": "string"
                    },
                    "ebgp": {
                      "description": "Enable eBGP (remote-as external). BGP only.",
                      "optional": 1,
                      "type": "boolean"
                    },
                    "ebgp-multihop": {
                      "description": "Set maximum amount of hops for eBGP peers. Needs ebgp set to 1. BGP only.",
                      "optional": 1,
                      "type": "integer"
                    },
                    "isis-domain": {
                      "description": "Name of the IS-IS domain. IS-IS only.",
                      "optional": 1,
                      "type": "string"
                    },
                    "isis-ifaces": {
                      "description": "Comma-separated list of interfaces where IS-IS should be active. IS-IS only.",
                      "format": "pve-iface-list",
                      "optional": 1,
                      "type": "string"
                    },
                    "isis-net": {
                      "description": "Network Entity title for this node in the IS-IS network. IS-IS only.",
                      "format": "pve-sdn-isis-net",
                      "optional": 1,
                      "type": "string"
                    },
                    "loopback": {
                      "description": "Name of the loopback/dummy interface that provides the Router-IP. BGP only.",
                      "optional": 1,
                      "type": "string"
                    },
                    "node": {
                      "description": "Node(s) where this controller is active.",
                      "optional": 1,
                      "type": "string"
                    },
                    "peers": {
                      "description": "Comma-separated list of the peers IP addresses.",
                      "optional": 1,
                      "type": "string"
                    },
                    "pending": {
                      "description": "Changes that have not yet been applied to the running configuration.",
                      "optional": 1,
                      "properties": {
                        "asn": {
                          "description": "The local ASN of the controller. BGP & EVPN only.",
                          "maximum": 4294967295,
                          "minimum": 0,
                          "optional": 1,
                          "type": "integer"
                        },
                        "bgp-multipath-as-relax": {
                          "description": "Consider different AS paths of equal length for multipath computation. BGP only.",
                          "optional": 1,
                          "type": "boolean"
                        },
                        "ebgp": {
                          "description": "Enable eBGP (remote-as external). BGP only.",
                          "optional": 1,
                          "type": "boolean"
                        },
                        "ebgp-multihop": {
                          "description": "Set maximum amount of hops for eBGP peers. Needs ebgp set to 1. BGP only.",
                          "optional": 1,
                          "type": "integer"
                        },
                        "isis-domain": {
                          "description": "Name of the IS-IS domain. IS-IS only.",
                          "optional": 1,
                          "type": "string"
                        },
                        "isis-ifaces": {
                          "description": "Comma-separated list of interfaces where IS-IS should be active. IS-IS only.",
                          "format": "pve-iface-list",
                          "optional": 1,
                          "type": "string"
                        },
                        "isis-net": {
                          "description": "Network Entity title for this node in the IS-IS network. IS-IS only.",
                          "format": "pve-sdn-isis-net",
                          "optional": 1,
                          "type": "string"
                        },
                        "loopback": {
                          "description": "Name of the loopback/dummy interface that provides the Router-IP. BGP only.",
                          "optional": 1,
                          "type": "string"
                        },
                        "node": {
                          "description": "Node(s) where this controller is active.",
                          "optional": 1,
                          "type": "string"
                        },
                        "peers": {
                          "description": "Comma-separated list of the peers IP addresses.",
                          "optional": 1,
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "state": {
                      "description": "State of the SDN configuration object.",
                      "enum": [
                        "new",
                        "changed",
                        "deleted"
                      ],
                      "optional": 1,
                      "type": "string"
                    },
                    "type": {
                      "description": "Type of the controller",
                      "enum": [
                        "bgp",
                        "evpn",
                        "faucet",
                        "isis"
                      ],
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update sdn controller object configuration.",
        "description": "Update sdn controller object configuration.",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "asn",
            "in": "query",
            "description": "autonomous system number",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "maximum": 4294967295
            }
          },
          {
            "name": "bgp-multipath-as-path-relax",
            "in": "query",
            "description": "Consider different AS paths of equal length for multipath computation.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "controller",
            "in": "path",
            "description": "The SDN controller object identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-sdn-controller-id"
            }
          },
          {
            "name": "delete",
            "in": "query",
            "description": "A list of settings you want to delete.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-configid-list",
              "maxLength": 4096
            }
          },
          {
            "name": "digest",
            "in": "query",
            "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 64
            }
          },
          {
            "name": "ebgp",
            "in": "query",
            "description": "Enable eBGP (remote-as external).",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "ebgp-multihop",
            "in": "query",
            "description": "Set maximum amount of hops for eBGP peers.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "fabric",
            "in": "query",
            "description": "SDN fabric to use as underlay for this EVPN controller.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-sdn-fabric-id"
            }
          },
          {
            "name": "isis-domain",
            "in": "query",
            "description": "Name of the IS-IS domain.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isis-ifaces",
            "in": "query",
            "description": "Comma-separated list of interfaces where IS-IS should be active.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-iface-list"
            }
          },
          {
            "name": "isis-net",
            "in": "query",
            "description": "Network Entity title for this node in the IS-IS network.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-sdn-isis-net"
            }
          },
          {
            "name": "lock-token",
            "in": "query",
            "description": "the token for unlocking the global SDN configuration",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "loopback",
            "in": "query",
            "description": "Name of the loopback/dummy interface that provides the Router-IP.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "node",
            "in": "query",
            "description": "The cluster node name.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "peers",
            "in": "query",
            "description": "peers address list.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "ip-list"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/cluster/sdn/ipams": {
      "get": {
        "summary": "SDN ipams index.",
        "description": "SDN ipams index.",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "description": "Only list sdn ipams of specific type",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "netbox",
                "phpipam",
                "pve"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "ipam": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{ipam}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new sdn ipam object.",
        "description": "Create a new sdn ipam object.",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "fingerprint",
            "in": "query",
            "description": "Certificate SHA 256 fingerprint.",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "([A-Fa-f0-9]{2}:){31}[A-Fa-f0-9]{2}"
            }
          },
          {
            "name": "ipam",
            "in": "query",
            "description": "The SDN ipam object identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-sdn-ipam-id"
            }
          },
          {
            "name": "lock-token",
            "in": "query",
            "description": "the token for unlocking the global SDN configuration",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "section",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "token",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Plugin type.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-configid",
              "enum": [
                "netbox",
                "phpipam",
                "pve"
              ]
            }
          },
          {
            "name": "url",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/cluster/sdn/ipams/{ipam}": {
      "delete": {
        "summary": "Delete sdn ipam object configuration.",
        "description": "Delete sdn ipam object configuration.",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "ipam",
            "in": "path",
            "description": "The SDN ipam object identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-sdn-ipam-id"
            }
          },
          {
            "name": "lock-token",
            "in": "query",
            "description": "the token for unlocking the global SDN configuration",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Read sdn ipam configuration.",
        "description": "Read sdn ipam configuration.",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "ipam",
            "in": "path",
            "description": "The SDN ipam object identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-sdn-ipam-id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update sdn ipam object configuration.",
        "description": "Update sdn ipam object configuration.",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "delete",
            "in": "query",
            "description": "A list of settings you want to delete.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-configid-list",
              "maxLength": 4096
            }
          },
          {
            "name": "digest",
            "in": "query",
            "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 64
            }
          },
          {
            "name": "fingerprint",
            "in": "query",
            "description": "Certificate SHA 256 fingerprint.",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "([A-Fa-f0-9]{2}:){31}[A-Fa-f0-9]{2}"
            }
          },
          {
            "name": "ipam",
            "in": "path",
            "description": "The SDN ipam object identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-sdn-ipam-id"
            }
          },
          {
            "name": "lock-token",
            "in": "query",
            "description": "the token for unlocking the global SDN configuration",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "section",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "token",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "url",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/cluster/sdn/ipams/{ipam}/status": {
      "get": {
        "summary": "List PVE IPAM Entries",
        "description": "List PVE IPAM Entries",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "ipam",
            "in": "path",
            "description": "The SDN ipam object identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-sdn-ipam-id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/cluster/sdn/dns": {
      "get": {
        "summary": "SDN dns index.",
        "description": "SDN dns index.",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "description": "Only list sdn dns of specific type",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "powerdns"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "dns": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{dns}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new sdn dns object.",
        "description": "Create a new sdn dns object.",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "dns",
            "in": "query",
            "description": "The SDN dns object identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-sdn-dns-id"
            }
          },
          {
            "name": "fingerprint",
            "in": "query",
            "description": "Certificate SHA 256 fingerprint.",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "([A-Fa-f0-9]{2}:){31}[A-Fa-f0-9]{2}"
            }
          },
          {
            "name": "key",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lock-token",
            "in": "query",
            "description": "the token for unlocking the global SDN configuration",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "reversemaskv6",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "reversev6mask",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "ttl",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Plugin type.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-configid",
              "enum": [
                "powerdns"
              ]
            }
          },
          {
            "name": "url",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/cluster/sdn/dns/{dns}": {
      "delete": {
        "summary": "Delete sdn dns object configuration.",
        "description": "Delete sdn dns object configuration.",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "dns",
            "in": "path",
            "description": "The SDN dns object identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-sdn-dns-id"
            }
          },
          {
            "name": "lock-token",
            "in": "query",
            "description": "the token for unlocking the global SDN configuration",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Read sdn dns configuration.",
        "description": "Read sdn dns configuration.",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "dns",
            "in": "path",
            "description": "The SDN dns object identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-sdn-dns-id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update sdn dns object configuration.",
        "description": "Update sdn dns object configuration.",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "delete",
            "in": "query",
            "description": "A list of settings you want to delete.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-configid-list",
              "maxLength": 4096
            }
          },
          {
            "name": "digest",
            "in": "query",
            "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 64
            }
          },
          {
            "name": "dns",
            "in": "path",
            "description": "The SDN dns object identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-sdn-dns-id"
            }
          },
          {
            "name": "fingerprint",
            "in": "query",
            "description": "Certificate SHA 256 fingerprint.",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "([A-Fa-f0-9]{2}:){31}[A-Fa-f0-9]{2}"
            }
          },
          {
            "name": "key",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lock-token",
            "in": "query",
            "description": "the token for unlocking the global SDN configuration",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "reversemaskv6",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "ttl",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "url",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/cluster/sdn/fabrics": {
      "get": {
        "summary": "SDN Fabrics Index",
        "description": "SDN Fabrics Index",
        "tags": [
          "cluster"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "subdir": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{subdir}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/cluster/sdn/fabrics/fabric": {
      "get": {
        "summary": "SDN Fabrics Index",
        "description": "SDN Fabrics Index",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "pending",
            "in": "query",
            "description": "Display pending config.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "running",
            "in": "query",
            "description": "Display running config.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "area": {
                        "description": "OSPF area. Either a IPv4 address or a 32-bit number. Gets validated in rust.",
                        "instance-types": [
                          "ospf"
                        ],
                        "optional": 1,
                        "type": "string",
                        "type-property": "protocol"
                      },
                      "csnp_interval": {
                        "description": "The csnp_interval property for Openfabric",
                        "instance-types": [
                          "openfabric"
                        ],
                        "maximum": 600,
                        "minimum": 1,
                        "optional": 1,
                        "type": "number",
                        "type-property": "protocol"
                      },
                      "digest": {
                        "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
                        "maxLength": 64,
                        "optional": 1,
                        "type": "string"
                      },
                      "hello_interval": {
                        "description": "The hello_interval property for Openfabric",
                        "instance-types": [
                          "openfabric"
                        ],
                        "maximum": 600,
                        "minimum": 1,
                        "optional": 1,
                        "type": "number",
                        "type-property": "protocol"
                      },
                      "id": {
                        "description": "Identifier for SDN fabrics",
                        "format": "pve-sdn-fabric-id",
                        "type": "string"
                      },
                      "ip6_prefix": {
                        "description": "The IP prefix for Node IPs",
                        "format": "CIDR",
                        "optional": 1,
                        "type": "string"
                      },
                      "ip_prefix": {
                        "description": "The IP prefix for Node IPs",
                        "format": "CIDR",
                        "optional": 1,
                        "type": "string"
                      },
                      "lock-token": {
                        "description": "the token for unlocking the global SDN configuration",
                        "optional": 1,
                        "type": "string"
                      },
                      "protocol": {
                        "description": "Type of configuration entry in an SDN Fabric section config",
                        "enum": [
                          "openfabric",
                          "ospf"
                        ],
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{id}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Add a fabric",
        "description": "Add a fabric",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "area",
            "in": "query",
            "description": "OSPF area. Either a IPv4 address or a 32-bit number. Gets validated in rust.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "csnp_interval",
            "in": "query",
            "description": "The csnp_interval property for Openfabric",
            "required": false,
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 600
            }
          },
          {
            "name": "digest",
            "in": "query",
            "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 64
            }
          },
          {
            "name": "hello_interval",
            "in": "query",
            "description": "The hello_interval property for Openfabric",
            "required": false,
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 600
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "Identifier for SDN fabrics",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-sdn-fabric-id"
            }
          },
          {
            "name": "ip6_prefix",
            "in": "query",
            "description": "The IP prefix for Node IPs",
            "required": false,
            "schema": {
              "type": "string",
              "format": "CIDR"
            }
          },
          {
            "name": "ip_prefix",
            "in": "query",
            "description": "The IP prefix for Node IPs",
            "required": false,
            "schema": {
              "type": "string",
              "format": "CIDR"
            }
          },
          {
            "name": "lock-token",
            "in": "query",
            "description": "the token for unlocking the global SDN configuration",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "protocol",
            "in": "query",
            "description": "Type of configuration entry in an SDN Fabric section config",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "openfabric",
                "ospf"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/cluster/sdn/fabrics/fabric/{id}": {
      "delete": {
        "summary": "Add a fabric",
        "description": "Add a fabric",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifier for SDN fabrics",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-sdn-fabric-id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Update a fabric",
        "description": "Update a fabric",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifier for SDN fabrics",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-sdn-fabric-id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "area": {
                      "description": "OSPF area. Either a IPv4 address or a 32-bit number. Gets validated in rust.",
                      "instance-types": [
                        "ospf"
                      ],
                      "optional": 1,
                      "type": "string",
                      "type-property": "protocol"
                    },
                    "csnp_interval": {
                      "description": "The csnp_interval property for Openfabric",
                      "instance-types": [
                        "openfabric"
                      ],
                      "maximum": 600,
                      "minimum": 1,
                      "optional": 1,
                      "type": "number",
                      "type-property": "protocol"
                    },
                    "digest": {
                      "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
                      "maxLength": 64,
                      "optional": 1,
                      "type": "string"
                    },
                    "hello_interval": {
                      "description": "The hello_interval property for Openfabric",
                      "instance-types": [
                        "openfabric"
                      ],
                      "maximum": 600,
                      "minimum": 1,
                      "optional": 1,
                      "type": "number",
                      "type-property": "protocol"
                    },
                    "id": {
                      "description": "Identifier for SDN fabrics",
                      "format": "pve-sdn-fabric-id",
                      "type": "string"
                    },
                    "ip6_prefix": {
                      "description": "The IP prefix for Node IPs",
                      "format": "CIDR",
                      "optional": 1,
                      "type": "string"
                    },
                    "ip_prefix": {
                      "description": "The IP prefix for Node IPs",
                      "format": "CIDR",
                      "optional": 1,
                      "type": "string"
                    },
                    "lock-token": {
                      "description": "the token for unlocking the global SDN configuration",
                      "optional": 1,
                      "type": "string"
                    },
                    "protocol": {
                      "description": "Type of configuration entry in an SDN Fabric section config",
                      "enum": [
                        "openfabric",
                        "ospf"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update a fabric",
        "description": "Update a fabric",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "area",
            "in": "query",
            "description": "OSPF area. Either a IPv4 address or a 32-bit number. Gets validated in rust.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "csnp_interval",
            "in": "query",
            "description": "The csnp_interval property for Openfabric",
            "required": false,
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 600
            }
          },
          {
            "name": "delete",
            "in": "query",
            "required": true,
            "schema": {
              "type": "array"
            }
          },
          {
            "name": "digest",
            "in": "query",
            "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 64
            }
          },
          {
            "name": "hello_interval",
            "in": "query",
            "description": "The hello_interval property for Openfabric",
            "required": false,
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 600
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Identifier for SDN fabrics",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-sdn-fabric-id"
            }
          },
          {
            "name": "ip6_prefix",
            "in": "query",
            "description": "The IP prefix for Node IPs",
            "required": false,
            "schema": {
              "type": "string",
              "format": "CIDR"
            }
          },
          {
            "name": "ip_prefix",
            "in": "query",
            "description": "The IP prefix for Node IPs",
            "required": false,
            "schema": {
              "type": "string",
              "format": "CIDR"
            }
          },
          {
            "name": "lock-token",
            "in": "query",
            "description": "the token for unlocking the global SDN configuration",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "protocol",
            "in": "query",
            "description": "Type of configuration entry in an SDN Fabric section config",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "openfabric",
                "ospf"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/cluster/sdn/fabrics/node": {
      "get": {
        "summary": "SDN Fabrics Index",
        "description": "SDN Fabrics Index",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "pending",
            "in": "query",
            "description": "Display pending config.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "running",
            "in": "query",
            "description": "Display running config.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "digest": {
                        "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
                        "maxLength": 64,
                        "optional": 1,
                        "type": "string"
                      },
                      "fabric_id": {
                        "description": "Identifier for SDN fabrics",
                        "format": "pve-sdn-fabric-id",
                        "type": "string"
                      },
                      "interfaces": {
                        "oneOf": [
                          {
                            "description": "OpenFabric network interface",
                            "instance-types": [
                              "openfabric"
                            ],
                            "items": {
                              "format": {
                                "hello_multiplier": {
                                  "description": "The hello_multiplier property of the interface",
                                  "maximum": 100,
                                  "minimum": 2,
                                  "optional": 1,
                                  "type": "integer"
                                },
                                "ip": {
                                  "description": "IPv4 address for this node",
                                  "format": "CIDRv4",
                                  "optional": 1,
                                  "type": "string"
                                },
                                "ip6": {
                                  "description": "IPv6 address for this node",
                                  "format": "CIDRv6",
                                  "optional": 1,
                                  "type": "string"
                                },
                                "name": {
                                  "description": "Name of the network interface",
                                  "format": "pve-iface",
                                  "type": "string"
                                }
                              },
                              "type": "string"
                            },
                            "optional": 1,
                            "type": "array"
                          },
                          {
                            "description": "OSPF network interface",
                            "instance-types": [
                              "ospf"
                            ],
                            "items": {
                              "format": {
                                "ip": {
                                  "description": "IPv4 address for this node",
                                  "format": "CIDRv4",
                                  "optional": 1,
                                  "type": "string"
                                },
                                "name": {
                                  "description": "Name of the network interface",
                                  "format": "pve-iface",
                                  "type": "string"
                                }
                              },
                              "type": "string"
                            },
                            "optional": 1,
                            "type": "array"
                          }
                        ],
                        "type": "array",
                        "type-property": "protocol"
                      },
                      "ip": {
                        "description": "IPv4 address for this node",
                        "format": "ipv4",
                        "optional": 1,
                        "type": "string"
                      },
                      "ip6": {
                        "description": "IPv6 address for this node",
                        "format": "ipv6",
                        "optional": 1,
                        "type": "string"
                      },
                      "lock-token": {
                        "description": "the token for unlocking the global SDN configuration",
                        "optional": 1,
                        "type": "string"
                      },
                      "node_id": {
                        "description": "Identifier for nodes in an SDN fabric",
                        "format": "pve-node",
                        "type": "string"
                      },
                      "protocol": {
                        "description": "Type of configuration entry in an SDN Fabric section config",
                        "enum": [
                          "openfabric",
                          "ospf"
                        ],
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{fabric_id}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/cluster/sdn/fabrics/node/{fabric_id}": {
      "get": {
        "summary": "SDN Fabrics Index",
        "description": "SDN Fabrics Index",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "fabric_id",
            "in": "path",
            "description": "Identifier for SDN fabrics",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-sdn-fabric-id"
            }
          },
          {
            "name": "pending",
            "in": "query",
            "description": "Display pending config.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "running",
            "in": "query",
            "description": "Display running config.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "digest": {
                        "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
                        "maxLength": 64,
                        "optional": 1,
                        "type": "string"
                      },
                      "fabric_id": {
                        "description": "Identifier for SDN fabrics",
                        "format": "pve-sdn-fabric-id",
                        "type": "string"
                      },
                      "interfaces": {
                        "oneOf": [
                          {
                            "description": "OpenFabric network interface",
                            "instance-types": [
                              "openfabric"
                            ],
                            "items": {
                              "format": {
                                "hello_multiplier": {
                                  "description": "The hello_multiplier property of the interface",
                                  "maximum": 100,
                                  "minimum": 2,
                                  "optional": 1,
                                  "type": "integer"
                                },
                                "ip": {
                                  "description": "IPv4 address for this node",
                                  "format": "CIDRv4",
                                  "optional": 1,
                                  "type": "string"
                                },
                                "ip6": {
                                  "description": "IPv6 address for this node",
                                  "format": "CIDRv6",
                                  "optional": 1,
                                  "type": "string"
                                },
                                "name": {
                                  "description": "Name of the network interface",
                                  "format": "pve-iface",
                                  "type": "string"
                                }
                              },
                              "type": "string"
                            },
                            "optional": 1,
                            "type": "array"
                          },
                          {
                            "description": "OSPF network interface",
                            "instance-types": [
                              "ospf"
                            ],
                            "items": {
                              "format": {
                                "ip": {
                                  "description": "IPv4 address for this node",
                                  "format": "CIDRv4",
                                  "optional": 1,
                                  "type": "string"
                                },
                                "name": {
                                  "description": "Name of the network interface",
                                  "format": "pve-iface",
                                  "type": "string"
                                }
                              },
                              "type": "string"
                            },
                            "optional": 1,
                            "type": "array"
                          }
                        ],
                        "type": "array",
                        "type-property": "protocol"
                      },
                      "ip": {
                        "description": "IPv4 address for this node",
                        "format": "ipv4",
                        "optional": 1,
                        "type": "string"
                      },
                      "ip6": {
                        "description": "IPv6 address for this node",
                        "format": "ipv6",
                        "optional": 1,
                        "type": "string"
                      },
                      "lock-token": {
                        "description": "the token for unlocking the global SDN configuration",
                        "optional": 1,
                        "type": "string"
                      },
                      "node_id": {
                        "description": "Identifier for nodes in an SDN fabric",
                        "format": "pve-node",
                        "type": "string"
                      },
                      "protocol": {
                        "description": "Type of configuration entry in an SDN Fabric section config",
                        "enum": [
                          "openfabric",
                          "ospf"
                        ],
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{node_id}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Add a node",
        "description": "Add a node",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "digest",
            "in": "query",
            "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 64
            }
          },
          {
            "name": "fabric_id",
            "in": "path",
            "description": "Identifier for SDN fabrics",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-sdn-fabric-id"
            }
          },
          {
            "name": "interfaces",
            "in": "query",
            "required": true,
            "schema": {
              "type": "array"
            }
          },
          {
            "name": "ip",
            "in": "query",
            "description": "IPv4 address for this node",
            "required": false,
            "schema": {
              "type": "string",
              "format": "ipv4"
            }
          },
          {
            "name": "ip6",
            "in": "query",
            "description": "IPv6 address for this node",
            "required": false,
            "schema": {
              "type": "string",
              "format": "ipv6"
            }
          },
          {
            "name": "lock-token",
            "in": "query",
            "description": "the token for unlocking the global SDN configuration",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "node_id",
            "in": "query",
            "description": "Identifier for nodes in an SDN fabric",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "protocol",
            "in": "query",
            "description": "Type of configuration entry in an SDN Fabric section config",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "openfabric",
                "ospf"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/cluster/sdn/fabrics/node/{fabric_id}/{node_id}": {
      "delete": {
        "summary": "Add a node",
        "description": "Add a node",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "fabric_id",
            "in": "path",
            "description": "Identifier for SDN fabrics",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-sdn-fabric-id"
            }
          },
          {
            "name": "node_id",
            "in": "path",
            "description": "Identifier for nodes in an SDN fabric",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Get a node",
        "description": "Get a node",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "fabric_id",
            "in": "path",
            "description": "Identifier for SDN fabrics",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-sdn-fabric-id"
            }
          },
          {
            "name": "node_id",
            "in": "path",
            "description": "Identifier for nodes in an SDN fabric",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "digest": {
                      "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
                      "maxLength": 64,
                      "optional": 1,
                      "type": "string"
                    },
                    "fabric_id": {
                      "description": "Identifier for SDN fabrics",
                      "format": "pve-sdn-fabric-id",
                      "type": "string"
                    },
                    "interfaces": {
                      "oneOf": [
                        {
                          "description": "OpenFabric network interface",
                          "instance-types": [
                            "openfabric"
                          ],
                          "items": {
                            "format": {
                              "hello_multiplier": {
                                "description": "The hello_multiplier property of the interface",
                                "maximum": 100,
                                "minimum": 2,
                                "optional": 1,
                                "type": "integer"
                              },
                              "ip": {
                                "description": "IPv4 address for this node",
                                "format": "CIDRv4",
                                "optional": 1,
                                "type": "string"
                              },
                              "ip6": {
                                "description": "IPv6 address for this node",
                                "format": "CIDRv6",
                                "optional": 1,
                                "type": "string"
                              },
                              "name": {
                                "description": "Name of the network interface",
                                "format": "pve-iface",
                                "type": "string"
                              }
                            },
                            "type": "string"
                          },
                          "optional": 1,
                          "type": "array"
                        },
                        {
                          "description": "OSPF network interface",
                          "instance-types": [
                            "ospf"
                          ],
                          "items": {
                            "format": {
                              "ip": {
                                "description": "IPv4 address for this node",
                                "format": "CIDRv4",
                                "optional": 1,
                                "type": "string"
                              },
                              "name": {
                                "description": "Name of the network interface",
                                "format": "pve-iface",
                                "type": "string"
                              }
                            },
                            "type": "string"
                          },
                          "optional": 1,
                          "type": "array"
                        }
                      ],
                      "type": "array",
                      "type-property": "protocol"
                    },
                    "ip": {
                      "description": "IPv4 address for this node",
                      "format": "ipv4",
                      "optional": 1,
                      "type": "string"
                    },
                    "ip6": {
                      "description": "IPv6 address for this node",
                      "format": "ipv6",
                      "optional": 1,
                      "type": "string"
                    },
                    "lock-token": {
                      "description": "the token for unlocking the global SDN configuration",
                      "optional": 1,
                      "type": "string"
                    },
                    "node_id": {
                      "description": "Identifier for nodes in an SDN fabric",
                      "format": "pve-node",
                      "type": "string"
                    },
                    "protocol": {
                      "description": "Type of configuration entry in an SDN Fabric section config",
                      "enum": [
                        "openfabric",
                        "ospf"
                      ],
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update a node",
        "description": "Update a node",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "delete",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array"
            }
          },
          {
            "name": "digest",
            "in": "query",
            "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 64
            }
          },
          {
            "name": "fabric_id",
            "in": "path",
            "description": "Identifier for SDN fabrics",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-sdn-fabric-id"
            }
          },
          {
            "name": "interfaces",
            "in": "query",
            "required": true,
            "schema": {
              "type": "array"
            }
          },
          {
            "name": "ip",
            "in": "query",
            "description": "IPv4 address for this node",
            "required": false,
            "schema": {
              "type": "string",
              "format": "ipv4"
            }
          },
          {
            "name": "ip6",
            "in": "query",
            "description": "IPv6 address for this node",
            "required": false,
            "schema": {
              "type": "string",
              "format": "ipv6"
            }
          },
          {
            "name": "lock-token",
            "in": "query",
            "description": "the token for unlocking the global SDN configuration",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "node_id",
            "in": "path",
            "description": "Identifier for nodes in an SDN fabric",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "protocol",
            "in": "query",
            "description": "Type of configuration entry in an SDN Fabric section config",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "openfabric",
                "ospf"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/cluster/sdn/fabrics/all": {
      "get": {
        "summary": "SDN Fabrics Index",
        "description": "SDN Fabrics Index",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "pending",
            "in": "query",
            "description": "Display pending config.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "running",
            "in": "query",
            "description": "Display running config.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "fabrics": {
                      "items": {
                        "properties": {
                          "area": {
                            "description": "OSPF area. Either a IPv4 address or a 32-bit number. Gets validated in rust.",
                            "instance-types": [
                              "ospf"
                            ],
                            "optional": 1,
                            "type": "string",
                            "type-property": "protocol"
                          },
                          "csnp_interval": {
                            "description": "The csnp_interval property for Openfabric",
                            "instance-types": [
                              "openfabric"
                            ],
                            "maximum": 600,
                            "minimum": 1,
                            "optional": 1,
                            "type": "number",
                            "type-property": "protocol"
                          },
                          "digest": {
                            "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
                            "maxLength": 64,
                            "optional": 1,
                            "type": "string"
                          },
                          "hello_interval": {
                            "description": "The hello_interval property for Openfabric",
                            "instance-types": [
                              "openfabric"
                            ],
                            "maximum": 600,
                            "minimum": 1,
                            "optional": 1,
                            "type": "number",
                            "type-property": "protocol"
                          },
                          "id": {
                            "description": "Identifier for SDN fabrics",
                            "format": "pve-sdn-fabric-id",
                            "type": "string"
                          },
                          "ip6_prefix": {
                            "description": "The IP prefix for Node IPs",
                            "format": "CIDR",
                            "optional": 1,
                            "type": "string"
                          },
                          "ip_prefix": {
                            "description": "The IP prefix for Node IPs",
                            "format": "CIDR",
                            "optional": 1,
                            "type": "string"
                          },
                          "lock-token": {
                            "description": "the token for unlocking the global SDN configuration",
                            "optional": 1,
                            "type": "string"
                          },
                          "protocol": {
                            "description": "Type of configuration entry in an SDN Fabric section config",
                            "enum": [
                              "openfabric",
                              "ospf"
                            ],
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "nodes": {
                      "items": {
                        "properties": {
                          "digest": {
                            "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
                            "maxLength": 64,
                            "optional": 1,
                            "type": "string"
                          },
                          "fabric_id": {
                            "description": "Identifier for SDN fabrics",
                            "format": "pve-sdn-fabric-id",
                            "type": "string"
                          },
                          "interfaces": {
                            "oneOf": [
                              {
                                "description": "OpenFabric network interface",
                                "instance-types": [
                                  "openfabric"
                                ],
                                "items": {
                                  "format": {
                                    "hello_multiplier": {
                                      "description": "The hello_multiplier property of the interface",
                                      "maximum": 100,
                                      "minimum": 2,
                                      "optional": 1,
                                      "type": "integer"
                                    },
                                    "ip": {
                                      "description": "IPv4 address for this node",
                                      "format": "CIDRv4",
                                      "optional": 1,
                                      "type": "string"
                                    },
                                    "ip6": {
                                      "description": "IPv6 address for this node",
                                      "format": "CIDRv6",
                                      "optional": 1,
                                      "type": "string"
                                    },
                                    "name": {
                                      "description": "Name of the network interface",
                                      "format": "pve-iface",
                                      "type": "string"
                                    }
                                  },
                                  "type": "string"
                                },
                                "optional": 1,
                                "type": "array"
                              },
                              {
                                "description": "OSPF network interface",
                                "instance-types": [
                                  "ospf"
                                ],
                                "items": {
                                  "format": {
                                    "ip": {
                                      "description": "IPv4 address for this node",
                                      "format": "CIDRv4",
                                      "optional": 1,
                                      "type": "string"
                                    },
                                    "name": {
                                      "description": "Name of the network interface",
                                      "format": "pve-iface",
                                      "type": "string"
                                    }
                                  },
                                  "type": "string"
                                },
                                "optional": 1,
                                "type": "array"
                              }
                            ],
                            "type": "array",
                            "type-property": "protocol"
                          },
                          "ip": {
                            "description": "IPv4 address for this node",
                            "format": "ipv4",
                            "optional": 1,
                            "type": "string"
                          },
                          "ip6": {
                            "description": "IPv6 address for this node",
                            "format": "ipv6",
                            "optional": 1,
                            "type": "string"
                          },
                          "lock-token": {
                            "description": "the token for unlocking the global SDN configuration",
                            "optional": 1,
                            "type": "string"
                          },
                          "node_id": {
                            "description": "Identifier for nodes in an SDN fabric",
                            "format": "pve-node",
                            "type": "string"
                          },
                          "protocol": {
                            "description": "Type of configuration entry in an SDN Fabric section config",
                            "enum": [
                              "openfabric",
                              "ospf"
                            ],
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/cluster/sdn/lock": {
      "delete": {
        "summary": "Release global lock for SDN configuration",
        "description": "Release global lock for SDN configuration",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "force",
            "in": "query",
            "description": "if true, allow releasing lock without providing the token",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "lock-token",
            "in": "query",
            "description": "the token for unlocking the global SDN configuration",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Acquire global lock for SDN configuration",
        "description": "Acquire global lock for SDN configuration",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "allow-pending",
            "in": "query",
            "description": "if true, allow acquiring lock even though there are pending changes",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/cluster/sdn/rollback": {
      "post": {
        "summary": "Rollback pending changes to SDN configuration",
        "description": "Rollback pending changes to SDN configuration",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "lock-token",
            "in": "query",
            "description": "the token for unlocking the global SDN configuration",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "release-lock",
            "in": "query",
            "description": "When lock-token has been provided and configuration successfully rollbacked, release the lock automatically afterwards",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/cluster/log": {
      "get": {
        "summary": "Read cluster log",
        "description": "Read cluster log",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "max",
            "in": "query",
            "description": "Maximum number of entries.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {},
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/cluster/resources": {
      "get": {
        "summary": "Resources index (cluster wide).",
        "description": "Resources index (cluster wide).",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "description": "Resource type.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "vm",
                "storage",
                "node",
                "sdn"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "cgroup-mode": {
                        "description": "The cgroup mode the node operates under (for type 'node').",
                        "optional": 1,
                        "type": "integer"
                      },
                      "content": {
                        "description": "Allowed storage content types (for type 'storage').",
                        "format": "pve-storage-content-list",
                        "optional": 1,
                        "type": "string"
                      },
                      "cpu": {
                        "description": "CPU utilization (for types 'node', 'qemu' and 'lxc').",
                        "minimum": 0,
                        "optional": 1,
                        "renderer": "fraction_as_percentage",
                        "type": "number"
                      },
                      "disk": {
                        "description": "Used disk space in bytes (for type 'storage'), used root image space for VMs (for types 'qemu' and 'lxc').",
                        "minimum": 0,
                        "optional": 1,
                        "renderer": "bytes",
                        "type": "integer"
                      },
                      "diskread": {
                        "description": "The number of bytes the guest read from its block devices since the guest was started. This info is not available for all storage types. (for types 'qemu' and 'lxc')",
                        "optional": 1,
                        "renderer": "bytes",
                        "type": "integer"
                      },
                      "diskwrite": {
                        "description": "The number of bytes the guest wrote to its block devices since the guest was started. This info is not available for all storage types. (for types 'qemu' and 'lxc')",
                        "optional": 1,
                        "renderer": "bytes",
                        "type": "integer"
                      },
                      "hastate": {
                        "description": "HA service status (for HA managed VMs).",
                        "optional": 1,
                        "type": "string"
                      },
                      "id": {
                        "description": "Resource id.",
                        "type": "string"
                      },
                      "level": {
                        "description": "Support level (for type 'node').",
                        "optional": 1,
                        "type": "string"
                      },
                      "lock": {
                        "description": "The guest's current config lock (for types 'qemu' and 'lxc')",
                        "optional": 1,
                        "type": "string"
                      },
                      "maxcpu": {
                        "description": "Number of available CPUs (for types 'node', 'qemu' and 'lxc').",
                        "minimum": 0,
                        "optional": 1,
                        "type": "number"
                      },
                      "maxdisk": {
                        "description": "Storage size in bytes (for type 'storage'), root image size for VMs (for types 'qemu' and 'lxc').",
                        "minimum": 0,
                        "optional": 1,
                        "renderer": "bytes",
                        "type": "integer"
                      },
                      "maxmem": {
                        "description": "Number of available memory in bytes (for types 'node', 'qemu' and 'lxc').",
                        "optional": 1,
                        "renderer": "bytes",
                        "type": "integer"
                      },
                      "mem": {
                        "description": "Used memory in bytes (for types 'node', 'qemu' and 'lxc').",
                        "minimum": 0,
                        "optional": 1,
                        "renderer": "bytes",
                        "type": "integer"
                      },
                      "memhost": {
                        "description": "Used memory in bytes from the point of view of the host (for types 'qemu').",
                        "minimum": 0,
                        "optional": 1,
                        "renderer": "bytes",
                        "type": "integer"
                      },
                      "name": {
                        "description": "Name of the resource.",
                        "optional": 1,
                        "type": "string"
                      },
                      "netin": {
                        "description": "The amount of traffic in bytes that was sent to the guest over the network since it was started. (for types 'qemu' and 'lxc')",
                        "optional": 1,
                        "renderer": "bytes",
                        "type": "integer"
                      },
                      "netout": {
                        "description": "The amount of traffic in bytes that was sent from the guest over the network since it was started. (for types 'qemu' and 'lxc')",
                        "optional": 1,
                        "renderer": "bytes",
                        "type": "integer"
                      },
                      "node": {
                        "description": "The cluster node name (for types 'node', 'storage', 'qemu', and 'lxc').",
                        "format": "pve-node",
                        "optional": 1,
                        "type": "string"
                      },
                      "plugintype": {
                        "description": "More specific type, if available.",
                        "optional": 1,
                        "type": "string"
                      },
                      "pool": {
                        "description": "The pool name (for types 'pool', 'qemu' and 'lxc').",
                        "optional": 1,
                        "type": "string"
                      },
                      "status": {
                        "description": "Resource type dependent status.",
                        "optional": 1,
                        "type": "string"
                      },
                      "storage": {
                        "description": "The storage identifier (for type 'storage').",
                        "format": "pve-storage-id",
                        "format_description": "storage ID",
                        "optional": 1,
                        "type": "string"
                      },
                      "tags": {
                        "description": "The guest's tags (for types 'qemu' and 'lxc')",
                        "optional": 1,
                        "type": "string"
                      },
                      "template": {
                        "default": 0,
                        "description": "Determines if the guest is a template. (for types 'qemu' and 'lxc')",
                        "optional": 1,
                        "type": "boolean"
                      },
                      "type": {
                        "description": "Resource type.",
                        "enum": [
                          "node",
                          "storage",
                          "pool",
                          "qemu",
                          "lxc",
                          "openvz",
                          "sdn"
                        ],
                        "type": "string"
                      },
                      "uptime": {
                        "description": "Uptime of node or virtual guest in seconds (for types 'node', 'qemu' and 'lxc').",
                        "optional": 1,
                        "renderer": "duration",
                        "type": "integer"
                      },
                      "vmid": {
                        "description": "The numerical vmid (for types 'qemu' and 'lxc').",
                        "format": "pve-vmid",
                        "maximum": 999999999,
                        "minimum": 100,
                        "optional": 1,
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/cluster/tasks": {
      "get": {
        "summary": "List recent tasks (cluster wide).",
        "description": "List recent tasks (cluster wide).",
        "tags": [
          "cluster"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "upid": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/cluster/options": {
      "get": {
        "summary": "Get datacenter options. Without 'Sys.Audit' on '/' not all options are returned.",
        "description": "Get datacenter options. Without 'Sys.Audit' on '/' not all options are returned.",
        "tags": [
          "cluster"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Set datacenter options.",
        "description": "Set datacenter options.",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "bwlimit",
            "in": "query",
            "description": "Set I/O bandwidth limit for various operations (in KiB/s).",
            "required": false,
            "schema": {
              "type": "string",
              "format": {
                "clone": {
                  "description": "bandwidth limit in KiB/s for cloning disks",
                  "format_description": "LIMIT",
                  "minimum": "0",
                  "optional": 1,
                  "type": "number"
                },
                "default": {
                  "description": "default bandwidth limit in KiB/s",
                  "format_description": "LIMIT",
                  "minimum": "0",
                  "optional": 1,
                  "type": "number"
                },
                "migration": {
                  "description": "bandwidth limit in KiB/s for migrating guests (including moving local disks)",
                  "format_description": "LIMIT",
                  "minimum": "0",
                  "optional": 1,
                  "type": "number"
                },
                "move": {
                  "description": "bandwidth limit in KiB/s for moving disks",
                  "format_description": "LIMIT",
                  "minimum": "0",
                  "optional": 1,
                  "type": "number"
                },
                "restore": {
                  "description": "bandwidth limit in KiB/s for restoring guests from backups",
                  "format_description": "LIMIT",
                  "minimum": "0",
                  "optional": 1,
                  "type": "number"
                }
              }
            }
          },
          {
            "name": "consent-text",
            "in": "query",
            "description": "Consent text that is displayed before logging in.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 65536
            }
          },
          {
            "name": "console",
            "in": "query",
            "description": "Select the default Console viewer. You can either use the builtin java applet (VNC; deprecated and maps to html5), an external virt-viewer comtatible application (SPICE), an HTML5 based vnc viewer (noVNC), or an HTML5 based console client (xtermjs). If the selected viewer is not available (e.g. SPICE not activated for the VM), the fallback is noVNC.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "applet",
                "vv",
                "html5",
                "xtermjs"
              ]
            }
          },
          {
            "name": "crs",
            "in": "query",
            "description": "Cluster resource scheduling settings.",
            "required": false,
            "schema": {
              "type": "string",
              "format": {
                "ha": {
                  "default": "basic",
                  "description": "Use this resource scheduler mode for HA.",
                  "enum": [
                    "basic",
                    "static"
                  ],
                  "optional": 1,
                  "type": "string",
                  "verbose_description": "Configures how the HA manager should select nodes to start or recover services. With 'basic', only the number of services is used, with 'static', static CPU and memory configuration of services is considered."
                },
                "ha-rebalance-on-start": {
                  "default": 0,
                  "description": "Set to use CRS for selecting a suited node when a HA services request-state changes from stop to start.",
                  "optional": 1,
                  "type": "boolean"
                }
              }
            }
          },
          {
            "name": "delete",
            "in": "query",
            "description": "A list of settings you want to delete.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-configid-list"
            }
          },
          {
            "name": "description",
            "in": "query",
            "description": "Datacenter description. Shown in the web-interface datacenter notes panel. This is saved as comment inside the configuration file.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 65536
            }
          },
          {
            "name": "email_from",
            "in": "query",
            "description": "Specify email address to send notification from (default is root@$hostname)",
            "required": false,
            "schema": {
              "type": "string",
              "format": "email-opt"
            }
          },
          {
            "name": "fencing",
            "in": "query",
            "description": "Set the fencing mode of the HA cluster. Hardware mode needs a valid configuration of fence devices in /etc/pve/ha/fence.cfg. With both all two modes are used.\n\nWARNING: 'hardware' and 'both' are EXPERIMENTAL & WIP",
            "required": false,
            "schema": {
              "type": "string",
              "default": "watchdog",
              "enum": [
                "watchdog",
                "hardware",
                "both"
              ]
            }
          },
          {
            "name": "ha",
            "in": "query",
            "description": "Cluster wide HA settings.",
            "required": false,
            "schema": {
              "type": "string",
              "format": {
                "shutdown_policy": {
                  "default": "conditional",
                  "description": "The policy for HA services on node shutdown. 'freeze' disables auto-recovery, 'failover' ensures recovery, 'conditional' recovers on poweroff and freezes on reboot. 'migrate' will migrate running services to other nodes, if possible. With 'freeze' or 'failover', HA Services will always get stopped first on shutdown.",
                  "enum": [
                    "freeze",
                    "failover",
                    "conditional",
                    "migrate"
                  ],
                  "type": "string",
                  "verbose_description": "Describes the policy for handling HA services on poweroff or reboot of a node. Freeze will always freeze services which are still located on the node on shutdown, those services won't be recovered by the HA manager. Failover will not mark the services as frozen and thus the services will get recovered to other nodes, if the shutdown node does not come up again quickly (< 1min). 'conditional' chooses automatically depending on the type of shutdown, i.e., on a reboot the service will be frozen but on a poweroff the service will stay as is, and thus get recovered after about 2 minutes. Migrate will try to move all running services to another node when a reboot or shutdown was triggered. The poweroff process will only continue once no running services are located on the node anymore. If the node comes up again, the service will be moved back to the previously powered-off node, at least if no other migration, reloaction or recovery took place."
                }
              }
            }
          },
          {
            "name": "http_proxy",
            "in": "query",
            "description": "Specify external http proxy which is used for downloads (example: 'http://username:password@host:port/')",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "http://.*"
            }
          },
          {
            "name": "keyboard",
            "in": "query",
            "description": "Default keybord layout for vnc server.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "de",
                "de-ch",
                "da",
                "en-gb",
                "en-us",
                "es",
                "fi",
                "fr",
                "fr-be",
                "fr-ca",
                "fr-ch",
                "hu",
                "is",
                "it",
                "ja",
                "lt",
                "mk",
                "nl",
                "no",
                "pl",
                "pt",
                "pt-br",
                "sv",
                "sl",
                "tr"
              ]
            }
          },
          {
            "name": "language",
            "in": "query",
            "description": "Default GUI language.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "ar",
                "ca",
                "da",
                "de",
                "en",
                "es",
                "eu",
                "fa",
                "fr",
                "hr",
                "he",
                "it",
                "ja",
                "ka",
                "kr",
                "nb",
                "nl",
                "nn",
                "pl",
                "pt_BR",
                "ru",
                "sl",
                "sv",
                "tr",
                "ukr",
                "zh_CN",
                "zh_TW"
              ]
            }
          },
          {
            "name": "mac_prefix",
            "in": "query",
            "description": "Prefix for the auto-generated MAC addresses of virtual guests. The default 'BC:24:11' is the OUI assigned by the IEEE to Proxmox Server Solutions GmbH for a 24-bit large MAC block. You're allowed to use this in local networks, i.e., those not directly reachable by the public (e.g., in a LAN or behind NAT).",
            "required": false,
            "schema": {
              "type": "string",
              "default": "BC:24:11",
              "format": "mac-prefix"
            }
          },
          {
            "name": "max_workers",
            "in": "query",
            "description": "Defines how many workers (per node) are maximal started  on actions like 'stopall VMs' or task from the ha-manager.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "migration",
            "in": "query",
            "description": "For cluster wide migration settings.",
            "required": false,
            "schema": {
              "type": "string",
              "format": {
                "network": {
                  "description": "CIDR of the (sub) network that is used for migration. Used as a fallback for replications jobs if the replication network setting is not set",
                  "format": "CIDR",
                  "format_description": "CIDR",
                  "optional": 1,
                  "type": "string"
                },
                "type": {
                  "default": "secure",
                  "default_key": 1,
                  "description": "Migration traffic is encrypted using an SSH tunnel by default. On secure, completely private networks this can be disabled to increase performance.",
                  "enum": [
                    "secure",
                    "insecure"
                  ],
                  "type": "string"
                }
              }
            }
          },
          {
            "name": "migration_unsecure",
            "in": "query",
            "description": "Migration is secure using SSH tunnel by default. For secure private networks you can disable it to speed up migration. Deprecated, use the 'migration' property instead!",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "next-id",
            "in": "query",
            "description": "Control the range for the free VMID auto-selection pool.",
            "required": false,
            "schema": {
              "type": "string",
              "format": {
                "lower": {
                  "default": 100,
                  "description": "Lower, inclusive boundary for free next-id API range.",
                  "max": 999999999,
                  "min": 100,
                  "optional": 1,
                  "type": "integer"
                },
                "upper": {
                  "default": 1000000,
                  "description": "Upper, exclusive boundary for free next-id API range.",
                  "max": 1000000000,
                  "min": 100,
                  "optional": 1,
                  "type": "integer"
                }
              }
            }
          },
          {
            "name": "notify",
            "in": "query",
            "description": "Cluster-wide notification settings.",
            "required": false,
            "schema": {
              "type": "string",
              "format": {
                "fencing": {
                  "description": "UNUSED - Use datacenter notification settings instead.",
                  "enum": [
                    "always",
                    "never"
                  ],
                  "optional": 1,
                  "type": "string"
                },
                "package-updates": {
                  "default": "auto",
                  "description": "DEPRECATED: Use datacenter notification settings instead. Control when the daily update job should send out notifications.",
                  "enum": [
                    "auto",
                    "always",
                    "never"
                  ],
                  "optional": 1,
                  "type": "string",
                  "verbose_description": "DEPRECATED: Use datacenter notification settings instead.\nControl how often the daily update job should send out notifications:\n* 'auto' daily for systems with a valid subscription, as those are assumed to be  production-ready and thus should know about pending updates.\n* 'always' every update, if there are new pending updates.\n* 'never' never send a notification for new pending updates.\n"
                },
                "replication": {
                  "description": "UNUSED - Use datacenter notification settings instead.",
                  "enum": [
                    "always",
                    "never"
                  ],
                  "optional": 1,
                  "type": "string"
                },
                "target-fencing": {
                  "description": "UNUSED - Use datacenter notification settings instead.",
                  "format_description": "TARGET",
                  "optional": 1,
                  "type": "string"
                },
                "target-package-updates": {
                  "description": "UNUSED - Use datacenter notification settings instead.",
                  "format_description": "TARGET",
                  "optional": 1,
                  "type": "string"
                },
                "target-replication": {
                  "description": "UNUSED - Use datacenter notification settings instead.",
                  "format_description": "TARGET",
                  "optional": 1,
                  "type": "string"
                }
              }
            }
          },
          {
            "name": "registered-tags",
            "in": "query",
            "description": "A list of tags that require a `Sys.Modify` on '/' to set and delete. Tags set here that are also in 'user-tag-access' also require `Sys.Modify`.",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "(?:(?^i:[a-z0-9_][a-z0-9_\\-\\+\\.]*);)*(?^i:[a-z0-9_][a-z0-9_\\-\\+\\.]*)"
            }
          },
          {
            "name": "replication",
            "in": "query",
            "description": "For cluster wide replication settings.",
            "required": false,
            "schema": {
              "type": "string",
              "format": {
                "network": {
                  "description": "CIDR of the (sub) network that is used for replication jobs.",
                  "format": "CIDR",
                  "format_description": "CIDR",
                  "optional": 1,
                  "type": "string"
                },
                "type": {
                  "default": "secure",
                  "default_key": 1,
                  "description": "Replication traffic is encrypted using an SSH tunnel by default. On secure, completely private networks this can be disabled to increase performance.",
                  "enum": [
                    "secure",
                    "insecure"
                  ],
                  "type": "string"
                }
              }
            }
          },
          {
            "name": "tag-style",
            "in": "query",
            "description": "Tag style options.",
            "required": false,
            "schema": {
              "type": "string",
              "format": {
                "case-sensitive": {
                  "default": 0,
                  "description": "Controls if filtering for unique tags on update should check case-sensitive.",
                  "optional": 1,
                  "type": "boolean"
                },
                "color-map": {
                  "description": "Manual color mapping for tags (semicolon separated).",
                  "optional": 1,
                  "pattern": "(?:(?^i:[a-z0-9_][a-z0-9_\\-\\+\\.]*):[0-9a-fA-F]{6}(?::[0-9a-fA-F]{6})?)(?:;(?:(?^i:[a-z0-9_][a-z0-9_\\-\\+\\.]*):[0-9a-fA-F]{6}(?::[0-9a-fA-F]{6})?))*",
                  "type": "string",
                  "typetext": "<tag>:<hex-color>[:<hex-color-for-text>][;<tag>=...]"
                },
                "ordering": {
                  "default": "alphabetical",
                  "description": "Controls the sorting of the tags in the web-interface and the API update.",
                  "enum": [
                    "config",
                    "alphabetical"
                  ],
                  "optional": 1,
                  "type": "string"
                },
                "shape": {
                  "default": "circle",
                  "description": "Tag shape for the web ui tree. 'full' draws the full tag. 'circle' draws only a circle with the background color. 'dense' only draws a small rectancle (useful when many tags are assigned to each guest).'none' disables showing the tags.",
                  "enum": [
                    "full",
                    "circle",
                    "dense",
                    "none"
                  ],
                  "optional": 1,
                  "type": "string"
                }
              }
            }
          },
          {
            "name": "u2f",
            "in": "query",
            "description": "u2f",
            "required": false,
            "schema": {
              "type": "string",
              "format": {
                "appid": {
                  "description": "U2F AppId URL override. Defaults to the origin.",
                  "format_description": "APPID",
                  "optional": 1,
                  "type": "string"
                },
                "origin": {
                  "description": "U2F Origin override. Mostly useful for single nodes with a single URL.",
                  "format_description": "URL",
                  "optional": 1,
                  "type": "string"
                }
              }
            }
          },
          {
            "name": "user-tag-access",
            "in": "query",
            "description": "Privilege options for user-settable tags",
            "required": false,
            "schema": {
              "type": "string",
              "format": {
                "user-allow": {
                  "default": "free",
                  "description": "Controls tag usage for users without `Sys.Modify` on `/` by either allowing `none`, a `list`, already `existing` or anything (`free`).",
                  "enum": [
                    "none",
                    "list",
                    "existing",
                    "free"
                  ],
                  "optional": 1,
                  "type": "string",
                  "verbose_description": "Controls which tags can be set or deleted on resources a user controls (such as guests). Users with the `Sys.Modify` privilege on `/` are alwaysunrestricted.\n* 'none' no tags are usable.\n* 'list' tags from 'user-allow-list' are usable.\n* 'existing' like list, but already existing tags of resources are also usable.\n* 'free' no tag restrictions.\n"
                },
                "user-allow-list": {
                  "description": "List of tags users are allowed to set and delete (semicolon separated) for 'user-allow' values 'list' and 'existing'.",
                  "optional": 1,
                  "pattern": "(?^i:[a-z0-9_][a-z0-9_\\-\\+\\.]*)(?:;(?^i:[a-z0-9_][a-z0-9_\\-\\+\\.]*))*",
                  "type": "string",
                  "typetext": "<tag>[;<tag>...]"
                }
              }
            }
          },
          {
            "name": "webauthn",
            "in": "query",
            "description": "webauthn configuration",
            "required": false,
            "schema": {
              "type": "string",
              "format": {
                "allow-subdomains": {
                  "default": 1,
                  "description": "Whether to allow the origin to be a subdomain, rather than the exact URL.",
                  "optional": 1,
                  "type": "boolean"
                },
                "id": {
                  "description": "Relying party ID. Must be the domain name without protocol, port or location. Changing this *will* break existing credentials.",
                  "format_description": "DOMAINNAME",
                  "optional": 1,
                  "type": "string"
                },
                "origin": {
                  "description": "Site origin. Must be a `https://` URL (or `http://localhost`). Should contain the address users type in their browsers to access the web interface. Changing this *may* break existing credentials.",
                  "format_description": "URL",
                  "optional": 1,
                  "type": "string"
                },
                "rp": {
                  "description": "Relying party name. Any text identifier. Changing this *may* break existing credentials.",
                  "format_description": "RELYING_PARTY",
                  "optional": 1,
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/cluster/status": {
      "get": {
        "summary": "Get cluster status information.",
        "description": "Get cluster status information.",
        "tags": [
          "cluster"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "ip": {
                        "description": "[node] IP of the resolved nodename.",
                        "optional": 1,
                        "type": "string"
                      },
                      "level": {
                        "description": "[node] Proxmox VE Subscription level, indicates if eligible for enterprise support as well as access to the stable Proxmox VE Enterprise Repository.",
                        "optional": 1,
                        "type": "string"
                      },
                      "local": {
                        "description": "[node] Indicates if this is the responding node.",
                        "optional": 1,
                        "type": "boolean"
                      },
                      "name": {
                        "type": "string"
                      },
                      "nodeid": {
                        "description": "[node] ID of the node from the corosync configuration.",
                        "optional": 1,
                        "type": "integer"
                      },
                      "nodes": {
                        "description": "[cluster] Nodes count, including offline nodes.",
                        "optional": 1,
                        "type": "integer"
                      },
                      "online": {
                        "description": "[node] Indicates if the node is online or offline.",
                        "optional": 1,
                        "type": "boolean"
                      },
                      "quorate": {
                        "description": "[cluster] Indicates if there is a majority of nodes online to make decisions",
                        "optional": 1,
                        "type": "boolean"
                      },
                      "type": {
                        "description": "Indicates the type, either cluster or node. The type defines the object properties e.g. quorate available for type cluster.",
                        "enum": [
                          "cluster",
                          "node"
                        ],
                        "type": "string"
                      },
                      "version": {
                        "description": "[cluster] Current version of the corosync configuration file.",
                        "optional": 1,
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/cluster/nextid": {
      "get": {
        "summary": "Get next free VMID. Pass a VMID to assert that its free (at time of check).",
        "description": "Get next free VMID. Pass a VMID to assert that its free (at time of check).",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "name": "vmid",
            "in": "query",
            "description": "The (unique) ID of the VM.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "description": "The next free VMID.",
                  "type": "integer"
                }
              }
            }
          }
        }
      }
    },
    "/nodes": {
      "get": {
        "summary": "Cluster node index.",
        "description": "Cluster node index.",
        "tags": [
          "nodes"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "cpu": {
                        "description": "CPU utilization.",
                        "optional": 1,
                        "renderer": "fraction_as_percentage",
                        "type": "number"
                      },
                      "level": {
                        "description": "Support level.",
                        "optional": 1,
                        "type": "string"
                      },
                      "maxcpu": {
                        "description": "Number of available CPUs.",
                        "optional": 1,
                        "type": "integer"
                      },
                      "maxmem": {
                        "description": "Number of available memory in bytes.",
                        "optional": 1,
                        "renderer": "bytes",
                        "type": "integer"
                      },
                      "mem": {
                        "description": "Used memory in bytes.",
                        "optional": 1,
                        "renderer": "bytes",
                        "type": "integer"
                      },
                      "node": {
                        "description": "The cluster node name.",
                        "format": "pve-node",
                        "type": "string"
                      },
                      "ssl_fingerprint": {
                        "description": "The SSL fingerprint for the node certificate.",
                        "optional": 1,
                        "type": "string"
                      },
                      "status": {
                        "description": "Node status.",
                        "enum": [
                          "unknown",
                          "online",
                          "offline"
                        ],
                        "type": "string"
                      },
                      "uptime": {
                        "description": "Node uptime in seconds.",
                        "optional": 1,
                        "renderer": "duration",
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{node}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}": {
      "get": {
        "summary": "Node index.",
        "description": "Node index.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {},
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{name}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/qemu": {
      "get": {
        "summary": "Virtual machine index (per node).",
        "description": "Virtual machine index (per node).",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "full",
            "in": "query",
            "description": "Determine the full status of active VMs.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "cpu": {
                        "description": "Current CPU usage.",
                        "optional": 1,
                        "type": "number"
                      },
                      "cpus": {
                        "description": "Maximum usable CPUs.",
                        "optional": 1,
                        "type": "number"
                      },
                      "diskread": {
                        "description": "The amount of bytes the guest read from it's block devices since the guest was started. (Note: This info is not available for all storage types.)",
                        "optional": 1,
                        "renderer": "bytes",
                        "type": "integer"
                      },
                      "diskwrite": {
                        "description": "The amount of bytes the guest wrote from it's block devices since the guest was started. (Note: This info is not available for all storage types.)",
                        "optional": 1,
                        "renderer": "bytes",
                        "type": "integer"
                      },
                      "lock": {
                        "description": "The current config lock, if any.",
                        "optional": 1,
                        "type": "string"
                      },
                      "maxdisk": {
                        "description": "Root disk size in bytes.",
                        "optional": 1,
                        "renderer": "bytes",
                        "type": "integer"
                      },
                      "maxmem": {
                        "description": "Maximum memory in bytes.",
                        "optional": 1,
                        "renderer": "bytes",
                        "type": "integer"
                      },
                      "mem": {
                        "description": "Currently used memory in bytes.",
                        "optional": 1,
                        "renderer": "bytes",
                        "type": "integer"
                      },
                      "memhost": {
                        "description": "Current memory usage on the host.",
                        "optional": 1,
                        "renderer": "bytes",
                        "type": "integer"
                      },
                      "name": {
                        "description": "VM (host)name.",
                        "optional": 1,
                        "type": "string"
                      },
                      "netin": {
                        "description": "The amount of traffic in bytes that was sent to the guest over the network since it was started.",
                        "optional": 1,
                        "renderer": "bytes",
                        "type": "integer"
                      },
                      "netout": {
                        "description": "The amount of traffic in bytes that was sent from the guest over the network since it was started.",
                        "optional": 1,
                        "renderer": "bytes",
                        "type": "integer"
                      },
                      "pid": {
                        "description": "PID of the QEMU process, if the VM is running.",
                        "optional": 1,
                        "type": "integer"
                      },
                      "pressurecpufull": {
                        "description": "CPU Full pressure stall average over the last 10 seconds.",
                        "optional": 1,
                        "type": "number"
                      },
                      "pressurecpusome": {
                        "description": "CPU Some pressure stall average over the last 10 seconds.",
                        "optional": 1,
                        "type": "number"
                      },
                      "pressureiofull": {
                        "description": "IO Full pressure stall average over the last 10 seconds.",
                        "optional": 1,
                        "type": "number"
                      },
                      "pressureiosome": {
                        "description": "IO Some pressure stall average over the last 10 seconds.",
                        "optional": 1,
                        "type": "number"
                      },
                      "pressurememoryfull": {
                        "description": "Memory Full pressure stall average over the last 10 seconds.",
                        "optional": 1,
                        "type": "number"
                      },
                      "pressurememorysome": {
                        "description": "Memory Some pressure stall average over the last 10 seconds.",
                        "optional": 1,
                        "type": "number"
                      },
                      "qmpstatus": {
                        "description": "VM run state from the 'query-status' QMP monitor command.",
                        "optional": 1,
                        "type": "string"
                      },
                      "running-machine": {
                        "description": "The currently running machine type (if running).",
                        "optional": 1,
                        "type": "string"
                      },
                      "running-qemu": {
                        "description": "The QEMU version the VM is currently using (if running).",
                        "optional": 1,
                        "type": "string"
                      },
                      "serial": {
                        "description": "Guest has serial device configured.",
                        "optional": 1,
                        "type": "boolean"
                      },
                      "status": {
                        "description": "QEMU process status.",
                        "enum": [
                          "stopped",
                          "running"
                        ],
                        "type": "string"
                      },
                      "tags": {
                        "description": "The current configured tags, if any",
                        "optional": 1,
                        "type": "string"
                      },
                      "template": {
                        "default": 0,
                        "description": "Determines if the guest is a template.",
                        "optional": 1,
                        "type": "boolean"
                      },
                      "uptime": {
                        "description": "Uptime in seconds.",
                        "optional": 1,
                        "renderer": "duration",
                        "type": "integer"
                      },
                      "vmid": {
                        "description": "The (unique) ID of the VM.",
                        "format": "pve-vmid",
                        "maximum": 999999999,
                        "minimum": 100,
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{vmid}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create or restore a virtual machine.",
        "description": "Create or restore a virtual machine.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "acpi",
            "in": "query",
            "description": "Enable/disable ACPI.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 1
            }
          },
          {
            "name": "affinity",
            "in": "query",
            "description": "List of host cores used to execute guest processes, for example: 0,5,8-11",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-cpuset"
            }
          },
          {
            "name": "agent",
            "in": "query",
            "description": "Enable/disable communication with the QEMU Guest Agent and its properties.",
            "required": false,
            "schema": {
              "type": "string",
              "format": {
                "enabled": {
                  "default": 0,
                  "default_key": 1,
                  "description": "Enable/disable communication with a QEMU Guest Agent (QGA) running in the VM.",
                  "type": "boolean"
                },
                "freeze-fs-on-backup": {
                  "default": 1,
                  "description": "Freeze/thaw guest filesystems on backup for consistency.",
                  "optional": 1,
                  "type": "boolean"
                },
                "fstrim_cloned_disks": {
                  "default": 0,
                  "description": "Run fstrim after moving a disk or migrating the VM.",
                  "optional": 1,
                  "type": "boolean"
                },
                "type": {
                  "default": "virtio",
                  "description": "Select the agent type",
                  "enum": [
                    "virtio",
                    "isa"
                  ],
                  "optional": 1,
                  "type": "string"
                }
              }
            }
          },
          {
            "name": "amd-sev",
            "in": "query",
            "description": "Secure Encrypted Virtualization (SEV) features by AMD CPUs",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-qemu-sev-fmt"
            }
          },
          {
            "name": "arch",
            "in": "query",
            "description": "Virtual processor architecture. Defaults to the host.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "x86_64",
                "aarch64"
              ]
            }
          },
          {
            "name": "archive",
            "in": "query",
            "description": "The backup archive. Either the file system path to a .tar or .vma file (use '-' to pipe data from stdin) or a proxmox storage backup volume identifier.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 255
            }
          },
          {
            "name": "args",
            "in": "query",
            "description": "Arbitrary arguments passed to kvm.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "audio0",
            "in": "query",
            "description": "Configure a audio device, useful in combination with QXL/Spice.",
            "required": false,
            "schema": {
              "type": "string",
              "format": {
                "device": {
                  "description": "Configure an audio device.",
                  "enum": [
                    "ich9-intel-hda",
                    "intel-hda",
                    "AC97"
                  ],
                  "type": "string"
                },
                "driver": {
                  "default": "spice",
                  "description": "Driver backend for the audio device.",
                  "enum": [
                    "spice",
                    "none"
                  ],
                  "optional": 1,
                  "type": "string"
                }
              }
            }
          },
          {
            "name": "autostart",
            "in": "query",
            "description": "Automatic restart after crash (currently ignored).",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "balloon",
            "in": "query",
            "description": "Amount of target RAM for the VM in MiB. Using zero disables the ballon driver.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "name": "bios",
            "in": "query",
            "description": "Select BIOS implementation.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "seabios",
              "enum": [
                "seabios",
                "ovmf"
              ]
            }
          },
          {
            "name": "boot",
            "in": "query",
            "description": "Specify guest boot order. Use the 'order=' sub-property as usage with no key or 'legacy=' is deprecated.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-qm-boot"
            }
          },
          {
            "name": "bootdisk",
            "in": "query",
            "description": "Enable booting from specified disk. Deprecated: Use 'boot: order=foo;bar' instead.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-qm-bootdisk",
              "pattern": "(ide|sata|scsi|virtio)\\d+"
            }
          },
          {
            "name": "bwlimit",
            "in": "query",
            "description": "Override I/O bandwidth limit (in KiB/s).",
            "required": false,
            "schema": {
              "type": "integer",
              "default": "restore limit from datacenter or storage config",
              "minimum": "0"
            }
          },
          {
            "name": "cdrom",
            "in": "query",
            "description": "This is an alias for option -ide2",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-qm-ide"
            }
          },
          {
            "name": "cicustom",
            "in": "query",
            "description": "cloud-init: Specify custom files to replace the automatically generated ones at start.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-qm-cicustom"
            }
          },
          {
            "name": "cipassword",
            "in": "query",
            "description": "cloud-init: Password to assign the user. Using this is generally not recommended. Use ssh keys instead. Also note that older cloud-init versions do not support hashed passwords.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "citype",
            "in": "query",
            "description": "Specifies the cloud-init configuration format. The default depends on the configured operating system type (`ostype`. We use the `nocloud` format for Linux, and `configdrive2` for windows.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "configdrive2",
                "nocloud",
                "opennebula"
              ]
            }
          },
          {
            "name": "ciupgrade",
            "in": "query",
            "description": "cloud-init: do an automatic package upgrade after the first boot.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 1
            }
          },
          {
            "name": "ciuser",
            "in": "query",
            "description": "cloud-init: User name to change ssh keys and password for instead of the image's configured default user.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cores",
            "in": "query",
            "description": "The number of cores per socket.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            }
          },
          {
            "name": "cpu",
            "in": "query",
            "description": "Emulated CPU type.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-vm-cpu-conf"
            }
          },
          {
            "name": "cpulimit",
            "in": "query",
            "description": "Limit of CPU usage.",
            "required": false,
            "schema": {
              "type": "number",
              "default": 0,
              "minimum": 0,
              "maximum": 128
            }
          },
          {
            "name": "cpuunits",
            "in": "query",
            "description": "CPU weight for a VM, will be clamped to [1, 10000] in cgroup v2.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": "cgroup v1: 1024, cgroup v2: 100",
              "minimum": 1,
              "maximum": 262144
            }
          },
          {
            "name": "description",
            "in": "query",
            "description": "Description for the VM. Shown in the web-interface VM's summary. This is saved as comment inside the configuration file.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 8192
            }
          },
          {
            "name": "efidisk0",
            "in": "query",
            "description": "Configure a disk for storing EFI vars. Use the special syntax STORAGE_ID:SIZE_IN_GiB to allocate a new volume. Note that SIZE_IN_GiB is ignored here and that the default EFI vars are copied to the volume instead. Use STORAGE_ID:0 and the 'import-from' parameter to import from an existing volume.",
            "required": false,
            "schema": {
              "type": "string",
              "format": {
                "efitype": {
                  "default": "2m",
                  "description": "Size and type of the OVMF EFI vars. '4m' is newer and recommended, and required for Secure Boot. For backwards compatibility, '2m' is used if not otherwise specified. Ignored for VMs with arch=aarch64 (ARM).",
                  "enum": [
                    "2m",
                    "4m"
                  ],
                  "optional": 1,
                  "type": "string"
                },
                "file": {
                  "default_key": 1,
                  "description": "The drive's backing volume.",
                  "format": "pve-volume-id-or-qm-path",
                  "format_description": "volume",
                  "type": "string"
                },
                "format": {
                  "description": "The drive's backing file's data format.",
                  "enum": [
                    "raw",
                    "qcow",
                    "qed",
                    "qcow2",
                    "vmdk",
                    "cloop"
                  ],
                  "optional": 1,
                  "type": "string"
                },
                "import-from": {
                  "description": "Create a new disk, importing from this source (volume ID or absolute path). When an absolute path is specified, it's up to you to ensure that the source is not actively used by another process during the import!",
                  "format": "pve-volume-id-or-absolute-path",
                  "format_description": "source volume",
                  "optional": 1,
                  "type": "string"
                },
                "pre-enrolled-keys": {
                  "default": 0,
                  "description": "Use am EFI vars template with distribution-specific and Microsoft Standard keys enrolled, if used with 'efitype=4m'. Note that this will enable Secure Boot by default, though it can still be turned off from within the VM.",
                  "optional": 1,
                  "type": "boolean"
                },
                "size": {
                  "description": "Disk size. This is purely informational and has no effect.",
                  "format": "disk-size",
                  "format_description": "DiskSize",
                  "optional": 1,
                  "type": "string"
                },
                "volume": {
                  "alias": "file"
                }
              }
            }
          },
          {
            "name": "force",
            "in": "query",
            "description": "Allow to overwrite existing VM.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "freeze",
            "in": "query",
            "description": "Freeze CPU at startup (use 'c' monitor command to start execution).",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "hookscript",
            "in": "query",
            "description": "Script that will be executed during various steps in the vms lifetime.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-volume-id"
            }
          },
          {
            "name": "hostpci[n]",
            "in": "query",
            "description": "Map host PCI devices into guest.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-qm-hostpci"
            }
          },
          {
            "name": "hotplug",
            "in": "query",
            "description": "Selectively enable hotplug features. This is a comma separated list of hotplug features: 'network', 'disk', 'cpu', 'memory', 'usb' and 'cloudinit'. Use '0' to disable hotplug completely. Using '1' as value is an alias for the default `network,disk,usb`. USB hotplugging is possible for guests with machine version >= 7.1 and ostype l26 or windows > 7.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "network,disk,usb",
              "format": "pve-hotplug-features"
            }
          },
          {
            "name": "hugepages",
            "in": "query",
            "description": "Enable/disable hugepages memory.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "any",
                "2",
                "1024"
              ]
            }
          },
          {
            "name": "ide[n]",
            "in": "query",
            "description": "Use volume as IDE hard disk or CD-ROM (n is 0 to 3). Use the special syntax STORAGE_ID:SIZE_IN_GiB to allocate a new volume. Use STORAGE_ID:0 and the 'import-from' parameter to import from an existing volume.",
            "required": false,
            "schema": {
              "type": "string",
              "format": {
                "aio": {
                  "description": "AIO type to use.",
                  "enum": [
                    "native",
                    "threads",
                    "io_uring"
                  ],
                  "optional": 1,
                  "type": "string"
                },
                "backup": {
                  "description": "Whether the drive should be included when making backups.",
                  "optional": 1,
                  "type": "boolean"
                },
                "bps": {
                  "description": "Maximum r/w speed in bytes per second.",
                  "format_description": "bps",
                  "optional": 1,
                  "type": "integer"
                },
                "bps_max_length": {
                  "description": "Maximum length of I/O bursts in seconds.",
                  "format_description": "seconds",
                  "minimum": 1,
                  "optional": 1,
                  "type": "integer"
                },
                "bps_rd": {
                  "description": "Maximum read speed in bytes per second.",
                  "format_description": "bps",
                  "optional": 1,
                  "type": "integer"
                },
                "bps_rd_length": {
                  "alias": "bps_rd_max_length"
                },
                "bps_rd_max_length": {
                  "description": "Maximum length of read I/O bursts in seconds.",
                  "format_description": "seconds",
                  "minimum": 1,
                  "optional": 1,
                  "type": "integer"
                },
                "bps_wr": {
                  "description": "Maximum write speed in bytes per second.",
                  "format_description": "bps",
                  "optional": 1,
                  "type": "integer"
                },
                "bps_wr_length": {
                  "alias": "bps_wr_max_length"
                },
                "bps_wr_max_length": {
                  "description": "Maximum length of write I/O bursts in seconds.",
                  "format_description": "seconds",
                  "minimum": 1,
                  "optional": 1,
                  "type": "integer"
                },
                "cache": {
                  "description": "The drive's cache mode",
                  "enum": [
                    "none",
                    "writethrough",
                    "writeback",
                    "unsafe",
                    "directsync"
                  ],
                  "optional": 1,
                  "type": "string"
                },
                "detect_zeroes": {
                  "description": "Controls whether to detect and try to optimize writes of zeroes.",
                  "optional": 1,
                  "type": "boolean"
                },
                "discard": {
                  "description": "Controls whether to pass discard/trim requests to the underlying storage.",
                  "enum": [
                    "ignore",
                    "on"
                  ],
                  "optional": 1,
                  "type": "string"
                },
                "file": {
                  "default_key": 1,
                  "description": "The drive's backing volume.",
                  "format": "pve-volume-id-or-qm-path",
                  "format_description": "volume",
                  "type": "string"
                },
                "format": {
                  "description": "The drive's backing file's data format.",
                  "enum": [
                    "raw",
                    "qcow",
                    "qed",
                    "qcow2",
                    "vmdk",
                    "cloop"
                  ],
                  "optional": 1,
                  "type": "string"
                },
                "import-from": {
                  "description": "Create a new disk, importing from this source (volume ID or absolute path). When an absolute path is specified, it's up to you to ensure that the source is not actively used by another process during the import!",
                  "format": "pve-volume-id-or-absolute-path",
                  "format_description": "source volume",
                  "optional": 1,
                  "type": "string"
                },
                "iops": {
                  "description": "Maximum r/w I/O in operations per second.",
                  "format_description": "iops",
                  "optional": 1,
                  "type": "integer"
                },
                "iops_max": {
                  "description": "Maximum unthrottled r/w I/O pool in operations per second.",
                  "format_description": "iops",
                  "optional": 1,
                  "type": "integer"
                },
                "iops_max_length": {
                  "description": "Maximum length of I/O bursts in seconds.",
                  "format_description": "seconds",
                  "minimum": 1,
                  "optional": 1,
                  "type": "integer"
                },
                "iops_rd": {
                  "description": "Maximum read I/O in operations per second.",
                  "format_description": "iops",
                  "optional": 1,
                  "type": "integer"
                },
                "iops_rd_length": {
                  "alias": "iops_rd_max_length"
                },
                "iops_rd_max": {
                  "description": "Maximum unthrottled read I/O pool in operations per second.",
                  "format_description": "iops",
                  "optional": 1,
                  "type": "integer"
                },
                "iops_rd_max_length": {
                  "description": "Maximum length of read I/O bursts in seconds.",
                  "format_description": "seconds",
                  "minimum": 1,
                  "optional": 1,
                  "type": "integer"
                },
                "iops_wr": {
                  "description": "Maximum write I/O in operations per second.",
                  "format_description": "iops",
                  "optional": 1,
                  "type": "integer"
                },
                "iops_wr_length": {
                  "alias": "iops_wr_max_length"
                },
                "iops_wr_max": {
                  "description": "Maximum unthrottled write I/O pool in operations per second.",
                  "format_description": "iops",
                  "optional": 1,
                  "type": "integer"
                },
                "iops_wr_max_length": {
                  "description": "Maximum length of write I/O bursts in seconds.",
                  "format_description": "seconds",
                  "minimum": 1,
                  "optional": 1,
                  "type": "integer"
                },
                "mbps": {
                  "description": "Maximum r/w speed in megabytes per second.",
                  "format_description": "mbps",
                  "optional": 1,
                  "type": "number"
                },
                "mbps_max": {
                  "description": "Maximum unthrottled r/w pool in megabytes per second.",
                  "format_description": "mbps",
                  "optional": 1,
                  "type": "number"
                },
                "mbps_rd": {
                  "description": "Maximum read speed in megabytes per second.",
                  "format_description": "mbps",
                  "optional": 1,
                  "type": "number"
                },
                "mbps_rd_max": {
                  "description": "Maximum unthrottled read pool in megabytes per second.",
                  "format_description": "mbps",
                  "optional": 1,
                  "type": "number"
                },
                "mbps_wr": {
                  "description": "Maximum write speed in megabytes per second.",
                  "format_description": "mbps",
                  "optional": 1,
                  "type": "number"
                },
                "mbps_wr_max": {
                  "description": "Maximum unthrottled write pool in megabytes per second.",
                  "format_description": "mbps",
                  "optional": 1,
                  "type": "number"
                },
                "media": {
                  "default": "disk",
                  "description": "The drive's media type.",
                  "enum": [
                    "cdrom",
                    "disk"
                  ],
                  "optional": 1,
                  "type": "string"
                },
                "model": {
                  "description": "The drive's reported model name, url-encoded, up to 40 bytes long.",
                  "format": "urlencoded",
                  "format_description": "model",
                  "maxLength": 120,
                  "optional": 1,
                  "type": "string"
                },
                "replicate": {
                  "default": 1,
                  "description": "Whether the drive should considered for replication jobs.",
                  "optional": 1,
                  "type": "boolean"
                },
                "rerror": {
                  "description": "Read error action.",
                  "enum": [
                    "ignore",
                    "report",
                    "stop"
                  ],
                  "optional": 1,
                  "type": "string"
                },
                "serial": {
                  "description": "The drive's reported serial number, url-encoded, up to 20 bytes long.",
                  "format": "urlencoded",
                  "format_description": "serial",
                  "maxLength": 60,
                  "optional": 1,
                  "type": "string"
                },
                "shared": {
                  "default": 0,
                  "description": "Mark this locally-managed volume as available on all nodes",
                  "optional": 1,
                  "type": "boolean",
                  "verbose_description": "Mark this locally-managed volume as available on all nodes.\n\nWARNING: This option does not share the volume automatically, it assumes it is shared already!"
                },
                "size": {
                  "description": "Disk size. This is purely informational and has no effect.",
                  "format": "disk-size",
                  "format_description": "DiskSize",
                  "optional": 1,
                  "type": "string"
                },
                "snapshot": {
                  "description": "Controls qemu's snapshot mode feature. If activated, changes made to the disk are temporary and will be discarded when the VM is shutdown.",
                  "optional": 1,
                  "type": "boolean"
                },
                "ssd": {
                  "description": "Whether to expose this drive as an SSD, rather than a rotational hard disk.",
                  "optional": 1,
                  "type": "boolean"
                },
                "volume": {
                  "alias": "file"
                },
                "werror": {
                  "description": "Write error action.",
                  "enum": [
                    "enospc",
                    "ignore",
                    "report",
                    "stop"
                  ],
                  "optional": 1,
                  "type": "string"
                },
                "wwn": {
                  "description": "The drive's worldwide name, encoded as 16 bytes hex string, prefixed by '0x'.",
                  "format_description": "wwn",
                  "optional": 1,
                  "pattern": "(?^:^(0x)[0-9a-fA-F]{16})",
                  "type": "string"
                }
              }
            }
          },
          {
            "name": "import-working-storage",
            "in": "query",
            "description": "A file-based storage with 'images' content-type enabled, which is used as an intermediary extraction storage during import. Defaults to the source storage.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-storage-id"
            }
          },
          {
            "name": "ipconfig[n]",
            "in": "query",
            "description": "cloud-init: Specify IP addresses and gateways for the corresponding interface.\n\nIP addresses use CIDR notation, gateways are optional but need an IP of the same type specified.\n\nThe special string 'dhcp' can be used for IP addresses to use DHCP, in which case no explicit\ngateway should be provided.\nFor IPv6 the special string 'auto' can be used to use stateless autoconfiguration. This requires\ncloud-init 19.4 or newer.\n\nIf cloud-init is enabled and neither an IPv4 nor an IPv6 address is specified, it defaults to using\ndhcp on IPv4.\n",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-qm-ipconfig"
            }
          },
          {
            "name": "ivshmem",
            "in": "query",
            "description": "Inter-VM shared memory. Useful for direct communication between VMs, or to the host.",
            "required": false,
            "schema": {
              "type": "string",
              "format": {
                "name": {
                  "description": "The name of the file. Will be prefixed with 'pve-shm-'. Default is the VMID. Will be deleted when the VM is stopped.",
                  "format_description": "string",
                  "optional": 1,
                  "pattern": "[a-zA-Z0-9\\-]+",
                  "type": "string"
                },
                "size": {
                  "description": "The size of the file in MB.",
                  "minimum": 1,
                  "type": "integer"
                }
              }
            }
          },
          {
            "name": "keephugepages",
            "in": "query",
            "description": "Use together with hugepages. If enabled, hugepages will not not be deleted after VM shutdown and can be used for subsequent starts.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "keyboard",
            "in": "query",
            "description": "Keyboard layout for VNC server. This option is generally not required and is often better handled from within the guest OS.",
            "required": false,
            "schema": {
              "type": "string",
              "default": null,
              "enum": [
                "de",
                "de-ch",
                "da",
                "en-gb",
                "en-us",
                "es",
                "fi",
                "fr",
                "fr-be",
                "fr-ca",
                "fr-ch",
                "hu",
                "is",
                "it",
                "ja",
                "lt",
                "mk",
                "nl",
                "no",
                "pl",
                "pt",
                "pt-br",
                "sv",
                "sl",
                "tr"
              ]
            }
          },
          {
            "name": "kvm",
            "in": "query",
            "description": "Enable/disable KVM hardware virtualization.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 1
            }
          },
          {
            "name": "live-restore",
            "in": "query",
            "description": "Start the VM immediately while importing or restoring in the background.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "localtime",
            "in": "query",
            "description": "Set the real time clock (RTC) to local time. This is enabled by default if the `ostype` indicates a Microsoft Windows OS.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lock",
            "in": "query",
            "description": "Lock/unlock the VM.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "backup",
                "clone",
                "create",
                "migrate",
                "rollback",
                "snapshot",
                "snapshot-delete",
                "suspending",
                "suspended"
              ]
            }
          },
          {
            "name": "machine",
            "in": "query",
            "description": "Specify the QEMU machine.",
            "required": false,
            "schema": {
              "type": "string",
              "format": {
                "enable-s3": {
                  "description": "Enables S3 power state. Defaults to false beginning with machine types 9.2+pve1, true before.",
                  "optional": 1,
                  "type": "boolean"
                },
                "enable-s4": {
                  "description": "Enables S4 power state. Defaults to false beginning with machine types 9.2+pve1, true before.",
                  "optional": 1,
                  "type": "boolean"
                },
                "type": {
                  "default_key": 1,
                  "description": "Specifies the QEMU machine type.",
                  "format_description": "machine type",
                  "maxLength": 40,
                  "optional": 1,
                  "pattern": "(pc|pc(-i440fx)?-\\d+(\\.\\d+)+(\\+pve\\d+)?(\\.pxe)?|q35|pc-q35-\\d+(\\.\\d+)+(\\+pve\\d+)?(\\.pxe)?|virt(?:-\\d+(\\.\\d+)+)?(\\+pve\\d+)?)",
                  "type": "string"
                },
                "viommu": {
                  "description": "Enable and set guest vIOMMU variant (Intel vIOMMU needs q35 to be set as machine type).",
                  "enum": [
                    "intel",
                    "virtio"
                  ],
                  "optional": 1,
                  "type": "string"
                }
              }
            }
          },
          {
            "name": "memory",
            "in": "query",
            "description": "Memory properties.",
            "required": false,
            "schema": {
              "type": "string",
              "format": {
                "current": {
                  "default": 512,
                  "default_key": 1,
                  "description": "Current amount of online RAM for the VM in MiB. This is the maximum available memory when you use the balloon device.",
                  "minimum": 16,
                  "type": "integer"
                }
              }
            }
          },
          {
            "name": "migrate_downtime",
            "in": "query",
            "description": "Set maximum tolerated downtime (in seconds) for migrations. Should the migration not be able to converge in the very end, because too much newly dirtied RAM needs to be transferred, the limit will be increased automatically step-by-step until migration can converge.",
            "required": false,
            "schema": {
              "type": "number",
              "default": 0.1,
              "minimum": 0
            }
          },
          {
            "name": "migrate_speed",
            "in": "query",
            "description": "Set maximum speed (in MB/s) for migrations. Value 0 is no limit.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0,
              "minimum": 0
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Set a name for the VM. Only used on the configuration web interface.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "dns-name"
            }
          },
          {
            "name": "nameserver",
            "in": "query",
            "description": "cloud-init: Sets DNS server IP address for a container. Create will automatically use the setting from the host if neither searchdomain nor nameserver are set.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "address-list"
            }
          },
          {
            "name": "net[n]",
            "in": "query",
            "description": "Specify network devices.",
            "required": false,
            "schema": {
              "type": "string",
              "format": {
                "bridge": {
                  "description": "Bridge to attach the network device to. The Proxmox VE standard bridge\nis called 'vmbr0'.\n\nIf you do not specify a bridge, we create a kvm user (NATed) network\ndevice, which provides DHCP and DNS services. The following addresses\nare used:\n\n 10.0.2.2   Gateway\n 10.0.2.3   DNS Server\n 10.0.2.4   SMB Server\n\nThe DHCP server assign addresses to the guest starting from 10.0.2.15.\n",
                  "format": "pve-bridge-id",
                  "format_description": "bridge",
                  "optional": 1,
                  "type": "string"
                },
                "e1000": {
                  "alias": "macaddr",
                  "keyAlias": "model"
                },
                "e1000-82540em": {
                  "alias": "macaddr",
                  "keyAlias": "model"
                },
                "e1000-82544gc": {
                  "alias": "macaddr",
                  "keyAlias": "model"
                },
                "e1000-82545em": {
                  "alias": "macaddr",
                  "keyAlias": "model"
                },
                "e1000e": {
                  "alias": "macaddr",
                  "keyAlias": "model"
                },
                "firewall": {
                  "description": "Whether this interface should be protected by the firewall.",
                  "optional": 1,
                  "type": "boolean"
                },
                "i82551": {
                  "alias": "macaddr",
                  "keyAlias": "model"
                },
                "i82557b": {
                  "alias": "macaddr",
                  "keyAlias": "model"
                },
                "i82559er": {
                  "alias": "macaddr",
                  "keyAlias": "model"
                },
                "link_down": {
                  "description": "Whether this interface should be disconnected (like pulling the plug).",
                  "optional": 1,
                  "type": "boolean"
                },
                "macaddr": {
                  "description": "MAC address. That address must be unique within your network. This is automatically generated if not specified.",
                  "format": "mac-addr",
                  "format_description": "XX:XX:XX:XX:XX:XX",
                  "optional": 1,
                  "type": "string",
                  "verbose_description": "A common MAC address with the I/G (Individual/Group) bit not set."
                },
                "model": {
                  "default_key": 1,
                  "description": "Network Card Model. The 'virtio' model provides the best performance with very low CPU overhead. If your guest does not support this driver, it is usually best to use 'e1000'.",
                  "enum": [
                    "e1000",
                    "e1000-82540em",
                    "e1000-82544gc",
                    "e1000-82545em",
                    "e1000e",
                    "i82551",
                    "i82557b",
                    "i82559er",
                    "ne2k_isa",
                    "ne2k_pci",
                    "pcnet",
                    "rtl8139",
                    "virtio",
                    "vmxnet3"
                  ],
                  "type": "string"
                },
                "mtu": {
                  "description": "Force MTU of network device (VirtIO only). Setting to '1' or empty will use the bridge MTU",
                  "maximum": 65520,
                  "minimum": 1,
                  "optional": 1,
                  "type": "integer"
                },
                "ne2k_isa": {
                  "alias": "macaddr",
                  "keyAlias": "model"
                },
                "ne2k_pci": {
                  "alias": "macaddr",
                  "keyAlias": "model"
                },
                "pcnet": {
                  "alias": "macaddr",
                  "keyAlias": "model"
                },
                "queues": {
                  "description": "Number of packet queues to be used on the device.",
                  "maximum": 64,
                  "minimum": 0,
                  "optional": 1,
                  "type": "integer"
                },
                "rate": {
                  "description": "Rate limit in mbps (megabytes per second) as floating point number.",
                  "minimum": 0,
                  "optional": 1,
                  "type": "number"
                },
                "rtl8139": {
                  "alias": "macaddr",
                  "keyAlias": "model"
                },
                "tag": {
                  "description": "VLAN tag to apply to packets on this interface.",
                  "maximum": 4094,
                  "minimum": 1,
                  "optional": 1,
                  "type": "integer"
                },
                "trunks": {
                  "description": "VLAN trunks to pass through this interface.",
                  "format_description": "vlanid[;vlanid...]",
                  "optional": 1,
                  "pattern": "(?^:\\d+(?:-\\d+)?(?:;\\d+(?:-\\d+)?)*)",
                  "type": "string"
                },
                "virtio": {
                  "alias": "macaddr",
                  "keyAlias": "model"
                },
                "vmxnet3": {
                  "alias": "macaddr",
                  "keyAlias": "model"
                }
              }
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "numa",
            "in": "query",
            "description": "Enable/disable NUMA.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "numa[n]",
            "in": "query",
            "description": "NUMA topology.",
            "required": false,
            "schema": {
              "type": "string",
              "format": {
                "cpus": {
                  "description": "CPUs accessing this NUMA node.",
                  "format_description": "id[-id];...",
                  "pattern": "(?^:\\d+(?:-\\d+)?(?:;\\d+(?:-\\d+)?)*)",
                  "type": "string"
                },
                "hostnodes": {
                  "description": "Host NUMA nodes to use.",
                  "format_description": "id[-id];...",
                  "optional": 1,
                  "pattern": "(?^:\\d+(?:-\\d+)?(?:;\\d+(?:-\\d+)?)*)",
                  "type": "string"
                },
                "memory": {
                  "description": "Amount of memory this NUMA node provides.",
                  "optional": 1,
                  "type": "number"
                },
                "policy": {
                  "description": "NUMA allocation policy.",
                  "enum": [
                    "preferred",
                    "bind",
                    "interleave"
                  ],
                  "optional": 1,
                  "type": "string"
                }
              }
            }
          },
          {
            "name": "onboot",
            "in": "query",
            "description": "Specifies whether a VM will be started during system bootup.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "ostype",
            "in": "query",
            "description": "Specify guest operating system.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "other",
                "wxp",
                "w2k",
                "w2k3",
                "w2k8",
                "wvista",
                "win7",
                "win8",
                "win10",
                "win11",
                "l24",
                "l26",
                "solaris"
              ]
            }
          },
          {
            "name": "parallel[n]",
            "in": "query",
            "description": "Map host parallel devices (n is 0 to 2).",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "/dev/parport\\d+|/dev/usb/lp\\d+"
            }
          },
          {
            "name": "pool",
            "in": "query",
            "description": "Add the VM to the specified pool.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-poolid"
            }
          },
          {
            "name": "protection",
            "in": "query",
            "description": "Sets the protection flag of the VM. This will disable the remove VM and remove disk operations.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "reboot",
            "in": "query",
            "description": "Allow reboot. If set to '0' the VM exit on reboot.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 1
            }
          },
          {
            "name": "rng0",
            "in": "query",
            "description": "Configure a VirtIO-based Random Number Generator.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-qm-rng"
            }
          },
          {
            "name": "running-nets-host-mtu",
            "in": "query",
            "description": "List of VirtIO network devices and their effective host_mtu setting. A value of 0 means that the host_mtu parameter is to be avoided for the corresponding device. This is used internally for snapshots.",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "net\\d+=\\d+(,net\\d+=\\d+)*"
            }
          },
          {
            "name": "sata[n]",
            "in": "query",
            "description": "Use volume as SATA hard disk or CD-ROM (n is 0 to 5). Use the special syntax STORAGE_ID:SIZE_IN_GiB to allocate a new volume. Use STORAGE_ID:0 and the 'import-from' parameter to import from an existing volume.",
            "required": false,
            "schema": {
              "type": "string",
              "format": {
                "aio": {
                  "description": "AIO type to use.",
                  "enum": [
                    "native",
                    "threads",
                    "io_uring"
                  ],
                  "optional": 1,
                  "type": "string"
                },
                "backup": {
                  "description": "Whether the drive should be included when making backups.",
                  "optional": 1,
                  "type": "boolean"
                },
                "bps": {
                  "description": "Maximum r/w speed in bytes per second.",
                  "format_description": "bps",
                  "optional": 1,
                  "type": "integer"
                },
                "bps_max_length": {
                  "description": "Maximum length of I/O bursts in seconds.",
                  "format_description": "seconds",
                  "minimum": 1,
                  "optional": 1,
                  "type": "integer"
                },
                "bps_rd": {
                  "description": "Maximum read speed in bytes per second.",
                  "format_description": "bps",
                  "optional": 1,
                  "type": "integer"
                },
                "bps_rd_length": {
                  "alias": "bps_rd_max_length"
                },
                "bps_rd_max_length": {
                  "description": "Maximum length of read I/O bursts in seconds.",
                  "format_description": "seconds",
                  "minimum": 1,
                  "optional": 1,
                  "type": "integer"
                },
                "bps_wr": {
                  "description": "Maximum write speed in bytes per second.",
                  "format_description": "bps",
                  "optional": 1,
                  "type": "integer"
                },
                "bps_wr_length": {
                  "alias": "bps_wr_max_length"
                },
                "bps_wr_max_length": {
                  "description": "Maximum length of write I/O bursts in seconds.",
                  "format_description": "seconds",
                  "minimum": 1,
                  "optional": 1,
                  "type": "integer"
                },
                "cache": {
                  "description": "The drive's cache mode",
                  "enum": [
                    "none",
                    "writethrough",
                    "writeback",
                    "unsafe",
                    "directsync"
                  ],
                  "optional": 1,
                  "type": "string"
                },
                "detect_zeroes": {
                  "description": "Controls whether to detect and try to optimize writes of zeroes.",
                  "optional": 1,
                  "type": "boolean"
                },
                "discard": {
                  "description": "Controls whether to pass discard/trim requests to the underlying storage.",
                  "enum": [
                    "ignore",
                    "on"
                  ],
                  "optional": 1,
                  "type": "string"
                },
                "file": {
                  "default_key": 1,
                  "description": "The drive's backing volume.",
                  "format": "pve-volume-id-or-qm-path",
                  "format_description": "volume",
                  "type": "string"
                },
                "format": {
                  "description": "The drive's backing file's data format.",
                  "enum": [
                    "raw",
                    "qcow",
                    "qed",
                    "qcow2",
                    "vmdk",
                    "cloop"
                  ],
                  "optional": 1,
                  "type": "string"
                },
                "import-from": {
                  "description": "Create a new disk, importing from this source (volume ID or absolute path). When an absolute path is specified, it's up to you to ensure that the source is not actively used by another process during the import!",
                  "format": "pve-volume-id-or-absolute-path",
                  "format_description": "source volume",
                  "optional": 1,
                  "type": "string"
                },
                "iops": {
                  "description": "Maximum r/w I/O in operations per second.",
                  "format_description": "iops",
                  "optional": 1,
                  "type": "integer"
                },
                "iops_max": {
                  "description": "Maximum unthrottled r/w I/O pool in operations per second.",
                  "format_description": "iops",
                  "optional": 1,
                  "type": "integer"
                },
                "iops_max_length": {
                  "description": "Maximum length of I/O bursts in seconds.",
                  "format_description": "seconds",
                  "minimum": 1,
                  "optional": 1,
                  "type": "integer"
                },
                "iops_rd": {
                  "description": "Maximum read I/O in operations per second.",
                  "format_description": "iops",
                  "optional": 1,
                  "type": "integer"
                },
                "iops_rd_length": {
                  "alias": "iops_rd_max_length"
                },
                "iops_rd_max": {
                  "description": "Maximum unthrottled read I/O pool in operations per second.",
                  "format_description": "iops",
                  "optional": 1,
                  "type": "integer"
                },
                "iops_rd_max_length": {
                  "description": "Maximum length of read I/O bursts in seconds.",
                  "format_description": "seconds",
                  "minimum": 1,
                  "optional": 1,
                  "type": "integer"
                },
                "iops_wr": {
                  "description": "Maximum write I/O in operations per second.",
                  "format_description": "iops",
                  "optional": 1,
                  "type": "integer"
                },
                "iops_wr_length": {
                  "alias": "iops_wr_max_length"
                },
                "iops_wr_max": {
                  "description": "Maximum unthrottled write I/O pool in operations per second.",
                  "format_description": "iops",
                  "optional": 1,
                  "type": "integer"
                },
                "iops_wr_max_length": {
                  "description": "Maximum length of write I/O bursts in seconds.",
                  "format_description": "seconds",
                  "minimum": 1,
                  "optional": 1,
                  "type": "integer"
                },
                "mbps": {
                  "description": "Maximum r/w speed in megabytes per second.",
                  "format_description": "mbps",
                  "optional": 1,
                  "type": "number"
                },
                "mbps_max": {
                  "description": "Maximum unthrottled r/w pool in megabytes per second.",
                  "format_description": "mbps",
                  "optional": 1,
                  "type": "number"
                },
                "mbps_rd": {
                  "description": "Maximum read speed in megabytes per second.",
                  "format_description": "mbps",
                  "optional": 1,
                  "type": "number"
                },
                "mbps_rd_max": {
                  "description": "Maximum unthrottled read pool in megabytes per second.",
                  "format_description": "mbps",
                  "optional": 1,
                  "type": "number"
                },
                "mbps_wr": {
                  "description": "Maximum write speed in megabytes per second.",
                  "format_description": "mbps",
                  "optional": 1,
                  "type": "number"
                },
                "mbps_wr_max": {
                  "description": "Maximum unthrottled write pool in megabytes per second.",
                  "format_description": "mbps",
                  "optional": 1,
                  "type": "number"
                },
                "media": {
                  "default": "disk",
                  "description": "The drive's media type.",
                  "enum": [
                    "cdrom",
                    "disk"
                  ],
                  "optional": 1,
                  "type": "string"
                },
                "replicate": {
                  "default": 1,
                  "description": "Whether the drive should considered for replication jobs.",
                  "optional": 1,
                  "type": "boolean"
                },
                "rerror": {
                  "description": "Read error action.",
                  "enum": [
                    "ignore",
                    "report",
                    "stop"
                  ],
                  "optional": 1,
                  "type": "string"
                },
                "serial": {
                  "description": "The drive's reported serial number, url-encoded, up to 20 bytes long.",
                  "format": "urlencoded",
                  "format_description": "serial",
                  "maxLength": 60,
                  "optional": 1,
                  "type": "string"
                },
                "shared": {
                  "default": 0,
                  "description": "Mark this locally-managed volume as available on all nodes",
                  "optional": 1,
                  "type": "boolean",
                  "verbose_description": "Mark this locally-managed volume as available on all nodes.\n\nWARNING: This option does not share the volume automatically, it assumes it is shared already!"
                },
                "size": {
                  "description": "Disk size. This is purely informational and has no effect.",
                  "format": "disk-size",
                  "format_description": "DiskSize",
                  "optional": 1,
                  "type": "string"
                },
                "snapshot": {
                  "description": "Controls qemu's snapshot mode feature. If activated, changes made to the disk are temporary and will be discarded when the VM is shutdown.",
                  "optional": 1,
                  "type": "boolean"
                },
                "ssd": {
                  "description": "Whether to expose this drive as an SSD, rather than a rotational hard disk.",
                  "optional": 1,
                  "type": "boolean"
                },
                "volume": {
                  "alias": "file"
                },
                "werror": {
                  "description": "Write error action.",
                  "enum": [
                    "enospc",
                    "ignore",
                    "report",
                    "stop"
                  ],
                  "optional": 1,
                  "type": "string"
                },
                "wwn": {
                  "description": "The drive's worldwide name, encoded as 16 bytes hex string, prefixed by '0x'.",
                  "format_description": "wwn",
                  "optional": 1,
                  "pattern": "(?^:^(0x)[0-9a-fA-F]{16})",
                  "type": "string"
                }
              }
            }
          },
          {
            "name": "scsi[n]",
            "in": "query",
            "description": "Use volume as SCSI hard disk or CD-ROM (n is 0 to 30). Use the special syntax STORAGE_ID:SIZE_IN_GiB to allocate a new volume. Use STORAGE_ID:0 and the 'import-from' parameter to import from an existing volume.",
            "required": false,
            "schema": {
              "type": "string",
              "format": {
                "aio": {
                  "description": "AIO type to use.",
                  "enum": [
                    "native",
                    "threads",
                    "io_uring"
                  ],
                  "optional": 1,
                  "type": "string"
                },
                "backup": {
                  "description": "Whether the drive should be included when making backups.",
                  "optional": 1,
                  "type": "boolean"
                },
                "bps": {
                  "description": "Maximum r/w speed in bytes per second.",
                  "format_description": "bps",
                  "optional": 1,
                  "type": "integer"
                },
                "bps_max_length": {
                  "description": "Maximum length of I/O bursts in seconds.",
                  "format_description": "seconds",
                  "minimum": 1,
                  "optional": 1,
                  "type": "integer"
                },
                "bps_rd": {
                  "description": "Maximum read speed in bytes per second.",
                  "format_description": "bps",
                  "optional": 1,
                  "type": "integer"
                },
                "bps_rd_length": {
                  "alias": "bps_rd_max_length"
                },
                "bps_rd_max_length": {
                  "description": "Maximum length of read I/O bursts in seconds.",
                  "format_description": "seconds",
                  "minimum": 1,
                  "optional": 1,
                  "type": "integer"
                },
                "bps_wr": {
                  "description": "Maximum write speed in bytes per second.",
                  "format_description": "bps",
                  "optional": 1,
                  "type": "integer"
                },
                "bps_wr_length": {
                  "alias": "bps_wr_max_length"
                },
                "bps_wr_max_length": {
                  "description": "Maximum length of write I/O bursts in seconds.",
                  "format_description": "seconds",
                  "minimum": 1,
                  "optional": 1,
                  "type": "integer"
                },
                "cache": {
                  "description": "The drive's cache mode",
                  "enum": [
                    "none",
                    "writethrough",
                    "writeback",
                    "unsafe",
                    "directsync"
                  ],
                  "optional": 1,
                  "type": "string"
                },
                "detect_zeroes": {
                  "description": "Controls whether to detect and try to optimize writes of zeroes.",
                  "optional": 1,
                  "type": "boolean"
                },
                "discard": {
                  "description": "Controls whether to pass discard/trim requests to the underlying storage.",
                  "enum": [
                    "ignore",
                    "on"
                  ],
                  "optional": 1,
                  "type": "string"
                },
                "file": {
                  "default_key": 1,
                  "description": "The drive's backing volume.",
                  "format": "pve-volume-id-or-qm-path",
                  "format_description": "volume",
                  "type": "string"
                },
                "format": {
                  "description": "The drive's backing file's data format.",
                  "enum": [
                    "raw",
                    "qcow",
                    "qed",
                    "qcow2",
                    "vmdk",
                    "cloop"
                  ],
                  "optional": 1,
                  "type": "string"
                },
                "import-from": {
                  "description": "Create a new disk, importing from this source (volume ID or absolute path). When an absolute path is specified, it's up to you to ensure that the source is not actively used by another process during the import!",
                  "format": "pve-volume-id-or-absolute-path",
                  "format_description": "source volume",
                  "optional": 1,
                  "type": "string"
                },
                "iops": {
                  "description": "Maximum r/w I/O in operations per second.",
                  "format_description": "iops",
                  "optional": 1,
                  "type": "integer"
                },
                "iops_max": {
                  "description": "Maximum unthrottled r/w I/O pool in operations per second.",
                  "format_description": "iops",
                  "optional": 1,
                  "type": "integer"
                },
                "iops_max_length": {
                  "description": "Maximum length of I/O bursts in seconds.",
                  "format_description": "seconds",
                  "minimum": 1,
                  "optional": 1,
                  "type": "integer"
                },
                "iops_rd": {
                  "description": "Maximum read I/O in operations per second.",
                  "format_description": "iops",
                  "optional": 1,
                  "type": "integer"
                },
                "iops_rd_length": {
                  "alias": "iops_rd_max_length"
                },
                "iops_rd_max": {
                  "description": "Maximum unthrottled read I/O pool in operations per second.",
                  "format_description": "iops",
                  "optional": 1,
                  "type": "integer"
                },
                "iops_rd_max_length": {
                  "description": "Maximum length of read I/O bursts in seconds.",
                  "format_description": "seconds",
                  "minimum": 1,
                  "optional": 1,
                  "type": "integer"
                },
                "iops_wr": {
                  "description": "Maximum write I/O in operations per second.",
                  "format_description": "iops",
                  "optional": 1,
                  "type": "integer"
                },
                "iops_wr_length": {
                  "alias": "iops_wr_max_length"
                },
                "iops_wr_max": {
                  "description": "Maximum unthrottled write I/O pool in operations per second.",
                  "format_description": "iops",
                  "optional": 1,
                  "type": "integer"
                },
                "iops_wr_max_length": {
                  "description": "Maximum length of write I/O bursts in seconds.",
                  "format_description": "seconds",
                  "minimum": 1,
                  "optional": 1,
                  "type": "integer"
                },
                "iothread": {
                  "description": "Whether to use iothreads for this drive",
                  "optional": 1,
                  "type": "boolean"
                },
                "mbps": {
                  "description": "Maximum r/w speed in megabytes per second.",
                  "format_description": "mbps",
                  "optional": 1,
                  "type": "number"
                },
                "mbps_max": {
                  "description": "Maximum unthrottled r/w pool in megabytes per second.",
                  "format_description": "mbps",
                  "optional": 1,
                  "type": "number"
                },
                "mbps_rd": {
                  "description": "Maximum read speed in megabytes per second.",
                  "format_description": "mbps",
                  "optional": 1,
                  "type": "number"
                },
                "mbps_rd_max": {
                  "description": "Maximum unthrottled read pool in megabytes per second.",
                  "format_description": "mbps",
                  "optional": 1,
                  "type": "number"
                },
                "mbps_wr": {
                  "description": "Maximum write speed in megabytes per second.",
                  "format_description": "mbps",
                  "optional": 1,
                  "type": "number"
                },
                "mbps_wr_max": {
                  "description": "Maximum unthrottled write pool in megabytes per second.",
                  "format_description": "mbps",
                  "optional": 1,
                  "type": "number"
                },
                "media": {
                  "default": "disk",
                  "description": "The drive's media type.",
                  "enum": [
                    "cdrom",
                    "disk"
                  ],
                  "optional": 1,
                  "type": "string"
                },
                "product": {
                  "description": "The drive's product name, up to 16 bytes long.",
                  "format_description": "product",
                  "optional": 1,
                  "pattern": "[A-Za-z0-9\\-_\\s]{,16}",
                  "type": "string"
                },
                "queues": {
                  "description": "Number of queues.",
                  "minimum": 2,
                  "optional": 1,
                  "type": "integer"
                },
                "replicate": {
                  "default": 1,
                  "description": "Whether the drive should considered for replication jobs.",
                  "optional": 1,
                  "type": "boolean"
                },
                "rerror": {
                  "description": "Read error action.",
                  "enum": [
                    "ignore",
                    "report",
                    "stop"
                  ],
                  "optional": 1,
                  "type": "string"
                },
                "ro": {
                  "description": "Whether the drive is read-only.",
                  "optional": 1,
                  "type": "boolean"
                },
                "scsiblock": {
                  "default": 0,
                  "description": "whether to use scsi-block for full passthrough of host block device\n\nWARNING: can lead to I/O errors in combination with low memory or high memory fragmentation on host",
                  "optional": 1,
                  "type": "boolean"
                },
                "serial": {
                  "description": "The drive's reported serial number, url-encoded, up to 20 bytes long.",
                  "format": "urlencoded",
                  "format_description": "serial",
                  "maxLength": 60,
                  "optional": 1,
                  "type": "string"
                },
                "shared": {
                  "default": 0,
                  "description": "Mark this locally-managed volume as available on all nodes",
                  "optional": 1,
                  "type": "boolean",
                  "verbose_description": "Mark this locally-managed volume as available on all nodes.\n\nWARNING: This option does not share the volume automatically, it assumes it is shared already!"
                },
                "size": {
                  "description": "Disk size. This is purely informational and has no effect.",
                  "format": "disk-size",
                  "format_description": "DiskSize",
                  "optional": 1,
                  "type": "string"
                },
                "snapshot": {
                  "description": "Controls qemu's snapshot mode feature. If activated, changes made to the disk are temporary and will be discarded when the VM is shutdown.",
                  "optional": 1,
                  "type": "boolean"
                },
                "ssd": {
                  "description": "Whether to expose this drive as an SSD, rather than a rotational hard disk.",
                  "optional": 1,
                  "type": "boolean"
                },
                "vendor": {
                  "description": "The drive's vendor name, up to 8 bytes long.",
                  "format_description": "vendor",
                  "optional": 1,
                  "pattern": "[A-Za-z0-9\\-_\\s]{,8}",
                  "type": "string"
                },
                "volume": {
                  "alias": "file"
                },
                "werror": {
                  "description": "Write error action.",
                  "enum": [
                    "enospc",
                    "ignore",
                    "report",
                    "stop"
                  ],
                  "optional": 1,
                  "type": "string"
                },
                "wwn": {
                  "description": "The drive's worldwide name, encoded as 16 bytes hex string, prefixed by '0x'.",
                  "format_description": "wwn",
                  "optional": 1,
                  "pattern": "(?^:^(0x)[0-9a-fA-F]{16})",
                  "type": "string"
                }
              }
            }
          },
          {
            "name": "scsihw",
            "in": "query",
            "description": "SCSI controller model",
            "required": false,
            "schema": {
              "type": "string",
              "default": "lsi",
              "enum": [
                "lsi",
                "lsi53c810",
                "virtio-scsi-pci",
                "virtio-scsi-single",
                "megasas",
                "pvscsi"
              ]
            }
          },
          {
            "name": "searchdomain",
            "in": "query",
            "description": "cloud-init: Sets DNS search domains for a container. Create will automatically use the setting from the host if neither searchdomain nor nameserver are set.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "serial[n]",
            "in": "query",
            "description": "Create a serial device inside the VM (n is 0 to 3)",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "(/dev/.+|socket)"
            }
          },
          {
            "name": "shares",
            "in": "query",
            "description": "Amount of memory shares for auto-ballooning. The larger the number is, the more memory this VM gets. Number is relative to weights of all other running VMs. Using zero disables auto-ballooning. Auto-ballooning is done by pvestatd.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000,
              "minimum": 0,
              "maximum": 50000
            }
          },
          {
            "name": "smbios1",
            "in": "query",
            "description": "Specify SMBIOS type 1 fields.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-qm-smbios1",
              "maxLength": 512
            }
          },
          {
            "name": "smp",
            "in": "query",
            "description": "The number of CPUs. Please use option -sockets instead.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            }
          },
          {
            "name": "sockets",
            "in": "query",
            "description": "The number of CPU sockets.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            }
          },
          {
            "name": "spice_enhancements",
            "in": "query",
            "description": "Configure additional enhancements for SPICE.",
            "required": false,
            "schema": {
              "type": "string",
              "format": {
                "foldersharing": {
                  "default": "0",
                  "description": "Enable folder sharing via SPICE. Needs Spice-WebDAV daemon installed in the VM.",
                  "optional": 1,
                  "type": "boolean"
                },
                "videostreaming": {
                  "default": "off",
                  "description": "Enable video streaming. Uses compression for detected video streams.",
                  "enum": [
                    "off",
                    "all",
                    "filter"
                  ],
                  "optional": 1,
                  "type": "string"
                }
              }
            }
          },
          {
            "name": "sshkeys",
            "in": "query",
            "description": "cloud-init: Setup public SSH keys (one key per line, OpenSSH format).",
            "required": false,
            "schema": {
              "type": "string",
              "format": "urlencoded"
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "Start VM after it was created successfully.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "startdate",
            "in": "query",
            "description": "Set the initial date of the real time clock. Valid format for date are:'now' or '2006-06-17T16:01:21' or '2006-06-17'.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "now",
              "pattern": "(now|\\d{4}-\\d{1,2}-\\d{1,2}(T\\d{1,2}:\\d{1,2}:\\d{1,2})?)"
            }
          },
          {
            "name": "startup",
            "in": "query",
            "description": "Startup and shutdown behavior. Order is a non-negative number defining the general startup order. Shutdown in done with reverse ordering. Additionally you can set the 'up' or 'down' delay in seconds, which specifies a delay to wait before the next VM is started or stopped.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-startup-order"
            }
          },
          {
            "name": "storage",
            "in": "query",
            "description": "Default storage.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-storage-id"
            }
          },
          {
            "name": "tablet",
            "in": "query",
            "description": "Enable/disable the USB tablet device.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 1
            }
          },
          {
            "name": "tags",
            "in": "query",
            "description": "Tags of the VM. This is only meta information.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-tag-list"
            }
          },
          {
            "name": "tdf",
            "in": "query",
            "description": "Enable/disable time drift fix.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "template",
            "in": "query",
            "description": "Enable/disable Template.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "tpmstate0",
            "in": "query",
            "description": "Configure a Disk for storing TPM state. The format is fixed to 'raw'. Use the special syntax STORAGE_ID:SIZE_IN_GiB to allocate a new volume. Note that SIZE_IN_GiB is ignored here and 4 MiB will be used instead. Use STORAGE_ID:0 and the 'import-from' parameter to import from an existing volume.",
            "required": false,
            "schema": {
              "type": "string",
              "format": {
                "file": {
                  "default_key": 1,
                  "description": "The drive's backing volume.",
                  "format": "pve-volume-id-or-qm-path",
                  "format_description": "volume",
                  "type": "string"
                },
                "import-from": {
                  "description": "Create a new disk, importing from this source (volume ID or absolute path). When an absolute path is specified, it's up to you to ensure that the source is not actively used by another process during the import!",
                  "format": "pve-volume-id-or-absolute-path",
                  "format_description": "source volume",
                  "optional": 1,
                  "type": "string"
                },
                "size": {
                  "description": "Disk size. This is purely informational and has no effect.",
                  "format": "disk-size",
                  "format_description": "DiskSize",
                  "optional": 1,
                  "type": "string"
                },
                "version": {
                  "default": "v1.2",
                  "description": "The TPM interface version. v2.0 is newer and should be preferred. Note that this cannot be changed later on.",
                  "enum": [
                    "v1.2",
                    "v2.0"
                  ],
                  "optional": 1,
                  "type": "string"
                },
                "volume": {
                  "alias": "file"
                }
              }
            }
          },
          {
            "name": "unique",
            "in": "query",
            "description": "Assign a unique random ethernet address.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "unused[n]",
            "in": "query",
            "description": "Reference to unused volumes. This is used internally, and should not be modified manually.",
            "required": false,
            "schema": {
              "type": "string",
              "format": {
                "file": {
                  "default_key": 1,
                  "description": "The drive's backing volume.",
                  "format": "pve-volume-id",
                  "format_description": "volume",
                  "type": "string"
                },
                "volume": {
                  "alias": "file"
                }
              }
            }
          },
          {
            "name": "usb[n]",
            "in": "query",
            "description": "Configure an USB device (n is 0 to 4, for machine version >= 7.1 and ostype l26 or windows > 7, n can be up to 14).",
            "required": false,
            "schema": {
              "type": "string",
              "format": {
                "host": {
                  "default_key": 1,
                  "description": "The Host USB device or port or the value 'spice'. HOSTUSBDEVICE syntax is:\n\n 'bus-port(.port)*' (decimal numbers) or\n 'vendor_id:product_id' (hexadecimal numbers) or\n 'spice'\n\nYou can use the 'lsusb -t' command to list existing usb devices.\n\nNOTE: This option allows direct access to host hardware. So it is no longer possible to migrate such\nmachines - use with special care.\n\nThe value 'spice' can be used to add a usb redirection devices for spice.\n\nEither this or the 'mapping' key must be set.\n",
                  "format_description": "HOSTUSBDEVICE|spice",
                  "optional": 1,
                  "pattern": "(?^:(?:(?:(?^:(0x)?([0-9A-Fa-f]{4}):(0x)?([0-9A-Fa-f]{4})))|(?:(?^:(\\d+)\\-(\\d+(\\.\\d+)*)))|[Ss][Pp][Ii][Cc][Ee]))",
                  "type": "string"
                },
                "mapping": {
                  "description": "The ID of a cluster wide mapping. Either this or the default-key 'host' must be set.",
                  "format": "pve-configid",
                  "format_description": "mapping-id",
                  "optional": 1,
                  "type": "string"
                },
                "usb3": {
                  "default": 0,
                  "description": "Specifies whether if given host option is a USB3 device or port. For modern guests (machine version >= 7.1 and ostype l26 and windows > 7), this flag is irrelevant (all devices are plugged into a xhci controller).",
                  "optional": 1,
                  "type": "boolean"
                }
              }
            }
          },
          {
            "name": "vcpus",
            "in": "query",
            "description": "Number of hotplugged vcpus.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0,
              "minimum": 1
            }
          },
          {
            "name": "vga",
            "in": "query",
            "description": "Configure the VGA hardware.",
            "required": false,
            "schema": {
              "type": "string",
              "format": {
                "clipboard": {
                  "description": "Enable a specific clipboard. If not set, depending on the display type the SPICE one will be added. Migration with VNC clipboard is not yet supported!",
                  "enum": [
                    "vnc"
                  ],
                  "optional": 1,
                  "type": "string"
                },
                "memory": {
                  "description": "Sets the VGA memory (in MiB). Has no effect with serial display.",
                  "maximum": 512,
                  "minimum": 4,
                  "optional": 1,
                  "type": "integer"
                },
                "type": {
                  "default": "std",
                  "default_key": 1,
                  "description": "Select the VGA type. Using type 'cirrus' is not recommended.",
                  "enum": [
                    "cirrus",
                    "qxl",
                    "qxl2",
                    "qxl3",
                    "qxl4",
                    "none",
                    "serial0",
                    "serial1",
                    "serial2",
                    "serial3",
                    "std",
                    "virtio",
                    "virtio-gl",
                    "vmware"
                  ],
                  "optional": 1,
                  "type": "string"
                }
              }
            }
          },
          {
            "name": "virtio[n]",
            "in": "query",
            "description": "Use volume as VIRTIO hard disk (n is 0 to 15). Use the special syntax STORAGE_ID:SIZE_IN_GiB to allocate a new volume. Use STORAGE_ID:0 and the 'import-from' parameter to import from an existing volume.",
            "required": false,
            "schema": {
              "type": "string",
              "format": {
                "aio": {
                  "description": "AIO type to use.",
                  "enum": [
                    "native",
                    "threads",
                    "io_uring"
                  ],
                  "optional": 1,
                  "type": "string"
                },
                "backup": {
                  "description": "Whether the drive should be included when making backups.",
                  "optional": 1,
                  "type": "boolean"
                },
                "bps": {
                  "description": "Maximum r/w speed in bytes per second.",
                  "format_description": "bps",
                  "optional": 1,
                  "type": "integer"
                },
                "bps_max_length": {
                  "description": "Maximum length of I/O bursts in seconds.",
                  "format_description": "seconds",
                  "minimum": 1,
                  "optional": 1,
                  "type": "integer"
                },
                "bps_rd": {
                  "description": "Maximum read speed in bytes per second.",
                  "format_description": "bps",
                  "optional": 1,
                  "type": "integer"
                },
                "bps_rd_length": {
                  "alias": "bps_rd_max_length"
                },
                "bps_rd_max_length": {
                  "description": "Maximum length of read I/O bursts in seconds.",
                  "format_description": "seconds",
                  "minimum": 1,
                  "optional": 1,
                  "type": "integer"
                },
                "bps_wr": {
                  "description": "Maximum write speed in bytes per second.",
                  "format_description": "bps",
                  "optional": 1,
                  "type": "integer"
                },
                "bps_wr_length": {
                  "alias": "bps_wr_max_length"
                },
                "bps_wr_max_length": {
                  "description": "Maximum length of write I/O bursts in seconds.",
                  "format_description": "seconds",
                  "minimum": 1,
                  "optional": 1,
                  "type": "integer"
                },
                "cache": {
                  "description": "The drive's cache mode",
                  "enum": [
                    "none",
                    "writethrough",
                    "writeback",
                    "unsafe",
                    "directsync"
                  ],
                  "optional": 1,
                  "type": "string"
                },
                "detect_zeroes": {
                  "description": "Controls whether to detect and try to optimize writes of zeroes.",
                  "optional": 1,
                  "type": "boolean"
                },
                "discard": {
                  "description": "Controls whether to pass discard/trim requests to the underlying storage.",
                  "enum": [
                    "ignore",
                    "on"
                  ],
                  "optional": 1,
                  "type": "string"
                },
                "file": {
                  "default_key": 1,
                  "description": "The drive's backing volume.",
                  "format": "pve-volume-id-or-qm-path",
                  "format_description": "volume",
                  "type": "string"
                },
                "format": {
                  "description": "The drive's backing file's data format.",
                  "enum": [
                    "raw",
                    "qcow",
                    "qed",
                    "qcow2",
                    "vmdk",
                    "cloop"
                  ],
                  "optional": 1,
                  "type": "string"
                },
                "import-from": {
                  "description": "Create a new disk, importing from this source (volume ID or absolute path). When an absolute path is specified, it's up to you to ensure that the source is not actively used by another process during the import!",
                  "format": "pve-volume-id-or-absolute-path",
                  "format_description": "source volume",
                  "optional": 1,
                  "type": "string"
                },
                "iops": {
                  "description": "Maximum r/w I/O in operations per second.",
                  "format_description": "iops",
                  "optional": 1,
                  "type": "integer"
                },
                "iops_max": {
                  "description": "Maximum unthrottled r/w I/O pool in operations per second.",
                  "format_description": "iops",
                  "optional": 1,
                  "type": "integer"
                },
                "iops_max_length": {
                  "description": "Maximum length of I/O bursts in seconds.",
                  "format_description": "seconds",
                  "minimum": 1,
                  "optional": 1,
                  "type": "integer"
                },
                "iops_rd": {
                  "description": "Maximum read I/O in operations per second.",
                  "format_description": "iops",
                  "optional": 1,
                  "type": "integer"
                },
                "iops_rd_length": {
                  "alias": "iops_rd_max_length"
                },
                "iops_rd_max": {
                  "description": "Maximum unthrottled read I/O pool in operations per second.",
                  "format_description": "iops",
                  "optional": 1,
                  "type": "integer"
                },
                "iops_rd_max_length": {
                  "description": "Maximum length of read I/O bursts in seconds.",
                  "format_description": "seconds",
                  "minimum": 1,
                  "optional": 1,
                  "type": "integer"
                },
                "iops_wr": {
                  "description": "Maximum write I/O in operations per second.",
                  "format_description": "iops",
                  "optional": 1,
                  "type": "integer"
                },
                "iops_wr_length": {
                  "alias": "iops_wr_max_length"
                },
                "iops_wr_max": {
                  "description": "Maximum unthrottled write I/O pool in operations per second.",
                  "format_description": "iops",
                  "optional": 1,
                  "type": "integer"
                },
                "iops_wr_max_length": {
                  "description": "Maximum length of write I/O bursts in seconds.",
                  "format_description": "seconds",
                  "minimum": 1,
                  "optional": 1,
                  "type": "integer"
                },
                "iothread": {
                  "description": "Whether to use iothreads for this drive",
                  "optional": 1,
                  "type": "boolean"
                },
                "mbps": {
                  "description": "Maximum r/w speed in megabytes per second.",
                  "format_description": "mbps",
                  "optional": 1,
                  "type": "number"
                },
                "mbps_max": {
                  "description": "Maximum unthrottled r/w pool in megabytes per second.",
                  "format_description": "mbps",
                  "optional": 1,
                  "type": "number"
                },
                "mbps_rd": {
                  "description": "Maximum read speed in megabytes per second.",
                  "format_description": "mbps",
                  "optional": 1,
                  "type": "number"
                },
                "mbps_rd_max": {
                  "description": "Maximum unthrottled read pool in megabytes per second.",
                  "format_description": "mbps",
                  "optional": 1,
                  "type": "number"
                },
                "mbps_wr": {
                  "description": "Maximum write speed in megabytes per second.",
                  "format_description": "mbps",
                  "optional": 1,
                  "type": "number"
                },
                "mbps_wr_max": {
                  "description": "Maximum unthrottled write pool in megabytes per second.",
                  "format_description": "mbps",
                  "optional": 1,
                  "type": "number"
                },
                "media": {
                  "default": "disk",
                  "description": "The drive's media type.",
                  "enum": [
                    "cdrom",
                    "disk"
                  ],
                  "optional": 1,
                  "type": "string"
                },
                "replicate": {
                  "default": 1,
                  "description": "Whether the drive should considered for replication jobs.",
                  "optional": 1,
                  "type": "boolean"
                },
                "rerror": {
                  "description": "Read error action.",
                  "enum": [
                    "ignore",
                    "report",
                    "stop"
                  ],
                  "optional": 1,
                  "type": "string"
                },
                "ro": {
                  "description": "Whether the drive is read-only.",
                  "optional": 1,
                  "type": "boolean"
                },
                "serial": {
                  "description": "The drive's reported serial number, url-encoded, up to 20 bytes long.",
                  "format": "urlencoded",
                  "format_description": "serial",
                  "maxLength": 60,
                  "optional": 1,
                  "type": "string"
                },
                "shared": {
                  "default": 0,
                  "description": "Mark this locally-managed volume as available on all nodes",
                  "optional": 1,
                  "type": "boolean",
                  "verbose_description": "Mark this locally-managed volume as available on all nodes.\n\nWARNING: This option does not share the volume automatically, it assumes it is shared already!"
                },
                "size": {
                  "description": "Disk size. This is purely informational and has no effect.",
                  "format": "disk-size",
                  "format_description": "DiskSize",
                  "optional": 1,
                  "type": "string"
                },
                "snapshot": {
                  "description": "Controls qemu's snapshot mode feature. If activated, changes made to the disk are temporary and will be discarded when the VM is shutdown.",
                  "optional": 1,
                  "type": "boolean"
                },
                "volume": {
                  "alias": "file"
                },
                "werror": {
                  "description": "Write error action.",
                  "enum": [
                    "enospc",
                    "ignore",
                    "report",
                    "stop"
                  ],
                  "optional": 1,
                  "type": "string"
                }
              }
            }
          },
          {
            "name": "virtiofs[n]",
            "in": "query",
            "description": "Configuration for sharing a directory between host and guest using Virtio-fs.",
            "required": false,
            "schema": {
              "type": "string",
              "format": {
                "cache": {
                  "default": "auto",
                  "description": "The caching policy the file system should use (auto, always, metadata, never).",
                  "enum": [
                    "auto",
                    "always",
                    "metadata",
                    "never"
                  ],
                  "optional": 1,
                  "type": "string"
                },
                "direct-io": {
                  "default": 0,
                  "description": "Honor the O_DIRECT flag passed down by guest applications.",
                  "optional": 1,
                  "type": "boolean"
                },
                "dirid": {
                  "default_key": 1,
                  "description": "Mapping identifier of the directory mapping to be shared with the guest. Also used as a mount tag inside the VM.",
                  "format": "pve-configid",
                  "format_description": "mapping-id",
                  "type": "string"
                },
                "expose-acl": {
                  "default": 0,
                  "description": "Enable support for POSIX ACLs (enabled ACL implies xattr) for this mount.",
                  "optional": 1,
                  "type": "boolean"
                },
                "expose-xattr": {
                  "default": 0,
                  "description": "Enable support for extended attributes for this mount.",
                  "optional": 1,
                  "type": "boolean"
                }
              }
            }
          },
          {
            "name": "vmgenid",
            "in": "query",
            "description": "Set VM Generation ID. Use '1' to autogenerate on create or update, pass '0' to disable explicitly.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "1 (autogenerated)",
              "pattern": "(?:[a-fA-F0-9]{8}(?:-[a-fA-F0-9]{4}){3}-[a-fA-F0-9]{12}|[01])"
            }
          },
          {
            "name": "vmid",
            "in": "query",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          },
          {
            "name": "vmstatestorage",
            "in": "query",
            "description": "Default storage for VM state volumes/files.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-storage-id"
            }
          },
          {
            "name": "watchdog",
            "in": "query",
            "description": "Create a virtual hardware watchdog device.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-qm-watchdog"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/qemu/{vmid}": {
      "delete": {
        "summary": "Destroy the VM and  all used/owned volumes. Removes any VM specific permissions and firewall rules",
        "description": "Destroy the VM and  all used/owned volumes. Removes any VM specific permissions and firewall rules",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "destroy-unreferenced-disks",
            "in": "query",
            "description": "If set, destroy additionally all disks not referenced in the config but with a matching VMID from all enabled storages.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "purge",
            "in": "query",
            "description": "Remove VMID from configurations, like backup & replication jobs and HA.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "skiplock",
            "in": "query",
            "description": "Ignore locks - only root is allowed to use this option.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Directory index",
        "description": "Directory index",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "subdir": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{subdir}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/qemu/{vmid}/firewall": {
      "get": {
        "summary": "Directory index.",
        "description": "Directory index.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {},
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{name}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/qemu/{vmid}/firewall/rules": {
      "get": {
        "summary": "List rules.",
        "description": "List rules.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "pos": {
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{pos}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create new rule.",
        "description": "Create new rule.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "action",
            "in": "query",
            "description": "Rule action ('ACCEPT', 'DROP', 'REJECT') or security group name.",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "[A-Za-z][A-Za-z0-9\\-\\_]+",
              "maxLength": 20
            }
          },
          {
            "name": "comment",
            "in": "query",
            "description": "Descriptive comment.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dest",
            "in": "query",
            "description": "Restrict packet destination address. This can refer to a single IP address, an IP set ('+ipsetname') or an IP alias definition. You can also specify an address range like '20.34.101.207-201.3.9.99', or a list of IP addresses and networks (entries are separated by comma). Please do not mix IPv4 and IPv6 addresses inside such lists.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-fw-addr-spec",
              "maxLength": 512
            }
          },
          {
            "name": "digest",
            "in": "query",
            "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 64
            }
          },
          {
            "name": "dport",
            "in": "query",
            "description": "Restrict TCP/UDP destination port. You can use service names or simple numbers (0-65535), as defined in '/etc/services'. Port ranges can be specified with '\\d+:\\d+', for example '80:85', and you can use comma separated list to match several ports or ranges.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-fw-dport-spec"
            }
          },
          {
            "name": "enable",
            "in": "query",
            "description": "Flag to enable/disable a rule.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "name": "icmp-type",
            "in": "query",
            "description": "Specify icmp-type. Only valid if proto equals 'icmp' or 'icmpv6'/'ipv6-icmp'.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-fw-icmp-type-spec"
            }
          },
          {
            "name": "iface",
            "in": "query",
            "description": "Network interface name. You have to use network configuration key names for VMs and containers ('net\\d+'). Host related rules can use arbitrary strings.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-iface",
              "maxLength": 20
            }
          },
          {
            "name": "log",
            "in": "query",
            "description": "Log level for firewall rule.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "emerg",
                "alert",
                "crit",
                "err",
                "warning",
                "notice",
                "info",
                "debug",
                "nolog"
              ]
            }
          },
          {
            "name": "macro",
            "in": "query",
            "description": "Use predefined standard macro.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 128
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "pos",
            "in": "query",
            "description": "Update rule at position <pos>.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "name": "proto",
            "in": "query",
            "description": "IP protocol. You can use protocol names ('tcp'/'udp') or simple numbers, as defined in '/etc/protocols'.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-fw-protocol-spec"
            }
          },
          {
            "name": "source",
            "in": "query",
            "description": "Restrict packet source address. This can refer to a single IP address, an IP set ('+ipsetname') or an IP alias definition. You can also specify an address range like '20.34.101.207-201.3.9.99', or a list of IP addresses and networks (entries are separated by comma). Please do not mix IPv4 and IPv6 addresses inside such lists.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-fw-addr-spec",
              "maxLength": 512
            }
          },
          {
            "name": "sport",
            "in": "query",
            "description": "Restrict TCP/UDP source port. You can use service names or simple numbers (0-65535), as defined in '/etc/services'. Port ranges can be specified with '\\d+:\\d+', for example '80:85', and you can use comma separated list to match several ports or ranges.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-fw-sport-spec"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Rule type.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "in",
                "out",
                "forward",
                "group"
              ]
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/qemu/{vmid}/firewall/rules/{pos}": {
      "delete": {
        "summary": "Delete rule.",
        "description": "Delete rule.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "digest",
            "in": "query",
            "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 64
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "pos",
            "in": "path",
            "description": "Update rule at position <pos>.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Get single rule data.",
        "description": "Get single rule data.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "pos",
            "in": "path",
            "description": "Update rule at position <pos>.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "action": {
                      "type": "string"
                    },
                    "comment": {
                      "optional": 1,
                      "type": "string"
                    },
                    "dest": {
                      "optional": 1,
                      "type": "string"
                    },
                    "dport": {
                      "optional": 1,
                      "type": "string"
                    },
                    "enable": {
                      "optional": 1,
                      "type": "integer"
                    },
                    "icmp-type": {
                      "optional": 1,
                      "type": "string"
                    },
                    "iface": {
                      "optional": 1,
                      "type": "string"
                    },
                    "ipversion": {
                      "optional": 1,
                      "type": "integer"
                    },
                    "log": {
                      "description": "Log level for firewall rule",
                      "enum": [
                        "emerg",
                        "alert",
                        "crit",
                        "err",
                        "warning",
                        "notice",
                        "info",
                        "debug",
                        "nolog"
                      ],
                      "optional": 1,
                      "type": "string"
                    },
                    "macro": {
                      "optional": 1,
                      "type": "string"
                    },
                    "pos": {
                      "type": "integer"
                    },
                    "proto": {
                      "optional": 1,
                      "type": "string"
                    },
                    "source": {
                      "optional": 1,
                      "type": "string"
                    },
                    "sport": {
                      "optional": 1,
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Modify rule data.",
        "description": "Modify rule data.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "action",
            "in": "query",
            "description": "Rule action ('ACCEPT', 'DROP', 'REJECT') or security group name.",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "[A-Za-z][A-Za-z0-9\\-\\_]+",
              "maxLength": 20
            }
          },
          {
            "name": "comment",
            "in": "query",
            "description": "Descriptive comment.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "delete",
            "in": "query",
            "description": "A list of settings you want to delete.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-configid-list"
            }
          },
          {
            "name": "dest",
            "in": "query",
            "description": "Restrict packet destination address. This can refer to a single IP address, an IP set ('+ipsetname') or an IP alias definition. You can also specify an address range like '20.34.101.207-201.3.9.99', or a list of IP addresses and networks (entries are separated by comma). Please do not mix IPv4 and IPv6 addresses inside such lists.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-fw-addr-spec",
              "maxLength": 512
            }
          },
          {
            "name": "digest",
            "in": "query",
            "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 64
            }
          },
          {
            "name": "dport",
            "in": "query",
            "description": "Restrict TCP/UDP destination port. You can use service names or simple numbers (0-65535), as defined in '/etc/services'. Port ranges can be specified with '\\d+:\\d+', for example '80:85', and you can use comma separated list to match several ports or ranges.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-fw-dport-spec"
            }
          },
          {
            "name": "enable",
            "in": "query",
            "description": "Flag to enable/disable a rule.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "name": "icmp-type",
            "in": "query",
            "description": "Specify icmp-type. Only valid if proto equals 'icmp' or 'icmpv6'/'ipv6-icmp'.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-fw-icmp-type-spec"
            }
          },
          {
            "name": "iface",
            "in": "query",
            "description": "Network interface name. You have to use network configuration key names for VMs and containers ('net\\d+'). Host related rules can use arbitrary strings.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-iface",
              "maxLength": 20
            }
          },
          {
            "name": "log",
            "in": "query",
            "description": "Log level for firewall rule.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "emerg",
                "alert",
                "crit",
                "err",
                "warning",
                "notice",
                "info",
                "debug",
                "nolog"
              ]
            }
          },
          {
            "name": "macro",
            "in": "query",
            "description": "Use predefined standard macro.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 128
            }
          },
          {
            "name": "moveto",
            "in": "query",
            "description": "Move rule to new position <moveto>. Other arguments are ignored.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "pos",
            "in": "path",
            "description": "Update rule at position <pos>.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "name": "proto",
            "in": "query",
            "description": "IP protocol. You can use protocol names ('tcp'/'udp') or simple numbers, as defined in '/etc/protocols'.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-fw-protocol-spec"
            }
          },
          {
            "name": "source",
            "in": "query",
            "description": "Restrict packet source address. This can refer to a single IP address, an IP set ('+ipsetname') or an IP alias definition. You can also specify an address range like '20.34.101.207-201.3.9.99', or a list of IP addresses and networks (entries are separated by comma). Please do not mix IPv4 and IPv6 addresses inside such lists.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-fw-addr-spec",
              "maxLength": 512
            }
          },
          {
            "name": "sport",
            "in": "query",
            "description": "Restrict TCP/UDP source port. You can use service names or simple numbers (0-65535), as defined in '/etc/services'. Port ranges can be specified with '\\d+:\\d+', for example '80:85', and you can use comma separated list to match several ports or ranges.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-fw-sport-spec"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Rule type.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "in",
                "out",
                "forward",
                "group"
              ]
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/qemu/{vmid}/firewall/aliases": {
      "get": {
        "summary": "List aliases",
        "description": "List aliases",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "cidr": {
                        "type": "string"
                      },
                      "comment": {
                        "optional": 1,
                        "type": "string"
                      },
                      "digest": {
                        "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
                        "maxLength": 64,
                        "optional": 0,
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{name}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create IP or Network Alias.",
        "description": "Create IP or Network Alias.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "cidr",
            "in": "query",
            "description": "Network/IP specification in CIDR format.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "IPorCIDR"
            }
          },
          {
            "name": "comment",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Alias name.",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "[A-Za-z][A-Za-z0-9\\-\\_]+",
              "maxLength": 64
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/qemu/{vmid}/firewall/aliases/{name}": {
      "delete": {
        "summary": "Remove IP or Network alias.",
        "description": "Remove IP or Network alias.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "digest",
            "in": "query",
            "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 64
            }
          },
          {
            "name": "name",
            "in": "path",
            "description": "Alias name.",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "[A-Za-z][A-Za-z0-9\\-\\_]+",
              "maxLength": 64
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Read alias.",
        "description": "Read alias.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Alias name.",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "[A-Za-z][A-Za-z0-9\\-\\_]+",
              "maxLength": 64
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update IP or Network alias.",
        "description": "Update IP or Network alias.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "cidr",
            "in": "query",
            "description": "Network/IP specification in CIDR format.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "IPorCIDR"
            }
          },
          {
            "name": "comment",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "digest",
            "in": "query",
            "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 64
            }
          },
          {
            "name": "name",
            "in": "path",
            "description": "Alias name.",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "[A-Za-z][A-Za-z0-9\\-\\_]+",
              "maxLength": 64
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "rename",
            "in": "query",
            "description": "Rename an existing alias.",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "[A-Za-z][A-Za-z0-9\\-\\_]+",
              "maxLength": 64
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/qemu/{vmid}/firewall/ipset": {
      "get": {
        "summary": "List IPSets",
        "description": "List IPSets",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "comment": {
                        "optional": 1,
                        "type": "string"
                      },
                      "digest": {
                        "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
                        "maxLength": 64,
                        "optional": 0,
                        "type": "string"
                      },
                      "name": {
                        "description": "IP set name.",
                        "maxLength": 64,
                        "minLength": 2,
                        "pattern": "[A-Za-z][A-Za-z0-9\\-\\_]+",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{name}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create new IPSet",
        "description": "Create new IPSet",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "comment",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "digest",
            "in": "query",
            "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 64
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "IP set name.",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "[A-Za-z][A-Za-z0-9\\-\\_]+",
              "maxLength": 64
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "rename",
            "in": "query",
            "description": "Rename an existing IPSet. You can set 'rename' to the same value as 'name' to update the 'comment' of an existing IPSet.",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "[A-Za-z][A-Za-z0-9\\-\\_]+",
              "maxLength": 64
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/qemu/{vmid}/firewall/ipset/{name}": {
      "delete": {
        "summary": "Delete IPSet",
        "description": "Delete IPSet",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "force",
            "in": "query",
            "description": "Delete all members of the IPSet, if there are any.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "name",
            "in": "path",
            "description": "IP set name.",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "[A-Za-z][A-Za-z0-9\\-\\_]+",
              "maxLength": 64
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "List IPSet content",
        "description": "List IPSet content",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "IP set name.",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "[A-Za-z][A-Za-z0-9\\-\\_]+",
              "maxLength": 64
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "cidr": {
                        "type": "string"
                      },
                      "comment": {
                        "optional": 1,
                        "type": "string"
                      },
                      "digest": {
                        "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
                        "maxLength": 64,
                        "optional": 0,
                        "type": "string"
                      },
                      "nomatch": {
                        "optional": 1,
                        "type": "boolean"
                      }
                    },
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{cidr}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Add IP or Network to IPSet.",
        "description": "Add IP or Network to IPSet.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "cidr",
            "in": "query",
            "description": "Network/IP specification in CIDR format.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "IPorCIDRorAlias"
            }
          },
          {
            "name": "comment",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "path",
            "description": "IP set name.",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "[A-Za-z][A-Za-z0-9\\-\\_]+",
              "maxLength": 64
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "nomatch",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/qemu/{vmid}/firewall/ipset/{name}/{cidr}": {
      "delete": {
        "summary": "Remove IP or Network from IPSet.",
        "description": "Remove IP or Network from IPSet.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "cidr",
            "in": "path",
            "description": "Network/IP specification in CIDR format.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "IPorCIDRorAlias"
            }
          },
          {
            "name": "digest",
            "in": "query",
            "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 64
            }
          },
          {
            "name": "name",
            "in": "path",
            "description": "IP set name.",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "[A-Za-z][A-Za-z0-9\\-\\_]+",
              "maxLength": 64
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Read IP or Network settings from IPSet.",
        "description": "Read IP or Network settings from IPSet.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "cidr",
            "in": "path",
            "description": "Network/IP specification in CIDR format.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "IPorCIDRorAlias"
            }
          },
          {
            "name": "name",
            "in": "path",
            "description": "IP set name.",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "[A-Za-z][A-Za-z0-9\\-\\_]+",
              "maxLength": 64
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update IP or Network settings",
        "description": "Update IP or Network settings",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "cidr",
            "in": "path",
            "description": "Network/IP specification in CIDR format.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "IPorCIDRorAlias"
            }
          },
          {
            "name": "comment",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "digest",
            "in": "query",
            "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 64
            }
          },
          {
            "name": "name",
            "in": "path",
            "description": "IP set name.",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "[A-Za-z][A-Za-z0-9\\-\\_]+",
              "maxLength": 64
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "nomatch",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/qemu/{vmid}/firewall/options": {
      "get": {
        "summary": "Get VM firewall options.",
        "description": "Get VM firewall options.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "dhcp": {
                      "default": 0,
                      "description": "Enable DHCP.",
                      "optional": 1,
                      "type": "boolean"
                    },
                    "enable": {
                      "default": 0,
                      "description": "Enable/disable firewall rules.",
                      "optional": 1,
                      "type": "boolean"
                    },
                    "ipfilter": {
                      "description": "Enable default IP filters. This is equivalent to adding an empty ipfilter-net<id> ipset for every interface. Such ipsets implicitly contain sane default restrictions such as restricting IPv6 link local addresses to the one derived from the interface's MAC address. For containers the configured IP addresses will be implicitly added.",
                      "optional": 1,
                      "type": "boolean"
                    },
                    "log_level_in": {
                      "description": "Log level for incoming traffic.",
                      "enum": [
                        "emerg",
                        "alert",
                        "crit",
                        "err",
                        "warning",
                        "notice",
                        "info",
                        "debug",
                        "nolog"
                      ],
                      "optional": 1,
                      "type": "string"
                    },
                    "log_level_out": {
                      "description": "Log level for outgoing traffic.",
                      "enum": [
                        "emerg",
                        "alert",
                        "crit",
                        "err",
                        "warning",
                        "notice",
                        "info",
                        "debug",
                        "nolog"
                      ],
                      "optional": 1,
                      "type": "string"
                    },
                    "macfilter": {
                      "default": 1,
                      "description": "Enable/disable MAC address filter.",
                      "optional": 1,
                      "type": "boolean"
                    },
                    "ndp": {
                      "default": 0,
                      "description": "Enable NDP (Neighbor Discovery Protocol).",
                      "optional": 1,
                      "type": "boolean"
                    },
                    "policy_in": {
                      "description": "Input policy.",
                      "enum": [
                        "ACCEPT",
                        "REJECT",
                        "DROP"
                      ],
                      "optional": 1,
                      "type": "string"
                    },
                    "policy_out": {
                      "description": "Output policy.",
                      "enum": [
                        "ACCEPT",
                        "REJECT",
                        "DROP"
                      ],
                      "optional": 1,
                      "type": "string"
                    },
                    "radv": {
                      "description": "Allow sending Router Advertisement.",
                      "optional": 1,
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Set Firewall options.",
        "description": "Set Firewall options.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "delete",
            "in": "query",
            "description": "A list of settings you want to delete.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-configid-list"
            }
          },
          {
            "name": "dhcp",
            "in": "query",
            "description": "Enable DHCP.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "digest",
            "in": "query",
            "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 64
            }
          },
          {
            "name": "enable",
            "in": "query",
            "description": "Enable/disable firewall rules.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "ipfilter",
            "in": "query",
            "description": "Enable default IP filters. This is equivalent to adding an empty ipfilter-net<id> ipset for every interface. Such ipsets implicitly contain sane default restrictions such as restricting IPv6 link local addresses to the one derived from the interface's MAC address. For containers the configured IP addresses will be implicitly added.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "log_level_in",
            "in": "query",
            "description": "Log level for incoming traffic.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "emerg",
                "alert",
                "crit",
                "err",
                "warning",
                "notice",
                "info",
                "debug",
                "nolog"
              ]
            }
          },
          {
            "name": "log_level_out",
            "in": "query",
            "description": "Log level for outgoing traffic.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "emerg",
                "alert",
                "crit",
                "err",
                "warning",
                "notice",
                "info",
                "debug",
                "nolog"
              ]
            }
          },
          {
            "name": "macfilter",
            "in": "query",
            "description": "Enable/disable MAC address filter.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 1
            }
          },
          {
            "name": "ndp",
            "in": "query",
            "description": "Enable NDP (Neighbor Discovery Protocol).",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "policy_in",
            "in": "query",
            "description": "Input policy.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "ACCEPT",
                "REJECT",
                "DROP"
              ]
            }
          },
          {
            "name": "policy_out",
            "in": "query",
            "description": "Output policy.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "ACCEPT",
                "REJECT",
                "DROP"
              ]
            }
          },
          {
            "name": "radv",
            "in": "query",
            "description": "Allow sending Router Advertisement.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/qemu/{vmid}/firewall/log": {
      "get": {
        "summary": "Read firewall log",
        "description": "Read firewall log",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "since",
            "in": "query",
            "description": "Display log since this UNIX epoch.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "name": "start",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "name": "until",
            "in": "query",
            "description": "Display log until this UNIX epoch.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "n": {
                        "description": "Line number",
                        "type": "integer"
                      },
                      "t": {
                        "description": "Line text",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/qemu/{vmid}/firewall/refs": {
      "get": {
        "summary": "Lists possible IPSet/Alias reference which are allowed in source/dest properties.",
        "description": "Lists possible IPSet/Alias reference which are allowed in source/dest properties.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Only list references of specified type.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "alias",
                "ipset"
              ]
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "comment": {
                        "optional": 1,
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      },
                      "ref": {
                        "type": "string"
                      },
                      "scope": {
                        "type": "string"
                      },
                      "type": {
                        "enum": [
                          "alias",
                          "ipset"
                        ],
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/qemu/{vmid}/agent": {
      "get": {
        "summary": "QEMU Guest Agent command index.",
        "description": "QEMU Guest Agent command index.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Returns the list of QEMU Guest Agent commands",
                  "items": {
                    "properties": {},
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{name}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Execute QEMU Guest Agent commands.",
        "description": "Execute QEMU Guest Agent commands.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "command",
            "in": "query",
            "description": "The QGA command.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "fsfreeze-freeze",
                "fsfreeze-status",
                "fsfreeze-thaw",
                "fstrim",
                "get-fsinfo",
                "get-host-name",
                "get-memory-block-info",
                "get-memory-blocks",
                "get-osinfo",
                "get-time",
                "get-timezone",
                "get-users",
                "get-vcpus",
                "info",
                "network-get-interfaces",
                "ping",
                "shutdown",
                "suspend-disk",
                "suspend-hybrid",
                "suspend-ram"
              ]
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Returns an object with a single `result` property.",
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/qemu/{vmid}/agent/fsfreeze-freeze": {
      "post": {
        "summary": "Execute fsfreeze-freeze.",
        "description": "Execute fsfreeze-freeze.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Returns an object with a single `result` property.",
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/qemu/{vmid}/agent/fsfreeze-status": {
      "post": {
        "summary": "Execute fsfreeze-status.",
        "description": "Execute fsfreeze-status.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Returns an object with a single `result` property.",
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/qemu/{vmid}/agent/fsfreeze-thaw": {
      "post": {
        "summary": "Execute fsfreeze-thaw.",
        "description": "Execute fsfreeze-thaw.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Returns an object with a single `result` property.",
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/qemu/{vmid}/agent/fstrim": {
      "post": {
        "summary": "Execute fstrim.",
        "description": "Execute fstrim.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Returns an object with a single `result` property.",
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/qemu/{vmid}/agent/get-fsinfo": {
      "get": {
        "summary": "Execute get-fsinfo.",
        "description": "Execute get-fsinfo.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Returns an object with a single `result` property.",
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/qemu/{vmid}/agent/get-host-name": {
      "get": {
        "summary": "Execute get-host-name.",
        "description": "Execute get-host-name.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Returns an object with a single `result` property.",
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/qemu/{vmid}/agent/get-memory-block-info": {
      "get": {
        "summary": "Execute get-memory-block-info.",
        "description": "Execute get-memory-block-info.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Returns an object with a single `result` property.",
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/qemu/{vmid}/agent/get-memory-blocks": {
      "get": {
        "summary": "Execute get-memory-blocks.",
        "description": "Execute get-memory-blocks.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Returns an object with a single `result` property.",
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/qemu/{vmid}/agent/get-osinfo": {
      "get": {
        "summary": "Execute get-osinfo.",
        "description": "Execute get-osinfo.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Returns an object with a single `result` property.",
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/qemu/{vmid}/agent/get-time": {
      "get": {
        "summary": "Execute get-time.",
        "description": "Execute get-time.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Returns an object with a single `result` property.",
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/qemu/{vmid}/agent/get-timezone": {
      "get": {
        "summary": "Execute get-timezone.",
        "description": "Execute get-timezone.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Returns an object with a single `result` property.",
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/qemu/{vmid}/agent/get-users": {
      "get": {
        "summary": "Execute get-users.",
        "description": "Execute get-users.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Returns an object with a single `result` property.",
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/qemu/{vmid}/agent/get-vcpus": {
      "get": {
        "summary": "Execute get-vcpus.",
        "description": "Execute get-vcpus.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Returns an object with a single `result` property.",
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/qemu/{vmid}/agent/info": {
      "get": {
        "summary": "Execute info.",
        "description": "Execute info.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Returns an object with a single `result` property.",
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/qemu/{vmid}/agent/network-get-interfaces": {
      "get": {
        "summary": "Execute network-get-interfaces.",
        "description": "Execute network-get-interfaces.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Returns an object with a single `result` property.",
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/qemu/{vmid}/agent/ping": {
      "post": {
        "summary": "Execute ping.",
        "description": "Execute ping.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Returns an object with a single `result` property.",
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/qemu/{vmid}/agent/shutdown": {
      "post": {
        "summary": "Execute shutdown.",
        "description": "Execute shutdown.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Returns an object with a single `result` property.",
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/qemu/{vmid}/agent/suspend-disk": {
      "post": {
        "summary": "Execute suspend-disk.",
        "description": "Execute suspend-disk.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Returns an object with a single `result` property.",
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/qemu/{vmid}/agent/suspend-hybrid": {
      "post": {
        "summary": "Execute suspend-hybrid.",
        "description": "Execute suspend-hybrid.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Returns an object with a single `result` property.",
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/qemu/{vmid}/agent/suspend-ram": {
      "post": {
        "summary": "Execute suspend-ram.",
        "description": "Execute suspend-ram.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Returns an object with a single `result` property.",
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/qemu/{vmid}/agent/set-user-password": {
      "post": {
        "summary": "Sets the password for the given user to the given password",
        "description": "Sets the password for the given user to the given password",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "crypted",
            "in": "query",
            "description": "set to 1 if the password has already been passed through crypt()",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "The new password.",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 1024
            }
          },
          {
            "name": "username",
            "in": "query",
            "description": "The user to set the password for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Returns an object with a single `result` property.",
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/qemu/{vmid}/agent/exec": {
      "post": {
        "summary": "Executes the given command in the vm via the guest-agent and returns an object with the pid.",
        "description": "Executes the given command in the vm via the guest-agent and returns an object with the pid.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "command",
            "in": "query",
            "description": "The command as a list of program + arguments.",
            "required": true,
            "schema": {
              "type": "array"
            }
          },
          {
            "name": "input-data",
            "in": "query",
            "description": "Data to pass as 'input-data' to the guest. Usually treated as STDIN to 'command'.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 65536
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "pid": {
                      "description": "The PID of the process started by the guest-agent.",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/qemu/{vmid}/agent/exec-status": {
      "get": {
        "summary": "Gets the status of the given pid started by the guest-agent",
        "description": "Gets the status of the given pid started by the guest-agent",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "pid",
            "in": "query",
            "description": "The PID to query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "err-data": {
                      "description": "stderr of the process",
                      "optional": 1,
                      "type": "string"
                    },
                    "err-truncated": {
                      "description": "true if stderr was not fully captured",
                      "optional": 1,
                      "type": "boolean"
                    },
                    "exitcode": {
                      "description": "process exit code if it was normally terminated.",
                      "optional": 1,
                      "type": "integer"
                    },
                    "exited": {
                      "description": "Tells if the given command has exited yet.",
                      "type": "boolean"
                    },
                    "out-data": {
                      "description": "stdout of the process",
                      "optional": 1,
                      "type": "string"
                    },
                    "out-truncated": {
                      "description": "true if stdout was not fully captured",
                      "optional": 1,
                      "type": "boolean"
                    },
                    "signal": {
                      "description": "signal number or exception code if the process was abnormally terminated.",
                      "optional": 1,
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/qemu/{vmid}/agent/file-read": {
      "get": {
        "summary": "Reads the given file via guest agent. Is limited to 16777216 bytes.",
        "description": "Reads the given file via guest agent. Is limited to 16777216 bytes.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "file",
            "in": "query",
            "description": "The path to the file",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Returns an object with a `content` property.",
                  "properties": {
                    "content": {
                      "description": "The content of the file, maximum 16777216",
                      "type": "string"
                    },
                    "truncated": {
                      "description": "If set to 1, the output is truncated and not complete",
                      "optional": 1,
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/qemu/{vmid}/agent/file-write": {
      "post": {
        "summary": "Writes the given file via guest agent.",
        "description": "Writes the given file via guest agent.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "content",
            "in": "query",
            "description": "The content to write into the file.",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 61440
            }
          },
          {
            "name": "encode",
            "in": "query",
            "description": "If set, the content will be encoded as base64 (required by QEMU).Otherwise the content needs to be encoded beforehand - defaults to true.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 1
            }
          },
          {
            "name": "file",
            "in": "query",
            "description": "The path to the file.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/qemu/{vmid}/rrd": {
      "get": {
        "summary": "Read VM RRD statistics (returns PNG)",
        "description": "Read VM RRD statistics (returns PNG)",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "cf",
            "in": "query",
            "description": "The RRD consolidation function",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "AVERAGE",
                "MAX"
              ]
            }
          },
          {
            "name": "ds",
            "in": "query",
            "description": "The list of datasources you want to display.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-configid-list"
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "timeframe",
            "in": "query",
            "description": "Specify the time frame you are interested in.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "hour",
                "day",
                "week",
                "month",
                "year"
              ]
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "filename": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/qemu/{vmid}/rrddata": {
      "get": {
        "summary": "Read VM RRD statistics",
        "description": "Read VM RRD statistics",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "cf",
            "in": "query",
            "description": "The RRD consolidation function",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "AVERAGE",
                "MAX"
              ]
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "timeframe",
            "in": "query",
            "description": "Specify the time frame you are interested in.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "hour",
                "day",
                "week",
                "month",
                "year"
              ]
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {},
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/qemu/{vmid}/config": {
      "get": {
        "summary": "Get the virtual machine configuration with pending configuration changes applied. Set the 'current' parameter to get the current configuration instead.",
        "description": "Get the virtual machine configuration with pending configuration changes applied. Set the 'current' parameter to get the current configuration instead.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "current",
            "in": "query",
            "description": "Get current values (instead of pending values).",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "snapshot",
            "in": "query",
            "description": "Fetch config values from given snapshot.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-configid",
              "maxLength": 40
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "description": "The VM configuration.",
                  "properties": {
                    "acpi": {
                      "default": 1,
                      "description": "Enable/disable ACPI.",
                      "optional": 1,
                      "type": "boolean"
                    },
                    "affinity": {
                      "description": "List of host cores used to execute guest processes, for example: 0,5,8-11",
                      "format": "pve-cpuset",
                      "optional": 1,
                      "type": "string"
                    },
                    "agent": {
                      "description": "Enable/disable communication with the QEMU Guest Agent and its properties.",
                      "format": {
                        "enabled": {
                          "default": 0,
                          "default_key": 1,
                          "description": "Enable/disable communication with a QEMU Guest Agent (QGA) running in the VM.",
                          "type": "boolean"
                        },
                        "freeze-fs-on-backup": {
                          "default": 1,
                          "description": "Freeze/thaw guest filesystems on backup for consistency.",
                          "optional": 1,
                          "type": "boolean"
                        },
                        "fstrim_cloned_disks": {
                          "default": 0,
                          "description": "Run fstrim after moving a disk or migrating the VM.",
                          "optional": 1,
                          "type": "boolean"
                        },
                        "type": {
                          "default": "virtio",
                          "description": "Select the agent type",
                          "enum": [
                            "virtio",
                            "isa"
                          ],
                          "optional": 1,
                          "type": "string"
                        }
                      },
                      "optional": 1,
                      "type": "string"
                    },
                    "amd-sev": {
                      "description": "Secure Encrypted Virtualization (SEV) features by AMD CPUs",
                      "format": "pve-qemu-sev-fmt",
                      "optional": 1,
                      "type": "string"
                    },
                    "arch": {
                      "description": "Virtual processor architecture. Defaults to the host.",
                      "enum": [
                        "x86_64",
                        "aarch64"
                      ],
                      "optional": 1,
                      "type": "string"
                    },
                    "args": {
                      "description": "Arbitrary arguments passed to kvm.",
                      "optional": 1,
                      "type": "string",
                      "verbose_description": "Arbitrary arguments passed to kvm, for example:\n\nargs: -no-reboot -smbios 'type=0,vendor=FOO'\n\nNOTE: this option is for experts only.\n"
                    },
                    "audio0": {
                      "description": "Configure a audio device, useful in combination with QXL/Spice.",
                      "format": {
                        "device": {
                          "description": "Configure an audio device.",
                          "enum": [
                            "ich9-intel-hda",
                            "intel-hda",
                            "AC97"
                          ],
                          "type": "string"
                        },
                        "driver": {
                          "default": "spice",
                          "description": "Driver backend for the audio device.",
                          "enum": [
                            "spice",
                            "none"
                          ],
                          "optional": 1,
                          "type": "string"
                        }
                      },
                      "optional": 1,
                      "type": "string"
                    },
                    "autostart": {
                      "default": 0,
                      "description": "Automatic restart after crash (currently ignored).",
                      "optional": 1,
                      "type": "boolean"
                    },
                    "balloon": {
                      "description": "Amount of target RAM for the VM in MiB. Using zero disables the ballon driver.",
                      "minimum": 0,
                      "optional": 1,
                      "type": "integer"
                    },
                    "bios": {
                      "default": "seabios",
                      "description": "Select BIOS implementation.",
                      "enum": [
                        "seabios",
                        "ovmf"
                      ],
                      "optional": 1,
                      "type": "string"
                    },
                    "boot": {
                      "description": "Specify guest boot order. Use the 'order=' sub-property as usage with no key or 'legacy=' is deprecated.",
                      "format": "pve-qm-boot",
                      "optional": 1,
                      "type": "string"
                    },
                    "bootdisk": {
                      "description": "Enable booting from specified disk. Deprecated: Use 'boot: order=foo;bar' instead.",
                      "format": "pve-qm-bootdisk",
                      "optional": 1,
                      "pattern": "(ide|sata|scsi|virtio)\\d+",
                      "type": "string"
                    },
                    "cdrom": {
                      "description": "This is an alias for option -ide2",
                      "format": "pve-qm-ide",
                      "optional": 1,
                      "type": "string",
                      "typetext": "<volume>"
                    },
                    "cicustom": {
                      "description": "cloud-init: Specify custom files to replace the automatically generated ones at start.",
                      "format": "pve-qm-cicustom",
                      "optional": 1,
                      "type": "string"
                    },
                    "cipassword": {
                      "description": "cloud-init: Password to assign the user. Using this is generally not recommended. Use ssh keys instead. Also note that older cloud-init versions do not support hashed passwords.",
                      "optional": 1,
                      "type": "string"
                    },
                    "citype": {
                      "description": "Specifies the cloud-init configuration format. The default depends on the configured operating system type (`ostype`. We use the `nocloud` format for Linux, and `configdrive2` for windows.",
                      "enum": [
                        "configdrive2",
                        "nocloud",
                        "opennebula"
                      ],
                      "optional": 1,
                      "type": "string"
                    },
                    "ciupgrade": {
                      "default": 1,
                      "description": "cloud-init: do an automatic package upgrade after the first boot.",
                      "optional": 1,
                      "type": "boolean"
                    },
                    "ciuser": {
                      "description": "cloud-init: User name to change ssh keys and password for instead of the image's configured default user.",
                      "optional": 1,
                      "type": "string"
                    },
                    "cores": {
                      "default": 1,
                      "description": "The number of cores per socket.",
                      "minimum": 1,
                      "optional": 1,
                      "type": "integer"
                    },
                    "cpu": {
                      "description": "Emulated CPU type.",
                      "format": "pve-vm-cpu-conf",
                      "optional": 1,
                      "type": "string"
                    },
                    "cpulimit": {
                      "default": 0,
                      "description": "Limit of CPU usage.",
                      "maximum": 128,
                      "minimum": 0,
                      "optional": 1,
                      "type": "number",
                      "verbose_description": "Limit of CPU usage.\n\nNOTE: If the computer has 2 CPUs, it has total of '2' CPU time. Value '0' indicates no CPU limit."
                    },
                    "cpuunits": {
                      "default": "cgroup v1: 1024, cgroup v2: 100",
                      "description": "CPU weight for a VM, will be clamped to [1, 10000] in cgroup v2.",
                      "maximum": 262144,
                      "minimum": 1,
                      "optional": 1,
                      "type": "integer",
                      "verbose_description": "CPU weight for a VM. Argument is used in the kernel fair scheduler. The larger the number is, the more CPU time this VM gets. Number is relative to weights of all the other running VMs."
                    },
                    "description": {
                      "description": "Description for the VM. Shown in the web-interface VM's summary. This is saved as comment inside the configuration file.",
                      "maxLength": 8192,
                      "optional": 1,
                      "type": "string"
                    },
                    "digest": {
                      "description": "SHA1 digest of configuration file. This can be used to prevent concurrent modifications.",
                      "type": "string"
                    },
                    "efidisk0": {
                      "description": "Configure a disk for storing EFI vars.",
                      "format": {
                        "efitype": {
                          "default": "2m",
                          "description": "Size and type of the OVMF EFI vars. '4m' is newer and recommended, and required for Secure Boot. For backwards compatibility, '2m' is used if not otherwise specified. Ignored for VMs with arch=aarch64 (ARM).",
                          "enum": [
                            "2m",
                            "4m"
                          ],
                          "optional": 1,
                          "type": "string"
                        },
                        "file": {
                          "default_key": 1,
                          "description": "The drive's backing volume.",
                          "format": "pve-volume-id-or-qm-path",
                          "format_description": "volume",
                          "type": "string"
                        },
                        "format": {
                          "description": "The drive's backing file's data format.",
                          "enum": [
                            "raw",
                            "qcow",
                            "qed",
                            "qcow2",
                            "vmdk",
                            "cloop"
                          ],
                          "optional": 1,
                          "type": "string"
                        },
                        "pre-enrolled-keys": {
                          "default": 0,
                          "description": "Use am EFI vars template with distribution-specific and Microsoft Standard keys enrolled, if used with 'efitype=4m'. Note that this will enable Secure Boot by default, though it can still be turned off from within the VM.",
                          "optional": 1,
                          "type": "boolean"
                        },
                        "size": {
                          "description": "Disk size. This is purely informational and has no effect.",
                          "format": "disk-size",
                          "format_description": "DiskSize",
                          "optional": 1,
                          "type": "string"
                        },
                        "volume": {
                          "alias": "file"
                        }
                      },
                      "optional": 1,
                      "type": "string"
                    },
                    "freeze": {
                      "description": "Freeze CPU at startup (use 'c' monitor command to start execution).",
                      "optional": 1,
                      "type": "boolean"
                    },
                    "hookscript": {
                      "description": "Script that will be executed during various steps in the vms lifetime.",
                      "format": "pve-volume-id",
                      "optional": 1,
                      "type": "string"
                    },
                    "hostpci[n]": {
                      "description": "Map host PCI devices into guest.",
                      "format": "pve-qm-hostpci",
                      "optional": 1,
                      "type": "string",
                      "verbose_description": "Map host PCI devices into guest.\n\nNOTE: This option allows direct access to host hardware. So it is no longer\npossible to migrate such machines - use with special care.\n\nCAUTION: Experimental! User reported problems with this option.\n"
                    },
                    "hotplug": {
                      "default": "network,disk,usb",
                      "description": "Selectively enable hotplug features. This is a comma separated list of hotplug features: 'network', 'disk', 'cpu', 'memory', 'usb' and 'cloudinit'. Use '0' to disable hotplug completely. Using '1' as value is an alias for the default `network,disk,usb`. USB hotplugging is possible for guests with machine version >= 7.1 and ostype l26 or windows > 7.",
                      "format": "pve-hotplug-features",
                      "optional": 1,
                      "type": "string"
                    },
                    "hugepages": {
                      "description": "Enable/disable hugepages memory.",
                      "enum": [
                        "any",
                        "2",
                        "1024"
                      ],
                      "optional": 1,
                      "type": "string"
                    },
                    "ide[n]": {
                      "description": "Use volume as IDE hard disk or CD-ROM (n is 0 to 3).",
                      "format": {
                        "aio": {
                          "description": "AIO type to use.",
                          "enum": [
                            "native",
                            "threads",
                            "io_uring"
                          ],
                          "optional": 1,
                          "type": "string"
                        },
                        "backup": {
                          "description": "Whether the drive should be included when making backups.",
                          "optional": 1,
                          "type": "boolean"
                        },
                        "bps": {
                          "description": "Maximum r/w speed in bytes per second.",
                          "format_description": "bps",
                          "optional": 1,
                          "type": "integer"
                        },
                        "bps_max_length": {
                          "description": "Maximum length of I/O bursts in seconds.",
                          "format_description": "seconds",
                          "minimum": 1,
                          "optional": 1,
                          "type": "integer"
                        },
                        "bps_rd": {
                          "description": "Maximum read speed in bytes per second.",
                          "format_description": "bps",
                          "optional": 1,
                          "type": "integer"
                        },
                        "bps_rd_length": {
                          "alias": "bps_rd_max_length"
                        },
                        "bps_rd_max_length": {
                          "description": "Maximum length of read I/O bursts in seconds.",
                          "format_description": "seconds",
                          "minimum": 1,
                          "optional": 1,
                          "type": "integer"
                        },
                        "bps_wr": {
                          "description": "Maximum write speed in bytes per second.",
                          "format_description": "bps",
                          "optional": 1,
                          "type": "integer"
                        },
                        "bps_wr_length": {
                          "alias": "bps_wr_max_length"
                        },
                        "bps_wr_max_length": {
                          "description": "Maximum length of write I/O bursts in seconds.",
                          "format_description": "seconds",
                          "minimum": 1,
                          "optional": 1,
                          "type": "integer"
                        },
                        "cache": {
                          "description": "The drive's cache mode",
                          "enum": [
                            "none",
                            "writethrough",
                            "writeback",
                            "unsafe",
                            "directsync"
                          ],
                          "optional": 1,
                          "type": "string"
                        },
                        "detect_zeroes": {
                          "description": "Controls whether to detect and try to optimize writes of zeroes.",
                          "optional": 1,
                          "type": "boolean"
                        },
                        "discard": {
                          "description": "Controls whether to pass discard/trim requests to the underlying storage.",
                          "enum": [
                            "ignore",
                            "on"
                          ],
                          "optional": 1,
                          "type": "string"
                        },
                        "file": {
                          "default_key": 1,
                          "description": "The drive's backing volume.",
                          "format": "pve-volume-id-or-qm-path",
                          "format_description": "volume",
                          "type": "string"
                        },
                        "format": {
                          "description": "The drive's backing file's data format.",
                          "enum": [
                            "raw",
                            "qcow",
                            "qed",
                            "qcow2",
                            "vmdk",
                            "cloop"
                          ],
                          "optional": 1,
                          "type": "string"
                        },
                        "iops": {
                          "description": "Maximum r/w I/O in operations per second.",
                          "format_description": "iops",
                          "optional": 1,
                          "type": "integer"
                        },
                        "iops_max": {
                          "description": "Maximum unthrottled r/w I/O pool in operations per second.",
                          "format_description": "iops",
                          "optional": 1,
                          "type": "integer"
                        },
                        "iops_max_length": {
                          "description": "Maximum length of I/O bursts in seconds.",
                          "format_description": "seconds",
                          "minimum": 1,
                          "optional": 1,
                          "type": "integer"
                        },
                        "iops_rd": {
                          "description": "Maximum read I/O in operations per second.",
                          "format_description": "iops",
                          "optional": 1,
                          "type": "integer"
                        },
                        "iops_rd_length": {
                          "alias": "iops_rd_max_length"
                        },
                        "iops_rd_max": {
                          "description": "Maximum unthrottled read I/O pool in operations per second.",
                          "format_description": "iops",
                          "optional": 1,
                          "type": "integer"
                        },
                        "iops_rd_max_length": {
                          "description": "Maximum length of read I/O bursts in seconds.",
                          "format_description": "seconds",
                          "minimum": 1,
                          "optional": 1,
                          "type": "integer"
                        },
                        "iops_wr": {
                          "description": "Maximum write I/O in operations per second.",
                          "format_description": "iops",
                          "optional": 1,
                          "type": "integer"
                        },
                        "iops_wr_length": {
                          "alias": "iops_wr_max_length"
                        },
                        "iops_wr_max": {
                          "description": "Maximum unthrottled write I/O pool in operations per second.",
                          "format_description": "iops",
                          "optional": 1,
                          "type": "integer"
                        },
                        "iops_wr_max_length": {
                          "description": "Maximum length of write I/O bursts in seconds.",
                          "format_description": "seconds",
                          "minimum": 1,
                          "optional": 1,
                          "type": "integer"
                        },
                        "mbps": {
                          "description": "Maximum r/w speed in megabytes per second.",
                          "format_description": "mbps",
                          "optional": 1,
                          "type": "number"
                        },
                        "mbps_max": {
                          "description": "Maximum unthrottled r/w pool in megabytes per second.",
                          "format_description": "mbps",
                          "optional": 1,
                          "type": "number"
                        },
                        "mbps_rd": {
                          "description": "Maximum read speed in megabytes per second.",
                          "format_description": "mbps",
                          "optional": 1,
                          "type": "number"
                        },
                        "mbps_rd_max": {
                          "description": "Maximum unthrottled read pool in megabytes per second.",
                          "format_description": "mbps",
                          "optional": 1,
                          "type": "number"
                        },
                        "mbps_wr": {
                          "description": "Maximum write speed in megabytes per second.",
                          "format_description": "mbps",
                          "optional": 1,
                          "type": "number"
                        },
                        "mbps_wr_max": {
                          "description": "Maximum unthrottled write pool in megabytes per second.",
                          "format_description": "mbps",
                          "optional": 1,
                          "type": "number"
                        },
                        "media": {
                          "default": "disk",
                          "description": "The drive's media type.",
                          "enum": [
                            "cdrom",
                            "disk"
                          ],
                          "optional": 1,
                          "type": "string"
                        },
                        "model": {
                          "description": "The drive's reported model name, url-encoded, up to 40 bytes long.",
                          "format": "urlencoded",
                          "format_description": "model",
                          "maxLength": 120,
                          "optional": 1,
                          "type": "string"
                        },
                        "replicate": {
                          "default": 1,
                          "description": "Whether the drive should considered for replication jobs.",
                          "optional": 1,
                          "type": "boolean"
                        },
                        "rerror": {
                          "description": "Read error action.",
                          "enum": [
                            "ignore",
                            "report",
                            "stop"
                          ],
                          "optional": 1,
                          "type": "string"
                        },
                        "serial": {
                          "description": "The drive's reported serial number, url-encoded, up to 20 bytes long.",
                          "format": "urlencoded",
                          "format_description": "serial",
                          "maxLength": 60,
                          "optional": 1,
                          "type": "string"
                        },
                        "shared": {
                          "default": 0,
                          "description": "Mark this locally-managed volume as available on all nodes",
                          "optional": 1,
                          "type": "boolean",
                          "verbose_description": "Mark this locally-managed volume as available on all nodes.\n\nWARNING: This option does not share the volume automatically, it assumes it is shared already!"
                        },
                        "size": {
                          "description": "Disk size. This is purely informational and has no effect.",
                          "format": "disk-size",
                          "format_description": "DiskSize",
                          "optional": 1,
                          "type": "string"
                        },
                        "snapshot": {
                          "description": "Controls qemu's snapshot mode feature. If activated, changes made to the disk are temporary and will be discarded when the VM is shutdown.",
                          "optional": 1,
                          "type": "boolean"
                        },
                        "ssd": {
                          "description": "Whether to expose this drive as an SSD, rather than a rotational hard disk.",
                          "optional": 1,
                          "type": "boolean"
                        },
                        "volume": {
                          "alias": "file"
                        },
                        "werror": {
                          "description": "Write error action.",
                          "enum": [
                            "enospc",
                            "ignore",
                            "report",
                            "stop"
                          ],
                          "optional": 1,
                          "type": "string"
                        },
                        "wwn": {
                          "description": "The drive's worldwide name, encoded as 16 bytes hex string, prefixed by '0x'.",
                          "format_description": "wwn",
                          "optional": 1,
                          "pattern": "(?^:^(0x)[0-9a-fA-F]{16})",
                          "type": "string"
                        }
                      },
                      "optional": 1,
                      "type": "string"
                    },
                    "ipconfig[n]": {
                      "description": "cloud-init: Specify IP addresses and gateways for the corresponding interface.\n\nIP addresses use CIDR notation, gateways are optional but need an IP of the same type specified.\n\nThe special string 'dhcp' can be used for IP addresses to use DHCP, in which case no explicit\ngateway should be provided.\nFor IPv6 the special string 'auto' can be used to use stateless autoconfiguration. This requires\ncloud-init 19.4 or newer.\n\nIf cloud-init is enabled and neither an IPv4 nor an IPv6 address is specified, it defaults to using\ndhcp on IPv4.\n",
                      "format": "pve-qm-ipconfig",
                      "optional": 1,
                      "type": "string"
                    },
                    "ivshmem": {
                      "description": "Inter-VM shared memory. Useful for direct communication between VMs, or to the host.",
                      "format": {
                        "name": {
                          "description": "The name of the file. Will be prefixed with 'pve-shm-'. Default is the VMID. Will be deleted when the VM is stopped.",
                          "format_description": "string",
                          "optional": 1,
                          "pattern": "[a-zA-Z0-9\\-]+",
                          "type": "string"
                        },
                        "size": {
                          "description": "The size of the file in MB.",
                          "minimum": 1,
                          "type": "integer"
                        }
                      },
                      "optional": 1,
                      "type": "string"
                    },
                    "keephugepages": {
                      "default": 0,
                      "description": "Use together with hugepages. If enabled, hugepages will not not be deleted after VM shutdown and can be used for subsequent starts.",
                      "optional": 1,
                      "type": "boolean"
                    },
                    "keyboard": {
                      "default": null,
                      "description": "Keyboard layout for VNC server. This option is generally not required and is often better handled from within the guest OS.",
                      "enum": [
                        "de",
                        "de-ch",
                        "da",
                        "en-gb",
                        "en-us",
                        "es",
                        "fi",
                        "fr",
                        "fr-be",
                        "fr-ca",
                        "fr-ch",
                        "hu",
                        "is",
                        "it",
                        "ja",
                        "lt",
                        "mk",
                        "nl",
                        "no",
                        "pl",
                        "pt",
                        "pt-br",
                        "sv",
                        "sl",
                        "tr"
                      ],
                      "optional": 1,
                      "type": "string"
                    },
                    "kvm": {
                      "default": 1,
                      "description": "Enable/disable KVM hardware virtualization.",
                      "optional": 1,
                      "type": "boolean"
                    },
                    "localtime": {
                      "description": "Set the real time clock (RTC) to local time. This is enabled by default if the `ostype` indicates a Microsoft Windows OS.",
                      "optional": 1,
                      "type": "boolean"
                    },
                    "lock": {
                      "description": "Lock/unlock the VM.",
                      "enum": [
                        "backup",
                        "clone",
                        "create",
                        "migrate",
                        "rollback",
                        "snapshot",
                        "snapshot-delete",
                        "suspending",
                        "suspended"
                      ],
                      "optional": 1,
                      "type": "string"
                    },
                    "machine": {
                      "description": "Specify the QEMU machine.",
                      "format": {
                        "enable-s3": {
                          "description": "Enables S3 power state. Defaults to false beginning with machine types 9.2+pve1, true before.",
                          "optional": 1,
                          "type": "boolean"
                        },
                        "enable-s4": {
                          "description": "Enables S4 power state. Defaults to false beginning with machine types 9.2+pve1, true before.",
                          "optional": 1,
                          "type": "boolean"
                        },
                        "type": {
                          "default_key": 1,
                          "description": "Specifies the QEMU machine type.",
                          "format_description": "machine type",
                          "maxLength": 40,
                          "optional": 1,
                          "pattern": "(pc|pc(-i440fx)?-\\d+(\\.\\d+)+(\\+pve\\d+)?(\\.pxe)?|q35|pc-q35-\\d+(\\.\\d+)+(\\+pve\\d+)?(\\.pxe)?|virt(?:-\\d+(\\.\\d+)+)?(\\+pve\\d+)?)",
                          "type": "string"
                        },
                        "viommu": {
                          "description": "Enable and set guest vIOMMU variant (Intel vIOMMU needs q35 to be set as machine type).",
                          "enum": [
                            "intel",
                            "virtio"
                          ],
                          "optional": 1,
                          "type": "string"
                        }
                      },
                      "optional": 1,
                      "type": "string"
                    },
                    "memory": {
                      "description": "Memory properties.",
                      "format": {
                        "current": {
                          "default": 512,
                          "default_key": 1,
                          "description": "Current amount of online RAM for the VM in MiB. This is the maximum available memory when you use the balloon device.",
                          "minimum": 16,
                          "type": "integer"
                        }
                      },
                      "optional": 1,
                      "type": "string"
                    },
                    "migrate_downtime": {
                      "default": 0.1,
                      "description": "Set maximum tolerated downtime (in seconds) for migrations. Should the migration not be able to converge in the very end, because too much newly dirtied RAM needs to be transferred, the limit will be increased automatically step-by-step until migration can converge.",
                      "minimum": 0,
                      "optional": 1,
                      "type": "number"
                    },
                    "migrate_speed": {
                      "default": 0,
                      "description": "Set maximum speed (in MB/s) for migrations. Value 0 is no limit.",
                      "minimum": 0,
                      "optional": 1,
                      "type": "integer"
                    },
                    "name": {
                      "description": "Set a name for the VM. Only used on the configuration web interface.",
                      "format": "dns-name",
                      "optional": 1,
                      "type": "string"
                    },
                    "nameserver": {
                      "description": "cloud-init: Sets DNS server IP address for a container. Create will automatically use the setting from the host if neither searchdomain nor nameserver are set.",
                      "format": "address-list",
                      "optional": 1,
                      "type": "string"
                    },
                    "net[n]": {
                      "description": "Specify network devices.",
                      "format": {
                        "bridge": {
                          "description": "Bridge to attach the network device to. The Proxmox VE standard bridge\nis called 'vmbr0'.\n\nIf you do not specify a bridge, we create a kvm user (NATed) network\ndevice, which provides DHCP and DNS services. The following addresses\nare used:\n\n 10.0.2.2   Gateway\n 10.0.2.3   DNS Server\n 10.0.2.4   SMB Server\n\nThe DHCP server assign addresses to the guest starting from 10.0.2.15.\n",
                          "format": "pve-bridge-id",
                          "format_description": "bridge",
                          "optional": 1,
                          "type": "string"
                        },
                        "e1000": {
                          "alias": "macaddr",
                          "keyAlias": "model"
                        },
                        "e1000-82540em": {
                          "alias": "macaddr",
                          "keyAlias": "model"
                        },
                        "e1000-82544gc": {
                          "alias": "macaddr",
                          "keyAlias": "model"
                        },
                        "e1000-82545em": {
                          "alias": "macaddr",
                          "keyAlias": "model"
                        },
                        "e1000e": {
                          "alias": "macaddr",
                          "keyAlias": "model"
                        },
                        "firewall": {
                          "description": "Whether this interface should be protected by the firewall.",
                          "optional": 1,
                          "type": "boolean"
                        },
                        "i82551": {
                          "alias": "macaddr",
                          "keyAlias": "model"
                        },
                        "i82557b": {
                          "alias": "macaddr",
                          "keyAlias": "model"
                        },
                        "i82559er": {
                          "alias": "macaddr",
                          "keyAlias": "model"
                        },
                        "link_down": {
                          "description": "Whether this interface should be disconnected (like pulling the plug).",
                          "optional": 1,
                          "type": "boolean"
                        },
                        "macaddr": {
                          "description": "MAC address. That address must be unique within your network. This is automatically generated if not specified.",
                          "format": "mac-addr",
                          "format_description": "XX:XX:XX:XX:XX:XX",
                          "optional": 1,
                          "type": "string",
                          "verbose_description": "A common MAC address with the I/G (Individual/Group) bit not set."
                        },
                        "model": {
                          "default_key": 1,
                          "description": "Network Card Model. The 'virtio' model provides the best performance with very low CPU overhead. If your guest does not support this driver, it is usually best to use 'e1000'.",
                          "enum": [
                            "e1000",
                            "e1000-82540em",
                            "e1000-82544gc",
                            "e1000-82545em",
                            "e1000e",
                            "i82551",
                            "i82557b",
                            "i82559er",
                            "ne2k_isa",
                            "ne2k_pci",
                            "pcnet",
                            "rtl8139",
                            "virtio",
                            "vmxnet3"
                          ],
                          "type": "string"
                        },
                        "mtu": {
                          "description": "Force MTU of network device (VirtIO only). Setting to '1' or empty will use the bridge MTU",
                          "maximum": 65520,
                          "minimum": 1,
                          "optional": 1,
                          "type": "integer"
                        },
                        "ne2k_isa": {
                          "alias": "macaddr",
                          "keyAlias": "model"
                        },
                        "ne2k_pci": {
                          "alias": "macaddr",
                          "keyAlias": "model"
                        },
                        "pcnet": {
                          "alias": "macaddr",
                          "keyAlias": "model"
                        },
                        "queues": {
                          "description": "Number of packet queues to be used on the device.",
                          "maximum": 64,
                          "minimum": 0,
                          "optional": 1,
                          "type": "integer"
                        },
                        "rate": {
                          "description": "Rate limit in mbps (megabytes per second) as floating point number.",
                          "minimum": 0,
                          "optional": 1,
                          "type": "number"
                        },
                        "rtl8139": {
                          "alias": "macaddr",
                          "keyAlias": "model"
                        },
                        "tag": {
                          "description": "VLAN tag to apply to packets on this interface.",
                          "maximum": 4094,
                          "minimum": 1,
                          "optional": 1,
                          "type": "integer"
                        },
                        "trunks": {
                          "description": "VLAN trunks to pass through this interface.",
                          "format_description": "vlanid[;vlanid...]",
                          "optional": 1,
                          "pattern": "(?^:\\d+(?:-\\d+)?(?:;\\d+(?:-\\d+)?)*)",
                          "type": "string"
                        },
                        "virtio": {
                          "alias": "macaddr",
                          "keyAlias": "model"
                        },
                        "vmxnet3": {
                          "alias": "macaddr",
                          "keyAlias": "model"
                        }
                      },
                      "optional": 1,
                      "type": "string"
                    },
                    "numa": {
                      "default": 0,
                      "description": "Enable/disable NUMA.",
                      "optional": 1,
                      "type": "boolean"
                    },
                    "numa[n]": {
                      "description": "NUMA topology.",
                      "format": {
                        "cpus": {
                          "description": "CPUs accessing this NUMA node.",
                          "format_description": "id[-id];...",
                          "pattern": "(?^:\\d+(?:-\\d+)?(?:;\\d+(?:-\\d+)?)*)",
                          "type": "string"
                        },
                        "hostnodes": {
                          "description": "Host NUMA nodes to use.",
                          "format_description": "id[-id];...",
                          "optional": 1,
                          "pattern": "(?^:\\d+(?:-\\d+)?(?:;\\d+(?:-\\d+)?)*)",
                          "type": "string"
                        },
                        "memory": {
                          "description": "Amount of memory this NUMA node provides.",
                          "optional": 1,
                          "type": "number"
                        },
                        "policy": {
                          "description": "NUMA allocation policy.",
                          "enum": [
                            "preferred",
                            "bind",
                            "interleave"
                          ],
                          "optional": 1,
                          "type": "string"
                        }
                      },
                      "optional": 1,
                      "type": "string"
                    },
                    "onboot": {
                      "default": 0,
                      "description": "Specifies whether a VM will be started during system bootup.",
                      "optional": 1,
                      "type": "boolean"
                    },
                    "ostype": {
                      "description": "Specify guest operating system.",
                      "enum": [
                        "other",
                        "wxp",
                        "w2k",
                        "w2k3",
                        "w2k8",
                        "wvista",
                        "win7",
                        "win8",
                        "win10",
                        "win11",
                        "l24",
                        "l26",
                        "solaris"
                      ],
                      "optional": 1,
                      "type": "string",
                      "verbose_description": "Specify guest operating system. This is used to enable special\noptimization/features for specific operating systems:\n\n[horizontal]\nother;; unspecified OS\nwxp;; Microsoft Windows XP\nw2k;; Microsoft Windows 2000\nw2k3;; Microsoft Windows 2003\nw2k8;; Microsoft Windows 2008\nwvista;; Microsoft Windows Vista\nwin7;; Microsoft Windows 7\nwin8;; Microsoft Windows 8/2012/2012r2\nwin10;; Microsoft Windows 10/2016/2019\nwin11;; Microsoft Windows 11/2022/2025\nl24;; Linux 2.4 Kernel\nl26;; Linux 2.6 - 6.X Kernel\nsolaris;; Solaris/OpenSolaris/OpenIndiania kernel\n"
                    },
                    "parallel[n]": {
                      "description": "Map host parallel devices (n is 0 to 2).",
                      "optional": 1,
                      "pattern": "/dev/parport\\d+|/dev/usb/lp\\d+",
                      "type": "string",
                      "verbose_description": "Map host parallel devices (n is 0 to 2).\n\nNOTE: This option allows direct access to host hardware. So it is no longer possible to migrate such\nmachines - use with special care.\n\nCAUTION: Experimental! User reported problems with this option.\n"
                    },
                    "protection": {
                      "default": 0,
                      "description": "Sets the protection flag of the VM. This will disable the remove VM and remove disk operations.",
                      "optional": 1,
                      "type": "boolean"
                    },
                    "reboot": {
                      "default": 1,
                      "description": "Allow reboot. If set to '0' the VM exit on reboot.",
                      "optional": 1,
                      "type": "boolean"
                    },
                    "rng0": {
                      "description": "Configure a VirtIO-based Random Number Generator.",
                      "format": "pve-qm-rng",
                      "optional": 1,
                      "type": "string"
                    },
                    "running-nets-host-mtu": {
                      "description": "List of VirtIO network devices and their effective host_mtu setting. A value of 0 means that the host_mtu parameter is to be avoided for the corresponding device. This is used internally for snapshots.",
                      "optional": 1,
                      "pattern": "net\\d+=\\d+(,net\\d+=\\d+)*",
                      "type": "string"
                    },
                    "sata[n]": {
                      "description": "Use volume as SATA hard disk or CD-ROM (n is 0 to 5).",
                      "format": {
                        "aio": {
                          "description": "AIO type to use.",
                          "enum": [
                            "native",
                            "threads",
                            "io_uring"
                          ],
                          "optional": 1,
                          "type": "string"
                        },
                        "backup": {
                          "description": "Whether the drive should be included when making backups.",
                          "optional": 1,
                          "type": "boolean"
                        },
                        "bps": {
                          "description": "Maximum r/w speed in bytes per second.",
                          "format_description": "bps",
                          "optional": 1,
                          "type": "integer"
                        },
                        "bps_max_length": {
                          "description": "Maximum length of I/O bursts in seconds.",
                          "format_description": "seconds",
                          "minimum": 1,
                          "optional": 1,
                          "type": "integer"
                        },
                        "bps_rd": {
                          "description": "Maximum read speed in bytes per second.",
                          "format_description": "bps",
                          "optional": 1,
                          "type": "integer"
                        },
                        "bps_rd_length": {
                          "alias": "bps_rd_max_length"
                        },
                        "bps_rd_max_length": {
                          "description": "Maximum length of read I/O bursts in seconds.",
                          "format_description": "seconds",
                          "minimum": 1,
                          "optional": 1,
                          "type": "integer"
                        },
                        "bps_wr": {
                          "description": "Maximum write speed in bytes per second.",
                          "format_description": "bps",
                          "optional": 1,
                          "type": "integer"
                        },
                        "bps_wr_length": {
                          "alias": "bps_wr_max_length"
                        },
                        "bps_wr_max_length": {
                          "description": "Maximum length of write I/O bursts in seconds.",
                          "format_description": "seconds",
                          "minimum": 1,
                          "optional": 1,
                          "type": "integer"
                        },
                        "cache": {
                          "description": "The drive's cache mode",
                          "enum": [
                            "none",
                            "writethrough",
                            "writeback",
                            "unsafe",
                            "directsync"
                          ],
                          "optional": 1,
                          "type": "string"
                        },
                        "detect_zeroes": {
                          "description": "Controls whether to detect and try to optimize writes of zeroes.",
                          "optional": 1,
                          "type": "boolean"
                        },
                        "discard": {
                          "description": "Controls whether to pass discard/trim requests to the underlying storage.",
                          "enum": [
                            "ignore",
                            "on"
                          ],
                          "optional": 1,
                          "type": "string"
                        },
                        "file": {
                          "default_key": 1,
                          "description": "The drive's backing volume.",
                          "format": "pve-volume-id-or-qm-path",
                          "format_description": "volume",
                          "type": "string"
                        },
                        "format": {
                          "description": "The drive's backing file's data format.",
                          "enum": [
                            "raw",
                            "qcow",
                            "qed",
                            "qcow2",
                            "vmdk",
                            "cloop"
                          ],
                          "optional": 1,
                          "type": "string"
                        },
                        "iops": {
                          "description": "Maximum r/w I/O in operations per second.",
                          "format_description": "iops",
                          "optional": 1,
                          "type": "integer"
                        },
                        "iops_max": {
                          "description": "Maximum unthrottled r/w I/O pool in operations per second.",
                          "format_description": "iops",
                          "optional": 1,
                          "type": "integer"
                        },
                        "iops_max_length": {
                          "description": "Maximum length of I/O bursts in seconds.",
                          "format_description": "seconds",
                          "minimum": 1,
                          "optional": 1,
                          "type": "integer"
                        },
                        "iops_rd": {
                          "description": "Maximum read I/O in operations per second.",
                          "format_description": "iops",
                          "optional": 1,
                          "type": "integer"
                        },
                        "iops_rd_length": {
                          "alias": "iops_rd_max_length"
                        },
                        "iops_rd_max": {
                          "description": "Maximum unthrottled read I/O pool in operations per second.",
                          "format_description": "iops",
                          "optional": 1,
                          "type": "integer"
                        },
                        "iops_rd_max_length": {
                          "description": "Maximum length of read I/O bursts in seconds.",
                          "format_description": "seconds",
                          "minimum": 1,
                          "optional": 1,
                          "type": "integer"
                        },
                        "iops_wr": {
                          "description": "Maximum write I/O in operations per second.",
                          "format_description": "iops",
                          "optional": 1,
                          "type": "integer"
                        },
                        "iops_wr_length": {
                          "alias": "iops_wr_max_length"
                        },
                        "iops_wr_max": {
                          "description": "Maximum unthrottled write I/O pool in operations per second.",
                          "format_description": "iops",
                          "optional": 1,
                          "type": "integer"
                        },
                        "iops_wr_max_length": {
                          "description": "Maximum length of write I/O bursts in seconds.",
                          "format_description": "seconds",
                          "minimum": 1,
                          "optional": 1,
                          "type": "integer"
                        },
                        "mbps": {
                          "description": "Maximum r/w speed in megabytes per second.",
                          "format_description": "mbps",
                          "optional": 1,
                          "type": "number"
                        },
                        "mbps_max": {
                          "description": "Maximum unthrottled r/w pool in megabytes per second.",
                          "format_description": "mbps",
                          "optional": 1,
                          "type": "number"
                        },
                        "mbps_rd": {
                          "description": "Maximum read speed in megabytes per second.",
                          "format_description": "mbps",
                          "optional": 1,
                          "type": "number"
                        },
                        "mbps_rd_max": {
                          "description": "Maximum unthrottled read pool in megabytes per second.",
                          "format_description": "mbps",
                          "optional": 1,
                          "type": "number"
                        },
                        "mbps_wr": {
                          "description": "Maximum write speed in megabytes per second.",
                          "format_description": "mbps",
                          "optional": 1,
                          "type": "number"
                        },
                        "mbps_wr_max": {
                          "description": "Maximum unthrottled write pool in megabytes per second.",
                          "format_description": "mbps",
                          "optional": 1,
                          "type": "number"
                        },
                        "media": {
                          "default": "disk",
                          "description": "The drive's media type.",
                          "enum": [
                            "cdrom",
                            "disk"
                          ],
                          "optional": 1,
                          "type": "string"
                        },
                        "replicate": {
                          "default": 1,
                          "description": "Whether the drive should considered for replication jobs.",
                          "optional": 1,
                          "type": "boolean"
                        },
                        "rerror": {
                          "description": "Read error action.",
                          "enum": [
                            "ignore",
                            "report",
                            "stop"
                          ],
                          "optional": 1,
                          "type": "string"
                        },
                        "serial": {
                          "description": "The drive's reported serial number, url-encoded, up to 20 bytes long.",
                          "format": "urlencoded",
                          "format_description": "serial",
                          "maxLength": 60,
                          "optional": 1,
                          "type": "string"
                        },
                        "shared": {
                          "default": 0,
                          "description": "Mark this locally-managed volume as available on all nodes",
                          "optional": 1,
                          "type": "boolean",
                          "verbose_description": "Mark this locally-managed volume as available on all nodes.\n\nWARNING: This option does not share the volume automatically, it assumes it is shared already!"
                        },
                        "size": {
                          "description": "Disk size. This is purely informational and has no effect.",
                          "format": "disk-size",
                          "format_description": "DiskSize",
                          "optional": 1,
                          "type": "string"
                        },
                        "snapshot": {
                          "description": "Controls qemu's snapshot mode feature. If activated, changes made to the disk are temporary and will be discarded when the VM is shutdown.",
                          "optional": 1,
                          "type": "boolean"
                        },
                        "ssd": {
                          "description": "Whether to expose this drive as an SSD, rather than a rotational hard disk.",
                          "optional": 1,
                          "type": "boolean"
                        },
                        "volume": {
                          "alias": "file"
                        },
                        "werror": {
                          "description": "Write error action.",
                          "enum": [
                            "enospc",
                            "ignore",
                            "report",
                            "stop"
                          ],
                          "optional": 1,
                          "type": "string"
                        },
                        "wwn": {
                          "description": "The drive's worldwide name, encoded as 16 bytes hex string, prefixed by '0x'.",
                          "format_description": "wwn",
                          "optional": 1,
                          "pattern": "(?^:^(0x)[0-9a-fA-F]{16})",
                          "type": "string"
                        }
                      },
                      "optional": 1,
                      "type": "string"
                    },
                    "scsi[n]": {
                      "description": "Use volume as SCSI hard disk or CD-ROM (n is 0 to 30).",
                      "format": {
                        "aio": {
                          "description": "AIO type to use.",
                          "enum": [
                            "native",
                            "threads",
                            "io_uring"
                          ],
                          "optional": 1,
                          "type": "string"
                        },
                        "backup": {
                          "description": "Whether the drive should be included when making backups.",
                          "optional": 1,
                          "type": "boolean"
                        },
                        "bps": {
                          "description": "Maximum r/w speed in bytes per second.",
                          "format_description": "bps",
                          "optional": 1,
                          "type": "integer"
                        },
                        "bps_max_length": {
                          "description": "Maximum length of I/O bursts in seconds.",
                          "format_description": "seconds",
                          "minimum": 1,
                          "optional": 1,
                          "type": "integer"
                        },
                        "bps_rd": {
                          "description": "Maximum read speed in bytes per second.",
                          "format_description": "bps",
                          "optional": 1,
                          "type": "integer"
                        },
                        "bps_rd_length": {
                          "alias": "bps_rd_max_length"
                        },
                        "bps_rd_max_length": {
                          "description": "Maximum length of read I/O bursts in seconds.",
                          "format_description": "seconds",
                          "minimum": 1,
                          "optional": 1,
                          "type": "integer"
                        },
                        "bps_wr": {
                          "description": "Maximum write speed in bytes per second.",
                          "format_description": "bps",
                          "optional": 1,
                          "type": "integer"
                        },
                        "bps_wr_length": {
                          "alias": "bps_wr_max_length"
                        },
                        "bps_wr_max_length": {
                          "description": "Maximum length of write I/O bursts in seconds.",
                          "format_description": "seconds",
                          "minimum": 1,
                          "optional": 1,
                          "type": "integer"
                        },
                        "cache": {
                          "description": "The drive's cache mode",
                          "enum": [
                            "none",
                            "writethrough",
                            "writeback",
                            "unsafe",
                            "directsync"
                          ],
                          "optional": 1,
                          "type": "string"
                        },
                        "detect_zeroes": {
                          "description": "Controls whether to detect and try to optimize writes of zeroes.",
                          "optional": 1,
                          "type": "boolean"
                        },
                        "discard": {
                          "description": "Controls whether to pass discard/trim requests to the underlying storage.",
                          "enum": [
                            "ignore",
                            "on"
                          ],
                          "optional": 1,
                          "type": "string"
                        },
                        "file": {
                          "default_key": 1,
                          "description": "The drive's backing volume.",
                          "format": "pve-volume-id-or-qm-path",
                          "format_description": "volume",
                          "type": "string"
                        },
                        "format": {
                          "description": "The drive's backing file's data format.",
                          "enum": [
                            "raw",
                            "qcow",
                            "qed",
                            "qcow2",
                            "vmdk",
                            "cloop"
                          ],
                          "optional": 1,
                          "type": "string"
                        },
                        "iops": {
                          "description": "Maximum r/w I/O in operations per second.",
                          "format_description": "iops",
                          "optional": 1,
                          "type": "integer"
                        },
                        "iops_max": {
                          "description": "Maximum unthrottled r/w I/O pool in operations per second.",
                          "format_description": "iops",
                          "optional": 1,
                          "type": "integer"
                        },
                        "iops_max_length": {
                          "description": "Maximum length of I/O bursts in seconds.",
                          "format_description": "seconds",
                          "minimum": 1,
                          "optional": 1,
                          "type": "integer"
                        },
                        "iops_rd": {
                          "description": "Maximum read I/O in operations per second.",
                          "format_description": "iops",
                          "optional": 1,
                          "type": "integer"
                        },
                        "iops_rd_length": {
                          "alias": "iops_rd_max_length"
                        },
                        "iops_rd_max": {
                          "description": "Maximum unthrottled read I/O pool in operations per second.",
                          "format_description": "iops",
                          "optional": 1,
                          "type": "integer"
                        },
                        "iops_rd_max_length": {
                          "description": "Maximum length of read I/O bursts in seconds.",
                          "format_description": "seconds",
                          "minimum": 1,
                          "optional": 1,
                          "type": "integer"
                        },
                        "iops_wr": {
                          "description": "Maximum write I/O in operations per second.",
                          "format_description": "iops",
                          "optional": 1,
                          "type": "integer"
                        },
                        "iops_wr_length": {
                          "alias": "iops_wr_max_length"
                        },
                        "iops_wr_max": {
                          "description": "Maximum unthrottled write I/O pool in operations per second.",
                          "format_description": "iops",
                          "optional": 1,
                          "type": "integer"
                        },
                        "iops_wr_max_length": {
                          "description": "Maximum length of write I/O bursts in seconds.",
                          "format_description": "seconds",
                          "minimum": 1,
                          "optional": 1,
                          "type": "integer"
                        },
                        "iothread": {
                          "description": "Whether to use iothreads for this drive",
                          "optional": 1,
                          "type": "boolean"
                        },
                        "mbps": {
                          "description": "Maximum r/w speed in megabytes per second.",
                          "format_description": "mbps",
                          "optional": 1,
                          "type": "number"
                        },
                        "mbps_max": {
                          "description": "Maximum unthrottled r/w pool in megabytes per second.",
                          "format_description": "mbps",
                          "optional": 1,
                          "type": "number"
                        },
                        "mbps_rd": {
                          "description": "Maximum read speed in megabytes per second.",
                          "format_description": "mbps",
                          "optional": 1,
                          "type": "number"
                        },
                        "mbps_rd_max": {
                          "description": "Maximum unthrottled read pool in megabytes per second.",
                          "format_description": "mbps",
                          "optional": 1,
                          "type": "number"
                        },
                        "mbps_wr": {
                          "description": "Maximum write speed in megabytes per second.",
                          "format_description": "mbps",
                          "optional": 1,
                          "type": "number"
                        },
                        "mbps_wr_max": {
                          "description": "Maximum unthrottled write pool in megabytes per second.",
                          "format_description": "mbps",
                          "optional": 1,
                          "type": "number"
                        },
                        "media": {
                          "default": "disk",
                          "description": "The drive's media type.",
                          "enum": [
                            "cdrom",
                            "disk"
                          ],
                          "optional": 1,
                          "type": "string"
                        },
                        "product": {
                          "description": "The drive's product name, up to 16 bytes long.",
                          "format_description": "product",
                          "optional": 1,
                          "pattern": "[A-Za-z0-9\\-_\\s]{,16}",
                          "type": "string"
                        },
                        "queues": {
                          "description": "Number of queues.",
                          "minimum": 2,
                          "optional": 1,
                          "type": "integer"
                        },
                        "replicate": {
                          "default": 1,
                          "description": "Whether the drive should considered for replication jobs.",
                          "optional": 1,
                          "type": "boolean"
                        },
                        "rerror": {
                          "description": "Read error action.",
                          "enum": [
                            "ignore",
                            "report",
                            "stop"
                          ],
                          "optional": 1,
                          "type": "string"
                        },
                        "ro": {
                          "description": "Whether the drive is read-only.",
                          "optional": 1,
                          "type": "boolean"
                        },
                        "scsiblock": {
                          "default": 0,
                          "description": "whether to use scsi-block for full passthrough of host block device\n\nWARNING: can lead to I/O errors in combination with low memory or high memory fragmentation on host",
                          "optional": 1,
                          "type": "boolean"
                        },
                        "serial": {
                          "description": "The drive's reported serial number, url-encoded, up to 20 bytes long.",
                          "format": "urlencoded",
                          "format_description": "serial",
                          "maxLength": 60,
                          "optional": 1,
                          "type": "string"
                        },
                        "shared": {
                          "default": 0,
                          "description": "Mark this locally-managed volume as available on all nodes",
                          "optional": 1,
                          "type": "boolean",
                          "verbose_description": "Mark this locally-managed volume as available on all nodes.\n\nWARNING: This option does not share the volume automatically, it assumes it is shared already!"
                        },
                        "size": {
                          "description": "Disk size. This is purely informational and has no effect.",
                          "format": "disk-size",
                          "format_description": "DiskSize",
                          "optional": 1,
                          "type": "string"
                        },
                        "snapshot": {
                          "description": "Controls qemu's snapshot mode feature. If activated, changes made to the disk are temporary and will be discarded when the VM is shutdown.",
                          "optional": 1,
                          "type": "boolean"
                        },
                        "ssd": {
                          "description": "Whether to expose this drive as an SSD, rather than a rotational hard disk.",
                          "optional": 1,
                          "type": "boolean"
                        },
                        "vendor": {
                          "description": "The drive's vendor name, up to 8 bytes long.",
                          "format_description": "vendor",
                          "optional": 1,
                          "pattern": "[A-Za-z0-9\\-_\\s]{,8}",
                          "type": "string"
                        },
                        "volume": {
                          "alias": "file"
                        },
                        "werror": {
                          "description": "Write error action.",
                          "enum": [
                            "enospc",
                            "ignore",
                            "report",
                            "stop"
                          ],
                          "optional": 1,
                          "type": "string"
                        },
                        "wwn": {
                          "description": "The drive's worldwide name, encoded as 16 bytes hex string, prefixed by '0x'.",
                          "format_description": "wwn",
                          "optional": 1,
                          "pattern": "(?^:^(0x)[0-9a-fA-F]{16})",
                          "type": "string"
                        }
                      },
                      "optional": 1,
                      "type": "string"
                    },
                    "scsihw": {
                      "default": "lsi",
                      "description": "SCSI controller model",
                      "enum": [
                        "lsi",
                        "lsi53c810",
                        "virtio-scsi-pci",
                        "virtio-scsi-single",
                        "megasas",
                        "pvscsi"
                      ],
                      "optional": 1,
                      "type": "string"
                    },
                    "searchdomain": {
                      "description": "cloud-init: Sets DNS search domains for a container. Create will automatically use the setting from the host if neither searchdomain nor nameserver are set.",
                      "optional": 1,
                      "type": "string"
                    },
                    "serial[n]": {
                      "description": "Create a serial device inside the VM (n is 0 to 3)",
                      "optional": 1,
                      "pattern": "(/dev/.+|socket)",
                      "type": "string",
                      "verbose_description": "Create a serial device inside the VM (n is 0 to 3), and pass through a\nhost serial device (i.e. /dev/ttyS0), or create a unix socket on the\nhost side (use 'qm terminal' to open a terminal connection).\n\nNOTE: If you pass through a host serial device, it is no longer possible to migrate such machines -\nuse with special care.\n\nCAUTION: Experimental! User reported problems with this option.\n"
                    },
                    "shares": {
                      "default": 1000,
                      "description": "Amount of memory shares for auto-ballooning. The larger the number is, the more memory this VM gets. Number is relative to weights of all other running VMs. Using zero disables auto-ballooning. Auto-ballooning is done by pvestatd.",
                      "maximum": 50000,
                      "minimum": 0,
                      "optional": 1,
                      "type": "integer"
                    },
                    "smbios1": {
                      "description": "Specify SMBIOS type 1 fields.",
                      "format": "pve-qm-smbios1",
                      "maxLength": 512,
                      "optional": 1,
                      "type": "string"
                    },
                    "smp": {
                      "default": 1,
                      "description": "The number of CPUs. Please use option -sockets instead.",
                      "minimum": 1,
                      "optional": 1,
                      "type": "integer"
                    },
                    "sockets": {
                      "default": 1,
                      "description": "The number of CPU sockets.",
                      "minimum": 1,
                      "optional": 1,
                      "type": "integer"
                    },
                    "spice_enhancements": {
                      "description": "Configure additional enhancements for SPICE.",
                      "format": {
                        "foldersharing": {
                          "default": "0",
                          "description": "Enable folder sharing via SPICE. Needs Spice-WebDAV daemon installed in the VM.",
                          "optional": 1,
                          "type": "boolean"
                        },
                        "videostreaming": {
                          "default": "off",
                          "description": "Enable video streaming. Uses compression for detected video streams.",
                          "enum": [
                            "off",
                            "all",
                            "filter"
                          ],
                          "optional": 1,
                          "type": "string"
                        }
                      },
                      "optional": 1,
                      "type": "string"
                    },
                    "sshkeys": {
                      "description": "cloud-init: Setup public SSH keys (one key per line, OpenSSH format).",
                      "format": "urlencoded",
                      "optional": 1,
                      "type": "string"
                    },
                    "startdate": {
                      "default": "now",
                      "description": "Set the initial date of the real time clock. Valid format for date are:'now' or '2006-06-17T16:01:21' or '2006-06-17'.",
                      "optional": 1,
                      "pattern": "(now|\\d{4}-\\d{1,2}-\\d{1,2}(T\\d{1,2}:\\d{1,2}:\\d{1,2})?)",
                      "type": "string",
                      "typetext": "(now | YYYY-MM-DD | YYYY-MM-DDTHH:MM:SS)"
                    },
                    "startup": {
                      "description": "Startup and shutdown behavior. Order is a non-negative number defining the general startup order. Shutdown in done with reverse ordering. Additionally you can set the 'up' or 'down' delay in seconds, which specifies a delay to wait before the next VM is started or stopped.",
                      "format": "pve-startup-order",
                      "optional": 1,
                      "type": "string",
                      "typetext": "[[order=]\\d+] [,up=\\d+] [,down=\\d+] "
                    },
                    "tablet": {
                      "default": 1,
                      "description": "Enable/disable the USB tablet device.",
                      "optional": 1,
                      "type": "boolean",
                      "verbose_description": "Enable/disable the USB tablet device. This device is usually needed to allow absolute mouse positioning with VNC. Else the mouse runs out of sync with normal VNC clients. If you're running lots of console-only guests on one host, you may consider disabling this to save some context switches. This is turned off by default if you use spice (`qm set <vmid> --vga qxl`)."
                    },
                    "tags": {
                      "description": "Tags of the VM. This is only meta information.",
                      "format": "pve-tag-list",
                      "optional": 1,
                      "type": "string"
                    },
                    "tdf": {
                      "default": 0,
                      "description": "Enable/disable time drift fix.",
                      "optional": 1,
                      "type": "boolean"
                    },
                    "template": {
                      "default": 0,
                      "description": "Enable/disable Template.",
                      "optional": 1,
                      "type": "boolean"
                    },
                    "tpmstate0": {
                      "description": "Configure a Disk for storing TPM state. The format is fixed to 'raw'.",
                      "format": {
                        "file": {
                          "default_key": 1,
                          "description": "The drive's backing volume.",
                          "format": "pve-volume-id-or-qm-path",
                          "format_description": "volume",
                          "type": "string"
                        },
                        "size": {
                          "description": "Disk size. This is purely informational and has no effect.",
                          "format": "disk-size",
                          "format_description": "DiskSize",
                          "optional": 1,
                          "type": "string"
                        },
                        "version": {
                          "default": "v1.2",
                          "description": "The TPM interface version. v2.0 is newer and should be preferred. Note that this cannot be changed later on.",
                          "enum": [
                            "v1.2",
                            "v2.0"
                          ],
                          "optional": 1,
                          "type": "string"
                        },
                        "volume": {
                          "alias": "file"
                        }
                      },
                      "optional": 1,
                      "type": "string"
                    },
                    "unused[n]": {
                      "description": "Reference to unused volumes. This is used internally, and should not be modified manually.",
                      "format": {
                        "file": {
                          "default_key": 1,
                          "description": "The drive's backing volume.",
                          "format": "pve-volume-id",
                          "format_description": "volume",
                          "type": "string"
                        },
                        "volume": {
                          "alias": "file"
                        }
                      },
                      "optional": 1,
                      "type": "string"
                    },
                    "usb[n]": {
                      "description": "Configure an USB device (n is 0 to 4, for machine version >= 7.1 and ostype l26 or windows > 7, n can be up to 14).",
                      "format": {
                        "host": {
                          "default_key": 1,
                          "description": "The Host USB device or port or the value 'spice'. HOSTUSBDEVICE syntax is:\n\n 'bus-port(.port)*' (decimal numbers) or\n 'vendor_id:product_id' (hexadecimal numbers) or\n 'spice'\n\nYou can use the 'lsusb -t' command to list existing usb devices.\n\nNOTE: This option allows direct access to host hardware. So it is no longer possible to migrate such\nmachines - use with special care.\n\nThe value 'spice' can be used to add a usb redirection devices for spice.\n\nEither this or the 'mapping' key must be set.\n",
                          "format_description": "HOSTUSBDEVICE|spice",
                          "optional": 1,
                          "pattern": "(?^:(?:(?:(?^:(0x)?([0-9A-Fa-f]{4}):(0x)?([0-9A-Fa-f]{4})))|(?:(?^:(\\d+)\\-(\\d+(\\.\\d+)*)))|[Ss][Pp][Ii][Cc][Ee]))",
                          "type": "string"
                        },
                        "mapping": {
                          "description": "The ID of a cluster wide mapping. Either this or the default-key 'host' must be set.",
                          "format": "pve-configid",
                          "format_description": "mapping-id",
                          "optional": 1,
                          "type": "string"
                        },
                        "usb3": {
                          "default": 0,
                          "description": "Specifies whether if given host option is a USB3 device or port. For modern guests (machine version >= 7.1 and ostype l26 and windows > 7), this flag is irrelevant (all devices are plugged into a xhci controller).",
                          "optional": 1,
                          "type": "boolean"
                        }
                      },
                      "optional": 1,
                      "type": "string"
                    },
                    "vcpus": {
                      "default": 0,
                      "description": "Number of hotplugged vcpus.",
                      "minimum": 1,
                      "optional": 1,
                      "type": "integer"
                    },
                    "vga": {
                      "description": "Configure the VGA hardware.",
                      "format": {
                        "clipboard": {
                          "description": "Enable a specific clipboard. If not set, depending on the display type the SPICE one will be added. Migration with VNC clipboard is not yet supported!",
                          "enum": [
                            "vnc"
                          ],
                          "optional": 1,
                          "type": "string"
                        },
                        "memory": {
                          "description": "Sets the VGA memory (in MiB). Has no effect with serial display.",
                          "maximum": 512,
                          "minimum": 4,
                          "optional": 1,
                          "type": "integer"
                        },
                        "type": {
                          "default": "std",
                          "default_key": 1,
                          "description": "Select the VGA type. Using type 'cirrus' is not recommended.",
                          "enum": [
                            "cirrus",
                            "qxl",
                            "qxl2",
                            "qxl3",
                            "qxl4",
                            "none",
                            "serial0",
                            "serial1",
                            "serial2",
                            "serial3",
                            "std",
                            "virtio",
                            "virtio-gl",
                            "vmware"
                          ],
                          "optional": 1,
                          "type": "string"
                        }
                      },
                      "optional": 1,
                      "type": "string",
                      "verbose_description": "Configure the VGA Hardware. If you want to use high resolution modes (>= 1280x1024x16) you may need to increase the vga memory option. Since QEMU 2.9 the default VGA display type is 'std' for all OS types besides some Windows versions (XP and older) which use 'cirrus'. The 'qxl' option enables the SPICE display server. For win* OS you can select how many independent displays you want, Linux guests can add displays them self.\nYou can also run without any graphic card, using a serial device as terminal."
                    },
                    "virtio[n]": {
                      "description": "Use volume as VIRTIO hard disk (n is 0 to 15).",
                      "format": {
                        "aio": {
                          "description": "AIO type to use.",
                          "enum": [
                            "native",
                            "threads",
                            "io_uring"
                          ],
                          "optional": 1,
                          "type": "string"
                        },
                        "backup": {
                          "description": "Whether the drive should be included when making backups.",
                          "optional": 1,
                          "type": "boolean"
                        },
                        "bps": {
                          "description": "Maximum r/w speed in bytes per second.",
                          "format_description": "bps",
                          "optional": 1,
                          "type": "integer"
                        },
                        "bps_max_length": {
                          "description": "Maximum length of I/O bursts in seconds.",
                          "format_description": "seconds",
                          "minimum": 1,
                          "optional": 1,
                          "type": "integer"
                        },
                        "bps_rd": {
                          "description": "Maximum read speed in bytes per second.",
                          "format_description": "bps",
                          "optional": 1,
                          "type": "integer"
                        },
                        "bps_rd_length": {
                          "alias": "bps_rd_max_length"
                        },
                        "bps_rd_max_length": {
                          "description": "Maximum length of read I/O bursts in seconds.",
                          "format_description": "seconds",
                          "minimum": 1,
                          "optional": 1,
                          "type": "integer"
                        },
                        "bps_wr": {
                          "description": "Maximum write speed in bytes per second.",
                          "format_description": "bps",
                          "optional": 1,
                          "type": "integer"
                        },
                        "bps_wr_length": {
                          "alias": "bps_wr_max_length"
                        },
                        "bps_wr_max_length": {
                          "description": "Maximum length of write I/O bursts in seconds.",
                          "format_description": "seconds",
                          "minimum": 1,
                          "optional": 1,
                          "type": "integer"
                        },
                        "cache": {
                          "description": "The drive's cache mode",
                          "enum": [
                            "none",
                            "writethrough",
                            "writeback",
                            "unsafe",
                            "directsync"
                          ],
                          "optional": 1,
                          "type": "string"
                        },
                        "detect_zeroes": {
                          "description": "Controls whether to detect and try to optimize writes of zeroes.",
                          "optional": 1,
                          "type": "boolean"
                        },
                        "discard": {
                          "description": "Controls whether to pass discard/trim requests to the underlying storage.",
                          "enum": [
                            "ignore",
                            "on"
                          ],
                          "optional": 1,
                          "type": "string"
                        },
                        "file": {
                          "default_key": 1,
                          "description": "The drive's backing volume.",
                          "format": "pve-volume-id-or-qm-path",
                          "format_description": "volume",
                          "type": "string"
                        },
                        "format": {
                          "description": "The drive's backing file's data format.",
                          "enum": [
                            "raw",
                            "qcow",
                            "qed",
                            "qcow2",
                            "vmdk",
                            "cloop"
                          ],
                          "optional": 1,
                          "type": "string"
                        },
                        "iops": {
                          "description": "Maximum r/w I/O in operations per second.",
                          "format_description": "iops",
                          "optional": 1,
                          "type": "integer"
                        },
                        "iops_max": {
                          "description": "Maximum unthrottled r/w I/O pool in operations per second.",
                          "format_description": "iops",
                          "optional": 1,
                          "type": "integer"
                        },
                        "iops_max_length": {
                          "description": "Maximum length of I/O bursts in seconds.",
                          "format_description": "seconds",
                          "minimum": 1,
                          "optional": 1,
                          "type": "integer"
                        },
                        "iops_rd": {
                          "description": "Maximum read I/O in operations per second.",
                          "format_description": "iops",
                          "optional": 1,
                          "type": "integer"
                        },
                        "iops_rd_length": {
                          "alias": "iops_rd_max_length"
                        },
                        "iops_rd_max": {
                          "description": "Maximum unthrottled read I/O pool in operations per second.",
                          "format_description": "iops",
                          "optional": 1,
                          "type": "integer"
                        },
                        "iops_rd_max_length": {
                          "description": "Maximum length of read I/O bursts in seconds.",
                          "format_description": "seconds",
                          "minimum": 1,
                          "optional": 1,
                          "type": "integer"
                        },
                        "iops_wr": {
                          "description": "Maximum write I/O in operations per second.",
                          "format_description": "iops",
                          "optional": 1,
                          "type": "integer"
                        },
                        "iops_wr_length": {
                          "alias": "iops_wr_max_length"
                        },
                        "iops_wr_max": {
                          "description": "Maximum unthrottled write I/O pool in operations per second.",
                          "format_description": "iops",
                          "optional": 1,
                          "type": "integer"
                        },
                        "iops_wr_max_length": {
                          "description": "Maximum length of write I/O bursts in seconds.",
                          "format_description": "seconds",
                          "minimum": 1,
                          "optional": 1,
                          "type": "integer"
                        },
                        "iothread": {
                          "description": "Whether to use iothreads for this drive",
                          "optional": 1,
                          "type": "boolean"
                        },
                        "mbps": {
                          "description": "Maximum r/w speed in megabytes per second.",
                          "format_description": "mbps",
                          "optional": 1,
                          "type": "number"
                        },
                        "mbps_max": {
                          "description": "Maximum unthrottled r/w pool in megabytes per second.",
                          "format_description": "mbps",
                          "optional": 1,
                          "type": "number"
                        },
                        "mbps_rd": {
                          "description": "Maximum read speed in megabytes per second.",
                          "format_description": "mbps",
                          "optional": 1,
                          "type": "number"
                        },
                        "mbps_rd_max": {
                          "description": "Maximum unthrottled read pool in megabytes per second.",
                          "format_description": "mbps",
                          "optional": 1,
                          "type": "number"
                        },
                        "mbps_wr": {
                          "description": "Maximum write speed in megabytes per second.",
                          "format_description": "mbps",
                          "optional": 1,
                          "type": "number"
                        },
                        "mbps_wr_max": {
                          "description": "Maximum unthrottled write pool in megabytes per second.",
                          "format_description": "mbps",
                          "optional": 1,
                          "type": "number"
                        },
                        "media": {
                          "default": "disk",
                          "description": "The drive's media type.",
                          "enum": [
                            "cdrom",
                            "disk"
                          ],
                          "optional": 1,
                          "type": "string"
                        },
                        "replicate": {
                          "default": 1,
                          "description": "Whether the drive should considered for replication jobs.",
                          "optional": 1,
                          "type": "boolean"
                        },
                        "rerror": {
                          "description": "Read error action.",
                          "enum": [
                            "ignore",
                            "report",
                            "stop"
                          ],
                          "optional": 1,
                          "type": "string"
                        },
                        "ro": {
                          "description": "Whether the drive is read-only.",
                          "optional": 1,
                          "type": "boolean"
                        },
                        "serial": {
                          "description": "The drive's reported serial number, url-encoded, up to 20 bytes long.",
                          "format": "urlencoded",
                          "format_description": "serial",
                          "maxLength": 60,
                          "optional": 1,
                          "type": "string"
                        },
                        "shared": {
                          "default": 0,
                          "description": "Mark this locally-managed volume as available on all nodes",
                          "optional": 1,
                          "type": "boolean",
                          "verbose_description": "Mark this locally-managed volume as available on all nodes.\n\nWARNING: This option does not share the volume automatically, it assumes it is shared already!"
                        },
                        "size": {
                          "description": "Disk size. This is purely informational and has no effect.",
                          "format": "disk-size",
                          "format_description": "DiskSize",
                          "optional": 1,
                          "type": "string"
                        },
                        "snapshot": {
                          "description": "Controls qemu's snapshot mode feature. If activated, changes made to the disk are temporary and will be discarded when the VM is shutdown.",
                          "optional": 1,
                          "type": "boolean"
                        },
                        "volume": {
                          "alias": "file"
                        },
                        "werror": {
                          "description": "Write error action.",
                          "enum": [
                            "enospc",
                            "ignore",
                            "report",
                            "stop"
                          ],
                          "optional": 1,
                          "type": "string"
                        }
                      },
                      "optional": 1,
                      "type": "string"
                    },
                    "virtiofs[n]": {
                      "description": "Configuration for sharing a directory between host and guest using Virtio-fs.",
                      "format": {
                        "cache": {
                          "default": "auto",
                          "description": "The caching policy the file system should use (auto, always, metadata, never).",
                          "enum": [
                            "auto",
                            "always",
                            "metadata",
                            "never"
                          ],
                          "optional": 1,
                          "type": "string"
                        },
                        "direct-io": {
                          "default": 0,
                          "description": "Honor the O_DIRECT flag passed down by guest applications.",
                          "optional": 1,
                          "type": "boolean"
                        },
                        "dirid": {
                          "default_key": 1,
                          "description": "Mapping identifier of the directory mapping to be shared with the guest. Also used as a mount tag inside the VM.",
                          "format": "pve-configid",
                          "format_description": "mapping-id",
                          "type": "string"
                        },
                        "expose-acl": {
                          "default": 0,
                          "description": "Enable support for POSIX ACLs (enabled ACL implies xattr) for this mount.",
                          "optional": 1,
                          "type": "boolean"
                        },
                        "expose-xattr": {
                          "default": 0,
                          "description": "Enable support for extended attributes for this mount.",
                          "optional": 1,
                          "type": "boolean"
                        }
                      },
                      "optional": 1,
                      "type": "string"
                    },
                    "vmgenid": {
                      "default": "1 (autogenerated)",
                      "description": "Set VM Generation ID. Use '1' to autogenerate on create or update, pass '0' to disable explicitly.",
                      "format_description": "UUID",
                      "optional": 1,
                      "pattern": "(?:[a-fA-F0-9]{8}(?:-[a-fA-F0-9]{4}){3}-[a-fA-F0-9]{12}|[01])",
                      "type": "string",
                      "verbose_description": "The VM generation ID (vmgenid) device exposes a 128-bit integer value identifier to the guest OS. This allows to notify the guest operating system when the virtual machine is executed with a different configuration (e.g. snapshot execution or creation from a template). The guest operating system notices the change, and is then able to react as appropriate by marking its copies of distributed databases as dirty, re-initializing its random number generator, etc.\nNote that auto-creation only works when done through API/CLI create or update methods, but not when manually editing the config file."
                    },
                    "vmstatestorage": {
                      "description": "Default storage for VM state volumes/files.",
                      "format": "pve-storage-id",
                      "format_description": "storage ID",
                      "optional": 1,
                      "type": "string"
                    },
                    "watchdog": {
                      "description": "Create a virtual hardware watchdog device.",
                      "format": "pve-qm-watchdog",
                      "optional": 1,
                      "type": "string",
                      "verbose_description": "Create a virtual hardware watchdog device. Once enabled (by a guest action), the watchdog must be periodically polled by an agent inside the guest or else the watchdog will reset the guest (or execute the respective action specified)"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Set virtual machine options (asynchronous API).",
        "description": "Set virtual machine options (asynchronous API).",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "acpi",
            "in": "query",
            "description": "Enable/disable ACPI.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 1
            }
          },
          {
            "name": "affinity",
            "in": "query",
            "description": "List of host cores used to execute guest processes, for example: 0,5,8-11",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-cpuset"
            }
          },
          {
            "name": "agent",
            "in": "query",
            "description": "Enable/disable communication with the QEMU Guest Agent and its properties.",
            "required": false,
            "schema": {
              "type": "string",
              "format": {
                "enabled": {
                  "default": 0,
                  "default_key": 1,
                  "description": "Enable/disable communication with a QEMU Guest Agent (QGA) running in the VM.",
                  "type": "boolean"
                },
                "freeze-fs-on-backup": {
                  "default": 1,
                  "description": "Freeze/thaw guest filesystems on backup for consistency.",
                  "optional": 1,
                  "type": "boolean"
                },
                "fstrim_cloned_disks": {
                  "default": 0,
                  "description": "Run fstrim after moving a disk or migrating the VM.",
                  "optional": 1,
                  "type": "boolean"
                },
                "type": {
                  "default": "virtio",
                  "description": "Select the agent type",
                  "enum": [
                    "virtio",
                    "isa"
                  ],
                  "optional": 1,
                  "type": "string"
                }
              }
            }
          },
          {
            "name": "amd-sev",
            "in": "query",
            "description": "Secure Encrypted Virtualization (SEV) features by AMD CPUs",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-qemu-sev-fmt"
            }
          },
          {
            "name": "arch",
            "in": "query",
            "description": "Virtual processor architecture. Defaults to the host.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "x86_64",
                "aarch64"
              ]
            }
          },
          {
            "name": "args",
            "in": "query",
            "description": "Arbitrary arguments passed to kvm.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "audio0",
            "in": "query",
            "description": "Configure a audio device, useful in combination with QXL/Spice.",
            "required": false,
            "schema": {
              "type": "string",
              "format": {
                "device": {
                  "description": "Configure an audio device.",
                  "enum": [
                    "ich9-intel-hda",
                    "intel-hda",
                    "AC97"
                  ],
                  "type": "string"
                },
                "driver": {
                  "default": "spice",
                  "description": "Driver backend for the audio device.",
                  "enum": [
                    "spice",
                    "none"
                  ],
                  "optional": 1,
                  "type": "string"
                }
              }
            }
          },
          {
            "name": "autostart",
            "in": "query",
            "description": "Automatic restart after crash (currently ignored).",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "background_delay",
            "in": "query",
            "description": "Time to wait for the task to finish. We return 'null' if the task finish within that time.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 30
            }
          },
          {
            "name": "balloon",
            "in": "query",
            "description": "Amount of target RAM for the VM in MiB. Using zero disables the ballon driver.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "name": "bios",
            "in": "query",
            "description": "Select BIOS implementation.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "seabios",
              "enum": [
                "seabios",
                "ovmf"
              ]
            }
          },
          {
            "name": "boot",
            "in": "query",
            "description": "Specify guest boot order. Use the 'order=' sub-property as usage with no key or 'legacy=' is deprecated.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-qm-boot"
            }
          },
          {
            "name": "bootdisk",
            "in": "query",
            "description": "Enable booting from specified disk. Deprecated: Use 'boot: order=foo;bar' instead.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-qm-bootdisk",
              "pattern": "(ide|sata|scsi|virtio)\\d+"
            }
          },
          {
            "name": "cdrom",
            "in": "query",
            "description": "This is an alias for option -ide2",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-qm-ide"
            }
          },
          {
            "name": "cicustom",
            "in": "query",
            "description": "cloud-init: Specify custom files to replace the automatically generated ones at start.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-qm-cicustom"
            }
          },
          {
            "name": "cipassword",
            "in": "query",
            "description": "cloud-init: Password to assign the user. Using this is generally not recommended. Use ssh keys instead. Also note that older cloud-init versions do not support hashed passwords.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "citype",
            "in": "query",
            "description": "Specifies the cloud-init configuration format. The default depends on the configured operating system type (`ostype`. We use the `nocloud` format for Linux, and `configdrive2` for windows.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "configdrive2",
                "nocloud",
                "opennebula"
              ]
            }
          },
          {
            "name": "ciupgrade",
            "in": "query",
            "description": "cloud-init: do an automatic package upgrade after the first boot.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 1
            }
          },
          {
            "name": "ciuser",
            "in": "query",
            "description": "cloud-init: User name to change ssh keys and password for instead of the image's configured default user.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cores",
            "in": "query",
            "description": "The number of cores per socket.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            }
          },
          {
            "name": "cpu",
            "in": "query",
            "description": "Emulated CPU type.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-vm-cpu-conf"
            }
          },
          {
            "name": "cpulimit",
            "in": "query",
            "description": "Limit of CPU usage.",
            "required": false,
            "schema": {
              "type": "number",
              "default": 0,
              "minimum": 0,
              "maximum": 128
            }
          },
          {
            "name": "cpuunits",
            "in": "query",
            "description": "CPU weight for a VM, will be clamped to [1, 10000] in cgroup v2.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": "cgroup v1: 1024, cgroup v2: 100",
              "minimum": 1,
              "maximum": 262144
            }
          },
          {
            "name": "delete",
            "in": "query",
            "description": "A list of settings you want to delete.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-configid-list"
            }
          },
          {
            "name": "description",
            "in": "query",
            "description": "Description for the VM. Shown in the web-interface VM's summary. This is saved as comment inside the configuration file.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 8192
            }
          },
          {
            "name": "digest",
            "in": "query",
            "description": "Prevent changes if current configuration file has different SHA1 digest. This can be used to prevent concurrent modifications.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 40
            }
          },
          {
            "name": "efidisk0",
            "in": "query",
            "description": "Configure a disk for storing EFI vars. Use the special syntax STORAGE_ID:SIZE_IN_GiB to allocate a new volume. Note that SIZE_IN_GiB is ignored here and that the default EFI vars are copied to the volume instead. Use STORAGE_ID:0 and the 'import-from' parameter to import from an existing volume.",
            "required": false,
            "schema": {
              "type": "string",
              "format": {
                "efitype": {
                  "default": "2m",
                  "description": "Size and type of the OVMF EFI vars. '4m' is newer and recommended, and required for Secure Boot. For backwards compatibility, '2m' is used if not otherwise specified. Ignored for VMs with arch=aarch64 (ARM).",
                  "enum": [
                    "2m",
                    "4m"
                  ],
                  "optional": 1,
                  "type": "string"
                },
                "file": {
                  "default_key": 1,
                  "description": "The drive's backing volume.",
                  "format": "pve-volume-id-or-qm-path",
                  "format_description": "volume",
                  "type": "string"
                },
                "format": {
                  "description": "The drive's backing file's data format.",
                  "enum": [
                    "raw",
                    "qcow",
                    "qed",
                    "qcow2",
                    "vmdk",
                    "cloop"
                  ],
                  "optional": 1,
                  "type": "string"
                },
                "import-from": {
                  "description": "Create a new disk, importing from this source (volume ID or absolute path). When an absolute path is specified, it's up to you to ensure that the source is not actively used by another process during the import!",
                  "format": "pve-volume-id-or-absolute-path",
                  "format_description": "source volume",
                  "optional": 1,
                  "type": "string"
                },
                "pre-enrolled-keys": {
                  "default": 0,
                  "description": "Use am EFI vars template with distribution-specific and Microsoft Standard keys enrolled, if used with 'efitype=4m'. Note that this will enable Secure Boot by default, though it can still be turned off from within the VM.",
                  "optional": 1,
                  "type": "boolean"
                },
                "size": {
                  "description": "Disk size. This is purely informational and has no effect.",
                  "format": "disk-size",
                  "format_description": "DiskSize",
                  "optional": 1,
                  "type": "string"
                },
                "volume": {
                  "alias": "file"
                }
              }
            }
          },
          {
            "name": "force",
            "in": "query",
            "description": "Force physical removal. Without this, we simple remove the disk from the config file and create an additional configuration entry called 'unused[n]', which contains the volume ID. Unlink of unused[n] always cause physical removal.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "freeze",
            "in": "query",
            "description": "Freeze CPU at startup (use 'c' monitor command to start execution).",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "hookscript",
            "in": "query",
            "description": "Script that will be executed during various steps in the vms lifetime.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-volume-id"
            }
          },
          {
            "name": "hostpci[n]",
            "in": "query",
            "description": "Map host PCI devices into guest.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-qm-hostpci"
            }
          },
          {
            "name": "hotplug",
            "in": "query",
            "description": "Selectively enable hotplug features. This is a comma separated list of hotplug features: 'network', 'disk', 'cpu', 'memory', 'usb' and 'cloudinit'. Use '0' to disable hotplug completely. Using '1' as value is an alias for the default `network,disk,usb`. USB hotplugging is possible for guests with machine version >= 7.1 and ostype l26 or windows > 7.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "network,disk,usb",
              "format": "pve-hotplug-features"
            }
          },
          {
            "name": "hugepages",
            "in": "query",
            "description": "Enable/disable hugepages memory.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "any",
                "2",
                "1024"
              ]
            }
          },
          {
            "name": "ide[n]",
            "in": "query",
            "description": "Use volume as IDE hard disk or CD-ROM (n is 0 to 3). Use the special syntax STORAGE_ID:SIZE_IN_GiB to allocate a new volume. Use STORAGE_ID:0 and the 'import-from' parameter to import from an existing volume.",
            "required": false,
            "schema": {
              "type": "string",
              "format": {
                "aio": {
                  "description": "AIO type to use.",
                  "enum": [
                    "native",
                    "threads",
                    "io_uring"
                  ],
                  "optional": 1,
                  "type": "string"
                },
                "backup": {
                  "description": "Whether the drive should be included when making backups.",
                  "optional": 1,
                  "type": "boolean"
                },
                "bps": {
                  "description": "Maximum r/w speed in bytes per second.",
                  "format_description": "bps",
                  "optional": 1,
                  "type": "integer"
                },
                "bps_max_length": {
                  "description": "Maximum length of I/O bursts in seconds.",
                  "format_description": "seconds",
                  "minimum": 1,
                  "optional": 1,
                  "type": "integer"
                },
                "bps_rd": {
                  "description": "Maximum read speed in bytes per second.",
                  "format_description": "bps",
                  "optional": 1,
                  "type": "integer"
                },
                "bps_rd_length": {
                  "alias": "bps_rd_max_length"
                },
                "bps_rd_max_length": {
                  "description": "Maximum length of read I/O bursts in seconds.",
                  "format_description": "seconds",
                  "minimum": 1,
                  "optional": 1,
                  "type": "integer"
                },
                "bps_wr": {
                  "description": "Maximum write speed in bytes per second.",
                  "format_description": "bps",
                  "optional": 1,
                  "type": "integer"
                },
                "bps_wr_length": {
                  "alias": "bps_wr_max_length"
                },
                "bps_wr_max_length": {
                  "description": "Maximum length of write I/O bursts in seconds.",
                  "format_description": "seconds",
                  "minimum": 1,
                  "optional": 1,
                  "type": "integer"
                },
                "cache": {
                  "description": "The drive's cache mode",
                  "enum": [
                    "none",
                    "writethrough",
                    "writeback",
                    "unsafe",
                    "directsync"
                  ],
                  "optional": 1,
                  "type": "string"
                },
                "detect_zeroes": {
                  "description": "Controls whether to detect and try to optimize writes of zeroes.",
                  "optional": 1,
                  "type": "boolean"
                },
                "discard": {
                  "description": "Controls whether to pass discard/trim requests to the underlying storage.",
                  "enum": [
                    "ignore",
                    "on"
                  ],
                  "optional": 1,
                  "type": "string"
                },
                "file": {
                  "default_key": 1,
                  "description": "The drive's backing volume.",
                  "format": "pve-volume-id-or-qm-path",
                  "format_description": "volume",
                  "type": "string"
                },
                "format": {
                  "description": "The drive's backing file's data format.",
                  "enum": [
                    "raw",
                    "qcow",
                    "qed",
                    "qcow2",
                    "vmdk",
                    "cloop"
                  ],
                  "optional": 1,
                  "type": "string"
                },
                "import-from": {
                  "description": "Create a new disk, importing from this source (volume ID or absolute path). When an absolute path is specified, it's up to you to ensure that the source is not actively used by another process during the import!",
                  "format": "pve-volume-id-or-absolute-path",
                  "format_description": "source volume",
                  "optional": 1,
                  "type": "string"
                },
                "iops": {
                  "description": "Maximum r/w I/O in operations per second.",
                  "format_description": "iops",
                  "optional": 1,
                  "type": "integer"
                },
                "iops_max": {
                  "description": "Maximum unthrottled r/w I/O pool in operations per second.",
                  "format_description": "iops",
                  "optional": 1,
                  "type": "integer"
                },
                "iops_max_length": {
                  "description": "Maximum length of I/O bursts in seconds.",
                  "format_description": "seconds",
                  "minimum": 1,
                  "optional": 1,
                  "type": "integer"
                },
                "iops_rd": {
                  "description": "Maximum read I/O in operations per second.",
                  "format_description": "iops",
                  "optional": 1,
                  "type": "integer"
                },
                "iops_rd_length": {
                  "alias": "iops_rd_max_length"
                },
                "iops_rd_max": {
                  "description": "Maximum unthrottled read I/O pool in operations per second.",
                  "format_description": "iops",
                  "optional": 1,
                  "type": "integer"
                },
                "iops_rd_max_length": {
                  "description": "Maximum length of read I/O bursts in seconds.",
                  "format_description": "seconds",
                  "minimum": 1,
                  "optional": 1,
                  "type": "integer"
                },
                "iops_wr": {
                  "description": "Maximum write I/O in operations per second.",
                  "format_description": "iops",
                  "optional": 1,
                  "type": "integer"
                },
                "iops_wr_length": {
                  "alias": "iops_wr_max_length"
                },
                "iops_wr_max": {
                  "description": "Maximum unthrottled write I/O pool in operations per second.",
                  "format_description": "iops",
                  "optional": 1,
                  "type": "integer"
                },
                "iops_wr_max_length": {
                  "description": "Maximum length of write I/O bursts in seconds.",
                  "format_description": "seconds",
                  "minimum": 1,
                  "optional": 1,
                  "type": "integer"
                },
                "mbps": {
                  "description": "Maximum r/w speed in megabytes per second.",
                  "format_description": "mbps",
                  "optional": 1,
                  "type": "number"
                },
                "mbps_max": {
                  "description": "Maximum unthrottled r/w pool in megabytes per second.",
                  "format_description": "mbps",
                  "optional": 1,
                  "type": "number"
                },
                "mbps_rd": {
                  "description": "Maximum read speed in megabytes per second.",
                  "format_description": "mbps",
                  "optional": 1,
                  "type": "number"
                },
                "mbps_rd_max": {
                  "description": "Maximum unthrottled read pool in megabytes per second.",
                  "format_description": "mbps",
                  "optional": 1,
                  "type": "number"
                },
                "mbps_wr": {
                  "description": "Maximum write speed in megabytes per second.",
                  "format_description": "mbps",
                  "optional": 1,
                  "type": "number"
                },
                "mbps_wr_max": {
                  "description": "Maximum unthrottled write pool in megabytes per second.",
                  "format_description": "mbps",
                  "optional": 1,
                  "type": "number"
                },
                "media": {
                  "default": "disk",
                  "description": "The drive's media type.",
                  "enum": [
                    "cdrom",
                    "disk"
                  ],
                  "optional": 1,
                  "type": "string"
                },
                "model": {
                  "description": "The drive's reported model name, url-encoded, up to 40 bytes long.",
                  "format": "urlencoded",
                  "format_description": "model",
                  "maxLength": 120,
                  "optional": 1,
                  "type": "string"
                },
                "replicate": {
                  "default": 1,
                  "description": "Whether the drive should considered for replication jobs.",
                  "optional": 1,
                  "type": "boolean"
                },
                "rerror": {
                  "description": "Read error action.",
                  "enum": [
                    "ignore",
                    "report",
                    "stop"
                  ],
                  "optional": 1,
                  "type": "string"
                },
                "serial": {
                  "description": "The drive's reported serial number, url-encoded, up to 20 bytes long.",
                  "format": "urlencoded",
                  "format_description": "serial",
                  "maxLength": 60,
                  "optional": 1,
                  "type": "string"
                },
                "shared": {
                  "default": 0,
                  "description": "Mark this locally-managed volume as available on all nodes",
                  "optional": 1,
                  "type": "boolean",
                  "verbose_description": "Mark this locally-managed volume as available on all nodes.\n\nWARNING: This option does not share the volume automatically, it assumes it is shared already!"
                },
                "size": {
                  "description": "Disk size. This is purely informational and has no effect.",
                  "format": "disk-size",
                  "format_description": "DiskSize",
                  "optional": 1,
                  "type": "string"
                },
                "snapshot": {
                  "description": "Controls qemu's snapshot mode feature. If activated, changes made to the disk are temporary and will be discarded when the VM is shutdown.",
                  "optional": 1,
                  "type": "boolean"
                },
                "ssd": {
                  "description": "Whether to expose this drive as an SSD, rather than a rotational hard disk.",
                  "optional": 1,
                  "type": "boolean"
                },
                "volume": {
                  "alias": "file"
                },
                "werror": {
                  "description": "Write error action.",
                  "enum": [
                    "enospc",
                    "ignore",
                    "report",
                    "stop"
                  ],
                  "optional": 1,
                  "type": "string"
                },
                "wwn": {
                  "description": "The drive's worldwide name, encoded as 16 bytes hex string, prefixed by '0x'.",
                  "format_description": "wwn",
                  "optional": 1,
                  "pattern": "(?^:^(0x)[0-9a-fA-F]{16})",
                  "type": "string"
                }
              }
            }
          },
          {
            "name": "import-working-storage",
            "in": "query",
            "description": "A file-based storage with 'images' content-type enabled, which is used as an intermediary extraction storage during import. Defaults to the source storage.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-storage-id"
            }
          },
          {
            "name": "ipconfig[n]",
            "in": "query",
            "description": "cloud-init: Specify IP addresses and gateways for the corresponding interface.\n\nIP addresses use CIDR notation, gateways are optional but need an IP of the same type specified.\n\nThe special string 'dhcp' can be used for IP addresses to use DHCP, in which case no explicit\ngateway should be provided.\nFor IPv6 the special string 'auto' can be used to use stateless autoconfiguration. This requires\ncloud-init 19.4 or newer.\n\nIf cloud-init is enabled and neither an IPv4 nor an IPv6 address is specified, it defaults to using\ndhcp on IPv4.\n",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-qm-ipconfig"
            }
          },
          {
            "name": "ivshmem",
            "in": "query",
            "description": "Inter-VM shared memory. Useful for direct communication between VMs, or to the host.",
            "required": false,
            "schema": {
              "type": "string",
              "format": {
                "name": {
                  "description": "The name of the file. Will be prefixed with 'pve-shm-'. Default is the VMID. Will be deleted when the VM is stopped.",
                  "format_description": "string",
                  "optional": 1,
                  "pattern": "[a-zA-Z0-9\\-]+",
                  "type": "string"
                },
                "size": {
                  "description": "The size of the file in MB.",
                  "minimum": 1,
                  "type": "integer"
                }
              }
            }
          },
          {
            "name": "keephugepages",
            "in": "query",
            "description": "Use together with hugepages. If enabled, hugepages will not not be deleted after VM shutdown and can be used for subsequent starts.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "keyboard",
            "in": "query",
            "description": "Keyboard layout for VNC server. This option is generally not required and is often better handled from within the guest OS.",
            "required": false,
            "schema": {
              "type": "string",
              "default": null,
              "enum": [
                "de",
                "de-ch",
                "da",
                "en-gb",
                "en-us",
                "es",
                "fi",
                "fr",
                "fr-be",
                "fr-ca",
                "fr-ch",
                "hu",
                "is",
                "it",
                "ja",
                "lt",
                "mk",
                "nl",
                "no",
                "pl",
                "pt",
                "pt-br",
                "sv",
                "sl",
                "tr"
              ]
            }
          },
          {
            "name": "kvm",
            "in": "query",
            "description": "Enable/disable KVM hardware virtualization.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 1
            }
          },
          {
            "name": "localtime",
            "in": "query",
            "description": "Set the real time clock (RTC) to local time. This is enabled by default if the `ostype` indicates a Microsoft Windows OS.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lock",
            "in": "query",
            "description": "Lock/unlock the VM.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "backup",
                "clone",
                "create",
                "migrate",
                "rollback",
                "snapshot",
                "snapshot-delete",
                "suspending",
                "suspended"
              ]
            }
          },
          {
            "name": "machine",
            "in": "query",
            "description": "Specify the QEMU machine.",
            "required": false,
            "schema": {
              "type": "string",
              "format": {
                "enable-s3": {
                  "description": "Enables S3 power state. Defaults to false beginning with machine types 9.2+pve1, true before.",
                  "optional": 1,
                  "type": "boolean"
                },
                "enable-s4": {
                  "description": "Enables S4 power state. Defaults to false beginning with machine types 9.2+pve1, true before.",
                  "optional": 1,
                  "type": "boolean"
                },
                "type": {
                  "default_key": 1,
                  "description": "Specifies the QEMU machine type.",
                  "format_description": "machine type",
                  "maxLength": 40,
                  "optional": 1,
                  "pattern": "(pc|pc(-i440fx)?-\\d+(\\.\\d+)+(\\+pve\\d+)?(\\.pxe)?|q35|pc-q35-\\d+(\\.\\d+)+(\\+pve\\d+)?(\\.pxe)?|virt(?:-\\d+(\\.\\d+)+)?(\\+pve\\d+)?)",
                  "type": "string"
                },
                "viommu": {
                  "description": "Enable and set guest vIOMMU variant (Intel vIOMMU needs q35 to be set as machine type).",
                  "enum": [
                    "intel",
                    "virtio"
                  ],
                  "optional": 1,
                  "type": "string"
                }
              }
            }
          },
          {
            "name": "memory",
            "in": "query",
            "description": "Memory properties.",
            "required": false,
            "schema": {
              "type": "string",
              "format": {
                "current": {
                  "default": 512,
                  "default_key": 1,
                  "description": "Current amount of online RAM for the VM in MiB. This is the maximum available memory when you use the balloon device.",
                  "minimum": 16,
                  "type": "integer"
                }
              }
            }
          },
          {
            "name": "migrate_downtime",
            "in": "query",
            "description": "Set maximum tolerated downtime (in seconds) for migrations. Should the migration not be able to converge in the very end, because too much newly dirtied RAM needs to be transferred, the limit will be increased automatically step-by-step until migration can converge.",
            "required": false,
            "schema": {
              "type": "number",
              "default": 0.1,
              "minimum": 0
            }
          },
          {
            "name": "migrate_speed",
            "in": "query",
            "description": "Set maximum speed (in MB/s) for migrations. Value 0 is no limit.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0,
              "minimum": 0
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Set a name for the VM. Only used on the configuration web interface.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "dns-name"
            }
          },
          {
            "name": "nameserver",
            "in": "query",
            "description": "cloud-init: Sets DNS server IP address for a container. Create will automatically use the setting from the host if neither searchdomain nor nameserver are set.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "address-list"
            }
          },
          {
            "name": "net[n]",
            "in": "query",
            "description": "Specify network devices.",
            "required": false,
            "schema": {
              "type": "string",
              "format": {
                "bridge": {
                  "description": "Bridge to attach the network device to. The Proxmox VE standard bridge\nis called 'vmbr0'.\n\nIf you do not specify a bridge, we create a kvm user (NATed) network\ndevice, which provides DHCP and DNS services. The following addresses\nare used:\n\n 10.0.2.2   Gateway\n 10.0.2.3   DNS Server\n 10.0.2.4   SMB Server\n\nThe DHCP server assign addresses to the guest starting from 10.0.2.15.\n",
                  "format": "pve-bridge-id",
                  "format_description": "bridge",
                  "optional": 1,
                  "type": "string"
                },
                "e1000": {
                  "alias": "macaddr",
                  "keyAlias": "model"
                },
                "e1000-82540em": {
                  "alias": "macaddr",
                  "keyAlias": "model"
                },
                "e1000-82544gc": {
                  "alias": "macaddr",
                  "keyAlias": "model"
                },
                "e1000-82545em": {
                  "alias": "macaddr",
                  "keyAlias": "model"
                },
                "e1000e": {
                  "alias": "macaddr",
                  "keyAlias": "model"
                },
                "firewall": {
                  "description": "Whether this interface should be protected by the firewall.",
                  "optional": 1,
                  "type": "boolean"
                },
                "i82551": {
                  "alias": "macaddr",
                  "keyAlias": "model"
                },
                "i82557b": {
                  "alias": "macaddr",
                  "keyAlias": "model"
                },
                "i82559er": {
                  "alias": "macaddr",
                  "keyAlias": "model"
                },
                "link_down": {
                  "description": "Whether this interface should be disconnected (like pulling the plug).",
                  "optional": 1,
                  "type": "boolean"
                },
                "macaddr": {
                  "description": "MAC address. That address must be unique within your network. This is automatically generated if not specified.",
                  "format": "mac-addr",
                  "format_description": "XX:XX:XX:XX:XX:XX",
                  "optional": 1,
                  "type": "string",
                  "verbose_description": "A common MAC address with the I/G (Individual/Group) bit not set."
                },
                "model": {
                  "default_key": 1,
                  "description": "Network Card Model. The 'virtio' model provides the best performance with very low CPU overhead. If your guest does not support this driver, it is usually best to use 'e1000'.",
                  "enum": [
                    "e1000",
                    "e1000-82540em",
                    "e1000-82544gc",
                    "e1000-82545em",
                    "e1000e",
                    "i82551",
                    "i82557b",
                    "i82559er",
                    "ne2k_isa",
                    "ne2k_pci",
                    "pcnet",
                    "rtl8139",
                    "virtio",
                    "vmxnet3"
                  ],
                  "type": "string"
                },
                "mtu": {
                  "description": "Force MTU of network device (VirtIO only). Setting to '1' or empty will use the bridge MTU",
                  "maximum": 65520,
                  "minimum": 1,
                  "optional": 1,
                  "type": "integer"
                },
                "ne2k_isa": {
                  "alias": "macaddr",
                  "keyAlias": "model"
                },
                "ne2k_pci": {
                  "alias": "macaddr",
                  "keyAlias": "model"
                },
                "pcnet": {
                  "alias": "macaddr",
                  "keyAlias": "model"
                },
                "queues": {
                  "description": "Number of packet queues to be used on the device.",
                  "maximum": 64,
                  "minimum": 0,
                  "optional": 1,
                  "type": "integer"
                },
                "rate": {
                  "description": "Rate limit in mbps (megabytes per second) as floating point number.",
                  "minimum": 0,
                  "optional": 1,
                  "type": "number"
                },
                "rtl8139": {
                  "alias": "macaddr",
                  "keyAlias": "model"
                },
                "tag": {
                  "description": "VLAN tag to apply to packets on this interface.",
                  "maximum": 4094,
                  "minimum": 1,
                  "optional": 1,
                  "type": "integer"
                },
                "trunks": {
                  "description": "VLAN trunks to pass through this interface.",
                  "format_description": "vlanid[;vlanid...]",
                  "optional": 1,
                  "pattern": "(?^:\\d+(?:-\\d+)?(?:;\\d+(?:-\\d+)?)*)",
                  "type": "string"
                },
                "virtio": {
                  "alias": "macaddr",
                  "keyAlias": "model"
                },
                "vmxnet3": {
                  "alias": "macaddr",
                  "keyAlias": "model"
                }
              }
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "numa",
            "in": "query",
            "description": "Enable/disable NUMA.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "numa[n]",
            "in": "query",
            "description": "NUMA topology.",
            "required": false,
            "schema": {
              "type": "string",
              "format": {
                "cpus": {
                  "description": "CPUs accessing this NUMA node.",
                  "format_description": "id[-id];...",
                  "pattern": "(?^:\\d+(?:-\\d+)?(?:;\\d+(?:-\\d+)?)*)",
                  "type": "string"
                },
                "hostnodes": {
                  "description": "Host NUMA nodes to use.",
                  "format_description": "id[-id];...",
                  "optional": 1,
                  "pattern": "(?^:\\d+(?:-\\d+)?(?:;\\d+(?:-\\d+)?)*)",
                  "type": "string"
                },
                "memory": {
                  "description": "Amount of memory this NUMA node provides.",
                  "optional": 1,
                  "type": "number"
                },
                "policy": {
                  "description": "NUMA allocation policy.",
                  "enum": [
                    "preferred",
                    "bind",
                    "interleave"
                  ],
                  "optional": 1,
                  "type": "string"
                }
              }
            }
          },
          {
            "name": "onboot",
            "in": "query",
            "description": "Specifies whether a VM will be started during system bootup.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "ostype",
            "in": "query",
            "description": "Specify guest operating system.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "other",
                "wxp",
                "w2k",
                "w2k3",
                "w2k8",
                "wvista",
                "win7",
                "win8",
                "win10",
                "win11",
                "l24",
                "l26",
                "solaris"
              ]
            }
          },
          {
            "name": "parallel[n]",
            "in": "query",
            "description": "Map host parallel devices (n is 0 to 2).",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "/dev/parport\\d+|/dev/usb/lp\\d+"
            }
          },
          {
            "name": "protection",
            "in": "query",
            "description": "Sets the protection flag of the VM. This will disable the remove VM and remove disk operations.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "reboot",
            "in": "query",
            "description": "Allow reboot. If set to '0' the VM exit on reboot.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 1
            }
          },
          {
            "name": "revert",
            "in": "query",
            "description": "Revert a pending change.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-configid-list"
            }
          },
          {
            "name": "rng0",
            "in": "query",
            "description": "Configure a VirtIO-based Random Number Generator.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-qm-rng"
            }
          },
          {
            "name": "running-nets-host-mtu",
            "in": "query",
            "description": "List of VirtIO network devices and their effective host_mtu setting. A value of 0 means that the host_mtu parameter is to be avoided for the corresponding device. This is used internally for snapshots.",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "net\\d+=\\d+(,net\\d+=\\d+)*"
            }
          },
          {
            "name": "sata[n]",
            "in": "query",
            "description": "Use volume as SATA hard disk or CD-ROM (n is 0 to 5). Use the special syntax STORAGE_ID:SIZE_IN_GiB to allocate a new volume. Use STORAGE_ID:0 and the 'import-from' parameter to import from an existing volume.",
            "required": false,
            "schema": {
              "type": "string",
              "format": {
                "aio": {
                  "description": "AIO type to use.",
                  "enum": [
                    "native",
                    "threads",
                    "io_uring"
                  ],
                  "optional": 1,
                  "type": "string"
                },
                "backup": {
                  "description": "Whether the drive should be included when making backups.",
                  "optional": 1,
                  "type": "boolean"
                },
                "bps": {
                  "description": "Maximum r/w speed in bytes per second.",
                  "format_description": "bps",
                  "optional": 1,
                  "type": "integer"
                },
                "bps_max_length": {
                  "description": "Maximum length of I/O bursts in seconds.",
                  "format_description": "seconds",
                  "minimum": 1,
                  "optional": 1,
                  "type": "integer"
                },
                "bps_rd": {
                  "description": "Maximum read speed in bytes per second.",
                  "format_description": "bps",
                  "optional": 1,
                  "type": "integer"
                },
                "bps_rd_length": {
                  "alias": "bps_rd_max_length"
                },
                "bps_rd_max_length": {
                  "description": "Maximum length of read I/O bursts in seconds.",
                  "format_description": "seconds",
                  "minimum": 1,
                  "optional": 1,
                  "type": "integer"
                },
                "bps_wr": {
                  "description": "Maximum write speed in bytes per second.",
                  "format_description": "bps",
                  "optional": 1,
                  "type": "integer"
                },
                "bps_wr_length": {
                  "alias": "bps_wr_max_length"
                },
                "bps_wr_max_length": {
                  "description": "Maximum length of write I/O bursts in seconds.",
                  "format_description": "seconds",
                  "minimum": 1,
                  "optional": 1,
                  "type": "integer"
                },
                "cache": {
                  "description": "The drive's cache mode",
                  "enum": [
                    "none",
                    "writethrough",
                    "writeback",
                    "unsafe",
                    "directsync"
                  ],
                  "optional": 1,
                  "type": "string"
                },
                "detect_zeroes": {
                  "description": "Controls whether to detect and try to optimize writes of zeroes.",
                  "optional": 1,
                  "type": "boolean"
                },
                "discard": {
                  "description": "Controls whether to pass discard/trim requests to the underlying storage.",
                  "enum": [
                    "ignore",
                    "on"
                  ],
                  "optional": 1,
                  "type": "string"
                },
                "file": {
                  "default_key": 1,
                  "description": "The drive's backing volume.",
                  "format": "pve-volume-id-or-qm-path",
                  "format_description": "volume",
                  "type": "string"
                },
                "format": {
                  "description": "The drive's backing file's data format.",
                  "enum": [
                    "raw",
                    "qcow",
                    "qed",
                    "qcow2",
                    "vmdk",
                    "cloop"
                  ],
                  "optional": 1,
                  "type": "string"
                },
                "import-from": {
                  "description": "Create a new disk, importing from this source (volume ID or absolute path). When an absolute path is specified, it's up to you to ensure that the source is not actively used by another process during the import!",
                  "format": "pve-volume-id-or-absolute-path",
                  "format_description": "source volume",
                  "optional": 1,
                  "type": "string"
                },
                "iops": {
                  "description": "Maximum r/w I/O in operations per second.",
                  "format_description": "iops",
                  "optional": 1,
                  "type": "integer"
                },
                "iops_max": {
                  "description": "Maximum unthrottled r/w I/O pool in operations per second.",
                  "format_description": "iops",
                  "optional": 1,
                  "type": "integer"
                },
                "iops_max_length": {
                  "description": "Maximum length of I/O bursts in seconds.",
                  "format_description": "seconds",
                  "minimum": 1,
                  "optional": 1,
                  "type": "integer"
                },
                "iops_rd": {
                  "description": "Maximum read I/O in operations per second.",
                  "format_description": "iops",
                  "optional": 1,
                  "type": "integer"
                },
                "iops_rd_length": {
                  "alias": "iops_rd_max_length"
                },
                "iops_rd_max": {
                  "description": "Maximum unthrottled read I/O pool in operations per second.",
                  "format_description": "iops",
                  "optional": 1,
                  "type": "integer"
                },
                "iops_rd_max_length": {
                  "description": "Maximum length of read I/O bursts in seconds.",
                  "format_description": "seconds",
                  "minimum": 1,
                  "optional": 1,
                  "type": "integer"
                },
                "iops_wr": {
                  "description": "Maximum write I/O in operations per second.",
                  "format_description": "iops",
                  "optional": 1,
                  "type": "integer"
                },
                "iops_wr_length": {
                  "alias": "iops_wr_max_length"
                },
                "iops_wr_max": {
                  "description": "Maximum unthrottled write I/O pool in operations per second.",
                  "format_description": "iops",
                  "optional": 1,
                  "type": "integer"
                },
                "iops_wr_max_length": {
                  "description": "Maximum length of write I/O bursts in seconds.",
                  "format_description": "seconds",
                  "minimum": 1,
                  "optional": 1,
                  "type": "integer"
                },
                "mbps": {
                  "description": "Maximum r/w speed in megabytes per second.",
                  "format_description": "mbps",
                  "optional": 1,
                  "type": "number"
                },
                "mbps_max": {
                  "description": "Maximum unthrottled r/w pool in megabytes per second.",
                  "format_description": "mbps",
                  "optional": 1,
                  "type": "number"
                },
                "mbps_rd": {
                  "description": "Maximum read speed in megabytes per second.",
                  "format_description": "mbps",
                  "optional": 1,
                  "type": "number"
                },
                "mbps_rd_max": {
                  "description": "Maximum unthrottled read pool in megabytes per second.",
                  "format_description": "mbps",
                  "optional": 1,
                  "type": "number"
                },
                "mbps_wr": {
                  "description": "Maximum write speed in megabytes per second.",
                  "format_description": "mbps",
                  "optional": 1,
                  "type": "number"
                },
                "mbps_wr_max": {
                  "description": "Maximum unthrottled write pool in megabytes per second.",
                  "format_description": "mbps",
                  "optional": 1,
                  "type": "number"
                },
                "media": {
                  "default": "disk",
                  "description": "The drive's media type.",
                  "enum": [
                    "cdrom",
                    "disk"
                  ],
                  "optional": 1,
                  "type": "string"
                },
                "replicate": {
                  "default": 1,
                  "description": "Whether the drive should considered for replication jobs.",
                  "optional": 1,
                  "type": "boolean"
                },
                "rerror": {
                  "description": "Read error action.",
                  "enum": [
                    "ignore",
                    "report",
                    "stop"
                  ],
                  "optional": 1,
                  "type": "string"
                },
                "serial": {
                  "description": "The drive's reported serial number, url-encoded, up to 20 bytes long.",
                  "format": "urlencoded",
                  "format_description": "serial",
                  "maxLength": 60,
                  "optional": 1,
                  "type": "string"
                },
                "shared": {
                  "default": 0,
                  "description": "Mark this locally-managed volume as available on all nodes",
                  "optional": 1,
                  "type": "boolean",
                  "verbose_description": "Mark this locally-managed volume as available on all nodes.\n\nWARNING: This option does not share the volume automatically, it assumes it is shared already!"
                },
                "size": {
                  "description": "Disk size. This is purely informational and has no effect.",
                  "format": "disk-size",
                  "format_description": "DiskSize",
                  "optional": 1,
                  "type": "string"
                },
                "snapshot": {
                  "description": "Controls qemu's snapshot mode feature. If activated, changes made to the disk are temporary and will be discarded when the VM is shutdown.",
                  "optional": 1,
                  "type": "boolean"
                },
                "ssd": {
                  "description": "Whether to expose this drive as an SSD, rather than a rotational hard disk.",
                  "optional": 1,
                  "type": "boolean"
                },
                "volume": {
                  "alias": "file"
                },
                "werror": {
                  "description": "Write error action.",
                  "enum": [
                    "enospc",
                    "ignore",
                    "report",
                    "stop"
                  ],
                  "optional": 1,
                  "type": "string"
                },
                "wwn": {
                  "description": "The drive's worldwide name, encoded as 16 bytes hex string, prefixed by '0x'.",
                  "format_description": "wwn",
                  "optional": 1,
                  "pattern": "(?^:^(0x)[0-9a-fA-F]{16})",
                  "type": "string"
                }
              }
            }
          },
          {
            "name": "scsi[n]",
            "in": "query",
            "description": "Use volume as SCSI hard disk or CD-ROM (n is 0 to 30). Use the special syntax STORAGE_ID:SIZE_IN_GiB to allocate a new volume. Use STORAGE_ID:0 and the 'import-from' parameter to import from an existing volume.",
            "required": false,
            "schema": {
              "type": "string",
              "format": {
                "aio": {
                  "description": "AIO type to use.",
                  "enum": [
                    "native",
                    "threads",
                    "io_uring"
                  ],
                  "optional": 1,
                  "type": "string"
                },
                "backup": {
                  "description": "Whether the drive should be included when making backups.",
                  "optional": 1,
                  "type": "boolean"
                },
                "bps": {
                  "description": "Maximum r/w speed in bytes per second.",
                  "format_description": "bps",
                  "optional": 1,
                  "type": "integer"
                },
                "bps_max_length": {
                  "description": "Maximum length of I/O bursts in seconds.",
                  "format_description": "seconds",
                  "minimum": 1,
                  "optional": 1,
                  "type": "integer"
                },
                "bps_rd": {
                  "description": "Maximum read speed in bytes per second.",
                  "format_description": "bps",
                  "optional": 1,
                  "type": "integer"
                },
                "bps_rd_length": {
                  "alias": "bps_rd_max_length"
                },
                "bps_rd_max_length": {
                  "description": "Maximum length of read I/O bursts in seconds.",
                  "format_description": "seconds",
                  "minimum": 1,
                  "optional": 1,
                  "type": "integer"
                },
                "bps_wr": {
                  "description": "Maximum write speed in bytes per second.",
                  "format_description": "bps",
                  "optional": 1,
                  "type": "integer"
                },
                "bps_wr_length": {
                  "alias": "bps_wr_max_length"
                },
                "bps_wr_max_length": {
                  "description": "Maximum length of write I/O bursts in seconds.",
                  "format_description": "seconds",
                  "minimum": 1,
                  "optional": 1,
                  "type": "integer"
                },
                "cache": {
                  "description": "The drive's cache mode",
                  "enum": [
                    "none",
                    "writethrough",
                    "writeback",
                    "unsafe",
                    "directsync"
                  ],
                  "optional": 1,
                  "type": "string"
                },
                "detect_zeroes": {
                  "description": "Controls whether to detect and try to optimize writes of zeroes.",
                  "optional": 1,
                  "type": "boolean"
                },
                "discard": {
                  "description": "Controls whether to pass discard/trim requests to the underlying storage.",
                  "enum": [
                    "ignore",
                    "on"
                  ],
                  "optional": 1,
                  "type": "string"
                },
                "file": {
                  "default_key": 1,
                  "description": "The drive's backing volume.",
                  "format": "pve-volume-id-or-qm-path",
                  "format_description": "volume",
                  "type": "string"
                },
                "format": {
                  "description": "The drive's backing file's data format.",
                  "enum": [
                    "raw",
                    "qcow",
                    "qed",
                    "qcow2",
                    "vmdk",
                    "cloop"
                  ],
                  "optional": 1,
                  "type": "string"
                },
                "import-from": {
                  "description": "Create a new disk, importing from this source (volume ID or absolute path). When an absolute path is specified, it's up to you to ensure that the source is not actively used by another process during the import!",
                  "format": "pve-volume-id-or-absolute-path",
                  "format_description": "source volume",
                  "optional": 1,
                  "type": "string"
                },
                "iops": {
                  "description": "Maximum r/w I/O in operations per second.",
                  "format_description": "iops",
                  "optional": 1,
                  "type": "integer"
                },
                "iops_max": {
                  "description": "Maximum unthrottled r/w I/O pool in operations per second.",
                  "format_description": "iops",
                  "optional": 1,
                  "type": "integer"
                },
                "iops_max_length": {
                  "description": "Maximum length of I/O bursts in seconds.",
                  "format_description": "seconds",
                  "minimum": 1,
                  "optional": 1,
                  "type": "integer"
                },
                "iops_rd": {
                  "description": "Maximum read I/O in operations per second.",
                  "format_description": "iops",
                  "optional": 1,
                  "type": "integer"
                },
                "iops_rd_length": {
                  "alias": "iops_rd_max_length"
                },
                "iops_rd_max": {
                  "description": "Maximum unthrottled read I/O pool in operations per second.",
                  "format_description": "iops",
                  "optional": 1,
                  "type": "integer"
                },
                "iops_rd_max_length": {
                  "description": "Maximum length of read I/O bursts in seconds.",
                  "format_description": "seconds",
                  "minimum": 1,
                  "optional": 1,
                  "type": "integer"
                },
                "iops_wr": {
                  "description": "Maximum write I/O in operations per second.",
                  "format_description": "iops",
                  "optional": 1,
                  "type": "integer"
                },
                "iops_wr_length": {
                  "alias": "iops_wr_max_length"
                },
                "iops_wr_max": {
                  "description": "Maximum unthrottled write I/O pool in operations per second.",
                  "format_description": "iops",
                  "optional": 1,
                  "type": "integer"
                },
                "iops_wr_max_length": {
                  "description": "Maximum length of write I/O bursts in seconds.",
                  "format_description": "seconds",
                  "minimum": 1,
                  "optional": 1,
                  "type": "integer"
                },
                "iothread": {
                  "description": "Whether to use iothreads for this drive",
                  "optional": 1,
                  "type": "boolean"
                },
                "mbps": {
                  "description": "Maximum r/w speed in megabytes per second.",
                  "format_description": "mbps",
                  "optional": 1,
                  "type": "number"
                },
                "mbps_max": {
                  "description": "Maximum unthrottled r/w pool in megabytes per second.",
                  "format_description": "mbps",
                  "optional": 1,
                  "type": "number"
                },
                "mbps_rd": {
                  "description": "Maximum read speed in megabytes per second.",
                  "format_description": "mbps",
                  "optional": 1,
                  "type": "number"
                },
                "mbps_rd_max": {
                  "description": "Maximum unthrottled read pool in megabytes per second.",
                  "format_description": "mbps",
                  "optional": 1,
                  "type": "number"
                },
                "mbps_wr": {
                  "description": "Maximum write speed in megabytes per second.",
                  "format_description": "mbps",
                  "optional": 1,
                  "type": "number"
                },
                "mbps_wr_max": {
                  "description": "Maximum unthrottled write pool in megabytes per second.",
                  "format_description": "mbps",
                  "optional": 1,
                  "type": "number"
                },
                "media": {
                  "default": "disk",
                  "description": "The drive's media type.",
                  "enum": [
                    "cdrom",
                    "disk"
                  ],
                  "optional": 1,
                  "type": "string"
                },
                "product": {
                  "description": "The drive's product name, up to 16 bytes long.",
                  "format_description": "product",
                  "optional": 1,
                  "pattern": "[A-Za-z0-9\\-_\\s]{,16}",
                  "type": "string"
                },
                "queues": {
                  "description": "Number of queues.",
                  "minimum": 2,
                  "optional": 1,
                  "type": "integer"
                },
                "replicate": {
                  "default": 1,
                  "description": "Whether the drive should considered for replication jobs.",
                  "optional": 1,
                  "type": "boolean"
                },
                "rerror": {
                  "description": "Read error action.",
                  "enum": [
                    "ignore",
                    "report",
                    "stop"
                  ],
                  "optional": 1,
                  "type": "string"
                },
                "ro": {
                  "description": "Whether the drive is read-only.",
                  "optional": 1,
                  "type": "boolean"
                },
                "scsiblock": {
                  "default": 0,
                  "description": "whether to use scsi-block for full passthrough of host block device\n\nWARNING: can lead to I/O errors in combination with low memory or high memory fragmentation on host",
                  "optional": 1,
                  "type": "boolean"
                },
                "serial": {
                  "description": "The drive's reported serial number, url-encoded, up to 20 bytes long.",
                  "format": "urlencoded",
                  "format_description": "serial",
                  "maxLength": 60,
                  "optional": 1,
                  "type": "string"
                },
                "shared": {
                  "default": 0,
                  "description": "Mark this locally-managed volume as available on all nodes",
                  "optional": 1,
                  "type": "boolean",
                  "verbose_description": "Mark this locally-managed volume as available on all nodes.\n\nWARNING: This option does not share the volume automatically, it assumes it is shared already!"
                },
                "size": {
                  "description": "Disk size. This is purely informational and has no effect.",
                  "format": "disk-size",
                  "format_description": "DiskSize",
                  "optional": 1,
                  "type": "string"
                },
                "snapshot": {
                  "description": "Controls qemu's snapshot mode feature. If activated, changes made to the disk are temporary and will be discarded when the VM is shutdown.",
                  "optional": 1,
                  "type": "boolean"
                },
                "ssd": {
                  "description": "Whether to expose this drive as an SSD, rather than a rotational hard disk.",
                  "optional": 1,
                  "type": "boolean"
                },
                "vendor": {
                  "description": "The drive's vendor name, up to 8 bytes long.",
                  "format_description": "vendor",
                  "optional": 1,
                  "pattern": "[A-Za-z0-9\\-_\\s]{,8}",
                  "type": "string"
                },
                "volume": {
                  "alias": "file"
                },
                "werror": {
                  "description": "Write error action.",
                  "enum": [
                    "enospc",
                    "ignore",
                    "report",
                    "stop"
                  ],
                  "optional": 1,
                  "type": "string"
                },
                "wwn": {
                  "description": "The drive's worldwide name, encoded as 16 bytes hex string, prefixed by '0x'.",
                  "format_description": "wwn",
                  "optional": 1,
                  "pattern": "(?^:^(0x)[0-9a-fA-F]{16})",
                  "type": "string"
                }
              }
            }
          },
          {
            "name": "scsihw",
            "in": "query",
            "description": "SCSI controller model",
            "required": false,
            "schema": {
              "type": "string",
              "default": "lsi",
              "enum": [
                "lsi",
                "lsi53c810",
                "virtio-scsi-pci",
                "virtio-scsi-single",
                "megasas",
                "pvscsi"
              ]
            }
          },
          {
            "name": "searchdomain",
            "in": "query",
            "description": "cloud-init: Sets DNS search domains for a container. Create will automatically use the setting from the host if neither searchdomain nor nameserver are set.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "serial[n]",
            "in": "query",
            "description": "Create a serial device inside the VM (n is 0 to 3)",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "(/dev/.+|socket)"
            }
          },
          {
            "name": "shares",
            "in": "query",
            "description": "Amount of memory shares for auto-ballooning. The larger the number is, the more memory this VM gets. Number is relative to weights of all other running VMs. Using zero disables auto-ballooning. Auto-ballooning is done by pvestatd.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000,
              "minimum": 0,
              "maximum": 50000
            }
          },
          {
            "name": "skiplock",
            "in": "query",
            "description": "Ignore locks - only root is allowed to use this option.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "smbios1",
            "in": "query",
            "description": "Specify SMBIOS type 1 fields.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-qm-smbios1",
              "maxLength": 512
            }
          },
          {
            "name": "smp",
            "in": "query",
            "description": "The number of CPUs. Please use option -sockets instead.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            }
          },
          {
            "name": "sockets",
            "in": "query",
            "description": "The number of CPU sockets.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            }
          },
          {
            "name": "spice_enhancements",
            "in": "query",
            "description": "Configure additional enhancements for SPICE.",
            "required": false,
            "schema": {
              "type": "string",
              "format": {
                "foldersharing": {
                  "default": "0",
                  "description": "Enable folder sharing via SPICE. Needs Spice-WebDAV daemon installed in the VM.",
                  "optional": 1,
                  "type": "boolean"
                },
                "videostreaming": {
                  "default": "off",
                  "description": "Enable video streaming. Uses compression for detected video streams.",
                  "enum": [
                    "off",
                    "all",
                    "filter"
                  ],
                  "optional": 1,
                  "type": "string"
                }
              }
            }
          },
          {
            "name": "sshkeys",
            "in": "query",
            "description": "cloud-init: Setup public SSH keys (one key per line, OpenSSH format).",
            "required": false,
            "schema": {
              "type": "string",
              "format": "urlencoded"
            }
          },
          {
            "name": "startdate",
            "in": "query",
            "description": "Set the initial date of the real time clock. Valid format for date are:'now' or '2006-06-17T16:01:21' or '2006-06-17'.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "now",
              "pattern": "(now|\\d{4}-\\d{1,2}-\\d{1,2}(T\\d{1,2}:\\d{1,2}:\\d{1,2})?)"
            }
          },
          {
            "name": "startup",
            "in": "query",
            "description": "Startup and shutdown behavior. Order is a non-negative number defining the general startup order. Shutdown in done with reverse ordering. Additionally you can set the 'up' or 'down' delay in seconds, which specifies a delay to wait before the next VM is started or stopped.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-startup-order"
            }
          },
          {
            "name": "tablet",
            "in": "query",
            "description": "Enable/disable the USB tablet device.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 1
            }
          },
          {
            "name": "tags",
            "in": "query",
            "description": "Tags of the VM. This is only meta information.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-tag-list"
            }
          },
          {
            "name": "tdf",
            "in": "query",
            "description": "Enable/disable time drift fix.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "template",
            "in": "query",
            "description": "Enable/disable Template.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "tpmstate0",
            "in": "query",
            "description": "Configure a Disk for storing TPM state. The format is fixed to 'raw'. Use the special syntax STORAGE_ID:SIZE_IN_GiB to allocate a new volume. Note that SIZE_IN_GiB is ignored here and 4 MiB will be used instead. Use STORAGE_ID:0 and the 'import-from' parameter to import from an existing volume.",
            "required": false,
            "schema": {
              "type": "string",
              "format": {
                "file": {
                  "default_key": 1,
                  "description": "The drive's backing volume.",
                  "format": "pve-volume-id-or-qm-path",
                  "format_description": "volume",
                  "type": "string"
                },
                "import-from": {
                  "description": "Create a new disk, importing from this source (volume ID or absolute path). When an absolute path is specified, it's up to you to ensure that the source is not actively used by another process during the import!",
                  "format": "pve-volume-id-or-absolute-path",
                  "format_description": "source volume",
                  "optional": 1,
                  "type": "string"
                },
                "size": {
                  "description": "Disk size. This is purely informational and has no effect.",
                  "format": "disk-size",
                  "format_description": "DiskSize",
                  "optional": 1,
                  "type": "string"
                },
                "version": {
                  "default": "v1.2",
                  "description": "The TPM interface version. v2.0 is newer and should be preferred. Note that this cannot be changed later on.",
                  "enum": [
                    "v1.2",
                    "v2.0"
                  ],
                  "optional": 1,
                  "type": "string"
                },
                "volume": {
                  "alias": "file"
                }
              }
            }
          },
          {
            "name": "unused[n]",
            "in": "query",
            "description": "Reference to unused volumes. This is used internally, and should not be modified manually.",
            "required": false,
            "schema": {
              "type": "string",
              "format": {
                "file": {
                  "default_key": 1,
                  "description": "The drive's backing volume.",
                  "format": "pve-volume-id",
                  "format_description": "volume",
                  "type": "string"
                },
                "volume": {
                  "alias": "file"
                }
              }
            }
          },
          {
            "name": "usb[n]",
            "in": "query",
            "description": "Configure an USB device (n is 0 to 4, for machine version >= 7.1 and ostype l26 or windows > 7, n can be up to 14).",
            "required": false,
            "schema": {
              "type": "string",
              "format": {
                "host": {
                  "default_key": 1,
                  "description": "The Host USB device or port or the value 'spice'. HOSTUSBDEVICE syntax is:\n\n 'bus-port(.port)*' (decimal numbers) or\n 'vendor_id:product_id' (hexadecimal numbers) or\n 'spice'\n\nYou can use the 'lsusb -t' command to list existing usb devices.\n\nNOTE: This option allows direct access to host hardware. So it is no longer possible to migrate such\nmachines - use with special care.\n\nThe value 'spice' can be used to add a usb redirection devices for spice.\n\nEither this or the 'mapping' key must be set.\n",
                  "format_description": "HOSTUSBDEVICE|spice",
                  "optional": 1,
                  "pattern": "(?^:(?:(?:(?^:(0x)?([0-9A-Fa-f]{4}):(0x)?([0-9A-Fa-f]{4})))|(?:(?^:(\\d+)\\-(\\d+(\\.\\d+)*)))|[Ss][Pp][Ii][Cc][Ee]))",
                  "type": "string"
                },
                "mapping": {
                  "description": "The ID of a cluster wide mapping. Either this or the default-key 'host' must be set.",
                  "format": "pve-configid",
                  "format_description": "mapping-id",
                  "optional": 1,
                  "type": "string"
                },
                "usb3": {
                  "default": 0,
                  "description": "Specifies whether if given host option is a USB3 device or port. For modern guests (machine version >= 7.1 and ostype l26 and windows > 7), this flag is irrelevant (all devices are plugged into a xhci controller).",
                  "optional": 1,
                  "type": "boolean"
                }
              }
            }
          },
          {
            "name": "vcpus",
            "in": "query",
            "description": "Number of hotplugged vcpus.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0,
              "minimum": 1
            }
          },
          {
            "name": "vga",
            "in": "query",
            "description": "Configure the VGA hardware.",
            "required": false,
            "schema": {
              "type": "string",
              "format": {
                "clipboard": {
                  "description": "Enable a specific clipboard. If not set, depending on the display type the SPICE one will be added. Migration with VNC clipboard is not yet supported!",
                  "enum": [
                    "vnc"
                  ],
                  "optional": 1,
                  "type": "string"
                },
                "memory": {
                  "description": "Sets the VGA memory (in MiB). Has no effect with serial display.",
                  "maximum": 512,
                  "minimum": 4,
                  "optional": 1,
                  "type": "integer"
                },
                "type": {
                  "default": "std",
                  "default_key": 1,
                  "description": "Select the VGA type. Using type 'cirrus' is not recommended.",
                  "enum": [
                    "cirrus",
                    "qxl",
                    "qxl2",
                    "qxl3",
                    "qxl4",
                    "none",
                    "serial0",
                    "serial1",
                    "serial2",
                    "serial3",
                    "std",
                    "virtio",
                    "virtio-gl",
                    "vmware"
                  ],
                  "optional": 1,
                  "type": "string"
                }
              }
            }
          },
          {
            "name": "virtio[n]",
            "in": "query",
            "description": "Use volume as VIRTIO hard disk (n is 0 to 15). Use the special syntax STORAGE_ID:SIZE_IN_GiB to allocate a new volume. Use STORAGE_ID:0 and the 'import-from' parameter to import from an existing volume.",
            "required": false,
            "schema": {
              "type": "string",
              "format": {
                "aio": {
                  "description": "AIO type to use.",
                  "enum": [
                    "native",
                    "threads",
                    "io_uring"
                  ],
                  "optional": 1,
                  "type": "string"
                },
                "backup": {
                  "description": "Whether the drive should be included when making backups.",
                  "optional": 1,
                  "type": "boolean"
                },
                "bps": {
                  "description": "Maximum r/w speed in bytes per second.",
                  "format_description": "bps",
                  "optional": 1,
                  "type": "integer"
                },
                "bps_max_length": {
                  "description": "Maximum length of I/O bursts in seconds.",
                  "format_description": "seconds",
                  "minimum": 1,
                  "optional": 1,
                  "type": "integer"
                },
                "bps_rd": {
                  "description": "Maximum read speed in bytes per second.",
                  "format_description": "bps",
                  "optional": 1,
                  "type": "integer"
                },
                "bps_rd_length": {
                  "alias": "bps_rd_max_length"
                },
                "bps_rd_max_length": {
                  "description": "Maximum length of read I/O bursts in seconds.",
                  "format_description": "seconds",
                  "minimum": 1,
                  "optional": 1,
                  "type": "integer"
                },
                "bps_wr": {
                  "description": "Maximum write speed in bytes per second.",
                  "format_description": "bps",
                  "optional": 1,
                  "type": "integer"
                },
                "bps_wr_length": {
                  "alias": "bps_wr_max_length"
                },
                "bps_wr_max_length": {
                  "description": "Maximum length of write I/O bursts in seconds.",
                  "format_description": "seconds",
                  "minimum": 1,
                  "optional": 1,
                  "type": "integer"
                },
                "cache": {
                  "description": "The drive's cache mode",
                  "enum": [
                    "none",
                    "writethrough",
                    "writeback",
                    "unsafe",
                    "directsync"
                  ],
                  "optional": 1,
                  "type": "string"
                },
                "detect_zeroes": {
                  "description": "Controls whether to detect and try to optimize writes of zeroes.",
                  "optional": 1,
                  "type": "boolean"
                },
                "discard": {
                  "description": "Controls whether to pass discard/trim requests to the underlying storage.",
                  "enum": [
                    "ignore",
                    "on"
                  ],
                  "optional": 1,
                  "type": "string"
                },
                "file": {
                  "default_key": 1,
                  "description": "The drive's backing volume.",
                  "format": "pve-volume-id-or-qm-path",
                  "format_description": "volume",
                  "type": "string"
                },
                "format": {
                  "description": "The drive's backing file's data format.",
                  "enum": [
                    "raw",
                    "qcow",
                    "qed",
                    "qcow2",
                    "vmdk",
                    "cloop"
                  ],
                  "optional": 1,
                  "type": "string"
                },
                "import-from": {
                  "description": "Create a new disk, importing from this source (volume ID or absolute path). When an absolute path is specified, it's up to you to ensure that the source is not actively used by another process during the import!",
                  "format": "pve-volume-id-or-absolute-path",
                  "format_description": "source volume",
                  "optional": 1,
                  "type": "string"
                },
                "iops": {
                  "description": "Maximum r/w I/O in operations per second.",
                  "format_description": "iops",
                  "optional": 1,
                  "type": "integer"
                },
                "iops_max": {
                  "description": "Maximum unthrottled r/w I/O pool in operations per second.",
                  "format_description": "iops",
                  "optional": 1,
                  "type": "integer"
                },
                "iops_max_length": {
                  "description": "Maximum length of I/O bursts in seconds.",
                  "format_description": "seconds",
                  "minimum": 1,
                  "optional": 1,
                  "type": "integer"
                },
                "iops_rd": {
                  "description": "Maximum read I/O in operations per second.",
                  "format_description": "iops",
                  "optional": 1,
                  "type": "integer"
                },
                "iops_rd_length": {
                  "alias": "iops_rd_max_length"
                },
                "iops_rd_max": {
                  "description": "Maximum unthrottled read I/O pool in operations per second.",
                  "format_description": "iops",
                  "optional": 1,
                  "type": "integer"
                },
                "iops_rd_max_length": {
                  "description": "Maximum length of read I/O bursts in seconds.",
                  "format_description": "seconds",
                  "minimum": 1,
                  "optional": 1,
                  "type": "integer"
                },
                "iops_wr": {
                  "description": "Maximum write I/O in operations per second.",
                  "format_description": "iops",
                  "optional": 1,
                  "type": "integer"
                },
                "iops_wr_length": {
                  "alias": "iops_wr_max_length"
                },
                "iops_wr_max": {
                  "description": "Maximum unthrottled write I/O pool in operations per second.",
                  "format_description": "iops",
                  "optional": 1,
                  "type": "integer"
                },
                "iops_wr_max_length": {
                  "description": "Maximum length of write I/O bursts in seconds.",
                  "format_description": "seconds",
                  "minimum": 1,
                  "optional": 1,
                  "type": "integer"
                },
                "iothread": {
                  "description": "Whether to use iothreads for this drive",
                  "optional": 1,
                  "type": "boolean"
                },
                "mbps": {
                  "description": "Maximum r/w speed in megabytes per second.",
                  "format_description": "mbps",
                  "optional": 1,
                  "type": "number"
                },
                "mbps_max": {
                  "description": "Maximum unthrottled r/w pool in megabytes per second.",
                  "format_description": "mbps",
                  "optional": 1,
                  "type": "number"
                },
                "mbps_rd": {
                  "description": "Maximum read speed in megabytes per second.",
                  "format_description": "mbps",
                  "optional": 1,
                  "type": "number"
                },
                "mbps_rd_max": {
                  "description": "Maximum unthrottled read pool in megabytes per second.",
                  "format_description": "mbps",
                  "optional": 1,
                  "type": "number"
                },
                "mbps_wr": {
                  "description": "Maximum write speed in megabytes per second.",
                  "format_description": "mbps",
                  "optional": 1,
                  "type": "number"
                },
                "mbps_wr_max": {
                  "description": "Maximum unthrottled write pool in megabytes per second.",
                  "format_description": "mbps",
                  "optional": 1,
                  "type": "number"
                },
                "media": {
                  "default": "disk",
                  "description": "The drive's media type.",
                  "enum": [
                    "cdrom",
                    "disk"
                  ],
                  "optional": 1,
                  "type": "string"
                },
                "replicate": {
                  "default": 1,
                  "description": "Whether the drive should considered for replication jobs.",
                  "optional": 1,
                  "type": "boolean"
                },
                "rerror": {
                  "description": "Read error action.",
                  "enum": [
                    "ignore",
                    "report",
                    "stop"
                  ],
                  "optional": 1,
                  "type": "string"
                },
                "ro": {
                  "description": "Whether the drive is read-only.",
                  "optional": 1,
                  "type": "boolean"
                },
                "serial": {
                  "description": "The drive's reported serial number, url-encoded, up to 20 bytes long.",
                  "format": "urlencoded",
                  "format_description": "serial",
                  "maxLength": 60,
                  "optional": 1,
                  "type": "string"
                },
                "shared": {
                  "default": 0,
                  "description": "Mark this locally-managed volume as available on all nodes",
                  "optional": 1,
                  "type": "boolean",
                  "verbose_description": "Mark this locally-managed volume as available on all nodes.\n\nWARNING: This option does not share the volume automatically, it assumes it is shared already!"
                },
                "size": {
                  "description": "Disk size. This is purely informational and has no effect.",
                  "format": "disk-size",
                  "format_description": "DiskSize",
                  "optional": 1,
                  "type": "string"
                },
                "snapshot": {
                  "description": "Controls qemu's snapshot mode feature. If activated, changes made to the disk are temporary and will be discarded when the VM is shutdown.",
                  "optional": 1,
                  "type": "boolean"
                },
                "volume": {
                  "alias": "file"
                },
                "werror": {
                  "description": "Write error action.",
                  "enum": [
                    "enospc",
                    "ignore",
                    "report",
                    "stop"
                  ],
                  "optional": 1,
                  "type": "string"
                }
              }
            }
          },
          {
            "name": "virtiofs[n]",
            "in": "query",
            "description": "Configuration for sharing a directory between host and guest using Virtio-fs.",
            "required": false,
            "schema": {
              "type": "string",
              "format": {
                "cache": {
                  "default": "auto",
                  "description": "The caching policy the file system should use (auto, always, metadata, never).",
                  "enum": [
                    "auto",
                    "always",
                    "metadata",
                    "never"
                  ],
                  "optional": 1,
                  "type": "string"
                },
                "direct-io": {
                  "default": 0,
                  "description": "Honor the O_DIRECT flag passed down by guest applications.",
                  "optional": 1,
                  "type": "boolean"
                },
                "dirid": {
                  "default_key": 1,
                  "description": "Mapping identifier of the directory mapping to be shared with the guest. Also used as a mount tag inside the VM.",
                  "format": "pve-configid",
                  "format_description": "mapping-id",
                  "type": "string"
                },
                "expose-acl": {
                  "default": 0,
                  "description": "Enable support for POSIX ACLs (enabled ACL implies xattr) for this mount.",
                  "optional": 1,
                  "type": "boolean"
                },
                "expose-xattr": {
                  "default": 0,
                  "description": "Enable support for extended attributes for this mount.",
                  "optional": 1,
                  "type": "boolean"
                }
              }
            }
          },
          {
            "name": "vmgenid",
            "in": "query",
            "description": "Set VM Generation ID. Use '1' to autogenerate on create or update, pass '0' to disable explicitly.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "1 (autogenerated)",
              "pattern": "(?:[a-fA-F0-9]{8}(?:-[a-fA-F0-9]{4}){3}-[a-fA-F0-9]{12}|[01])"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          },
          {
            "name": "vmstatestorage",
            "in": "query",
            "description": "Default storage for VM state volumes/files.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-storage-id"
            }
          },
          {
            "name": "watchdog",
            "in": "query",
            "description": "Create a virtual hardware watchdog device.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-qm-watchdog"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "optional": 1,
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Set virtual machine options (synchronous API) - You should consider using the POST method instead for any actions involving hotplug or storage allocation.",
        "description": "Set virtual machine options (synchronous API) - You should consider using the POST method instead for any actions involving hotplug or storage allocation.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "acpi",
            "in": "query",
            "description": "Enable/disable ACPI.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 1
            }
          },
          {
            "name": "affinity",
            "in": "query",
            "description": "List of host cores used to execute guest processes, for example: 0,5,8-11",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-cpuset"
            }
          },
          {
            "name": "agent",
            "in": "query",
            "description": "Enable/disable communication with the QEMU Guest Agent and its properties.",
            "required": false,
            "schema": {
              "type": "string",
              "format": {
                "enabled": {
                  "default": 0,
                  "default_key": 1,
                  "description": "Enable/disable communication with a QEMU Guest Agent (QGA) running in the VM.",
                  "type": "boolean"
                },
                "freeze-fs-on-backup": {
                  "default": 1,
                  "description": "Freeze/thaw guest filesystems on backup for consistency.",
                  "optional": 1,
                  "type": "boolean"
                },
                "fstrim_cloned_disks": {
                  "default": 0,
                  "description": "Run fstrim after moving a disk or migrating the VM.",
                  "optional": 1,
                  "type": "boolean"
                },
                "type": {
                  "default": "virtio",
                  "description": "Select the agent type",
                  "enum": [
                    "virtio",
                    "isa"
                  ],
                  "optional": 1,
                  "type": "string"
                }
              }
            }
          },
          {
            "name": "amd-sev",
            "in": "query",
            "description": "Secure Encrypted Virtualization (SEV) features by AMD CPUs",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-qemu-sev-fmt"
            }
          },
          {
            "name": "arch",
            "in": "query",
            "description": "Virtual processor architecture. Defaults to the host.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "x86_64",
                "aarch64"
              ]
            }
          },
          {
            "name": "args",
            "in": "query",
            "description": "Arbitrary arguments passed to kvm.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "audio0",
            "in": "query",
            "description": "Configure a audio device, useful in combination with QXL/Spice.",
            "required": false,
            "schema": {
              "type": "string",
              "format": {
                "device": {
                  "description": "Configure an audio device.",
                  "enum": [
                    "ich9-intel-hda",
                    "intel-hda",
                    "AC97"
                  ],
                  "type": "string"
                },
                "driver": {
                  "default": "spice",
                  "description": "Driver backend for the audio device.",
                  "enum": [
                    "spice",
                    "none"
                  ],
                  "optional": 1,
                  "type": "string"
                }
              }
            }
          },
          {
            "name": "autostart",
            "in": "query",
            "description": "Automatic restart after crash (currently ignored).",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "balloon",
            "in": "query",
            "description": "Amount of target RAM for the VM in MiB. Using zero disables the ballon driver.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "name": "bios",
            "in": "query",
            "description": "Select BIOS implementation.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "seabios",
              "enum": [
                "seabios",
                "ovmf"
              ]
            }
          },
          {
            "name": "boot",
            "in": "query",
            "description": "Specify guest boot order. Use the 'order=' sub-property as usage with no key or 'legacy=' is deprecated.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-qm-boot"
            }
          },
          {
            "name": "bootdisk",
            "in": "query",
            "description": "Enable booting from specified disk. Deprecated: Use 'boot: order=foo;bar' instead.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-qm-bootdisk",
              "pattern": "(ide|sata|scsi|virtio)\\d+"
            }
          },
          {
            "name": "cdrom",
            "in": "query",
            "description": "This is an alias for option -ide2",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-qm-ide"
            }
          },
          {
            "name": "cicustom",
            "in": "query",
            "description": "cloud-init: Specify custom files to replace the automatically generated ones at start.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-qm-cicustom"
            }
          },
          {
            "name": "cipassword",
            "in": "query",
            "description": "cloud-init: Password to assign the user. Using this is generally not recommended. Use ssh keys instead. Also note that older cloud-init versions do not support hashed passwords.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "citype",
            "in": "query",
            "description": "Specifies the cloud-init configuration format. The default depends on the configured operating system type (`ostype`. We use the `nocloud` format for Linux, and `configdrive2` for windows.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "configdrive2",
                "nocloud",
                "opennebula"
              ]
            }
          },
          {
            "name": "ciupgrade",
            "in": "query",
            "description": "cloud-init: do an automatic package upgrade after the first boot.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 1
            }
          },
          {
            "name": "ciuser",
            "in": "query",
            "description": "cloud-init: User name to change ssh keys and password for instead of the image's configured default user.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cores",
            "in": "query",
            "description": "The number of cores per socket.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            }
          },
          {
            "name": "cpu",
            "in": "query",
            "description": "Emulated CPU type.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-vm-cpu-conf"
            }
          },
          {
            "name": "cpulimit",
            "in": "query",
            "description": "Limit of CPU usage.",
            "required": false,
            "schema": {
              "type": "number",
              "default": 0,
              "minimum": 0,
              "maximum": 128
            }
          },
          {
            "name": "cpuunits",
            "in": "query",
            "description": "CPU weight for a VM, will be clamped to [1, 10000] in cgroup v2.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": "cgroup v1: 1024, cgroup v2: 100",
              "minimum": 1,
              "maximum": 262144
            }
          },
          {
            "name": "delete",
            "in": "query",
            "description": "A list of settings you want to delete.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-configid-list"
            }
          },
          {
            "name": "description",
            "in": "query",
            "description": "Description for the VM. Shown in the web-interface VM's summary. This is saved as comment inside the configuration file.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 8192
            }
          },
          {
            "name": "digest",
            "in": "query",
            "description": "Prevent changes if current configuration file has different SHA1 digest. This can be used to prevent concurrent modifications.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 40
            }
          },
          {
            "name": "efidisk0",
            "in": "query",
            "description": "Configure a disk for storing EFI vars. Use the special syntax STORAGE_ID:SIZE_IN_GiB to allocate a new volume. Note that SIZE_IN_GiB is ignored here and that the default EFI vars are copied to the volume instead. Use STORAGE_ID:0 and the 'import-from' parameter to import from an existing volume.",
            "required": false,
            "schema": {
              "type": "string",
              "format": {
                "efitype": {
                  "default": "2m",
                  "description": "Size and type of the OVMF EFI vars. '4m' is newer and recommended, and required for Secure Boot. For backwards compatibility, '2m' is used if not otherwise specified. Ignored for VMs with arch=aarch64 (ARM).",
                  "enum": [
                    "2m",
                    "4m"
                  ],
                  "optional": 1,
                  "type": "string"
                },
                "file": {
                  "default_key": 1,
                  "description": "The drive's backing volume.",
                  "format": "pve-volume-id-or-qm-path",
                  "format_description": "volume",
                  "type": "string"
                },
                "format": {
                  "description": "The drive's backing file's data format.",
                  "enum": [
                    "raw",
                    "qcow",
                    "qed",
                    "qcow2",
                    "vmdk",
                    "cloop"
                  ],
                  "optional": 1,
                  "type": "string"
                },
                "import-from": {
                  "description": "Create a new disk, importing from this source (volume ID or absolute path). When an absolute path is specified, it's up to you to ensure that the source is not actively used by another process during the import!",
                  "format": "pve-volume-id-or-absolute-path",
                  "format_description": "source volume",
                  "optional": 1,
                  "type": "string"
                },
                "pre-enrolled-keys": {
                  "default": 0,
                  "description": "Use am EFI vars template with distribution-specific and Microsoft Standard keys enrolled, if used with 'efitype=4m'. Note that this will enable Secure Boot by default, though it can still be turned off from within the VM.",
                  "optional": 1,
                  "type": "boolean"
                },
                "size": {
                  "description": "Disk size. This is purely informational and has no effect.",
                  "format": "disk-size",
                  "format_description": "DiskSize",
                  "optional": 1,
                  "type": "string"
                },
                "volume": {
                  "alias": "file"
                }
              }
            }
          },
          {
            "name": "force",
            "in": "query",
            "description": "Force physical removal. Without this, we simple remove the disk from the config file and create an additional configuration entry called 'unused[n]', which contains the volume ID. Unlink of unused[n] always cause physical removal.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "freeze",
            "in": "query",
            "description": "Freeze CPU at startup (use 'c' monitor command to start execution).",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "hookscript",
            "in": "query",
            "description": "Script that will be executed during various steps in the vms lifetime.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-volume-id"
            }
          },
          {
            "name": "hostpci[n]",
            "in": "query",
            "description": "Map host PCI devices into guest.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-qm-hostpci"
            }
          },
          {
            "name": "hotplug",
            "in": "query",
            "description": "Selectively enable hotplug features. This is a comma separated list of hotplug features: 'network', 'disk', 'cpu', 'memory', 'usb' and 'cloudinit'. Use '0' to disable hotplug completely. Using '1' as value is an alias for the default `network,disk,usb`. USB hotplugging is possible for guests with machine version >= 7.1 and ostype l26 or windows > 7.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "network,disk,usb",
              "format": "pve-hotplug-features"
            }
          },
          {
            "name": "hugepages",
            "in": "query",
            "description": "Enable/disable hugepages memory.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "any",
                "2",
                "1024"
              ]
            }
          },
          {
            "name": "ide[n]",
            "in": "query",
            "description": "Use volume as IDE hard disk or CD-ROM (n is 0 to 3). Use the special syntax STORAGE_ID:SIZE_IN_GiB to allocate a new volume. Use STORAGE_ID:0 and the 'import-from' parameter to import from an existing volume.",
            "required": false,
            "schema": {
              "type": "string",
              "format": {
                "aio": {
                  "description": "AIO type to use.",
                  "enum": [
                    "native",
                    "threads",
                    "io_uring"
                  ],
                  "optional": 1,
                  "type": "string"
                },
                "backup": {
                  "description": "Whether the drive should be included when making backups.",
                  "optional": 1,
                  "type": "boolean"
                },
                "bps": {
                  "description": "Maximum r/w speed in bytes per second.",
                  "format_description": "bps",
                  "optional": 1,
                  "type": "integer"
                },
                "bps_max_length": {
                  "description": "Maximum length of I/O bursts in seconds.",
                  "format_description": "seconds",
                  "minimum": 1,
                  "optional": 1,
                  "type": "integer"
                },
                "bps_rd": {
                  "description": "Maximum read speed in bytes per second.",
                  "format_description": "bps",
                  "optional": 1,
                  "type": "integer"
                },
                "bps_rd_length": {
                  "alias": "bps_rd_max_length"
                },
                "bps_rd_max_length": {
                  "description": "Maximum length of read I/O bursts in seconds.",
                  "format_description": "seconds",
                  "minimum": 1,
                  "optional": 1,
                  "type": "integer"
                },
                "bps_wr": {
                  "description": "Maximum write speed in bytes per second.",
                  "format_description": "bps",
                  "optional": 1,
                  "type": "integer"
                },
                "bps_wr_length": {
                  "alias": "bps_wr_max_length"
                },
                "bps_wr_max_length": {
                  "description": "Maximum length of write I/O bursts in seconds.",
                  "format_description": "seconds",
                  "minimum": 1,
                  "optional": 1,
                  "type": "integer"
                },
                "cache": {
                  "description": "The drive's cache mode",
                  "enum": [
                    "none",
                    "writethrough",
                    "writeback",
                    "unsafe",
                    "directsync"
                  ],
                  "optional": 1,
                  "type": "string"
                },
                "detect_zeroes": {
                  "description": "Controls whether to detect and try to optimize writes of zeroes.",
                  "optional": 1,
                  "type": "boolean"
                },
                "discard": {
                  "description": "Controls whether to pass discard/trim requests to the underlying storage.",
                  "enum": [
                    "ignore",
                    "on"
                  ],
                  "optional": 1,
                  "type": "string"
                },
                "file": {
                  "default_key": 1,
                  "description": "The drive's backing volume.",
                  "format": "pve-volume-id-or-qm-path",
                  "format_description": "volume",
                  "type": "string"
                },
                "format": {
                  "description": "The drive's backing file's data format.",
                  "enum": [
                    "raw",
                    "qcow",
                    "qed",
                    "qcow2",
                    "vmdk",
                    "cloop"
                  ],
                  "optional": 1,
                  "type": "string"
                },
                "import-from": {
                  "description": "Create a new disk, importing from this source (volume ID or absolute path). When an absolute path is specified, it's up to you to ensure that the source is not actively used by another process during the import!",
                  "format": "pve-volume-id-or-absolute-path",
                  "format_description": "source volume",
                  "optional": 1,
                  "type": "string"
                },
                "iops": {
                  "description": "Maximum r/w I/O in operations per second.",
                  "format_description": "iops",
                  "optional": 1,
                  "type": "integer"
                },
                "iops_max": {
                  "description": "Maximum unthrottled r/w I/O pool in operations per second.",
                  "format_description": "iops",
                  "optional": 1,
                  "type": "integer"
                },
                "iops_max_length": {
                  "description": "Maximum length of I/O bursts in seconds.",
                  "format_description": "seconds",
                  "minimum": 1,
                  "optional": 1,
                  "type": "integer"
                },
                "iops_rd": {
                  "description": "Maximum read I/O in operations per second.",
                  "format_description": "iops",
                  "optional": 1,
                  "type": "integer"
                },
                "iops_rd_length": {
                  "alias": "iops_rd_max_length"
                },
                "iops_rd_max": {
                  "description": "Maximum unthrottled read I/O pool in operations per second.",
                  "format_description": "iops",
                  "optional": 1,
                  "type": "integer"
                },
                "iops_rd_max_length": {
                  "description": "Maximum length of read I/O bursts in seconds.",
                  "format_description": "seconds",
                  "minimum": 1,
                  "optional": 1,
                  "type": "integer"
                },
                "iops_wr": {
                  "description": "Maximum write I/O in operations per second.",
                  "format_description": "iops",
                  "optional": 1,
                  "type": "integer"
                },
                "iops_wr_length": {
                  "alias": "iops_wr_max_length"
                },
                "iops_wr_max": {
                  "description": "Maximum unthrottled write I/O pool in operations per second.",
                  "format_description": "iops",
                  "optional": 1,
                  "type": "integer"
                },
                "iops_wr_max_length": {
                  "description": "Maximum length of write I/O bursts in seconds.",
                  "format_description": "seconds",
                  "minimum": 1,
                  "optional": 1,
                  "type": "integer"
                },
                "mbps": {
                  "description": "Maximum r/w speed in megabytes per second.",
                  "format_description": "mbps",
                  "optional": 1,
                  "type": "number"
                },
                "mbps_max": {
                  "description": "Maximum unthrottled r/w pool in megabytes per second.",
                  "format_description": "mbps",
                  "optional": 1,
                  "type": "number"
                },
                "mbps_rd": {
                  "description": "Maximum read speed in megabytes per second.",
                  "format_description": "mbps",
                  "optional": 1,
                  "type": "number"
                },
                "mbps_rd_max": {
                  "description": "Maximum unthrottled read pool in megabytes per second.",
                  "format_description": "mbps",
                  "optional": 1,
                  "type": "number"
                },
                "mbps_wr": {
                  "description": "Maximum write speed in megabytes per second.",
                  "format_description": "mbps",
                  "optional": 1,
                  "type": "number"
                },
                "mbps_wr_max": {
                  "description": "Maximum unthrottled write pool in megabytes per second.",
                  "format_description": "mbps",
                  "optional": 1,
                  "type": "number"
                },
                "media": {
                  "default": "disk",
                  "description": "The drive's media type.",
                  "enum": [
                    "cdrom",
                    "disk"
                  ],
                  "optional": 1,
                  "type": "string"
                },
                "model": {
                  "description": "The drive's reported model name, url-encoded, up to 40 bytes long.",
                  "format": "urlencoded",
                  "format_description": "model",
                  "maxLength": 120,
                  "optional": 1,
                  "type": "string"
                },
                "replicate": {
                  "default": 1,
                  "description": "Whether the drive should considered for replication jobs.",
                  "optional": 1,
                  "type": "boolean"
                },
                "rerror": {
                  "description": "Read error action.",
                  "enum": [
                    "ignore",
                    "report",
                    "stop"
                  ],
                  "optional": 1,
                  "type": "string"
                },
                "serial": {
                  "description": "The drive's reported serial number, url-encoded, up to 20 bytes long.",
                  "format": "urlencoded",
                  "format_description": "serial",
                  "maxLength": 60,
                  "optional": 1,
                  "type": "string"
                },
                "shared": {
                  "default": 0,
                  "description": "Mark this locally-managed volume as available on all nodes",
                  "optional": 1,
                  "type": "boolean",
                  "verbose_description": "Mark this locally-managed volume as available on all nodes.\n\nWARNING: This option does not share the volume automatically, it assumes it is shared already!"
                },
                "size": {
                  "description": "Disk size. This is purely informational and has no effect.",
                  "format": "disk-size",
                  "format_description": "DiskSize",
                  "optional": 1,
                  "type": "string"
                },
                "snapshot": {
                  "description": "Controls qemu's snapshot mode feature. If activated, changes made to the disk are temporary and will be discarded when the VM is shutdown.",
                  "optional": 1,
                  "type": "boolean"
                },
                "ssd": {
                  "description": "Whether to expose this drive as an SSD, rather than a rotational hard disk.",
                  "optional": 1,
                  "type": "boolean"
                },
                "volume": {
                  "alias": "file"
                },
                "werror": {
                  "description": "Write error action.",
                  "enum": [
                    "enospc",
                    "ignore",
                    "report",
                    "stop"
                  ],
                  "optional": 1,
                  "type": "string"
                },
                "wwn": {
                  "description": "The drive's worldwide name, encoded as 16 bytes hex string, prefixed by '0x'.",
                  "format_description": "wwn",
                  "optional": 1,
                  "pattern": "(?^:^(0x)[0-9a-fA-F]{16})",
                  "type": "string"
                }
              }
            }
          },
          {
            "name": "ipconfig[n]",
            "in": "query",
            "description": "cloud-init: Specify IP addresses and gateways for the corresponding interface.\n\nIP addresses use CIDR notation, gateways are optional but need an IP of the same type specified.\n\nThe special string 'dhcp' can be used for IP addresses to use DHCP, in which case no explicit\ngateway should be provided.\nFor IPv6 the special string 'auto' can be used to use stateless autoconfiguration. This requires\ncloud-init 19.4 or newer.\n\nIf cloud-init is enabled and neither an IPv4 nor an IPv6 address is specified, it defaults to using\ndhcp on IPv4.\n",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-qm-ipconfig"
            }
          },
          {
            "name": "ivshmem",
            "in": "query",
            "description": "Inter-VM shared memory. Useful for direct communication between VMs, or to the host.",
            "required": false,
            "schema": {
              "type": "string",
              "format": {
                "name": {
                  "description": "The name of the file. Will be prefixed with 'pve-shm-'. Default is the VMID. Will be deleted when the VM is stopped.",
                  "format_description": "string",
                  "optional": 1,
                  "pattern": "[a-zA-Z0-9\\-]+",
                  "type": "string"
                },
                "size": {
                  "description": "The size of the file in MB.",
                  "minimum": 1,
                  "type": "integer"
                }
              }
            }
          },
          {
            "name": "keephugepages",
            "in": "query",
            "description": "Use together with hugepages. If enabled, hugepages will not not be deleted after VM shutdown and can be used for subsequent starts.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "keyboard",
            "in": "query",
            "description": "Keyboard layout for VNC server. This option is generally not required and is often better handled from within the guest OS.",
            "required": false,
            "schema": {
              "type": "string",
              "default": null,
              "enum": [
                "de",
                "de-ch",
                "da",
                "en-gb",
                "en-us",
                "es",
                "fi",
                "fr",
                "fr-be",
                "fr-ca",
                "fr-ch",
                "hu",
                "is",
                "it",
                "ja",
                "lt",
                "mk",
                "nl",
                "no",
                "pl",
                "pt",
                "pt-br",
                "sv",
                "sl",
                "tr"
              ]
            }
          },
          {
            "name": "kvm",
            "in": "query",
            "description": "Enable/disable KVM hardware virtualization.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 1
            }
          },
          {
            "name": "localtime",
            "in": "query",
            "description": "Set the real time clock (RTC) to local time. This is enabled by default if the `ostype` indicates a Microsoft Windows OS.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lock",
            "in": "query",
            "description": "Lock/unlock the VM.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "backup",
                "clone",
                "create",
                "migrate",
                "rollback",
                "snapshot",
                "snapshot-delete",
                "suspending",
                "suspended"
              ]
            }
          },
          {
            "name": "machine",
            "in": "query",
            "description": "Specify the QEMU machine.",
            "required": false,
            "schema": {
              "type": "string",
              "format": {
                "enable-s3": {
                  "description": "Enables S3 power state. Defaults to false beginning with machine types 9.2+pve1, true before.",
                  "optional": 1,
                  "type": "boolean"
                },
                "enable-s4": {
                  "description": "Enables S4 power state. Defaults to false beginning with machine types 9.2+pve1, true before.",
                  "optional": 1,
                  "type": "boolean"
                },
                "type": {
                  "default_key": 1,
                  "description": "Specifies the QEMU machine type.",
                  "format_description": "machine type",
                  "maxLength": 40,
                  "optional": 1,
                  "pattern": "(pc|pc(-i440fx)?-\\d+(\\.\\d+)+(\\+pve\\d+)?(\\.pxe)?|q35|pc-q35-\\d+(\\.\\d+)+(\\+pve\\d+)?(\\.pxe)?|virt(?:-\\d+(\\.\\d+)+)?(\\+pve\\d+)?)",
                  "type": "string"
                },
                "viommu": {
                  "description": "Enable and set guest vIOMMU variant (Intel vIOMMU needs q35 to be set as machine type).",
                  "enum": [
                    "intel",
                    "virtio"
                  ],
                  "optional": 1,
                  "type": "string"
                }
              }
            }
          },
          {
            "name": "memory",
            "in": "query",
            "description": "Memory properties.",
            "required": false,
            "schema": {
              "type": "string",
              "format": {
                "current": {
                  "default": 512,
                  "default_key": 1,
                  "description": "Current amount of online RAM for the VM in MiB. This is the maximum available memory when you use the balloon device.",
                  "minimum": 16,
                  "type": "integer"
                }
              }
            }
          },
          {
            "name": "migrate_downtime",
            "in": "query",
            "description": "Set maximum tolerated downtime (in seconds) for migrations. Should the migration not be able to converge in the very end, because too much newly dirtied RAM needs to be transferred, the limit will be increased automatically step-by-step until migration can converge.",
            "required": false,
            "schema": {
              "type": "number",
              "default": 0.1,
              "minimum": 0
            }
          },
          {
            "name": "migrate_speed",
            "in": "query",
            "description": "Set maximum speed (in MB/s) for migrations. Value 0 is no limit.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0,
              "minimum": 0
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Set a name for the VM. Only used on the configuration web interface.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "dns-name"
            }
          },
          {
            "name": "nameserver",
            "in": "query",
            "description": "cloud-init: Sets DNS server IP address for a container. Create will automatically use the setting from the host if neither searchdomain nor nameserver are set.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "address-list"
            }
          },
          {
            "name": "net[n]",
            "in": "query",
            "description": "Specify network devices.",
            "required": false,
            "schema": {
              "type": "string",
              "format": {
                "bridge": {
                  "description": "Bridge to attach the network device to. The Proxmox VE standard bridge\nis called 'vmbr0'.\n\nIf you do not specify a bridge, we create a kvm user (NATed) network\ndevice, which provides DHCP and DNS services. The following addresses\nare used:\n\n 10.0.2.2   Gateway\n 10.0.2.3   DNS Server\n 10.0.2.4   SMB Server\n\nThe DHCP server assign addresses to the guest starting from 10.0.2.15.\n",
                  "format": "pve-bridge-id",
                  "format_description": "bridge",
                  "optional": 1,
                  "type": "string"
                },
                "e1000": {
                  "alias": "macaddr",
                  "keyAlias": "model"
                },
                "e1000-82540em": {
                  "alias": "macaddr",
                  "keyAlias": "model"
                },
                "e1000-82544gc": {
                  "alias": "macaddr",
                  "keyAlias": "model"
                },
                "e1000-82545em": {
                  "alias": "macaddr",
                  "keyAlias": "model"
                },
                "e1000e": {
                  "alias": "macaddr",
                  "keyAlias": "model"
                },
                "firewall": {
                  "description": "Whether this interface should be protected by the firewall.",
                  "optional": 1,
                  "type": "boolean"
                },
                "i82551": {
                  "alias": "macaddr",
                  "keyAlias": "model"
                },
                "i82557b": {
                  "alias": "macaddr",
                  "keyAlias": "model"
                },
                "i82559er": {
                  "alias": "macaddr",
                  "keyAlias": "model"
                },
                "link_down": {
                  "description": "Whether this interface should be disconnected (like pulling the plug).",
                  "optional": 1,
                  "type": "boolean"
                },
                "macaddr": {
                  "description": "MAC address. That address must be unique within your network. This is automatically generated if not specified.",
                  "format": "mac-addr",
                  "format_description": "XX:XX:XX:XX:XX:XX",
                  "optional": 1,
                  "type": "string",
                  "verbose_description": "A common MAC address with the I/G (Individual/Group) bit not set."
                },
                "model": {
                  "default_key": 1,
                  "description": "Network Card Model. The 'virtio' model provides the best performance with very low CPU overhead. If your guest does not support this driver, it is usually best to use 'e1000'.",
                  "enum": [
                    "e1000",
                    "e1000-82540em",
                    "e1000-82544gc",
                    "e1000-82545em",
                    "e1000e",
                    "i82551",
                    "i82557b",
                    "i82559er",
                    "ne2k_isa",
                    "ne2k_pci",
                    "pcnet",
                    "rtl8139",
                    "virtio",
                    "vmxnet3"
                  ],
                  "type": "string"
                },
                "mtu": {
                  "description": "Force MTU of network device (VirtIO only). Setting to '1' or empty will use the bridge MTU",
                  "maximum": 65520,
                  "minimum": 1,
                  "optional": 1,
                  "type": "integer"
                },
                "ne2k_isa": {
                  "alias": "macaddr",
                  "keyAlias": "model"
                },
                "ne2k_pci": {
                  "alias": "macaddr",
                  "keyAlias": "model"
                },
                "pcnet": {
                  "alias": "macaddr",
                  "keyAlias": "model"
                },
                "queues": {
                  "description": "Number of packet queues to be used on the device.",
                  "maximum": 64,
                  "minimum": 0,
                  "optional": 1,
                  "type": "integer"
                },
                "rate": {
                  "description": "Rate limit in mbps (megabytes per second) as floating point number.",
                  "minimum": 0,
                  "optional": 1,
                  "type": "number"
                },
                "rtl8139": {
                  "alias": "macaddr",
                  "keyAlias": "model"
                },
                "tag": {
                  "description": "VLAN tag to apply to packets on this interface.",
                  "maximum": 4094,
                  "minimum": 1,
                  "optional": 1,
                  "type": "integer"
                },
                "trunks": {
                  "description": "VLAN trunks to pass through this interface.",
                  "format_description": "vlanid[;vlanid...]",
                  "optional": 1,
                  "pattern": "(?^:\\d+(?:-\\d+)?(?:;\\d+(?:-\\d+)?)*)",
                  "type": "string"
                },
                "virtio": {
                  "alias": "macaddr",
                  "keyAlias": "model"
                },
                "vmxnet3": {
                  "alias": "macaddr",
                  "keyAlias": "model"
                }
              }
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "numa",
            "in": "query",
            "description": "Enable/disable NUMA.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "numa[n]",
            "in": "query",
            "description": "NUMA topology.",
            "required": false,
            "schema": {
              "type": "string",
              "format": {
                "cpus": {
                  "description": "CPUs accessing this NUMA node.",
                  "format_description": "id[-id];...",
                  "pattern": "(?^:\\d+(?:-\\d+)?(?:;\\d+(?:-\\d+)?)*)",
                  "type": "string"
                },
                "hostnodes": {
                  "description": "Host NUMA nodes to use.",
                  "format_description": "id[-id];...",
                  "optional": 1,
                  "pattern": "(?^:\\d+(?:-\\d+)?(?:;\\d+(?:-\\d+)?)*)",
                  "type": "string"
                },
                "memory": {
                  "description": "Amount of memory this NUMA node provides.",
                  "optional": 1,
                  "type": "number"
                },
                "policy": {
                  "description": "NUMA allocation policy.",
                  "enum": [
                    "preferred",
                    "bind",
                    "interleave"
                  ],
                  "optional": 1,
                  "type": "string"
                }
              }
            }
          },
          {
            "name": "onboot",
            "in": "query",
            "description": "Specifies whether a VM will be started during system bootup.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "ostype",
            "in": "query",
            "description": "Specify guest operating system.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "other",
                "wxp",
                "w2k",
                "w2k3",
                "w2k8",
                "wvista",
                "win7",
                "win8",
                "win10",
                "win11",
                "l24",
                "l26",
                "solaris"
              ]
            }
          },
          {
            "name": "parallel[n]",
            "in": "query",
            "description": "Map host parallel devices (n is 0 to 2).",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "/dev/parport\\d+|/dev/usb/lp\\d+"
            }
          },
          {
            "name": "protection",
            "in": "query",
            "description": "Sets the protection flag of the VM. This will disable the remove VM and remove disk operations.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "reboot",
            "in": "query",
            "description": "Allow reboot. If set to '0' the VM exit on reboot.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 1
            }
          },
          {
            "name": "revert",
            "in": "query",
            "description": "Revert a pending change.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-configid-list"
            }
          },
          {
            "name": "rng0",
            "in": "query",
            "description": "Configure a VirtIO-based Random Number Generator.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-qm-rng"
            }
          },
          {
            "name": "running-nets-host-mtu",
            "in": "query",
            "description": "List of VirtIO network devices and their effective host_mtu setting. A value of 0 means that the host_mtu parameter is to be avoided for the corresponding device. This is used internally for snapshots.",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "net\\d+=\\d+(,net\\d+=\\d+)*"
            }
          },
          {
            "name": "sata[n]",
            "in": "query",
            "description": "Use volume as SATA hard disk or CD-ROM (n is 0 to 5). Use the special syntax STORAGE_ID:SIZE_IN_GiB to allocate a new volume. Use STORAGE_ID:0 and the 'import-from' parameter to import from an existing volume.",
            "required": false,
            "schema": {
              "type": "string",
              "format": {
                "aio": {
                  "description": "AIO type to use.",
                  "enum": [
                    "native",
                    "threads",
                    "io_uring"
                  ],
                  "optional": 1,
                  "type": "string"
                },
                "backup": {
                  "description": "Whether the drive should be included when making backups.",
                  "optional": 1,
                  "type": "boolean"
                },
                "bps": {
                  "description": "Maximum r/w speed in bytes per second.",
                  "format_description": "bps",
                  "optional": 1,
                  "type": "integer"
                },
                "bps_max_length": {
                  "description": "Maximum length of I/O bursts in seconds.",
                  "format_description": "seconds",
                  "minimum": 1,
                  "optional": 1,
                  "type": "integer"
                },
                "bps_rd": {
                  "description": "Maximum read speed in bytes per second.",
                  "format_description": "bps",
                  "optional": 1,
                  "type": "integer"
                },
                "bps_rd_length": {
                  "alias": "bps_rd_max_length"
                },
                "bps_rd_max_length": {
                  "description": "Maximum length of read I/O bursts in seconds.",
                  "format_description": "seconds",
                  "minimum": 1,
                  "optional": 1,
                  "type": "integer"
                },
                "bps_wr": {
                  "description": "Maximum write speed in bytes per second.",
                  "format_description": "bps",
                  "optional": 1,
                  "type": "integer"
                },
                "bps_wr_length": {
                  "alias": "bps_wr_max_length"
                },
                "bps_wr_max_length": {
                  "description": "Maximum length of write I/O bursts in seconds.",
                  "format_description": "seconds",
                  "minimum": 1,
                  "optional": 1,
                  "type": "integer"
                },
                "cache": {
                  "description": "The drive's cache mode",
                  "enum": [
                    "none",
                    "writethrough",
                    "writeback",
                    "unsafe",
                    "directsync"
                  ],
                  "optional": 1,
                  "type": "string"
                },
                "detect_zeroes": {
                  "description": "Controls whether to detect and try to optimize writes of zeroes.",
                  "optional": 1,
                  "type": "boolean"
                },
                "discard": {
                  "description": "Controls whether to pass discard/trim requests to the underlying storage.",
                  "enum": [
                    "ignore",
                    "on"
                  ],
                  "optional": 1,
                  "type": "string"
                },
                "file": {
                  "default_key": 1,
                  "description": "The drive's backing volume.",
                  "format": "pve-volume-id-or-qm-path",
                  "format_description": "volume",
                  "type": "string"
                },
                "format": {
                  "description": "The drive's backing file's data format.",
                  "enum": [
                    "raw",
                    "qcow",
                    "qed",
                    "qcow2",
                    "vmdk",
                    "cloop"
                  ],
                  "optional": 1,
                  "type": "string"
                },
                "import-from": {
                  "description": "Create a new disk, importing from this source (volume ID or absolute path). When an absolute path is specified, it's up to you to ensure that the source is not actively used by another process during the import!",
                  "format": "pve-volume-id-or-absolute-path",
                  "format_description": "source volume",
                  "optional": 1,
                  "type": "string"
                },
                "iops": {
                  "description": "Maximum r/w I/O in operations per second.",
                  "format_description": "iops",
                  "optional": 1,
                  "type": "integer"
                },
                "iops_max": {
                  "description": "Maximum unthrottled r/w I/O pool in operations per second.",
                  "format_description": "iops",
                  "optional": 1,
                  "type": "integer"
                },
                "iops_max_length": {
                  "description": "Maximum length of I/O bursts in seconds.",
                  "format_description": "seconds",
                  "minimum": 1,
                  "optional": 1,
                  "type": "integer"
                },
                "iops_rd": {
                  "description": "Maximum read I/O in operations per second.",
                  "format_description": "iops",
                  "optional": 1,
                  "type": "integer"
                },
                "iops_rd_length": {
                  "alias": "iops_rd_max_length"
                },
                "iops_rd_max": {
                  "description": "Maximum unthrottled read I/O pool in operations per second.",
                  "format_description": "iops",
                  "optional": 1,
                  "type": "integer"
                },
                "iops_rd_max_length": {
                  "description": "Maximum length of read I/O bursts in seconds.",
                  "format_description": "seconds",
                  "minimum": 1,
                  "optional": 1,
                  "type": "integer"
                },
                "iops_wr": {
                  "description": "Maximum write I/O in operations per second.",
                  "format_description": "iops",
                  "optional": 1,
                  "type": "integer"
                },
                "iops_wr_length": {
                  "alias": "iops_wr_max_length"
                },
                "iops_wr_max": {
                  "description": "Maximum unthrottled write I/O pool in operations per second.",
                  "format_description": "iops",
                  "optional": 1,
                  "type": "integer"
                },
                "iops_wr_max_length": {
                  "description": "Maximum length of write I/O bursts in seconds.",
                  "format_description": "seconds",
                  "minimum": 1,
                  "optional": 1,
                  "type": "integer"
                },
                "mbps": {
                  "description": "Maximum r/w speed in megabytes per second.",
                  "format_description": "mbps",
                  "optional": 1,
                  "type": "number"
                },
                "mbps_max": {
                  "description": "Maximum unthrottled r/w pool in megabytes per second.",
                  "format_description": "mbps",
                  "optional": 1,
                  "type": "number"
                },
                "mbps_rd": {
                  "description": "Maximum read speed in megabytes per second.",
                  "format_description": "mbps",
                  "optional": 1,
                  "type": "number"
                },
                "mbps_rd_max": {
                  "description": "Maximum unthrottled read pool in megabytes per second.",
                  "format_description": "mbps",
                  "optional": 1,
                  "type": "number"
                },
                "mbps_wr": {
                  "description": "Maximum write speed in megabytes per second.",
                  "format_description": "mbps",
                  "optional": 1,
                  "type": "number"
                },
                "mbps_wr_max": {
                  "description": "Maximum unthrottled write pool in megabytes per second.",
                  "format_description": "mbps",
                  "optional": 1,
                  "type": "number"
                },
                "media": {
                  "default": "disk",
                  "description": "The drive's media type.",
                  "enum": [
                    "cdrom",
                    "disk"
                  ],
                  "optional": 1,
                  "type": "string"
                },
                "replicate": {
                  "default": 1,
                  "description": "Whether the drive should considered for replication jobs.",
                  "optional": 1,
                  "type": "boolean"
                },
                "rerror": {
                  "description": "Read error action.",
                  "enum": [
                    "ignore",
                    "report",
                    "stop"
                  ],
                  "optional": 1,
                  "type": "string"
                },
                "serial": {
                  "description": "The drive's reported serial number, url-encoded, up to 20 bytes long.",
                  "format": "urlencoded",
                  "format_description": "serial",
                  "maxLength": 60,
                  "optional": 1,
                  "type": "string"
                },
                "shared": {
                  "default": 0,
                  "description": "Mark this locally-managed volume as available on all nodes",
                  "optional": 1,
                  "type": "boolean",
                  "verbose_description": "Mark this locally-managed volume as available on all nodes.\n\nWARNING: This option does not share the volume automatically, it assumes it is shared already!"
                },
                "size": {
                  "description": "Disk size. This is purely informational and has no effect.",
                  "format": "disk-size",
                  "format_description": "DiskSize",
                  "optional": 1,
                  "type": "string"
                },
                "snapshot": {
                  "description": "Controls qemu's snapshot mode feature. If activated, changes made to the disk are temporary and will be discarded when the VM is shutdown.",
                  "optional": 1,
                  "type": "boolean"
                },
                "ssd": {
                  "description": "Whether to expose this drive as an SSD, rather than a rotational hard disk.",
                  "optional": 1,
                  "type": "boolean"
                },
                "volume": {
                  "alias": "file"
                },
                "werror": {
                  "description": "Write error action.",
                  "enum": [
                    "enospc",
                    "ignore",
                    "report",
                    "stop"
                  ],
                  "optional": 1,
                  "type": "string"
                },
                "wwn": {
                  "description": "The drive's worldwide name, encoded as 16 bytes hex string, prefixed by '0x'.",
                  "format_description": "wwn",
                  "optional": 1,
                  "pattern": "(?^:^(0x)[0-9a-fA-F]{16})",
                  "type": "string"
                }
              }
            }
          },
          {
            "name": "scsi[n]",
            "in": "query",
            "description": "Use volume as SCSI hard disk or CD-ROM (n is 0 to 30). Use the special syntax STORAGE_ID:SIZE_IN_GiB to allocate a new volume. Use STORAGE_ID:0 and the 'import-from' parameter to import from an existing volume.",
            "required": false,
            "schema": {
              "type": "string",
              "format": {
                "aio": {
                  "description": "AIO type to use.",
                  "enum": [
                    "native",
                    "threads",
                    "io_uring"
                  ],
                  "optional": 1,
                  "type": "string"
                },
                "backup": {
                  "description": "Whether the drive should be included when making backups.",
                  "optional": 1,
                  "type": "boolean"
                },
                "bps": {
                  "description": "Maximum r/w speed in bytes per second.",
                  "format_description": "bps",
                  "optional": 1,
                  "type": "integer"
                },
                "bps_max_length": {
                  "description": "Maximum length of I/O bursts in seconds.",
                  "format_description": "seconds",
                  "minimum": 1,
                  "optional": 1,
                  "type": "integer"
                },
                "bps_rd": {
                  "description": "Maximum read speed in bytes per second.",
                  "format_description": "bps",
                  "optional": 1,
                  "type": "integer"
                },
                "bps_rd_length": {
                  "alias": "bps_rd_max_length"
                },
                "bps_rd_max_length": {
                  "description": "Maximum length of read I/O bursts in seconds.",
                  "format_description": "seconds",
                  "minimum": 1,
                  "optional": 1,
                  "type": "integer"
                },
                "bps_wr": {
                  "description": "Maximum write speed in bytes per second.",
                  "format_description": "bps",
                  "optional": 1,
                  "type": "integer"
                },
                "bps_wr_length": {
                  "alias": "bps_wr_max_length"
                },
                "bps_wr_max_length": {
                  "description": "Maximum length of write I/O bursts in seconds.",
                  "format_description": "seconds",
                  "minimum": 1,
                  "optional": 1,
                  "type": "integer"
                },
                "cache": {
                  "description": "The drive's cache mode",
                  "enum": [
                    "none",
                    "writethrough",
                    "writeback",
                    "unsafe",
                    "directsync"
                  ],
                  "optional": 1,
                  "type": "string"
                },
                "detect_zeroes": {
                  "description": "Controls whether to detect and try to optimize writes of zeroes.",
                  "optional": 1,
                  "type": "boolean"
                },
                "discard": {
                  "description": "Controls whether to pass discard/trim requests to the underlying storage.",
                  "enum": [
                    "ignore",
                    "on"
                  ],
                  "optional": 1,
                  "type": "string"
                },
                "file": {
                  "default_key": 1,
                  "description": "The drive's backing volume.",
                  "format": "pve-volume-id-or-qm-path",
                  "format_description": "volume",
                  "type": "string"
                },
                "format": {
                  "description": "The drive's backing file's data format.",
                  "enum": [
                    "raw",
                    "qcow",
                    "qed",
                    "qcow2",
                    "vmdk",
                    "cloop"
                  ],
                  "optional": 1,
                  "type": "string"
                },
                "import-from": {
                  "description": "Create a new disk, importing from this source (volume ID or absolute path). When an absolute path is specified, it's up to you to ensure that the source is not actively used by another process during the import!",
                  "format": "pve-volume-id-or-absolute-path",
                  "format_description": "source volume",
                  "optional": 1,
                  "type": "string"
                },
                "iops": {
                  "description": "Maximum r/w I/O in operations per second.",
                  "format_description": "iops",
                  "optional": 1,
                  "type": "integer"
                },
                "iops_max": {
                  "description": "Maximum unthrottled r/w I/O pool in operations per second.",
                  "format_description": "iops",
                  "optional": 1,
                  "type": "integer"
                },
                "iops_max_length": {
                  "description": "Maximum length of I/O bursts in seconds.",
                  "format_description": "seconds",
                  "minimum": 1,
                  "optional": 1,
                  "type": "integer"
                },
                "iops_rd": {
                  "description": "Maximum read I/O in operations per second.",
                  "format_description": "iops",
                  "optional": 1,
                  "type": "integer"
                },
                "iops_rd_length": {
                  "alias": "iops_rd_max_length"
                },
                "iops_rd_max": {
                  "description": "Maximum unthrottled read I/O pool in operations per second.",
                  "format_description": "iops",
                  "optional": 1,
                  "type": "integer"
                },
                "iops_rd_max_length": {
                  "description": "Maximum length of read I/O bursts in seconds.",
                  "format_description": "seconds",
                  "minimum": 1,
                  "optional": 1,
                  "type": "integer"
                },
                "iops_wr": {
                  "description": "Maximum write I/O in operations per second.",
                  "format_description": "iops",
                  "optional": 1,
                  "type": "integer"
                },
                "iops_wr_length": {
                  "alias": "iops_wr_max_length"
                },
                "iops_wr_max": {
                  "description": "Maximum unthrottled write I/O pool in operations per second.",
                  "format_description": "iops",
                  "optional": 1,
                  "type": "integer"
                },
                "iops_wr_max_length": {
                  "description": "Maximum length of write I/O bursts in seconds.",
                  "format_description": "seconds",
                  "minimum": 1,
                  "optional": 1,
                  "type": "integer"
                },
                "iothread": {
                  "description": "Whether to use iothreads for this drive",
                  "optional": 1,
                  "type": "boolean"
                },
                "mbps": {
                  "description": "Maximum r/w speed in megabytes per second.",
                  "format_description": "mbps",
                  "optional": 1,
                  "type": "number"
                },
                "mbps_max": {
                  "description": "Maximum unthrottled r/w pool in megabytes per second.",
                  "format_description": "mbps",
                  "optional": 1,
                  "type": "number"
                },
                "mbps_rd": {
                  "description": "Maximum read speed in megabytes per second.",
                  "format_description": "mbps",
                  "optional": 1,
                  "type": "number"
                },
                "mbps_rd_max": {
                  "description": "Maximum unthrottled read pool in megabytes per second.",
                  "format_description": "mbps",
                  "optional": 1,
                  "type": "number"
                },
                "mbps_wr": {
                  "description": "Maximum write speed in megabytes per second.",
                  "format_description": "mbps",
                  "optional": 1,
                  "type": "number"
                },
                "mbps_wr_max": {
                  "description": "Maximum unthrottled write pool in megabytes per second.",
                  "format_description": "mbps",
                  "optional": 1,
                  "type": "number"
                },
                "media": {
                  "default": "disk",
                  "description": "The drive's media type.",
                  "enum": [
                    "cdrom",
                    "disk"
                  ],
                  "optional": 1,
                  "type": "string"
                },
                "product": {
                  "description": "The drive's product name, up to 16 bytes long.",
                  "format_description": "product",
                  "optional": 1,
                  "pattern": "[A-Za-z0-9\\-_\\s]{,16}",
                  "type": "string"
                },
                "queues": {
                  "description": "Number of queues.",
                  "minimum": 2,
                  "optional": 1,
                  "type": "integer"
                },
                "replicate": {
                  "default": 1,
                  "description": "Whether the drive should considered for replication jobs.",
                  "optional": 1,
                  "type": "boolean"
                },
                "rerror": {
                  "description": "Read error action.",
                  "enum": [
                    "ignore",
                    "report",
                    "stop"
                  ],
                  "optional": 1,
                  "type": "string"
                },
                "ro": {
                  "description": "Whether the drive is read-only.",
                  "optional": 1,
                  "type": "boolean"
                },
                "scsiblock": {
                  "default": 0,
                  "description": "whether to use scsi-block for full passthrough of host block device\n\nWARNING: can lead to I/O errors in combination with low memory or high memory fragmentation on host",
                  "optional": 1,
                  "type": "boolean"
                },
                "serial": {
                  "description": "The drive's reported serial number, url-encoded, up to 20 bytes long.",
                  "format": "urlencoded",
                  "format_description": "serial",
                  "maxLength": 60,
                  "optional": 1,
                  "type": "string"
                },
                "shared": {
                  "default": 0,
                  "description": "Mark this locally-managed volume as available on all nodes",
                  "optional": 1,
                  "type": "boolean",
                  "verbose_description": "Mark this locally-managed volume as available on all nodes.\n\nWARNING: This option does not share the volume automatically, it assumes it is shared already!"
                },
                "size": {
                  "description": "Disk size. This is purely informational and has no effect.",
                  "format": "disk-size",
                  "format_description": "DiskSize",
                  "optional": 1,
                  "type": "string"
                },
                "snapshot": {
                  "description": "Controls qemu's snapshot mode feature. If activated, changes made to the disk are temporary and will be discarded when the VM is shutdown.",
                  "optional": 1,
                  "type": "boolean"
                },
                "ssd": {
                  "description": "Whether to expose this drive as an SSD, rather than a rotational hard disk.",
                  "optional": 1,
                  "type": "boolean"
                },
                "vendor": {
                  "description": "The drive's vendor name, up to 8 bytes long.",
                  "format_description": "vendor",
                  "optional": 1,
                  "pattern": "[A-Za-z0-9\\-_\\s]{,8}",
                  "type": "string"
                },
                "volume": {
                  "alias": "file"
                },
                "werror": {
                  "description": "Write error action.",
                  "enum": [
                    "enospc",
                    "ignore",
                    "report",
                    "stop"
                  ],
                  "optional": 1,
                  "type": "string"
                },
                "wwn": {
                  "description": "The drive's worldwide name, encoded as 16 bytes hex string, prefixed by '0x'.",
                  "format_description": "wwn",
                  "optional": 1,
                  "pattern": "(?^:^(0x)[0-9a-fA-F]{16})",
                  "type": "string"
                }
              }
            }
          },
          {
            "name": "scsihw",
            "in": "query",
            "description": "SCSI controller model",
            "required": false,
            "schema": {
              "type": "string",
              "default": "lsi",
              "enum": [
                "lsi",
                "lsi53c810",
                "virtio-scsi-pci",
                "virtio-scsi-single",
                "megasas",
                "pvscsi"
              ]
            }
          },
          {
            "name": "searchdomain",
            "in": "query",
            "description": "cloud-init: Sets DNS search domains for a container. Create will automatically use the setting from the host if neither searchdomain nor nameserver are set.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "serial[n]",
            "in": "query",
            "description": "Create a serial device inside the VM (n is 0 to 3)",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "(/dev/.+|socket)"
            }
          },
          {
            "name": "shares",
            "in": "query",
            "description": "Amount of memory shares for auto-ballooning. The larger the number is, the more memory this VM gets. Number is relative to weights of all other running VMs. Using zero disables auto-ballooning. Auto-ballooning is done by pvestatd.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000,
              "minimum": 0,
              "maximum": 50000
            }
          },
          {
            "name": "skiplock",
            "in": "query",
            "description": "Ignore locks - only root is allowed to use this option.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "smbios1",
            "in": "query",
            "description": "Specify SMBIOS type 1 fields.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-qm-smbios1",
              "maxLength": 512
            }
          },
          {
            "name": "smp",
            "in": "query",
            "description": "The number of CPUs. Please use option -sockets instead.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            }
          },
          {
            "name": "sockets",
            "in": "query",
            "description": "The number of CPU sockets.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            }
          },
          {
            "name": "spice_enhancements",
            "in": "query",
            "description": "Configure additional enhancements for SPICE.",
            "required": false,
            "schema": {
              "type": "string",
              "format": {
                "foldersharing": {
                  "default": "0",
                  "description": "Enable folder sharing via SPICE. Needs Spice-WebDAV daemon installed in the VM.",
                  "optional": 1,
                  "type": "boolean"
                },
                "videostreaming": {
                  "default": "off",
                  "description": "Enable video streaming. Uses compression for detected video streams.",
                  "enum": [
                    "off",
                    "all",
                    "filter"
                  ],
                  "optional": 1,
                  "type": "string"
                }
              }
            }
          },
          {
            "name": "sshkeys",
            "in": "query",
            "description": "cloud-init: Setup public SSH keys (one key per line, OpenSSH format).",
            "required": false,
            "schema": {
              "type": "string",
              "format": "urlencoded"
            }
          },
          {
            "name": "startdate",
            "in": "query",
            "description": "Set the initial date of the real time clock. Valid format for date are:'now' or '2006-06-17T16:01:21' or '2006-06-17'.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "now",
              "pattern": "(now|\\d{4}-\\d{1,2}-\\d{1,2}(T\\d{1,2}:\\d{1,2}:\\d{1,2})?)"
            }
          },
          {
            "name": "startup",
            "in": "query",
            "description": "Startup and shutdown behavior. Order is a non-negative number defining the general startup order. Shutdown in done with reverse ordering. Additionally you can set the 'up' or 'down' delay in seconds, which specifies a delay to wait before the next VM is started or stopped.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-startup-order"
            }
          },
          {
            "name": "tablet",
            "in": "query",
            "description": "Enable/disable the USB tablet device.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 1
            }
          },
          {
            "name": "tags",
            "in": "query",
            "description": "Tags of the VM. This is only meta information.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-tag-list"
            }
          },
          {
            "name": "tdf",
            "in": "query",
            "description": "Enable/disable time drift fix.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "template",
            "in": "query",
            "description": "Enable/disable Template.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "tpmstate0",
            "in": "query",
            "description": "Configure a Disk for storing TPM state. The format is fixed to 'raw'. Use the special syntax STORAGE_ID:SIZE_IN_GiB to allocate a new volume. Note that SIZE_IN_GiB is ignored here and 4 MiB will be used instead. Use STORAGE_ID:0 and the 'import-from' parameter to import from an existing volume.",
            "required": false,
            "schema": {
              "type": "string",
              "format": {
                "file": {
                  "default_key": 1,
                  "description": "The drive's backing volume.",
                  "format": "pve-volume-id-or-qm-path",
                  "format_description": "volume",
                  "type": "string"
                },
                "import-from": {
                  "description": "Create a new disk, importing from this source (volume ID or absolute path). When an absolute path is specified, it's up to you to ensure that the source is not actively used by another process during the import!",
                  "format": "pve-volume-id-or-absolute-path",
                  "format_description": "source volume",
                  "optional": 1,
                  "type": "string"
                },
                "size": {
                  "description": "Disk size. This is purely informational and has no effect.",
                  "format": "disk-size",
                  "format_description": "DiskSize",
                  "optional": 1,
                  "type": "string"
                },
                "version": {
                  "default": "v1.2",
                  "description": "The TPM interface version. v2.0 is newer and should be preferred. Note that this cannot be changed later on.",
                  "enum": [
                    "v1.2",
                    "v2.0"
                  ],
                  "optional": 1,
                  "type": "string"
                },
                "volume": {
                  "alias": "file"
                }
              }
            }
          },
          {
            "name": "unused[n]",
            "in": "query",
            "description": "Reference to unused volumes. This is used internally, and should not be modified manually.",
            "required": false,
            "schema": {
              "type": "string",
              "format": {
                "file": {
                  "default_key": 1,
                  "description": "The drive's backing volume.",
                  "format": "pve-volume-id",
                  "format_description": "volume",
                  "type": "string"
                },
                "volume": {
                  "alias": "file"
                }
              }
            }
          },
          {
            "name": "usb[n]",
            "in": "query",
            "description": "Configure an USB device (n is 0 to 4, for machine version >= 7.1 and ostype l26 or windows > 7, n can be up to 14).",
            "required": false,
            "schema": {
              "type": "string",
              "format": {
                "host": {
                  "default_key": 1,
                  "description": "The Host USB device or port or the value 'spice'. HOSTUSBDEVICE syntax is:\n\n 'bus-port(.port)*' (decimal numbers) or\n 'vendor_id:product_id' (hexadecimal numbers) or\n 'spice'\n\nYou can use the 'lsusb -t' command to list existing usb devices.\n\nNOTE: This option allows direct access to host hardware. So it is no longer possible to migrate such\nmachines - use with special care.\n\nThe value 'spice' can be used to add a usb redirection devices for spice.\n\nEither this or the 'mapping' key must be set.\n",
                  "format_description": "HOSTUSBDEVICE|spice",
                  "optional": 1,
                  "pattern": "(?^:(?:(?:(?^:(0x)?([0-9A-Fa-f]{4}):(0x)?([0-9A-Fa-f]{4})))|(?:(?^:(\\d+)\\-(\\d+(\\.\\d+)*)))|[Ss][Pp][Ii][Cc][Ee]))",
                  "type": "string"
                },
                "mapping": {
                  "description": "The ID of a cluster wide mapping. Either this or the default-key 'host' must be set.",
                  "format": "pve-configid",
                  "format_description": "mapping-id",
                  "optional": 1,
                  "type": "string"
                },
                "usb3": {
                  "default": 0,
                  "description": "Specifies whether if given host option is a USB3 device or port. For modern guests (machine version >= 7.1 and ostype l26 and windows > 7), this flag is irrelevant (all devices are plugged into a xhci controller).",
                  "optional": 1,
                  "type": "boolean"
                }
              }
            }
          },
          {
            "name": "vcpus",
            "in": "query",
            "description": "Number of hotplugged vcpus.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0,
              "minimum": 1
            }
          },
          {
            "name": "vga",
            "in": "query",
            "description": "Configure the VGA hardware.",
            "required": false,
            "schema": {
              "type": "string",
              "format": {
                "clipboard": {
                  "description": "Enable a specific clipboard. If not set, depending on the display type the SPICE one will be added. Migration with VNC clipboard is not yet supported!",
                  "enum": [
                    "vnc"
                  ],
                  "optional": 1,
                  "type": "string"
                },
                "memory": {
                  "description": "Sets the VGA memory (in MiB). Has no effect with serial display.",
                  "maximum": 512,
                  "minimum": 4,
                  "optional": 1,
                  "type": "integer"
                },
                "type": {
                  "default": "std",
                  "default_key": 1,
                  "description": "Select the VGA type. Using type 'cirrus' is not recommended.",
                  "enum": [
                    "cirrus",
                    "qxl",
                    "qxl2",
                    "qxl3",
                    "qxl4",
                    "none",
                    "serial0",
                    "serial1",
                    "serial2",
                    "serial3",
                    "std",
                    "virtio",
                    "virtio-gl",
                    "vmware"
                  ],
                  "optional": 1,
                  "type": "string"
                }
              }
            }
          },
          {
            "name": "virtio[n]",
            "in": "query",
            "description": "Use volume as VIRTIO hard disk (n is 0 to 15). Use the special syntax STORAGE_ID:SIZE_IN_GiB to allocate a new volume. Use STORAGE_ID:0 and the 'import-from' parameter to import from an existing volume.",
            "required": false,
            "schema": {
              "type": "string",
              "format": {
                "aio": {
                  "description": "AIO type to use.",
                  "enum": [
                    "native",
                    "threads",
                    "io_uring"
                  ],
                  "optional": 1,
                  "type": "string"
                },
                "backup": {
                  "description": "Whether the drive should be included when making backups.",
                  "optional": 1,
                  "type": "boolean"
                },
                "bps": {
                  "description": "Maximum r/w speed in bytes per second.",
                  "format_description": "bps",
                  "optional": 1,
                  "type": "integer"
                },
                "bps_max_length": {
                  "description": "Maximum length of I/O bursts in seconds.",
                  "format_description": "seconds",
                  "minimum": 1,
                  "optional": 1,
                  "type": "integer"
                },
                "bps_rd": {
                  "description": "Maximum read speed in bytes per second.",
                  "format_description": "bps",
                  "optional": 1,
                  "type": "integer"
                },
                "bps_rd_length": {
                  "alias": "bps_rd_max_length"
                },
                "bps_rd_max_length": {
                  "description": "Maximum length of read I/O bursts in seconds.",
                  "format_description": "seconds",
                  "minimum": 1,
                  "optional": 1,
                  "type": "integer"
                },
                "bps_wr": {
                  "description": "Maximum write speed in bytes per second.",
                  "format_description": "bps",
                  "optional": 1,
                  "type": "integer"
                },
                "bps_wr_length": {
                  "alias": "bps_wr_max_length"
                },
                "bps_wr_max_length": {
                  "description": "Maximum length of write I/O bursts in seconds.",
                  "format_description": "seconds",
                  "minimum": 1,
                  "optional": 1,
                  "type": "integer"
                },
                "cache": {
                  "description": "The drive's cache mode",
                  "enum": [
                    "none",
                    "writethrough",
                    "writeback",
                    "unsafe",
                    "directsync"
                  ],
                  "optional": 1,
                  "type": "string"
                },
                "detect_zeroes": {
                  "description": "Controls whether to detect and try to optimize writes of zeroes.",
                  "optional": 1,
                  "type": "boolean"
                },
                "discard": {
                  "description": "Controls whether to pass discard/trim requests to the underlying storage.",
                  "enum": [
                    "ignore",
                    "on"
                  ],
                  "optional": 1,
                  "type": "string"
                },
                "file": {
                  "default_key": 1,
                  "description": "The drive's backing volume.",
                  "format": "pve-volume-id-or-qm-path",
                  "format_description": "volume",
                  "type": "string"
                },
                "format": {
                  "description": "The drive's backing file's data format.",
                  "enum": [
                    "raw",
                    "qcow",
                    "qed",
                    "qcow2",
                    "vmdk",
                    "cloop"
                  ],
                  "optional": 1,
                  "type": "string"
                },
                "import-from": {
                  "description": "Create a new disk, importing from this source (volume ID or absolute path). When an absolute path is specified, it's up to you to ensure that the source is not actively used by another process during the import!",
                  "format": "pve-volume-id-or-absolute-path",
                  "format_description": "source volume",
                  "optional": 1,
                  "type": "string"
                },
                "iops": {
                  "description": "Maximum r/w I/O in operations per second.",
                  "format_description": "iops",
                  "optional": 1,
                  "type": "integer"
                },
                "iops_max": {
                  "description": "Maximum unthrottled r/w I/O pool in operations per second.",
                  "format_description": "iops",
                  "optional": 1,
                  "type": "integer"
                },
                "iops_max_length": {
                  "description": "Maximum length of I/O bursts in seconds.",
                  "format_description": "seconds",
                  "minimum": 1,
                  "optional": 1,
                  "type": "integer"
                },
                "iops_rd": {
                  "description": "Maximum read I/O in operations per second.",
                  "format_description": "iops",
                  "optional": 1,
                  "type": "integer"
                },
                "iops_rd_length": {
                  "alias": "iops_rd_max_length"
                },
                "iops_rd_max": {
                  "description": "Maximum unthrottled read I/O pool in operations per second.",
                  "format_description": "iops",
                  "optional": 1,
                  "type": "integer"
                },
                "iops_rd_max_length": {
                  "description": "Maximum length of read I/O bursts in seconds.",
                  "format_description": "seconds",
                  "minimum": 1,
                  "optional": 1,
                  "type": "integer"
                },
                "iops_wr": {
                  "description": "Maximum write I/O in operations per second.",
                  "format_description": "iops",
                  "optional": 1,
                  "type": "integer"
                },
                "iops_wr_length": {
                  "alias": "iops_wr_max_length"
                },
                "iops_wr_max": {
                  "description": "Maximum unthrottled write I/O pool in operations per second.",
                  "format_description": "iops",
                  "optional": 1,
                  "type": "integer"
                },
                "iops_wr_max_length": {
                  "description": "Maximum length of write I/O bursts in seconds.",
                  "format_description": "seconds",
                  "minimum": 1,
                  "optional": 1,
                  "type": "integer"
                },
                "iothread": {
                  "description": "Whether to use iothreads for this drive",
                  "optional": 1,
                  "type": "boolean"
                },
                "mbps": {
                  "description": "Maximum r/w speed in megabytes per second.",
                  "format_description": "mbps",
                  "optional": 1,
                  "type": "number"
                },
                "mbps_max": {
                  "description": "Maximum unthrottled r/w pool in megabytes per second.",
                  "format_description": "mbps",
                  "optional": 1,
                  "type": "number"
                },
                "mbps_rd": {
                  "description": "Maximum read speed in megabytes per second.",
                  "format_description": "mbps",
                  "optional": 1,
                  "type": "number"
                },
                "mbps_rd_max": {
                  "description": "Maximum unthrottled read pool in megabytes per second.",
                  "format_description": "mbps",
                  "optional": 1,
                  "type": "number"
                },
                "mbps_wr": {
                  "description": "Maximum write speed in megabytes per second.",
                  "format_description": "mbps",
                  "optional": 1,
                  "type": "number"
                },
                "mbps_wr_max": {
                  "description": "Maximum unthrottled write pool in megabytes per second.",
                  "format_description": "mbps",
                  "optional": 1,
                  "type": "number"
                },
                "media": {
                  "default": "disk",
                  "description": "The drive's media type.",
                  "enum": [
                    "cdrom",
                    "disk"
                  ],
                  "optional": 1,
                  "type": "string"
                },
                "replicate": {
                  "default": 1,
                  "description": "Whether the drive should considered for replication jobs.",
                  "optional": 1,
                  "type": "boolean"
                },
                "rerror": {
                  "description": "Read error action.",
                  "enum": [
                    "ignore",
                    "report",
                    "stop"
                  ],
                  "optional": 1,
                  "type": "string"
                },
                "ro": {
                  "description": "Whether the drive is read-only.",
                  "optional": 1,
                  "type": "boolean"
                },
                "serial": {
                  "description": "The drive's reported serial number, url-encoded, up to 20 bytes long.",
                  "format": "urlencoded",
                  "format_description": "serial",
                  "maxLength": 60,
                  "optional": 1,
                  "type": "string"
                },
                "shared": {
                  "default": 0,
                  "description": "Mark this locally-managed volume as available on all nodes",
                  "optional": 1,
                  "type": "boolean",
                  "verbose_description": "Mark this locally-managed volume as available on all nodes.\n\nWARNING: This option does not share the volume automatically, it assumes it is shared already!"
                },
                "size": {
                  "description": "Disk size. This is purely informational and has no effect.",
                  "format": "disk-size",
                  "format_description": "DiskSize",
                  "optional": 1,
                  "type": "string"
                },
                "snapshot": {
                  "description": "Controls qemu's snapshot mode feature. If activated, changes made to the disk are temporary and will be discarded when the VM is shutdown.",
                  "optional": 1,
                  "type": "boolean"
                },
                "volume": {
                  "alias": "file"
                },
                "werror": {
                  "description": "Write error action.",
                  "enum": [
                    "enospc",
                    "ignore",
                    "report",
                    "stop"
                  ],
                  "optional": 1,
                  "type": "string"
                }
              }
            }
          },
          {
            "name": "virtiofs[n]",
            "in": "query",
            "description": "Configuration for sharing a directory between host and guest using Virtio-fs.",
            "required": false,
            "schema": {
              "type": "string",
              "format": {
                "cache": {
                  "default": "auto",
                  "description": "The caching policy the file system should use (auto, always, metadata, never).",
                  "enum": [
                    "auto",
                    "always",
                    "metadata",
                    "never"
                  ],
                  "optional": 1,
                  "type": "string"
                },
                "direct-io": {
                  "default": 0,
                  "description": "Honor the O_DIRECT flag passed down by guest applications.",
                  "optional": 1,
                  "type": "boolean"
                },
                "dirid": {
                  "default_key": 1,
                  "description": "Mapping identifier of the directory mapping to be shared with the guest. Also used as a mount tag inside the VM.",
                  "format": "pve-configid",
                  "format_description": "mapping-id",
                  "type": "string"
                },
                "expose-acl": {
                  "default": 0,
                  "description": "Enable support for POSIX ACLs (enabled ACL implies xattr) for this mount.",
                  "optional": 1,
                  "type": "boolean"
                },
                "expose-xattr": {
                  "default": 0,
                  "description": "Enable support for extended attributes for this mount.",
                  "optional": 1,
                  "type": "boolean"
                }
              }
            }
          },
          {
            "name": "vmgenid",
            "in": "query",
            "description": "Set VM Generation ID. Use '1' to autogenerate on create or update, pass '0' to disable explicitly.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "1 (autogenerated)",
              "pattern": "(?:[a-fA-F0-9]{8}(?:-[a-fA-F0-9]{4}){3}-[a-fA-F0-9]{12}|[01])"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          },
          {
            "name": "vmstatestorage",
            "in": "query",
            "description": "Default storage for VM state volumes/files.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-storage-id"
            }
          },
          {
            "name": "watchdog",
            "in": "query",
            "description": "Create a virtual hardware watchdog device.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-qm-watchdog"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/qemu/{vmid}/pending": {
      "get": {
        "summary": "Get the virtual machine configuration with both current and pending values.",
        "description": "Get the virtual machine configuration with both current and pending values.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "delete": {
                        "description": "Indicates a pending delete request if present and not 0. The value 2 indicates a force-delete request.",
                        "maximum": 2,
                        "minimum": 0,
                        "optional": 1,
                        "type": "integer"
                      },
                      "key": {
                        "description": "Configuration option name.",
                        "type": "string"
                      },
                      "pending": {
                        "description": "Pending value.",
                        "optional": 1,
                        "type": "string"
                      },
                      "value": {
                        "description": "Current value.",
                        "optional": 1,
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/qemu/{vmid}/cloudinit": {
      "get": {
        "summary": "Get the cloudinit configuration with both current and pending values.",
        "description": "Get the cloudinit configuration with both current and pending values.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "delete": {
                        "description": "Indicates a pending delete request if present and not 0. ",
                        "maximum": 1,
                        "minimum": 0,
                        "optional": 1,
                        "type": "integer"
                      },
                      "key": {
                        "description": "Configuration option name.",
                        "type": "string"
                      },
                      "pending": {
                        "description": "The new pending value.",
                        "optional": 1,
                        "type": "string"
                      },
                      "value": {
                        "description": "Value as it was used to generate the current cloudinit image.",
                        "optional": 1,
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Regenerate and change cloudinit config drive.",
        "description": "Regenerate and change cloudinit config drive.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/qemu/{vmid}/cloudinit/dump": {
      "get": {
        "summary": "Get automatically generated cloudinit config.",
        "description": "Get automatically generated cloudinit config.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Config type.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "user",
                "network",
                "meta"
              ]
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/qemu/{vmid}/unlink": {
      "put": {
        "summary": "Unlink/delete disk images.",
        "description": "Unlink/delete disk images.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "force",
            "in": "query",
            "description": "Force physical removal. Without this, we simple remove the disk from the config file and create an additional configuration entry called 'unused[n]', which contains the volume ID. Unlink of unused[n] always cause physical removal.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "idlist",
            "in": "query",
            "description": "A list of disk IDs you want to delete.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-configid-list"
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/qemu/{vmid}/vncproxy": {
      "post": {
        "summary": "Creates a TCP VNC proxy connections.",
        "description": "Creates a TCP VNC proxy connections.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "generate-password",
            "in": "query",
            "description": "Generates a random password to be used as ticket instead of the API ticket.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          },
          {
            "name": "websocket",
            "in": "query",
            "description": "Prepare for websocket upgrade (only required when using serial terminal, otherwise upgrade is always possible).",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": 0,
                  "properties": {
                    "cert": {
                      "type": "string"
                    },
                    "password": {
                      "description": "Returned if requested with 'generate-password' param. Consists of printable ASCII characters ('!' .. '~').",
                      "optional": 1,
                      "type": "string"
                    },
                    "port": {
                      "type": "integer"
                    },
                    "ticket": {
                      "type": "string"
                    },
                    "upid": {
                      "type": "string"
                    },
                    "user": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/qemu/{vmid}/termproxy": {
      "post": {
        "summary": "Creates a TCP proxy connections.",
        "description": "Creates a TCP proxy connections.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "serial",
            "in": "query",
            "description": "opens a serial terminal (defaults to display)",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "serial0",
                "serial1",
                "serial2",
                "serial3"
              ]
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": 0,
                  "properties": {
                    "port": {
                      "type": "integer"
                    },
                    "ticket": {
                      "type": "string"
                    },
                    "upid": {
                      "type": "string"
                    },
                    "user": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/qemu/{vmid}/vncwebsocket": {
      "get": {
        "summary": "Opens a weksocket for VNC traffic.",
        "description": "Opens a weksocket for VNC traffic.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "port",
            "in": "query",
            "description": "Port number returned by previous vncproxy call.",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 5900,
              "maximum": 5999
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          },
          {
            "name": "vncticket",
            "in": "query",
            "description": "Ticket from previous call to vncproxy.",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 512
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "port": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/qemu/{vmid}/spiceproxy": {
      "post": {
        "summary": "Returns a SPICE configuration to connect to the VM.",
        "description": "Returns a SPICE configuration to connect to the VM.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "proxy",
            "in": "query",
            "description": "SPICE proxy server. This can be used by the client to specify the proxy server. All nodes in a cluster runs 'spiceproxy', so it is up to the client to choose one. By default, we return the node where the VM is currently running. As reasonable setting is to use same node you use to connect to the API (This is window.location.hostname for the JS GUI).",
            "required": false,
            "schema": {
              "type": "string",
              "format": "address"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": 1,
                  "description": "Returned values can be directly passed to the 'remote-viewer' application.",
                  "properties": {
                    "host": {
                      "type": "string"
                    },
                    "password": {
                      "type": "string"
                    },
                    "proxy": {
                      "type": "string"
                    },
                    "tls-port": {
                      "type": "integer"
                    },
                    "type": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/qemu/{vmid}/status": {
      "get": {
        "summary": "Directory index",
        "description": "Directory index",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "subdir": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{subdir}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/qemu/{vmid}/status/current": {
      "get": {
        "summary": "Get virtual machine status.",
        "description": "Get virtual machine status.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "agent": {
                      "description": "QEMU Guest Agent is enabled in config.",
                      "optional": 1,
                      "type": "boolean"
                    },
                    "clipboard": {
                      "description": "Enable a specific clipboard. If not set, depending on the display type the SPICE one will be added.",
                      "enum": [
                        "vnc"
                      ],
                      "optional": 1,
                      "type": "string"
                    },
                    "cpu": {
                      "description": "Current CPU usage.",
                      "optional": 1,
                      "type": "number"
                    },
                    "cpus": {
                      "description": "Maximum usable CPUs.",
                      "optional": 1,
                      "type": "number"
                    },
                    "diskread": {
                      "description": "The amount of bytes the guest read from it's block devices since the guest was started. (Note: This info is not available for all storage types.)",
                      "optional": 1,
                      "renderer": "bytes",
                      "type": "integer"
                    },
                    "diskwrite": {
                      "description": "The amount of bytes the guest wrote from it's block devices since the guest was started. (Note: This info is not available for all storage types.)",
                      "optional": 1,
                      "renderer": "bytes",
                      "type": "integer"
                    },
                    "ha": {
                      "description": "HA manager service status.",
                      "type": "object"
                    },
                    "lock": {
                      "description": "The current config lock, if any.",
                      "optional": 1,
                      "type": "string"
                    },
                    "maxdisk": {
                      "description": "Root disk size in bytes.",
                      "optional": 1,
                      "renderer": "bytes",
                      "type": "integer"
                    },
                    "maxmem": {
                      "description": "Maximum memory in bytes.",
                      "optional": 1,
                      "renderer": "bytes",
                      "type": "integer"
                    },
                    "mem": {
                      "description": "Currently used memory in bytes.",
                      "optional": 1,
                      "renderer": "bytes",
                      "type": "integer"
                    },
                    "memhost": {
                      "description": "Current memory usage on the host.",
                      "optional": 1,
                      "renderer": "bytes",
                      "type": "integer"
                    },
                    "name": {
                      "description": "VM (host)name.",
                      "optional": 1,
                      "type": "string"
                    },
                    "netin": {
                      "description": "The amount of traffic in bytes that was sent to the guest over the network since it was started.",
                      "optional": 1,
                      "renderer": "bytes",
                      "type": "integer"
                    },
                    "netout": {
                      "description": "The amount of traffic in bytes that was sent from the guest over the network since it was started.",
                      "optional": 1,
                      "renderer": "bytes",
                      "type": "integer"
                    },
                    "pid": {
                      "description": "PID of the QEMU process, if the VM is running.",
                      "optional": 1,
                      "type": "integer"
                    },
                    "pressurecpufull": {
                      "description": "CPU Full pressure stall average over the last 10 seconds.",
                      "optional": 1,
                      "type": "number"
                    },
                    "pressurecpusome": {
                      "description": "CPU Some pressure stall average over the last 10 seconds.",
                      "optional": 1,
                      "type": "number"
                    },
                    "pressureiofull": {
                      "description": "IO Full pressure stall average over the last 10 seconds.",
                      "optional": 1,
                      "type": "number"
                    },
                    "pressureiosome": {
                      "description": "IO Some pressure stall average over the last 10 seconds.",
                      "optional": 1,
                      "type": "number"
                    },
                    "pressurememoryfull": {
                      "description": "Memory Full pressure stall average over the last 10 seconds.",
                      "optional": 1,
                      "type": "number"
                    },
                    "pressurememorysome": {
                      "description": "Memory Some pressure stall average over the last 10 seconds.",
                      "optional": 1,
                      "type": "number"
                    },
                    "qmpstatus": {
                      "description": "VM run state from the 'query-status' QMP monitor command.",
                      "optional": 1,
                      "type": "string"
                    },
                    "running-machine": {
                      "description": "The currently running machine type (if running).",
                      "optional": 1,
                      "type": "string"
                    },
                    "running-qemu": {
                      "description": "The QEMU version the VM is currently using (if running).",
                      "optional": 1,
                      "type": "string"
                    },
                    "serial": {
                      "description": "Guest has serial device configured.",
                      "optional": 1,
                      "type": "boolean"
                    },
                    "spice": {
                      "description": "QEMU VGA configuration supports spice.",
                      "optional": 1,
                      "type": "boolean"
                    },
                    "status": {
                      "description": "QEMU process status.",
                      "enum": [
                        "stopped",
                        "running"
                      ],
                      "type": "string"
                    },
                    "tags": {
                      "description": "The current configured tags, if any",
                      "optional": 1,
                      "type": "string"
                    },
                    "template": {
                      "default": 0,
                      "description": "Determines if the guest is a template.",
                      "optional": 1,
                      "type": "boolean"
                    },
                    "uptime": {
                      "description": "Uptime in seconds.",
                      "optional": 1,
                      "renderer": "duration",
                      "type": "integer"
                    },
                    "vmid": {
                      "description": "The (unique) ID of the VM.",
                      "format": "pve-vmid",
                      "maximum": 999999999,
                      "minimum": 100,
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/qemu/{vmid}/status/start": {
      "post": {
        "summary": "Start virtual machine.",
        "description": "Start virtual machine.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "force-cpu",
            "in": "query",
            "description": "Override QEMU's -cpu argument with the given string.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "machine",
            "in": "query",
            "description": "Specify the QEMU machine.",
            "required": false,
            "schema": {
              "type": "string",
              "format": {
                "enable-s3": {
                  "description": "Enables S3 power state. Defaults to false beginning with machine types 9.2+pve1, true before.",
                  "optional": 1,
                  "type": "boolean"
                },
                "enable-s4": {
                  "description": "Enables S4 power state. Defaults to false beginning with machine types 9.2+pve1, true before.",
                  "optional": 1,
                  "type": "boolean"
                },
                "type": {
                  "default_key": 1,
                  "description": "Specifies the QEMU machine type.",
                  "format_description": "machine type",
                  "maxLength": 40,
                  "optional": 1,
                  "pattern": "(pc|pc(-i440fx)?-\\d+(\\.\\d+)+(\\+pve\\d+)?(\\.pxe)?|q35|pc-q35-\\d+(\\.\\d+)+(\\+pve\\d+)?(\\.pxe)?|virt(?:-\\d+(\\.\\d+)+)?(\\+pve\\d+)?)",
                  "type": "string"
                },
                "viommu": {
                  "description": "Enable and set guest vIOMMU variant (Intel vIOMMU needs q35 to be set as machine type).",
                  "enum": [
                    "intel",
                    "virtio"
                  ],
                  "optional": 1,
                  "type": "string"
                }
              }
            }
          },
          {
            "name": "migratedfrom",
            "in": "query",
            "description": "The cluster node name.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "migration_network",
            "in": "query",
            "description": "CIDR of the (sub) network that is used for migration.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "CIDR"
            }
          },
          {
            "name": "migration_type",
            "in": "query",
            "description": "Migration traffic is encrypted using an SSH tunnel by default. On secure, completely private networks this can be disabled to increase performance.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "secure",
                "insecure"
              ]
            }
          },
          {
            "name": "nets-host-mtu",
            "in": "query",
            "description": "Used for migration compat. List of VirtIO network devices and their effective host_mtu setting according to the QEMU object model on the source side of the migration. A value of 0 means that the host_mtu parameter is to be avoided for the corresponding device.",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "net\\d+=\\d+(,net\\d+=\\d+)*"
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "skiplock",
            "in": "query",
            "description": "Ignore locks - only root is allowed to use this option.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "stateuri",
            "in": "query",
            "description": "Some command save/restore state from this location.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 128
            }
          },
          {
            "name": "targetstorage",
            "in": "query",
            "description": "Mapping from source to target storages. Providing only a single storage ID maps all source storages to that storage. Providing the special value '1' will map each source storage to itself.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "storage-pair-list"
            }
          },
          {
            "name": "timeout",
            "in": "query",
            "description": "Wait maximal timeout seconds.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": "max(30, vm memory in GiB)",
              "minimum": 0
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          },
          {
            "name": "with-conntrack-state",
            "in": "query",
            "description": "Whether to migrate conntrack entries for running VMs.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/qemu/{vmid}/status/stop": {
      "post": {
        "summary": "Stop virtual machine. The qemu process will exit immediately. This is akin to pulling the power plug of a running computer and may damage the VM data.",
        "description": "Stop virtual machine. The qemu process will exit immediately. This is akin to pulling the power plug of a running computer and may damage the VM data.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "keepActive",
            "in": "query",
            "description": "Do not deactivate storage volumes.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "migratedfrom",
            "in": "query",
            "description": "The cluster node name.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "overrule-shutdown",
            "in": "query",
            "description": "Try to abort active 'qmshutdown' tasks before stopping.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "skiplock",
            "in": "query",
            "description": "Ignore locks - only root is allowed to use this option.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "timeout",
            "in": "query",
            "description": "Wait maximal timeout seconds.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/qemu/{vmid}/status/reset": {
      "post": {
        "summary": "Reset virtual machine.",
        "description": "Reset virtual machine.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "skiplock",
            "in": "query",
            "description": "Ignore locks - only root is allowed to use this option.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/qemu/{vmid}/status/shutdown": {
      "post": {
        "summary": "Shutdown virtual machine. This is similar to pressing the power button on a physical machine. This will send an ACPI event for the guest OS, which should then proceed to a clean shutdown.",
        "description": "Shutdown virtual machine. This is similar to pressing the power button on a physical machine. This will send an ACPI event for the guest OS, which should then proceed to a clean shutdown.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "forceStop",
            "in": "query",
            "description": "Make sure the VM stops.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "keepActive",
            "in": "query",
            "description": "Do not deactivate storage volumes.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "skiplock",
            "in": "query",
            "description": "Ignore locks - only root is allowed to use this option.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "timeout",
            "in": "query",
            "description": "Wait maximal timeout seconds.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/qemu/{vmid}/status/reboot": {
      "post": {
        "summary": "Reboot the VM by shutting it down, and starting it again. Applies pending changes.",
        "description": "Reboot the VM by shutting it down, and starting it again. Applies pending changes.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "timeout",
            "in": "query",
            "description": "Wait maximal timeout seconds for the shutdown.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/qemu/{vmid}/status/suspend": {
      "post": {
        "summary": "Suspend virtual machine.",
        "description": "Suspend virtual machine.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "skiplock",
            "in": "query",
            "description": "Ignore locks - only root is allowed to use this option.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "statestorage",
            "in": "query",
            "description": "The storage for the VM state",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-storage-id"
            }
          },
          {
            "name": "todisk",
            "in": "query",
            "description": "If set, suspends the VM to disk. Will be resumed on next VM start.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/qemu/{vmid}/status/resume": {
      "post": {
        "summary": "Resume virtual machine.",
        "description": "Resume virtual machine.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "nocheck",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "skiplock",
            "in": "query",
            "description": "Ignore locks - only root is allowed to use this option.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/qemu/{vmid}/sendkey": {
      "put": {
        "summary": "Send key event to virtual machine.",
        "description": "Send key event to virtual machine.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "The key (qemu monitor encoding).",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "skiplock",
            "in": "query",
            "description": "Ignore locks - only root is allowed to use this option.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/qemu/{vmid}/feature": {
      "get": {
        "summary": "Check if feature for virtual machine is available.",
        "description": "Check if feature for virtual machine is available.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "feature",
            "in": "query",
            "description": "Feature to check.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "snapshot",
                "clone",
                "copy"
              ]
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "snapname",
            "in": "query",
            "description": "The name of the snapshot.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-configid",
              "maxLength": 40
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "hasFeature": {
                      "type": "boolean"
                    },
                    "nodes": {
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/qemu/{vmid}/clone": {
      "post": {
        "summary": "Create a copy of virtual machine/template.",
        "description": "Create a copy of virtual machine/template.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "bwlimit",
            "in": "query",
            "description": "Override I/O bandwidth limit (in KiB/s).",
            "required": false,
            "schema": {
              "type": "integer",
              "default": "clone limit from datacenter or storage config",
              "minimum": "0"
            }
          },
          {
            "name": "description",
            "in": "query",
            "description": "Description for the new VM.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "format",
            "in": "query",
            "description": "Target format for file storage. Only valid for full clone.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "raw",
                "qcow2",
                "vmdk"
              ]
            }
          },
          {
            "name": "full",
            "in": "query",
            "description": "Create a full copy of all disks. This is always done when you clone a normal VM. For VM templates, we try to create a linked clone by default.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Set a name for the new VM.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "dns-name"
            }
          },
          {
            "name": "newid",
            "in": "query",
            "description": "VMID for the clone.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "pool",
            "in": "query",
            "description": "Add the new VM to the specified pool.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-poolid"
            }
          },
          {
            "name": "snapname",
            "in": "query",
            "description": "The name of the snapshot.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-configid",
              "maxLength": 40
            }
          },
          {
            "name": "storage",
            "in": "query",
            "description": "Target storage for full clone.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-storage-id"
            }
          },
          {
            "name": "target",
            "in": "query",
            "description": "Target node. Only allowed if the original VM is on shared storage.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/qemu/{vmid}/move_disk": {
      "post": {
        "summary": "Move volume to different storage or to a different VM.",
        "description": "Move volume to different storage or to a different VM.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "bwlimit",
            "in": "query",
            "description": "Override I/O bandwidth limit (in KiB/s).",
            "required": false,
            "schema": {
              "type": "integer",
              "default": "move limit from datacenter or storage config",
              "minimum": "0"
            }
          },
          {
            "name": "delete",
            "in": "query",
            "description": "Delete the original disk after successful copy. By default the original disk is kept as unused disk.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "digest",
            "in": "query",
            "description": "Prevent changes if current configuration file has different SHA1\"\n\t\t    .\" digest. This can be used to prevent concurrent modifications.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 40
            }
          },
          {
            "name": "disk",
            "in": "query",
            "description": "The disk you want to move.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "ide0",
                "ide1",
                "ide2",
                "ide3",
                "scsi0",
                "scsi1",
                "scsi2",
                "scsi3",
                "scsi4",
                "scsi5",
                "scsi6",
                "scsi7",
                "scsi8",
                "scsi9",
                "scsi10",
                "scsi11",
                "scsi12",
                "scsi13",
                "scsi14",
                "scsi15",
                "scsi16",
                "scsi17",
                "scsi18",
                "scsi19",
                "scsi20",
                "scsi21",
                "scsi22",
                "scsi23",
                "scsi24",
                "scsi25",
                "scsi26",
                "scsi27",
                "scsi28",
                "scsi29",
                "scsi30",
                "virtio0",
                "virtio1",
                "virtio2",
                "virtio3",
                "virtio4",
                "virtio5",
                "virtio6",
                "virtio7",
                "virtio8",
                "virtio9",
                "virtio10",
                "virtio11",
                "virtio12",
                "virtio13",
                "virtio14",
                "virtio15",
                "sata0",
                "sata1",
                "sata2",
                "sata3",
                "sata4",
                "sata5",
                "efidisk0",
                "tpmstate0",
                "unused0",
                "unused1",
                "unused2",
                "unused3",
                "unused4",
                "unused5",
                "unused6",
                "unused7",
                "unused8",
                "unused9",
                "unused10",
                "unused11",
                "unused12",
                "unused13",
                "unused14",
                "unused15",
                "unused16",
                "unused17",
                "unused18",
                "unused19",
                "unused20",
                "unused21",
                "unused22",
                "unused23",
                "unused24",
                "unused25",
                "unused26",
                "unused27",
                "unused28",
                "unused29",
                "unused30",
                "unused31",
                "unused32",
                "unused33",
                "unused34",
                "unused35",
                "unused36",
                "unused37",
                "unused38",
                "unused39",
                "unused40",
                "unused41",
                "unused42",
                "unused43",
                "unused44",
                "unused45",
                "unused46",
                "unused47",
                "unused48",
                "unused49",
                "unused50",
                "unused51",
                "unused52",
                "unused53",
                "unused54",
                "unused55",
                "unused56",
                "unused57",
                "unused58",
                "unused59",
                "unused60",
                "unused61",
                "unused62",
                "unused63",
                "unused64",
                "unused65",
                "unused66",
                "unused67",
                "unused68",
                "unused69",
                "unused70",
                "unused71",
                "unused72",
                "unused73",
                "unused74",
                "unused75",
                "unused76",
                "unused77",
                "unused78",
                "unused79",
                "unused80",
                "unused81",
                "unused82",
                "unused83",
                "unused84",
                "unused85",
                "unused86",
                "unused87",
                "unused88",
                "unused89",
                "unused90",
                "unused91",
                "unused92",
                "unused93",
                "unused94",
                "unused95",
                "unused96",
                "unused97",
                "unused98",
                "unused99",
                "unused100",
                "unused101",
                "unused102",
                "unused103",
                "unused104",
                "unused105",
                "unused106",
                "unused107",
                "unused108",
                "unused109",
                "unused110",
                "unused111",
                "unused112",
                "unused113",
                "unused114",
                "unused115",
                "unused116",
                "unused117",
                "unused118",
                "unused119",
                "unused120",
                "unused121",
                "unused122",
                "unused123",
                "unused124",
                "unused125",
                "unused126",
                "unused127",
                "unused128",
                "unused129",
                "unused130",
                "unused131",
                "unused132",
                "unused133",
                "unused134",
                "unused135",
                "unused136",
                "unused137",
                "unused138",
                "unused139",
                "unused140",
                "unused141",
                "unused142",
                "unused143",
                "unused144",
                "unused145",
                "unused146",
                "unused147",
                "unused148",
                "unused149",
                "unused150",
                "unused151",
                "unused152",
                "unused153",
                "unused154",
                "unused155",
                "unused156",
                "unused157",
                "unused158",
                "unused159",
                "unused160",
                "unused161",
                "unused162",
                "unused163",
                "unused164",
                "unused165",
                "unused166",
                "unused167",
                "unused168",
                "unused169",
                "unused170",
                "unused171",
                "unused172",
                "unused173",
                "unused174",
                "unused175",
                "unused176",
                "unused177",
                "unused178",
                "unused179",
                "unused180",
                "unused181",
                "unused182",
                "unused183",
                "unused184",
                "unused185",
                "unused186",
                "unused187",
                "unused188",
                "unused189",
                "unused190",
                "unused191",
                "unused192",
                "unused193",
                "unused194",
                "unused195",
                "unused196",
                "unused197",
                "unused198",
                "unused199",
                "unused200",
                "unused201",
                "unused202",
                "unused203",
                "unused204",
                "unused205",
                "unused206",
                "unused207",
                "unused208",
                "unused209",
                "unused210",
                "unused211",
                "unused212",
                "unused213",
                "unused214",
                "unused215",
                "unused216",
                "unused217",
                "unused218",
                "unused219",
                "unused220",
                "unused221",
                "unused222",
                "unused223",
                "unused224",
                "unused225",
                "unused226",
                "unused227",
                "unused228",
                "unused229",
                "unused230",
                "unused231",
                "unused232",
                "unused233",
                "unused234",
                "unused235",
                "unused236",
                "unused237",
                "unused238",
                "unused239",
                "unused240",
                "unused241",
                "unused242",
                "unused243",
                "unused244",
                "unused245",
                "unused246",
                "unused247",
                "unused248",
                "unused249",
                "unused250",
                "unused251",
                "unused252",
                "unused253",
                "unused254",
                "unused255"
              ]
            }
          },
          {
            "name": "format",
            "in": "query",
            "description": "Target Format.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "raw",
                "qcow2",
                "vmdk"
              ]
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "storage",
            "in": "query",
            "description": "Target storage.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-storage-id"
            }
          },
          {
            "name": "target-digest",
            "in": "query",
            "description": "Prevent changes if the current config file of the target VM has a\"\n\t\t    .\" different SHA1 digest. This can be used to detect concurrent modifications.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 40
            }
          },
          {
            "name": "target-disk",
            "in": "query",
            "description": "The config key the disk will be moved to on the target VM (for example, ide0 or scsi1). Default is the source disk key.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "ide0",
                "ide1",
                "ide2",
                "ide3",
                "scsi0",
                "scsi1",
                "scsi2",
                "scsi3",
                "scsi4",
                "scsi5",
                "scsi6",
                "scsi7",
                "scsi8",
                "scsi9",
                "scsi10",
                "scsi11",
                "scsi12",
                "scsi13",
                "scsi14",
                "scsi15",
                "scsi16",
                "scsi17",
                "scsi18",
                "scsi19",
                "scsi20",
                "scsi21",
                "scsi22",
                "scsi23",
                "scsi24",
                "scsi25",
                "scsi26",
                "scsi27",
                "scsi28",
                "scsi29",
                "scsi30",
                "virtio0",
                "virtio1",
                "virtio2",
                "virtio3",
                "virtio4",
                "virtio5",
                "virtio6",
                "virtio7",
                "virtio8",
                "virtio9",
                "virtio10",
                "virtio11",
                "virtio12",
                "virtio13",
                "virtio14",
                "virtio15",
                "sata0",
                "sata1",
                "sata2",
                "sata3",
                "sata4",
                "sata5",
                "efidisk0",
                "tpmstate0",
                "unused0",
                "unused1",
                "unused2",
                "unused3",
                "unused4",
                "unused5",
                "unused6",
                "unused7",
                "unused8",
                "unused9",
                "unused10",
                "unused11",
                "unused12",
                "unused13",
                "unused14",
                "unused15",
                "unused16",
                "unused17",
                "unused18",
                "unused19",
                "unused20",
                "unused21",
                "unused22",
                "unused23",
                "unused24",
                "unused25",
                "unused26",
                "unused27",
                "unused28",
                "unused29",
                "unused30",
                "unused31",
                "unused32",
                "unused33",
                "unused34",
                "unused35",
                "unused36",
                "unused37",
                "unused38",
                "unused39",
                "unused40",
                "unused41",
                "unused42",
                "unused43",
                "unused44",
                "unused45",
                "unused46",
                "unused47",
                "unused48",
                "unused49",
                "unused50",
                "unused51",
                "unused52",
                "unused53",
                "unused54",
                "unused55",
                "unused56",
                "unused57",
                "unused58",
                "unused59",
                "unused60",
                "unused61",
                "unused62",
                "unused63",
                "unused64",
                "unused65",
                "unused66",
                "unused67",
                "unused68",
                "unused69",
                "unused70",
                "unused71",
                "unused72",
                "unused73",
                "unused74",
                "unused75",
                "unused76",
                "unused77",
                "unused78",
                "unused79",
                "unused80",
                "unused81",
                "unused82",
                "unused83",
                "unused84",
                "unused85",
                "unused86",
                "unused87",
                "unused88",
                "unused89",
                "unused90",
                "unused91",
                "unused92",
                "unused93",
                "unused94",
                "unused95",
                "unused96",
                "unused97",
                "unused98",
                "unused99",
                "unused100",
                "unused101",
                "unused102",
                "unused103",
                "unused104",
                "unused105",
                "unused106",
                "unused107",
                "unused108",
                "unused109",
                "unused110",
                "unused111",
                "unused112",
                "unused113",
                "unused114",
                "unused115",
                "unused116",
                "unused117",
                "unused118",
                "unused119",
                "unused120",
                "unused121",
                "unused122",
                "unused123",
                "unused124",
                "unused125",
                "unused126",
                "unused127",
                "unused128",
                "unused129",
                "unused130",
                "unused131",
                "unused132",
                "unused133",
                "unused134",
                "unused135",
                "unused136",
                "unused137",
                "unused138",
                "unused139",
                "unused140",
                "unused141",
                "unused142",
                "unused143",
                "unused144",
                "unused145",
                "unused146",
                "unused147",
                "unused148",
                "unused149",
                "unused150",
                "unused151",
                "unused152",
                "unused153",
                "unused154",
                "unused155",
                "unused156",
                "unused157",
                "unused158",
                "unused159",
                "unused160",
                "unused161",
                "unused162",
                "unused163",
                "unused164",
                "unused165",
                "unused166",
                "unused167",
                "unused168",
                "unused169",
                "unused170",
                "unused171",
                "unused172",
                "unused173",
                "unused174",
                "unused175",
                "unused176",
                "unused177",
                "unused178",
                "unused179",
                "unused180",
                "unused181",
                "unused182",
                "unused183",
                "unused184",
                "unused185",
                "unused186",
                "unused187",
                "unused188",
                "unused189",
                "unused190",
                "unused191",
                "unused192",
                "unused193",
                "unused194",
                "unused195",
                "unused196",
                "unused197",
                "unused198",
                "unused199",
                "unused200",
                "unused201",
                "unused202",
                "unused203",
                "unused204",
                "unused205",
                "unused206",
                "unused207",
                "unused208",
                "unused209",
                "unused210",
                "unused211",
                "unused212",
                "unused213",
                "unused214",
                "unused215",
                "unused216",
                "unused217",
                "unused218",
                "unused219",
                "unused220",
                "unused221",
                "unused222",
                "unused223",
                "unused224",
                "unused225",
                "unused226",
                "unused227",
                "unused228",
                "unused229",
                "unused230",
                "unused231",
                "unused232",
                "unused233",
                "unused234",
                "unused235",
                "unused236",
                "unused237",
                "unused238",
                "unused239",
                "unused240",
                "unused241",
                "unused242",
                "unused243",
                "unused244",
                "unused245",
                "unused246",
                "unused247",
                "unused248",
                "unused249",
                "unused250",
                "unused251",
                "unused252",
                "unused253",
                "unused254",
                "unused255"
              ]
            }
          },
          {
            "name": "target-vmid",
            "in": "query",
            "description": "The (unique) ID of the VM.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "description": "the task ID.",
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/qemu/{vmid}/migrate": {
      "get": {
        "summary": "Get preconditions for migration.",
        "description": "Get preconditions for migration.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "target",
            "in": "query",
            "description": "Target node.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "allowed_nodes": {
                      "description": "List of nodes allowed for migration.",
                      "items": {
                        "description": "An allowed node",
                        "type": "string"
                      },
                      "optional": 1,
                      "type": "array"
                    },
                    "dependent-ha-resources": {
                      "description": "HA resources, which will be migrated to the same target node as the VM, because these are in positive affinity with the VM.",
                      "items": {
                        "description": "The '<ty>:<id>' resource IDs of a HA resource with a positive affinity rule to this VM.",
                        "type": "string"
                      },
                      "optional": 1,
                      "type": "array"
                    },
                    "has-dbus-vmstate": {
                      "description": "Whether the VM host supports migrating additional VM state, such as conntrack entries.",
                      "type": "boolean"
                    },
                    "local_disks": {
                      "description": "List local disks including CD-Rom, unused and not referenced disks",
                      "items": {
                        "properties": {
                          "cdrom": {
                            "description": "True if the disk is a cdrom.",
                            "type": "boolean"
                          },
                          "is_unused": {
                            "description": "True if the disk is unused.",
                            "type": "boolean"
                          },
                          "size": {
                            "description": "The size of the disk in bytes.",
                            "type": "integer"
                          },
                          "volid": {
                            "description": "The volid of the disk.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "local_resources": {
                      "description": "List local resources (e.g. pci, usb) that block migration.",
                      "items": {
                        "description": "A local resource",
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "mapped-resource-info": {
                      "description": "Object of mapped resources with additional information such if they're live migratable.",
                      "type": "object"
                    },
                    "mapped-resources": {
                      "description": "List of mapped resources e.g. pci, usb. Deprecated, use 'mapped-resource-info' instead.",
                      "items": {
                        "description": "A mapped resource",
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "not_allowed_nodes": {
                      "description": "List of not allowed nodes with additional information.",
                      "optional": 1,
                      "properties": {
                        "blocking-ha-resources": {
                          "description": "HA resources, which are blocking the VM from being migrated to the node.",
                          "items": {
                            "description": "A blocking HA resource",
                            "properties": {
                              "cause": {
                                "description": "The reason why the HA resource is blocking the migration.",
                                "enum": [
                                  "resource-affinity"
                                ],
                                "type": "string"
                              },
                              "sid": {
                                "description": "The blocking HA resource id",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "optional": 1,
                          "type": "array"
                        },
                        "unavailable_storages": {
                          "description": "A list of not available storages.",
                          "items": {
                            "description": "A storage",
                            "type": "string"
                          },
                          "optional": 1,
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "running": {
                      "description": "Determines if the VM is running.",
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Migrate virtual machine. Creates a new migration task.",
        "description": "Migrate virtual machine. Creates a new migration task.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "bwlimit",
            "in": "query",
            "description": "Override I/O bandwidth limit (in KiB/s).",
            "required": false,
            "schema": {
              "type": "integer",
              "default": "migrate limit from datacenter or storage config",
              "minimum": "0"
            }
          },
          {
            "name": "force",
            "in": "query",
            "description": "Allow to migrate VMs which use local devices. Only root may use this option.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "migration_network",
            "in": "query",
            "description": "CIDR of the (sub) network that is used for migration.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "CIDR"
            }
          },
          {
            "name": "migration_type",
            "in": "query",
            "description": "Migration traffic is encrypted using an SSH tunnel by default. On secure, completely private networks this can be disabled to increase performance.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "secure",
                "insecure"
              ]
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "online",
            "in": "query",
            "description": "Use online/live migration if VM is running. Ignored if VM is stopped.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "target",
            "in": "query",
            "description": "Target node.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "targetstorage",
            "in": "query",
            "description": "Mapping from source to target storages. Providing only a single storage ID maps all source storages to that storage. Providing the special value '1' will map each source storage to itself.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "storage-pair-list"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          },
          {
            "name": "with-conntrack-state",
            "in": "query",
            "description": "Whether to migrate conntrack entries for running VMs.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "with-local-disks",
            "in": "query",
            "description": "Enable live storage migration for local disk",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "description": "the task ID.",
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/qemu/{vmid}/remote_migrate": {
      "post": {
        "summary": "Migrate virtual machine to a remote cluster. Creates a new migration task. EXPERIMENTAL feature!",
        "description": "Migrate virtual machine to a remote cluster. Creates a new migration task. EXPERIMENTAL feature!",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "bwlimit",
            "in": "query",
            "description": "Override I/O bandwidth limit (in KiB/s).",
            "required": false,
            "schema": {
              "type": "integer",
              "default": "migrate limit from datacenter or storage config",
              "minimum": "0"
            }
          },
          {
            "name": "delete",
            "in": "query",
            "description": "Delete the original VM and related data after successful migration. By default the original VM is kept on the source cluster in a stopped state.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "online",
            "in": "query",
            "description": "Use online/live migration if VM is running. Ignored if VM is stopped.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "target-bridge",
            "in": "query",
            "description": "Mapping from source to target bridges. Providing only a single bridge ID maps all source bridges to that bridge. Providing the special value '1' will map each source bridge to itself.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "bridge-pair-list"
            }
          },
          {
            "name": "target-endpoint",
            "in": "query",
            "description": "Remote target endpoint",
            "required": true,
            "schema": {
              "type": "string",
              "format": "proxmox-remote"
            }
          },
          {
            "name": "target-storage",
            "in": "query",
            "description": "Mapping from source to target storages. Providing only a single storage ID maps all source storages to that storage. Providing the special value '1' will map each source storage to itself.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "storage-pair-list"
            }
          },
          {
            "name": "target-vmid",
            "in": "query",
            "description": "The (unique) ID of the VM.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "description": "the task ID.",
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/qemu/{vmid}/monitor": {
      "post": {
        "summary": "Execute QEMU monitor commands.",
        "description": "Execute QEMU monitor commands.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "command",
            "in": "query",
            "description": "The monitor command.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/qemu/{vmid}/resize": {
      "put": {
        "summary": "Extend volume size.",
        "description": "Extend volume size.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "digest",
            "in": "query",
            "description": "Prevent changes if current configuration file has different SHA1 digest. This can be used to prevent concurrent modifications.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 40
            }
          },
          {
            "name": "disk",
            "in": "query",
            "description": "The disk you want to resize.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "ide0",
                "ide1",
                "ide2",
                "ide3",
                "scsi0",
                "scsi1",
                "scsi2",
                "scsi3",
                "scsi4",
                "scsi5",
                "scsi6",
                "scsi7",
                "scsi8",
                "scsi9",
                "scsi10",
                "scsi11",
                "scsi12",
                "scsi13",
                "scsi14",
                "scsi15",
                "scsi16",
                "scsi17",
                "scsi18",
                "scsi19",
                "scsi20",
                "scsi21",
                "scsi22",
                "scsi23",
                "scsi24",
                "scsi25",
                "scsi26",
                "scsi27",
                "scsi28",
                "scsi29",
                "scsi30",
                "virtio0",
                "virtio1",
                "virtio2",
                "virtio3",
                "virtio4",
                "virtio5",
                "virtio6",
                "virtio7",
                "virtio8",
                "virtio9",
                "virtio10",
                "virtio11",
                "virtio12",
                "virtio13",
                "virtio14",
                "virtio15",
                "sata0",
                "sata1",
                "sata2",
                "sata3",
                "sata4",
                "sata5",
                "efidisk0",
                "tpmstate0"
              ]
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "The new size. With the `+` sign the value is added to the actual size of the volume and without it, the value is taken as an absolute one. Shrinking disk size is not supported.",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "\\+?\\d+(\\.\\d+)?[KMGT]?"
            }
          },
          {
            "name": "skiplock",
            "in": "query",
            "description": "Ignore locks - only root is allowed to use this option.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "description": "the task ID.",
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/qemu/{vmid}/snapshot": {
      "get": {
        "summary": "List all snapshots.",
        "description": "List all snapshots.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "description": {
                        "description": "Snapshot description.",
                        "type": "string"
                      },
                      "name": {
                        "description": "Snapshot identifier. Value 'current' identifies the current VM.",
                        "type": "string"
                      },
                      "parent": {
                        "description": "Parent snapshot identifier.",
                        "optional": 1,
                        "type": "string"
                      },
                      "snaptime": {
                        "description": "Snapshot creation time",
                        "optional": 1,
                        "renderer": "timestamp",
                        "type": "integer"
                      },
                      "vmstate": {
                        "description": "Snapshot includes RAM.",
                        "optional": 1,
                        "type": "boolean"
                      }
                    },
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{name}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Snapshot a VM.",
        "description": "Snapshot a VM.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "description",
            "in": "query",
            "description": "A textual description or comment.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "snapname",
            "in": "query",
            "description": "The name of the snapshot.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-configid",
              "maxLength": 40
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          },
          {
            "name": "vmstate",
            "in": "query",
            "description": "Save the vmstate",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "description": "the task ID.",
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/qemu/{vmid}/snapshot/{snapname}": {
      "delete": {
        "summary": "Delete a VM snapshot.",
        "description": "Delete a VM snapshot.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "force",
            "in": "query",
            "description": "For removal from config file, even if removing disk snapshots fails.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "snapname",
            "in": "path",
            "description": "The name of the snapshot.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-configid",
              "maxLength": 40
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "description": "the task ID.",
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "",
        "description": "",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "snapname",
            "in": "path",
            "description": "The name of the snapshot.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-configid",
              "maxLength": 40
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {},
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{cmd}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/qemu/{vmid}/snapshot/{snapname}/config": {
      "get": {
        "summary": "Get snapshot configuration",
        "description": "Get snapshot configuration",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "snapname",
            "in": "path",
            "description": "The name of the snapshot.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-configid",
              "maxLength": 40
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update snapshot metadata.",
        "description": "Update snapshot metadata.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "description",
            "in": "query",
            "description": "A textual description or comment.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "snapname",
            "in": "path",
            "description": "The name of the snapshot.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-configid",
              "maxLength": 40
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/qemu/{vmid}/snapshot/{snapname}/rollback": {
      "post": {
        "summary": "Rollback VM state to specified snapshot.",
        "description": "Rollback VM state to specified snapshot.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "snapname",
            "in": "path",
            "description": "The name of the snapshot.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-configid",
              "maxLength": 40
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "Whether the VM should get started after rolling back successfully. (Note: VMs will be automatically started if the snapshot includes RAM.)",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "description": "the task ID.",
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/qemu/{vmid}/template": {
      "post": {
        "summary": "Create a Template.",
        "description": "Create a Template.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "disk",
            "in": "query",
            "description": "If you want to convert only 1 disk to base image.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "ide0",
                "ide1",
                "ide2",
                "ide3",
                "scsi0",
                "scsi1",
                "scsi2",
                "scsi3",
                "scsi4",
                "scsi5",
                "scsi6",
                "scsi7",
                "scsi8",
                "scsi9",
                "scsi10",
                "scsi11",
                "scsi12",
                "scsi13",
                "scsi14",
                "scsi15",
                "scsi16",
                "scsi17",
                "scsi18",
                "scsi19",
                "scsi20",
                "scsi21",
                "scsi22",
                "scsi23",
                "scsi24",
                "scsi25",
                "scsi26",
                "scsi27",
                "scsi28",
                "scsi29",
                "scsi30",
                "virtio0",
                "virtio1",
                "virtio2",
                "virtio3",
                "virtio4",
                "virtio5",
                "virtio6",
                "virtio7",
                "virtio8",
                "virtio9",
                "virtio10",
                "virtio11",
                "virtio12",
                "virtio13",
                "virtio14",
                "virtio15",
                "sata0",
                "sata1",
                "sata2",
                "sata3",
                "sata4",
                "sata5",
                "efidisk0",
                "tpmstate0"
              ]
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "description": "the task ID.",
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/qemu/{vmid}/mtunnel": {
      "post": {
        "summary": "Migration tunnel endpoint - only for internal use by VM migration.",
        "description": "Migration tunnel endpoint - only for internal use by VM migration.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "bridges",
            "in": "query",
            "description": "List of network bridges to check availability. Will be checked again for actually used bridges during migration.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-bridge-id-list"
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "storages",
            "in": "query",
            "description": "List of storages to check permission and availability. Will be checked again for all actually used storages during migration.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-storage-id-list"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": 0,
                  "properties": {
                    "socket": {
                      "type": "string"
                    },
                    "ticket": {
                      "type": "string"
                    },
                    "upid": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/qemu/{vmid}/mtunnelwebsocket": {
      "get": {
        "summary": "Migration tunnel endpoint for websocket upgrade - only for internal use by VM migration.",
        "description": "Migration tunnel endpoint for websocket upgrade - only for internal use by VM migration.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "socket",
            "in": "query",
            "description": "unix socket to forward to",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ticket",
            "in": "query",
            "description": "ticket return by initial 'mtunnel' API call, or retrieved via 'ticket' tunnel command",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "port": {
                      "optional": 1,
                      "type": "string"
                    },
                    "socket": {
                      "optional": 1,
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/qemu/{vmid}/dbus-vmstate": {
      "post": {
        "summary": "Control the dbus-vmstate helper for a given running VM.",
        "description": "Control the dbus-vmstate helper for a given running VM.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "action",
            "in": "query",
            "description": "Action to perform on the DBus VMState helper.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "start",
                "stop"
              ]
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/lxc": {
      "get": {
        "summary": "LXC container index (per node).",
        "description": "LXC container index (per node).",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "cpu": {
                        "description": "Current CPU usage.",
                        "optional": 1,
                        "type": "number"
                      },
                      "cpus": {
                        "description": "Maximum usable CPUs.",
                        "optional": 1,
                        "type": "number"
                      },
                      "disk": {
                        "description": "Root disk image space-usage in bytes.",
                        "minimum": 0,
                        "optional": 1,
                        "renderer": "bytes",
                        "type": "integer"
                      },
                      "diskread": {
                        "description": "The amount of bytes the guest read from it's block devices since the guest was started. (Note: This info is not available for all storage types.)",
                        "optional": 1,
                        "renderer": "bytes",
                        "type": "integer"
                      },
                      "diskwrite": {
                        "description": "The amount of bytes the guest wrote from it's block devices since the guest was started. (Note: This info is not available for all storage types.)",
                        "optional": 1,
                        "renderer": "bytes",
                        "type": "integer"
                      },
                      "lock": {
                        "description": "The current config lock, if any.",
                        "optional": 1,
                        "type": "string"
                      },
                      "maxdisk": {
                        "description": "Root disk image size in bytes.",
                        "optional": 1,
                        "renderer": "bytes",
                        "type": "integer"
                      },
                      "maxmem": {
                        "description": "Maximum memory in bytes.",
                        "optional": 1,
                        "renderer": "bytes",
                        "type": "integer"
                      },
                      "maxswap": {
                        "description": "Maximum SWAP memory in bytes.",
                        "optional": 1,
                        "renderer": "bytes",
                        "type": "integer"
                      },
                      "mem": {
                        "description": "Currently used memory in bytes.",
                        "optional": 1,
                        "renderer": "bytes",
                        "type": "integer"
                      },
                      "name": {
                        "description": "Container name.",
                        "optional": 1,
                        "type": "string"
                      },
                      "netin": {
                        "description": "The amount of traffic in bytes that was sent to the guest over the network since it was started.",
                        "optional": 1,
                        "renderer": "bytes",
                        "type": "integer"
                      },
                      "netout": {
                        "description": "The amount of traffic in bytes that was sent from the guest over the network since it was started.",
                        "optional": 1,
                        "renderer": "bytes",
                        "type": "integer"
                      },
                      "pressurecpusome": {
                        "description": "CPU Some pressure stall average over the last 10 seconds.",
                        "optional": 1,
                        "type": "number"
                      },
                      "pressureiofull": {
                        "description": "IO Full pressure stall average over the last 10 seconds.",
                        "optional": 1,
                        "type": "number"
                      },
                      "pressureiosome": {
                        "description": "IO Some pressure stall average over the last 10 seconds.",
                        "optional": 1,
                        "type": "number"
                      },
                      "pressurememoryfull": {
                        "description": "Memory Full pressure stall average over the last 10 seconds.",
                        "optional": 1,
                        "type": "number"
                      },
                      "pressurememorysome": {
                        "description": "Memory Some pressure stall average over the last 10 seconds.",
                        "optional": 1,
                        "type": "number"
                      },
                      "status": {
                        "description": "LXC Container status.",
                        "enum": [
                          "stopped",
                          "running"
                        ],
                        "type": "string"
                      },
                      "tags": {
                        "description": "The current configured tags, if any.",
                        "optional": 1,
                        "type": "string"
                      },
                      "template": {
                        "default": 0,
                        "description": "Determines if the guest is a template.",
                        "optional": 1,
                        "type": "boolean"
                      },
                      "uptime": {
                        "description": "Uptime in seconds.",
                        "optional": 1,
                        "renderer": "duration",
                        "type": "integer"
                      },
                      "vmid": {
                        "description": "The (unique) ID of the VM.",
                        "format": "pve-vmid",
                        "maximum": 999999999,
                        "minimum": 100,
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{vmid}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create or restore a container.",
        "description": "Create or restore a container.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "arch",
            "in": "query",
            "description": "OS architecture type.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "amd64",
              "enum": [
                "amd64",
                "i386",
                "arm64",
                "armhf",
                "riscv32",
                "riscv64"
              ]
            }
          },
          {
            "name": "bwlimit",
            "in": "query",
            "description": "Override I/O bandwidth limit (in KiB/s).",
            "required": false,
            "schema": {
              "type": "number",
              "default": "restore limit from datacenter or storage config",
              "minimum": "0"
            }
          },
          {
            "name": "cmode",
            "in": "query",
            "description": "Console mode. By default, the console command tries to open a connection to one of the available tty devices. By setting cmode to 'console' it tries to attach to /dev/console instead. If you set cmode to 'shell', it simply invokes a shell inside the container (no login).",
            "required": false,
            "schema": {
              "type": "string",
              "default": "tty",
              "enum": [
                "shell",
                "console",
                "tty"
              ]
            }
          },
          {
            "name": "console",
            "in": "query",
            "description": "Attach a console device (/dev/console) to the container.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 1
            }
          },
          {
            "name": "cores",
            "in": "query",
            "description": "The number of cores assigned to the container. A container can use all available cores by default.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 8192
            }
          },
          {
            "name": "cpulimit",
            "in": "query",
            "description": "Limit of CPU usage.\n\nNOTE: If the computer has 2 CPUs, it has a total of '2' CPU time. Value '0' indicates no CPU limit.",
            "required": false,
            "schema": {
              "type": "number",
              "default": 0,
              "minimum": 0,
              "maximum": 8192
            }
          },
          {
            "name": "cpuunits",
            "in": "query",
            "description": "CPU weight for a container, will be clamped to [1, 10000] in cgroup v2.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": "cgroup v1: 1024, cgroup v2: 100",
              "minimum": 0,
              "maximum": 500000
            }
          },
          {
            "name": "debug",
            "in": "query",
            "description": "Try to be more verbose. For now this only enables debug log-level on start.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "description",
            "in": "query",
            "description": "Description for the Container. Shown in the web-interface CT's summary. This is saved as comment inside the configuration file.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 8192
            }
          },
          {
            "name": "dev[n]",
            "in": "query",
            "description": "Device to pass through to the container",
            "required": false,
            "schema": {
              "type": "string",
              "format": {
                "deny-write": {
                  "default": 0,
                  "description": "Deny the container to write to the device",
                  "optional": 1,
                  "type": "boolean"
                },
                "gid": {
                  "description": "Group ID to be assigned to the device node",
                  "minimum": 0,
                  "optional": 1,
                  "type": "integer"
                },
                "mode": {
                  "description": "Access mode to be set on the device node",
                  "format_description": "Octal access mode",
                  "optional": 1,
                  "pattern": "0[0-7]{3}",
                  "type": "string"
                },
                "path": {
                  "default_key": 1,
                  "description": "Device to pass through to the container",
                  "format": "pve-lxc-dev-string",
                  "format_description": "Path",
                  "optional": 1,
                  "type": "string",
                  "verbose_description": "Path to the device to pass through to the container"
                },
                "uid": {
                  "description": "User ID to be assigned to the device node",
                  "minimum": 0,
                  "optional": 1,
                  "type": "integer"
                }
              }
            }
          },
          {
            "name": "features",
            "in": "query",
            "description": "Allow containers access to advanced features.",
            "required": false,
            "schema": {
              "type": "string",
              "format": {
                "force_rw_sys": {
                  "default": 0,
                  "description": "Mount /sys in unprivileged containers as `rw` instead of `mixed`. This can break networking under newer (>= v245) systemd-network use.",
                  "optional": 1,
                  "type": "boolean"
                },
                "fuse": {
                  "default": 0,
                  "description": "Allow using 'fuse' file systems in a container. Note that interactions between fuse and the freezer cgroup can potentially cause I/O deadlocks.",
                  "optional": 1,
                  "type": "boolean"
                },
                "keyctl": {
                  "default": 0,
                  "description": "For unprivileged containers only: Allow the use of the keyctl() system call. This is required to use docker inside a container. By default unprivileged containers will see this system call as non-existent. This is mostly a workaround for systemd-networkd, as it will treat it as a fatal error when some keyctl() operations are denied by the kernel due to lacking permissions. Essentially, you can choose between running systemd-networkd or docker.",
                  "optional": 1,
                  "type": "boolean"
                },
                "mknod": {
                  "default": 0,
                  "description": "Allow unprivileged containers to use mknod() to add certain device nodes. This requires a kernel with seccomp trap to user space support (5.3 or newer). This is experimental.",
                  "optional": 1,
                  "type": "boolean"
                },
                "mount": {
                  "description": "Allow mounting file systems of specific types. This should be a list of file system types as used with the mount command. Note that this can have negative effects on the container's security. With access to a loop device, mounting a file can circumvent the mknod permission of the devices cgroup, mounting an NFS file system can block the host's I/O completely and prevent it from rebooting, etc.",
                  "format_description": "fstype;fstype;...",
                  "optional": 1,
                  "pattern": "(?^:[a-zA-Z0-9_; ]+)",
                  "type": "string"
                },
                "nesting": {
                  "default": 0,
                  "description": "Allow nesting. Best used with unprivileged containers with additional id mapping. Note that this will expose procfs and sysfs contents of the host to the guest.",
                  "optional": 1,
                  "type": "boolean"
                }
              }
            }
          },
          {
            "name": "force",
            "in": "query",
            "description": "Allow to overwrite existing container.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "hookscript",
            "in": "query",
            "description": "Script that will be executed during various steps in the containers lifetime.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-volume-id"
            }
          },
          {
            "name": "hostname",
            "in": "query",
            "description": "Set a host name for the container.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "dns-name",
              "maxLength": 255
            }
          },
          {
            "name": "ignore-unpack-errors",
            "in": "query",
            "description": "Ignore errors when extracting the template.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "lock",
            "in": "query",
            "description": "Lock/unlock the container.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "backup",
                "create",
                "destroyed",
                "disk",
                "fstrim",
                "migrate",
                "mounted",
                "rollback",
                "snapshot",
                "snapshot-delete"
              ]
            }
          },
          {
            "name": "memory",
            "in": "query",
            "description": "Amount of RAM for the container in MB.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 512,
              "minimum": 16
            }
          },
          {
            "name": "mp[n]",
            "in": "query",
            "description": "Use volume as container mount point. Use the special syntax STORAGE_ID:SIZE_IN_GiB to allocate a new volume.",
            "required": false,
            "schema": {
              "type": "string",
              "format": {
                "acl": {
                  "description": "Explicitly enable or disable ACL support.",
                  "optional": 1,
                  "type": "boolean"
                },
                "backup": {
                  "description": "Whether to include the mount point in backups.",
                  "optional": 1,
                  "type": "boolean",
                  "verbose_description": "Whether to include the mount point in backups (only used for volume mount points)."
                },
                "mountoptions": {
                  "description": "Extra mount options for rootfs/mps.",
                  "format_description": "opt[;opt...]",
                  "optional": 1,
                  "pattern": "(?^:(?^:(discard|lazytime|noatime|nodev|noexec|nosuid))(;(?^:(discard|lazytime|noatime|nodev|noexec|nosuid)))*)",
                  "type": "string"
                },
                "mp": {
                  "description": "Path to the mount point as seen from inside the container (must not contain symlinks).",
                  "format": "pve-lxc-mp-string",
                  "format_description": "Path",
                  "type": "string",
                  "verbose_description": "Path to the mount point as seen from inside the container.\n\nNOTE: Must not contain any symlinks for security reasons."
                },
                "quota": {
                  "description": "Enable user quotas inside the container (not supported with zfs subvolumes)",
                  "optional": 1,
                  "type": "boolean"
                },
                "replicate": {
                  "default": 1,
                  "description": "Will include this volume to a storage replica job.",
                  "optional": 1,
                  "type": "boolean"
                },
                "ro": {
                  "description": "Read-only mount point",
                  "optional": 1,
                  "type": "boolean"
                },
                "shared": {
                  "default": 0,
                  "description": "Mark this non-volume mount point as available on multiple nodes (see 'nodes')",
                  "optional": 1,
                  "type": "boolean",
                  "verbose_description": "Mark this non-volume mount point as available on all nodes.\n\nWARNING: This option does not share the mount point automatically, it assumes it is shared already!"
                },
                "size": {
                  "description": "Volume size (read only value).",
                  "format": "disk-size",
                  "format_description": "DiskSize",
                  "optional": 1,
                  "type": "string"
                },
                "volume": {
                  "default_key": 1,
                  "description": "Volume, device or directory to mount into the container.",
                  "format": "pve-lxc-mp-string",
                  "format_description": "volume",
                  "type": "string"
                }
              }
            }
          },
          {
            "name": "nameserver",
            "in": "query",
            "description": "Sets DNS server IP address for a container. Create will automatically use the setting from the host if you neither set searchdomain nor nameserver.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "lxc-ip-with-ll-iface-list"
            }
          },
          {
            "name": "net[n]",
            "in": "query",
            "description": "Specifies network interfaces for the container.",
            "required": false,
            "schema": {
              "type": "string",
              "format": {
                "bridge": {
                  "description": "Bridge to attach the network device to.",
                  "format_description": "bridge",
                  "optional": 1,
                  "pattern": "[-_.\\w\\d]+",
                  "type": "string"
                },
                "firewall": {
                  "description": "Controls whether this interface's firewall rules should be used.",
                  "optional": 1,
                  "type": "boolean"
                },
                "gw": {
                  "description": "Default gateway for IPv4 traffic.",
                  "format": "ipv4",
                  "format_description": "GatewayIPv4",
                  "optional": 1,
                  "type": "string"
                },
                "gw6": {
                  "description": "Default gateway for IPv6 traffic.",
                  "format": "ipv6",
                  "format_description": "GatewayIPv6",
                  "optional": 1,
                  "type": "string"
                },
                "hwaddr": {
                  "description": "The interface MAC address. This is dynamically allocated by default, but you can set that statically if needed, for example to always have the same link-local IPv6 address. (lxc.network.hwaddr)",
                  "format": "mac-addr",
                  "format_description": "XX:XX:XX:XX:XX:XX",
                  "optional": 1,
                  "type": "string",
                  "verbose_description": "A common MAC address with the I/G (Individual/Group) bit not set."
                },
                "ip": {
                  "description": "IPv4 address in CIDR format.",
                  "format": "pve-ipv4-config",
                  "format_description": "(IPv4/CIDR|dhcp|manual)",
                  "optional": 1,
                  "type": "string"
                },
                "ip6": {
                  "description": "IPv6 address in CIDR format.",
                  "format": "pve-ipv6-config",
                  "format_description": "(IPv6/CIDR|auto|dhcp|manual)",
                  "optional": 1,
                  "type": "string"
                },
                "link_down": {
                  "description": "Whether this interface should be disconnected (like pulling the plug).",
                  "optional": 1,
                  "type": "boolean"
                },
                "mtu": {
                  "description": "Maximum transfer unit of the interface. (lxc.network.mtu)",
                  "maximum": 65535,
                  "minimum": 64,
                  "optional": 1,
                  "type": "integer"
                },
                "name": {
                  "description": "Name of the network device as seen from inside the container. (lxc.network.name)",
                  "format_description": "string",
                  "pattern": "[-_.\\w\\d]+",
                  "type": "string"
                },
                "rate": {
                  "description": "Apply rate limiting to the interface",
                  "format_description": "mbps",
                  "optional": 1,
                  "type": "number"
                },
                "tag": {
                  "description": "VLAN tag for this interface.",
                  "maximum": 4094,
                  "minimum": 1,
                  "optional": 1,
                  "type": "integer"
                },
                "trunks": {
                  "description": "VLAN ids to pass through the interface",
                  "format_description": "vlanid[;vlanid...]",
                  "optional": 1,
                  "pattern": "(?^:\\d+(?:;\\d+)*)",
                  "type": "string"
                },
                "type": {
                  "description": "Network interface type.",
                  "enum": [
                    "veth"
                  ],
                  "optional": 1,
                  "type": "string"
                }
              }
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "onboot",
            "in": "query",
            "description": "Specifies whether a container will be started during system bootup.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "ostemplate",
            "in": "query",
            "description": "The OS template or backup file.",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 255
            }
          },
          {
            "name": "ostype",
            "in": "query",
            "description": "OS type. This is used to setup configuration inside the container, and corresponds to lxc setup scripts in /usr/share/lxc/config/<ostype>.common.conf. Value 'unmanaged' can be used to skip and OS specific setup.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "debian",
                "devuan",
                "ubuntu",
                "centos",
                "fedora",
                "opensuse",
                "archlinux",
                "alpine",
                "gentoo",
                "nixos",
                "unmanaged"
              ]
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "Sets root password inside container.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pool",
            "in": "query",
            "description": "Add the VM to the specified pool.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-poolid"
            }
          },
          {
            "name": "protection",
            "in": "query",
            "description": "Sets the protection flag of the container. This will prevent the CT or CT's disk remove/update operation.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "restore",
            "in": "query",
            "description": "Mark this as restore task.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "rootfs",
            "in": "query",
            "description": "Use volume as container root.",
            "required": false,
            "schema": {
              "type": "string",
              "format": {
                "acl": {
                  "description": "Explicitly enable or disable ACL support.",
                  "optional": 1,
                  "type": "boolean"
                },
                "mountoptions": {
                  "description": "Extra mount options for rootfs/mps.",
                  "format_description": "opt[;opt...]",
                  "optional": 1,
                  "pattern": "(?^:(?^:(discard|lazytime|noatime|nodev|noexec|nosuid))(;(?^:(discard|lazytime|noatime|nodev|noexec|nosuid)))*)",
                  "type": "string"
                },
                "quota": {
                  "description": "Enable user quotas inside the container (not supported with zfs subvolumes)",
                  "optional": 1,
                  "type": "boolean"
                },
                "replicate": {
                  "default": 1,
                  "description": "Will include this volume to a storage replica job.",
                  "optional": 1,
                  "type": "boolean"
                },
                "ro": {
                  "description": "Read-only mount point",
                  "optional": 1,
                  "type": "boolean"
                },
                "shared": {
                  "default": 0,
                  "description": "Mark this non-volume mount point as available on multiple nodes (see 'nodes')",
                  "optional": 1,
                  "type": "boolean",
                  "verbose_description": "Mark this non-volume mount point as available on all nodes.\n\nWARNING: This option does not share the mount point automatically, it assumes it is shared already!"
                },
                "size": {
                  "description": "Volume size (read only value).",
                  "format": "disk-size",
                  "format_description": "DiskSize",
                  "optional": 1,
                  "type": "string"
                },
                "volume": {
                  "default_key": 1,
                  "description": "Volume, device or directory to mount into the container.",
                  "format": "pve-lxc-mp-string",
                  "format_description": "volume",
                  "type": "string"
                }
              }
            }
          },
          {
            "name": "searchdomain",
            "in": "query",
            "description": "Sets DNS search domains for a container. Create will automatically use the setting from the host if you neither set searchdomain nor nameserver.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "dns-name-list"
            }
          },
          {
            "name": "ssh-public-keys",
            "in": "query",
            "description": "Setup public SSH keys (one key per line, OpenSSH format).",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "Start the CT after its creation finished successfully.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "startup",
            "in": "query",
            "description": "Startup and shutdown behavior. Order is a non-negative number defining the general startup order. Shutdown in done with reverse ordering. Additionally you can set the 'up' or 'down' delay in seconds, which specifies a delay to wait before the next VM is started or stopped.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-startup-order"
            }
          },
          {
            "name": "storage",
            "in": "query",
            "description": "Default Storage.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "local",
              "format": "pve-storage-id"
            }
          },
          {
            "name": "swap",
            "in": "query",
            "description": "Amount of SWAP for the container in MB.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 512,
              "minimum": 0
            }
          },
          {
            "name": "tags",
            "in": "query",
            "description": "Tags of the Container. This is only meta information.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-tag-list"
            }
          },
          {
            "name": "template",
            "in": "query",
            "description": "Enable/disable Template.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "timezone",
            "in": "query",
            "description": "Time zone to use in the container. If option isn't set, then nothing will be done. Can be set to 'host' to match the host time zone, or an arbitrary time zone option from /usr/share/zoneinfo/zone.tab",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-ct-timezone"
            }
          },
          {
            "name": "tty",
            "in": "query",
            "description": "Specify the number of tty available to the container",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 2,
              "minimum": 0,
              "maximum": 6
            }
          },
          {
            "name": "unique",
            "in": "query",
            "description": "Assign a unique random ethernet address.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "unprivileged",
            "in": "query",
            "description": "Makes the container run as unprivileged user. (Should not be modified manually.)",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "unused[n]",
            "in": "query",
            "description": "Reference to unused volumes. This is used internally, and should not be modified manually.",
            "required": false,
            "schema": {
              "type": "string",
              "format": {
                "volume": {
                  "default_key": 1,
                  "description": "The volume that is not used currently.",
                  "format": "pve-volume-id",
                  "format_description": "volume",
                  "type": "string"
                }
              }
            }
          },
          {
            "name": "vmid",
            "in": "query",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/lxc/{vmid}": {
      "delete": {
        "summary": "Destroy the container (also delete all uses files).",
        "description": "Destroy the container (also delete all uses files).",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "destroy-unreferenced-disks",
            "in": "query",
            "description": "If set, destroy additionally all disks with the VMID from all enabled storages which are not referenced in the config.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "force",
            "in": "query",
            "description": "Force destroy, even if running.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "purge",
            "in": "query",
            "description": "Remove container from all related configurations. For example, backup jobs, replication jobs or HA. Related ACLs and Firewall entries will *always* be removed.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Directory index",
        "description": "Directory index",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "subdir": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{subdir}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/lxc/{vmid}/config": {
      "get": {
        "summary": "Get container configuration.",
        "description": "Get container configuration.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "current",
            "in": "query",
            "description": "Get current values (instead of pending values).",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "snapshot",
            "in": "query",
            "description": "Fetch config values from given snapshot.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-configid",
              "maxLength": 40
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "arch": {
                      "default": "amd64",
                      "description": "OS architecture type.",
                      "enum": [
                        "amd64",
                        "i386",
                        "arm64",
                        "armhf",
                        "riscv32",
                        "riscv64"
                      ],
                      "optional": 1,
                      "type": "string"
                    },
                    "cmode": {
                      "default": "tty",
                      "description": "Console mode. By default, the console command tries to open a connection to one of the available tty devices. By setting cmode to 'console' it tries to attach to /dev/console instead. If you set cmode to 'shell', it simply invokes a shell inside the container (no login).",
                      "enum": [
                        "shell",
                        "console",
                        "tty"
                      ],
                      "optional": 1,
                      "type": "string"
                    },
                    "console": {
                      "default": 1,
                      "description": "Attach a console device (/dev/console) to the container.",
                      "optional": 1,
                      "type": "boolean"
                    },
                    "cores": {
                      "description": "The number of cores assigned to the container. A container can use all available cores by default.",
                      "maximum": 8192,
                      "minimum": 1,
                      "optional": 1,
                      "type": "integer"
                    },
                    "cpulimit": {
                      "default": 0,
                      "description": "Limit of CPU usage.\n\nNOTE: If the computer has 2 CPUs, it has a total of '2' CPU time. Value '0' indicates no CPU limit.",
                      "maximum": 8192,
                      "minimum": 0,
                      "optional": 1,
                      "type": "number"
                    },
                    "cpuunits": {
                      "default": "cgroup v1: 1024, cgroup v2: 100",
                      "description": "CPU weight for a container, will be clamped to [1, 10000] in cgroup v2.",
                      "maximum": 500000,
                      "minimum": 0,
                      "optional": 1,
                      "type": "integer",
                      "verbose_description": "CPU weight for a container. Argument is used in the kernel fair scheduler. The larger the number is, the more CPU time this container gets. Number is relative to the weights of all the other running guests."
                    },
                    "debug": {
                      "default": 0,
                      "description": "Try to be more verbose. For now this only enables debug log-level on start.",
                      "optional": 1,
                      "type": "boolean"
                    },
                    "description": {
                      "description": "Description for the Container. Shown in the web-interface CT's summary. This is saved as comment inside the configuration file.",
                      "maxLength": 8192,
                      "optional": 1,
                      "type": "string"
                    },
                    "dev[n]": {
                      "description": "Device to pass through to the container",
                      "format": {
                        "deny-write": {
                          "default": 0,
                          "description": "Deny the container to write to the device",
                          "optional": 1,
                          "type": "boolean"
                        },
                        "gid": {
                          "description": "Group ID to be assigned to the device node",
                          "minimum": 0,
                          "optional": 1,
                          "type": "integer"
                        },
                        "mode": {
                          "description": "Access mode to be set on the device node",
                          "format_description": "Octal access mode",
                          "optional": 1,
                          "pattern": "0[0-7]{3}",
                          "type": "string"
                        },
                        "path": {
                          "default_key": 1,
                          "description": "Device to pass through to the container",
                          "format": "pve-lxc-dev-string",
                          "format_description": "Path",
                          "optional": 1,
                          "type": "string",
                          "verbose_description": "Path to the device to pass through to the container"
                        },
                        "uid": {
                          "description": "User ID to be assigned to the device node",
                          "minimum": 0,
                          "optional": 1,
                          "type": "integer"
                        }
                      },
                      "optional": 1,
                      "type": "string"
                    },
                    "digest": {
                      "description": "SHA1 digest of configuration file. This can be used to prevent concurrent modifications.",
                      "type": "string"
                    },
                    "features": {
                      "description": "Allow containers access to advanced features.",
                      "format": {
                        "force_rw_sys": {
                          "default": 0,
                          "description": "Mount /sys in unprivileged containers as `rw` instead of `mixed`. This can break networking under newer (>= v245) systemd-network use.",
                          "optional": 1,
                          "type": "boolean"
                        },
                        "fuse": {
                          "default": 0,
                          "description": "Allow using 'fuse' file systems in a container. Note that interactions between fuse and the freezer cgroup can potentially cause I/O deadlocks.",
                          "optional": 1,
                          "type": "boolean"
                        },
                        "keyctl": {
                          "default": 0,
                          "description": "For unprivileged containers only: Allow the use of the keyctl() system call. This is required to use docker inside a container. By default unprivileged containers will see this system call as non-existent. This is mostly a workaround for systemd-networkd, as it will treat it as a fatal error when some keyctl() operations are denied by the kernel due to lacking permissions. Essentially, you can choose between running systemd-networkd or docker.",
                          "optional": 1,
                          "type": "boolean"
                        },
                        "mknod": {
                          "default": 0,
                          "description": "Allow unprivileged containers to use mknod() to add certain device nodes. This requires a kernel with seccomp trap to user space support (5.3 or newer). This is experimental.",
                          "optional": 1,
                          "type": "boolean"
                        },
                        "mount": {
                          "description": "Allow mounting file systems of specific types. This should be a list of file system types as used with the mount command. Note that this can have negative effects on the container's security. With access to a loop device, mounting a file can circumvent the mknod permission of the devices cgroup, mounting an NFS file system can block the host's I/O completely and prevent it from rebooting, etc.",
                          "format_description": "fstype;fstype;...",
                          "optional": 1,
                          "pattern": "(?^:[a-zA-Z0-9_; ]+)",
                          "type": "string"
                        },
                        "nesting": {
                          "default": 0,
                          "description": "Allow nesting. Best used with unprivileged containers with additional id mapping. Note that this will expose procfs and sysfs contents of the host to the guest.",
                          "optional": 1,
                          "type": "boolean"
                        }
                      },
                      "optional": 1,
                      "type": "string"
                    },
                    "hookscript": {
                      "description": "Script that will be executed during various steps in the containers lifetime.",
                      "format": "pve-volume-id",
                      "optional": 1,
                      "type": "string"
                    },
                    "hostname": {
                      "description": "Set a host name for the container.",
                      "format": "dns-name",
                      "maxLength": 255,
                      "optional": 1,
                      "type": "string"
                    },
                    "lock": {
                      "description": "Lock/unlock the container.",
                      "enum": [
                        "backup",
                        "create",
                        "destroyed",
                        "disk",
                        "fstrim",
                        "migrate",
                        "mounted",
                        "rollback",
                        "snapshot",
                        "snapshot-delete"
                      ],
                      "optional": 1,
                      "type": "string"
                    },
                    "lxc": {
                      "description": "Array of lxc low-level configurations ([[key1, value1], [key2, value2] ...]).",
                      "items": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "optional": 1,
                      "type": "array"
                    },
                    "memory": {
                      "default": 512,
                      "description": "Amount of RAM for the container in MB.",
                      "minimum": 16,
                      "optional": 1,
                      "type": "integer"
                    },
                    "mp[n]": {
                      "description": "Use volume as container mount point. Use the special syntax STORAGE_ID:SIZE_IN_GiB to allocate a new volume.",
                      "format": {
                        "acl": {
                          "description": "Explicitly enable or disable ACL support.",
                          "optional": 1,
                          "type": "boolean"
                        },
                        "backup": {
                          "description": "Whether to include the mount point in backups.",
                          "optional": 1,
                          "type": "boolean",
                          "verbose_description": "Whether to include the mount point in backups (only used for volume mount points)."
                        },
                        "mountoptions": {
                          "description": "Extra mount options for rootfs/mps.",
                          "format_description": "opt[;opt...]",
                          "optional": 1,
                          "pattern": "(?^:(?^:(discard|lazytime|noatime|nodev|noexec|nosuid))(;(?^:(discard|lazytime|noatime|nodev|noexec|nosuid)))*)",
                          "type": "string"
                        },
                        "mp": {
                          "description": "Path to the mount point as seen from inside the container (must not contain symlinks).",
                          "format": "pve-lxc-mp-string",
                          "format_description": "Path",
                          "type": "string",
                          "verbose_description": "Path to the mount point as seen from inside the container.\n\nNOTE: Must not contain any symlinks for security reasons."
                        },
                        "quota": {
                          "description": "Enable user quotas inside the container (not supported with zfs subvolumes)",
                          "optional": 1,
                          "type": "boolean"
                        },
                        "replicate": {
                          "default": 1,
                          "description": "Will include this volume to a storage replica job.",
                          "optional": 1,
                          "type": "boolean"
                        },
                        "ro": {
                          "description": "Read-only mount point",
                          "optional": 1,
                          "type": "boolean"
                        },
                        "shared": {
                          "default": 0,
                          "description": "Mark this non-volume mount point as available on multiple nodes (see 'nodes')",
                          "optional": 1,
                          "type": "boolean",
                          "verbose_description": "Mark this non-volume mount point as available on all nodes.\n\nWARNING: This option does not share the mount point automatically, it assumes it is shared already!"
                        },
                        "size": {
                          "description": "Volume size (read only value).",
                          "format": "disk-size",
                          "format_description": "DiskSize",
                          "optional": 1,
                          "type": "string"
                        },
                        "volume": {
                          "default_key": 1,
                          "description": "Volume, device or directory to mount into the container.",
                          "format": "pve-lxc-mp-string",
                          "format_description": "volume",
                          "type": "string"
                        }
                      },
                      "optional": 1,
                      "type": "string"
                    },
                    "nameserver": {
                      "description": "Sets DNS server IP address for a container. Create will automatically use the setting from the host if you neither set searchdomain nor nameserver.",
                      "format": "lxc-ip-with-ll-iface-list",
                      "optional": 1,
                      "type": "string"
                    },
                    "net[n]": {
                      "description": "Specifies network interfaces for the container.",
                      "format": {
                        "bridge": {
                          "description": "Bridge to attach the network device to.",
                          "format_description": "bridge",
                          "optional": 1,
                          "pattern": "[-_.\\w\\d]+",
                          "type": "string"
                        },
                        "firewall": {
                          "description": "Controls whether this interface's firewall rules should be used.",
                          "optional": 1,
                          "type": "boolean"
                        },
                        "gw": {
                          "description": "Default gateway for IPv4 traffic.",
                          "format": "ipv4",
                          "format_description": "GatewayIPv4",
                          "optional": 1,
                          "type": "string"
                        },
                        "gw6": {
                          "description": "Default gateway for IPv6 traffic.",
                          "format": "ipv6",
                          "format_description": "GatewayIPv6",
                          "optional": 1,
                          "type": "string"
                        },
                        "hwaddr": {
                          "description": "The interface MAC address. This is dynamically allocated by default, but you can set that statically if needed, for example to always have the same link-local IPv6 address. (lxc.network.hwaddr)",
                          "format": "mac-addr",
                          "format_description": "XX:XX:XX:XX:XX:XX",
                          "optional": 1,
                          "type": "string",
                          "verbose_description": "A common MAC address with the I/G (Individual/Group) bit not set."
                        },
                        "ip": {
                          "description": "IPv4 address in CIDR format.",
                          "format": "pve-ipv4-config",
                          "format_description": "(IPv4/CIDR|dhcp|manual)",
                          "optional": 1,
                          "type": "string"
                        },
                        "ip6": {
                          "description": "IPv6 address in CIDR format.",
                          "format": "pve-ipv6-config",
                          "format_description": "(IPv6/CIDR|auto|dhcp|manual)",
                          "optional": 1,
                          "type": "string"
                        },
                        "link_down": {
                          "description": "Whether this interface should be disconnected (like pulling the plug).",
                          "optional": 1,
                          "type": "boolean"
                        },
                        "mtu": {
                          "description": "Maximum transfer unit of the interface. (lxc.network.mtu)",
                          "maximum": 65535,
                          "minimum": 64,
                          "optional": 1,
                          "type": "integer"
                        },
                        "name": {
                          "description": "Name of the network device as seen from inside the container. (lxc.network.name)",
                          "format_description": "string",
                          "pattern": "[-_.\\w\\d]+",
                          "type": "string"
                        },
                        "rate": {
                          "description": "Apply rate limiting to the interface",
                          "format_description": "mbps",
                          "optional": 1,
                          "type": "number"
                        },
                        "tag": {
                          "description": "VLAN tag for this interface.",
                          "maximum": 4094,
                          "minimum": 1,
                          "optional": 1,
                          "type": "integer"
                        },
                        "trunks": {
                          "description": "VLAN ids to pass through the interface",
                          "format_description": "vlanid[;vlanid...]",
                          "optional": 1,
                          "pattern": "(?^:\\d+(?:;\\d+)*)",
                          "type": "string"
                        },
                        "type": {
                          "description": "Network interface type.",
                          "enum": [
                            "veth"
                          ],
                          "optional": 1,
                          "type": "string"
                        }
                      },
                      "optional": 1,
                      "type": "string"
                    },
                    "onboot": {
                      "default": 0,
                      "description": "Specifies whether a container will be started during system bootup.",
                      "optional": 1,
                      "type": "boolean"
                    },
                    "ostype": {
                      "description": "OS type. This is used to setup configuration inside the container, and corresponds to lxc setup scripts in /usr/share/lxc/config/<ostype>.common.conf. Value 'unmanaged' can be used to skip and OS specific setup.",
                      "enum": [
                        "debian",
                        "devuan",
                        "ubuntu",
                        "centos",
                        "fedora",
                        "opensuse",
                        "archlinux",
                        "alpine",
                        "gentoo",
                        "nixos",
                        "unmanaged"
                      ],
                      "optional": 1,
                      "type": "string"
                    },
                    "protection": {
                      "default": 0,
                      "description": "Sets the protection flag of the container. This will prevent the CT or CT's disk remove/update operation.",
                      "optional": 1,
                      "type": "boolean"
                    },
                    "rootfs": {
                      "description": "Use volume as container root.",
                      "format": {
                        "acl": {
                          "description": "Explicitly enable or disable ACL support.",
                          "optional": 1,
                          "type": "boolean"
                        },
                        "mountoptions": {
                          "description": "Extra mount options for rootfs/mps.",
                          "format_description": "opt[;opt...]",
                          "optional": 1,
                          "pattern": "(?^:(?^:(discard|lazytime|noatime|nodev|noexec|nosuid))(;(?^:(discard|lazytime|noatime|nodev|noexec|nosuid)))*)",
                          "type": "string"
                        },
                        "quota": {
                          "description": "Enable user quotas inside the container (not supported with zfs subvolumes)",
                          "optional": 1,
                          "type": "boolean"
                        },
                        "replicate": {
                          "default": 1,
                          "description": "Will include this volume to a storage replica job.",
                          "optional": 1,
                          "type": "boolean"
                        },
                        "ro": {
                          "description": "Read-only mount point",
                          "optional": 1,
                          "type": "boolean"
                        },
                        "shared": {
                          "default": 0,
                          "description": "Mark this non-volume mount point as available on multiple nodes (see 'nodes')",
                          "optional": 1,
                          "type": "boolean",
                          "verbose_description": "Mark this non-volume mount point as available on all nodes.\n\nWARNING: This option does not share the mount point automatically, it assumes it is shared already!"
                        },
                        "size": {
                          "description": "Volume size (read only value).",
                          "format": "disk-size",
                          "format_description": "DiskSize",
                          "optional": 1,
                          "type": "string"
                        },
                        "volume": {
                          "default_key": 1,
                          "description": "Volume, device or directory to mount into the container.",
                          "format": "pve-lxc-mp-string",
                          "format_description": "volume",
                          "type": "string"
                        }
                      },
                      "optional": 1,
                      "type": "string"
                    },
                    "searchdomain": {
                      "description": "Sets DNS search domains for a container. Create will automatically use the setting from the host if you neither set searchdomain nor nameserver.",
                      "format": "dns-name-list",
                      "optional": 1,
                      "type": "string"
                    },
                    "startup": {
                      "description": "Startup and shutdown behavior. Order is a non-negative number defining the general startup order. Shutdown in done with reverse ordering. Additionally you can set the 'up' or 'down' delay in seconds, which specifies a delay to wait before the next VM is started or stopped.",
                      "format": "pve-startup-order",
                      "optional": 1,
                      "type": "string",
                      "typetext": "[[order=]\\d+] [,up=\\d+] [,down=\\d+] "
                    },
                    "swap": {
                      "default": 512,
                      "description": "Amount of SWAP for the container in MB.",
                      "minimum": 0,
                      "optional": 1,
                      "type": "integer"
                    },
                    "tags": {
                      "description": "Tags of the Container. This is only meta information.",
                      "format": "pve-tag-list",
                      "optional": 1,
                      "type": "string"
                    },
                    "template": {
                      "default": 0,
                      "description": "Enable/disable Template.",
                      "optional": 1,
                      "type": "boolean"
                    },
                    "timezone": {
                      "description": "Time zone to use in the container. If option isn't set, then nothing will be done. Can be set to 'host' to match the host time zone, or an arbitrary time zone option from /usr/share/zoneinfo/zone.tab",
                      "format": "pve-ct-timezone",
                      "optional": 1,
                      "type": "string"
                    },
                    "tty": {
                      "default": 2,
                      "description": "Specify the number of tty available to the container",
                      "maximum": 6,
                      "minimum": 0,
                      "optional": 1,
                      "type": "integer"
                    },
                    "unprivileged": {
                      "default": 0,
                      "description": "Makes the container run as unprivileged user. (Should not be modified manually.)",
                      "optional": 1,
                      "type": "boolean"
                    },
                    "unused[n]": {
                      "description": "Reference to unused volumes. This is used internally, and should not be modified manually.",
                      "format": {
                        "volume": {
                          "default_key": 1,
                          "description": "The volume that is not used currently.",
                          "format": "pve-volume-id",
                          "format_description": "volume",
                          "type": "string"
                        }
                      },
                      "optional": 1,
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Set container options.",
        "description": "Set container options.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "arch",
            "in": "query",
            "description": "OS architecture type.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "amd64",
              "enum": [
                "amd64",
                "i386",
                "arm64",
                "armhf",
                "riscv32",
                "riscv64"
              ]
            }
          },
          {
            "name": "cmode",
            "in": "query",
            "description": "Console mode. By default, the console command tries to open a connection to one of the available tty devices. By setting cmode to 'console' it tries to attach to /dev/console instead. If you set cmode to 'shell', it simply invokes a shell inside the container (no login).",
            "required": false,
            "schema": {
              "type": "string",
              "default": "tty",
              "enum": [
                "shell",
                "console",
                "tty"
              ]
            }
          },
          {
            "name": "console",
            "in": "query",
            "description": "Attach a console device (/dev/console) to the container.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 1
            }
          },
          {
            "name": "cores",
            "in": "query",
            "description": "The number of cores assigned to the container. A container can use all available cores by default.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 8192
            }
          },
          {
            "name": "cpulimit",
            "in": "query",
            "description": "Limit of CPU usage.\n\nNOTE: If the computer has 2 CPUs, it has a total of '2' CPU time. Value '0' indicates no CPU limit.",
            "required": false,
            "schema": {
              "type": "number",
              "default": 0,
              "minimum": 0,
              "maximum": 8192
            }
          },
          {
            "name": "cpuunits",
            "in": "query",
            "description": "CPU weight for a container, will be clamped to [1, 10000] in cgroup v2.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": "cgroup v1: 1024, cgroup v2: 100",
              "minimum": 0,
              "maximum": 500000
            }
          },
          {
            "name": "debug",
            "in": "query",
            "description": "Try to be more verbose. For now this only enables debug log-level on start.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "delete",
            "in": "query",
            "description": "A list of settings you want to delete.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-configid-list"
            }
          },
          {
            "name": "description",
            "in": "query",
            "description": "Description for the Container. Shown in the web-interface CT's summary. This is saved as comment inside the configuration file.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 8192
            }
          },
          {
            "name": "dev[n]",
            "in": "query",
            "description": "Device to pass through to the container",
            "required": false,
            "schema": {
              "type": "string",
              "format": {
                "deny-write": {
                  "default": 0,
                  "description": "Deny the container to write to the device",
                  "optional": 1,
                  "type": "boolean"
                },
                "gid": {
                  "description": "Group ID to be assigned to the device node",
                  "minimum": 0,
                  "optional": 1,
                  "type": "integer"
                },
                "mode": {
                  "description": "Access mode to be set on the device node",
                  "format_description": "Octal access mode",
                  "optional": 1,
                  "pattern": "0[0-7]{3}",
                  "type": "string"
                },
                "path": {
                  "default_key": 1,
                  "description": "Device to pass through to the container",
                  "format": "pve-lxc-dev-string",
                  "format_description": "Path",
                  "optional": 1,
                  "type": "string",
                  "verbose_description": "Path to the device to pass through to the container"
                },
                "uid": {
                  "description": "User ID to be assigned to the device node",
                  "minimum": 0,
                  "optional": 1,
                  "type": "integer"
                }
              }
            }
          },
          {
            "name": "digest",
            "in": "query",
            "description": "Prevent changes if current configuration file has different SHA1 digest. This can be used to prevent concurrent modifications.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 40
            }
          },
          {
            "name": "features",
            "in": "query",
            "description": "Allow containers access to advanced features.",
            "required": false,
            "schema": {
              "type": "string",
              "format": {
                "force_rw_sys": {
                  "default": 0,
                  "description": "Mount /sys in unprivileged containers as `rw` instead of `mixed`. This can break networking under newer (>= v245) systemd-network use.",
                  "optional": 1,
                  "type": "boolean"
                },
                "fuse": {
                  "default": 0,
                  "description": "Allow using 'fuse' file systems in a container. Note that interactions between fuse and the freezer cgroup can potentially cause I/O deadlocks.",
                  "optional": 1,
                  "type": "boolean"
                },
                "keyctl": {
                  "default": 0,
                  "description": "For unprivileged containers only: Allow the use of the keyctl() system call. This is required to use docker inside a container. By default unprivileged containers will see this system call as non-existent. This is mostly a workaround for systemd-networkd, as it will treat it as a fatal error when some keyctl() operations are denied by the kernel due to lacking permissions. Essentially, you can choose between running systemd-networkd or docker.",
                  "optional": 1,
                  "type": "boolean"
                },
                "mknod": {
                  "default": 0,
                  "description": "Allow unprivileged containers to use mknod() to add certain device nodes. This requires a kernel with seccomp trap to user space support (5.3 or newer). This is experimental.",
                  "optional": 1,
                  "type": "boolean"
                },
                "mount": {
                  "description": "Allow mounting file systems of specific types. This should be a list of file system types as used with the mount command. Note that this can have negative effects on the container's security. With access to a loop device, mounting a file can circumvent the mknod permission of the devices cgroup, mounting an NFS file system can block the host's I/O completely and prevent it from rebooting, etc.",
                  "format_description": "fstype;fstype;...",
                  "optional": 1,
                  "pattern": "(?^:[a-zA-Z0-9_; ]+)",
                  "type": "string"
                },
                "nesting": {
                  "default": 0,
                  "description": "Allow nesting. Best used with unprivileged containers with additional id mapping. Note that this will expose procfs and sysfs contents of the host to the guest.",
                  "optional": 1,
                  "type": "boolean"
                }
              }
            }
          },
          {
            "name": "hookscript",
            "in": "query",
            "description": "Script that will be executed during various steps in the containers lifetime.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-volume-id"
            }
          },
          {
            "name": "hostname",
            "in": "query",
            "description": "Set a host name for the container.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "dns-name",
              "maxLength": 255
            }
          },
          {
            "name": "lock",
            "in": "query",
            "description": "Lock/unlock the container.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "backup",
                "create",
                "destroyed",
                "disk",
                "fstrim",
                "migrate",
                "mounted",
                "rollback",
                "snapshot",
                "snapshot-delete"
              ]
            }
          },
          {
            "name": "memory",
            "in": "query",
            "description": "Amount of RAM for the container in MB.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 512,
              "minimum": 16
            }
          },
          {
            "name": "mp[n]",
            "in": "query",
            "description": "Use volume as container mount point. Use the special syntax STORAGE_ID:SIZE_IN_GiB to allocate a new volume.",
            "required": false,
            "schema": {
              "type": "string",
              "format": {
                "acl": {
                  "description": "Explicitly enable or disable ACL support.",
                  "optional": 1,
                  "type": "boolean"
                },
                "backup": {
                  "description": "Whether to include the mount point in backups.",
                  "optional": 1,
                  "type": "boolean",
                  "verbose_description": "Whether to include the mount point in backups (only used for volume mount points)."
                },
                "mountoptions": {
                  "description": "Extra mount options for rootfs/mps.",
                  "format_description": "opt[;opt...]",
                  "optional": 1,
                  "pattern": "(?^:(?^:(discard|lazytime|noatime|nodev|noexec|nosuid))(;(?^:(discard|lazytime|noatime|nodev|noexec|nosuid)))*)",
                  "type": "string"
                },
                "mp": {
                  "description": "Path to the mount point as seen from inside the container (must not contain symlinks).",
                  "format": "pve-lxc-mp-string",
                  "format_description": "Path",
                  "type": "string",
                  "verbose_description": "Path to the mount point as seen from inside the container.\n\nNOTE: Must not contain any symlinks for security reasons."
                },
                "quota": {
                  "description": "Enable user quotas inside the container (not supported with zfs subvolumes)",
                  "optional": 1,
                  "type": "boolean"
                },
                "replicate": {
                  "default": 1,
                  "description": "Will include this volume to a storage replica job.",
                  "optional": 1,
                  "type": "boolean"
                },
                "ro": {
                  "description": "Read-only mount point",
                  "optional": 1,
                  "type": "boolean"
                },
                "shared": {
                  "default": 0,
                  "description": "Mark this non-volume mount point as available on multiple nodes (see 'nodes')",
                  "optional": 1,
                  "type": "boolean",
                  "verbose_description": "Mark this non-volume mount point as available on all nodes.\n\nWARNING: This option does not share the mount point automatically, it assumes it is shared already!"
                },
                "size": {
                  "description": "Volume size (read only value).",
                  "format": "disk-size",
                  "format_description": "DiskSize",
                  "optional": 1,
                  "type": "string"
                },
                "volume": {
                  "default_key": 1,
                  "description": "Volume, device or directory to mount into the container.",
                  "format": "pve-lxc-mp-string",
                  "format_description": "volume",
                  "type": "string"
                }
              }
            }
          },
          {
            "name": "nameserver",
            "in": "query",
            "description": "Sets DNS server IP address for a container. Create will automatically use the setting from the host if you neither set searchdomain nor nameserver.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "lxc-ip-with-ll-iface-list"
            }
          },
          {
            "name": "net[n]",
            "in": "query",
            "description": "Specifies network interfaces for the container.",
            "required": false,
            "schema": {
              "type": "string",
              "format": {
                "bridge": {
                  "description": "Bridge to attach the network device to.",
                  "format_description": "bridge",
                  "optional": 1,
                  "pattern": "[-_.\\w\\d]+",
                  "type": "string"
                },
                "firewall": {
                  "description": "Controls whether this interface's firewall rules should be used.",
                  "optional": 1,
                  "type": "boolean"
                },
                "gw": {
                  "description": "Default gateway for IPv4 traffic.",
                  "format": "ipv4",
                  "format_description": "GatewayIPv4",
                  "optional": 1,
                  "type": "string"
                },
                "gw6": {
                  "description": "Default gateway for IPv6 traffic.",
                  "format": "ipv6",
                  "format_description": "GatewayIPv6",
                  "optional": 1,
                  "type": "string"
                },
                "hwaddr": {
                  "description": "The interface MAC address. This is dynamically allocated by default, but you can set that statically if needed, for example to always have the same link-local IPv6 address. (lxc.network.hwaddr)",
                  "format": "mac-addr",
                  "format_description": "XX:XX:XX:XX:XX:XX",
                  "optional": 1,
                  "type": "string",
                  "verbose_description": "A common MAC address with the I/G (Individual/Group) bit not set."
                },
                "ip": {
                  "description": "IPv4 address in CIDR format.",
                  "format": "pve-ipv4-config",
                  "format_description": "(IPv4/CIDR|dhcp|manual)",
                  "optional": 1,
                  "type": "string"
                },
                "ip6": {
                  "description": "IPv6 address in CIDR format.",
                  "format": "pve-ipv6-config",
                  "format_description": "(IPv6/CIDR|auto|dhcp|manual)",
                  "optional": 1,
                  "type": "string"
                },
                "link_down": {
                  "description": "Whether this interface should be disconnected (like pulling the plug).",
                  "optional": 1,
                  "type": "boolean"
                },
                "mtu": {
                  "description": "Maximum transfer unit of the interface. (lxc.network.mtu)",
                  "maximum": 65535,
                  "minimum": 64,
                  "optional": 1,
                  "type": "integer"
                },
                "name": {
                  "description": "Name of the network device as seen from inside the container. (lxc.network.name)",
                  "format_description": "string",
                  "pattern": "[-_.\\w\\d]+",
                  "type": "string"
                },
                "rate": {
                  "description": "Apply rate limiting to the interface",
                  "format_description": "mbps",
                  "optional": 1,
                  "type": "number"
                },
                "tag": {
                  "description": "VLAN tag for this interface.",
                  "maximum": 4094,
                  "minimum": 1,
                  "optional": 1,
                  "type": "integer"
                },
                "trunks": {
                  "description": "VLAN ids to pass through the interface",
                  "format_description": "vlanid[;vlanid...]",
                  "optional": 1,
                  "pattern": "(?^:\\d+(?:;\\d+)*)",
                  "type": "string"
                },
                "type": {
                  "description": "Network interface type.",
                  "enum": [
                    "veth"
                  ],
                  "optional": 1,
                  "type": "string"
                }
              }
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "onboot",
            "in": "query",
            "description": "Specifies whether a container will be started during system bootup.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "ostype",
            "in": "query",
            "description": "OS type. This is used to setup configuration inside the container, and corresponds to lxc setup scripts in /usr/share/lxc/config/<ostype>.common.conf. Value 'unmanaged' can be used to skip and OS specific setup.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "debian",
                "devuan",
                "ubuntu",
                "centos",
                "fedora",
                "opensuse",
                "archlinux",
                "alpine",
                "gentoo",
                "nixos",
                "unmanaged"
              ]
            }
          },
          {
            "name": "protection",
            "in": "query",
            "description": "Sets the protection flag of the container. This will prevent the CT or CT's disk remove/update operation.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "revert",
            "in": "query",
            "description": "Revert a pending change.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-configid-list"
            }
          },
          {
            "name": "rootfs",
            "in": "query",
            "description": "Use volume as container root.",
            "required": false,
            "schema": {
              "type": "string",
              "format": {
                "acl": {
                  "description": "Explicitly enable or disable ACL support.",
                  "optional": 1,
                  "type": "boolean"
                },
                "mountoptions": {
                  "description": "Extra mount options for rootfs/mps.",
                  "format_description": "opt[;opt...]",
                  "optional": 1,
                  "pattern": "(?^:(?^:(discard|lazytime|noatime|nodev|noexec|nosuid))(;(?^:(discard|lazytime|noatime|nodev|noexec|nosuid)))*)",
                  "type": "string"
                },
                "quota": {
                  "description": "Enable user quotas inside the container (not supported with zfs subvolumes)",
                  "optional": 1,
                  "type": "boolean"
                },
                "replicate": {
                  "default": 1,
                  "description": "Will include this volume to a storage replica job.",
                  "optional": 1,
                  "type": "boolean"
                },
                "ro": {
                  "description": "Read-only mount point",
                  "optional": 1,
                  "type": "boolean"
                },
                "shared": {
                  "default": 0,
                  "description": "Mark this non-volume mount point as available on multiple nodes (see 'nodes')",
                  "optional": 1,
                  "type": "boolean",
                  "verbose_description": "Mark this non-volume mount point as available on all nodes.\n\nWARNING: This option does not share the mount point automatically, it assumes it is shared already!"
                },
                "size": {
                  "description": "Volume size (read only value).",
                  "format": "disk-size",
                  "format_description": "DiskSize",
                  "optional": 1,
                  "type": "string"
                },
                "volume": {
                  "default_key": 1,
                  "description": "Volume, device or directory to mount into the container.",
                  "format": "pve-lxc-mp-string",
                  "format_description": "volume",
                  "type": "string"
                }
              }
            }
          },
          {
            "name": "searchdomain",
            "in": "query",
            "description": "Sets DNS search domains for a container. Create will automatically use the setting from the host if you neither set searchdomain nor nameserver.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "dns-name-list"
            }
          },
          {
            "name": "startup",
            "in": "query",
            "description": "Startup and shutdown behavior. Order is a non-negative number defining the general startup order. Shutdown in done with reverse ordering. Additionally you can set the 'up' or 'down' delay in seconds, which specifies a delay to wait before the next VM is started or stopped.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-startup-order"
            }
          },
          {
            "name": "swap",
            "in": "query",
            "description": "Amount of SWAP for the container in MB.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 512,
              "minimum": 0
            }
          },
          {
            "name": "tags",
            "in": "query",
            "description": "Tags of the Container. This is only meta information.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-tag-list"
            }
          },
          {
            "name": "template",
            "in": "query",
            "description": "Enable/disable Template.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "timezone",
            "in": "query",
            "description": "Time zone to use in the container. If option isn't set, then nothing will be done. Can be set to 'host' to match the host time zone, or an arbitrary time zone option from /usr/share/zoneinfo/zone.tab",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-ct-timezone"
            }
          },
          {
            "name": "tty",
            "in": "query",
            "description": "Specify the number of tty available to the container",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 2,
              "minimum": 0,
              "maximum": 6
            }
          },
          {
            "name": "unprivileged",
            "in": "query",
            "description": "Makes the container run as unprivileged user. (Should not be modified manually.)",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "unused[n]",
            "in": "query",
            "description": "Reference to unused volumes. This is used internally, and should not be modified manually.",
            "required": false,
            "schema": {
              "type": "string",
              "format": {
                "volume": {
                  "default_key": 1,
                  "description": "The volume that is not used currently.",
                  "format": "pve-volume-id",
                  "format_description": "volume",
                  "type": "string"
                }
              }
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/lxc/{vmid}/status": {
      "get": {
        "summary": "Directory index",
        "description": "Directory index",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "subdir": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{subdir}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/lxc/{vmid}/status/current": {
      "get": {
        "summary": "Get virtual machine status.",
        "description": "Get virtual machine status.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "cpu": {
                      "description": "Current CPU usage.",
                      "optional": 1,
                      "type": "number"
                    },
                    "cpus": {
                      "description": "Maximum usable CPUs.",
                      "optional": 1,
                      "type": "number"
                    },
                    "disk": {
                      "description": "Root disk image space-usage in bytes.",
                      "minimum": 0,
                      "optional": 1,
                      "renderer": "bytes",
                      "type": "integer"
                    },
                    "diskread": {
                      "description": "The amount of bytes the guest read from it's block devices since the guest was started. (Note: This info is not available for all storage types.)",
                      "optional": 1,
                      "renderer": "bytes",
                      "type": "integer"
                    },
                    "diskwrite": {
                      "description": "The amount of bytes the guest wrote from it's block devices since the guest was started. (Note: This info is not available for all storage types.)",
                      "optional": 1,
                      "renderer": "bytes",
                      "type": "integer"
                    },
                    "ha": {
                      "description": "HA manager service status.",
                      "type": "object"
                    },
                    "lock": {
                      "description": "The current config lock, if any.",
                      "optional": 1,
                      "type": "string"
                    },
                    "maxdisk": {
                      "description": "Root disk image size in bytes.",
                      "optional": 1,
                      "renderer": "bytes",
                      "type": "integer"
                    },
                    "maxmem": {
                      "description": "Maximum memory in bytes.",
                      "optional": 1,
                      "renderer": "bytes",
                      "type": "integer"
                    },
                    "maxswap": {
                      "description": "Maximum SWAP memory in bytes.",
                      "optional": 1,
                      "renderer": "bytes",
                      "type": "integer"
                    },
                    "mem": {
                      "description": "Currently used memory in bytes.",
                      "optional": 1,
                      "renderer": "bytes",
                      "type": "integer"
                    },
                    "name": {
                      "description": "Container name.",
                      "optional": 1,
                      "type": "string"
                    },
                    "netin": {
                      "description": "The amount of traffic in bytes that was sent to the guest over the network since it was started.",
                      "optional": 1,
                      "renderer": "bytes",
                      "type": "integer"
                    },
                    "netout": {
                      "description": "The amount of traffic in bytes that was sent from the guest over the network since it was started.",
                      "optional": 1,
                      "renderer": "bytes",
                      "type": "integer"
                    },
                    "pressurecpusome": {
                      "description": "CPU Some pressure stall average over the last 10 seconds.",
                      "optional": 1,
                      "type": "number"
                    },
                    "pressureiofull": {
                      "description": "IO Full pressure stall average over the last 10 seconds.",
                      "optional": 1,
                      "type": "number"
                    },
                    "pressureiosome": {
                      "description": "IO Some pressure stall average over the last 10 seconds.",
                      "optional": 1,
                      "type": "number"
                    },
                    "pressurememoryfull": {
                      "description": "Memory Full pressure stall average over the last 10 seconds.",
                      "optional": 1,
                      "type": "number"
                    },
                    "pressurememorysome": {
                      "description": "Memory Some pressure stall average over the last 10 seconds.",
                      "optional": 1,
                      "type": "number"
                    },
                    "status": {
                      "description": "LXC Container status.",
                      "enum": [
                        "stopped",
                        "running"
                      ],
                      "type": "string"
                    },
                    "tags": {
                      "description": "The current configured tags, if any.",
                      "optional": 1,
                      "type": "string"
                    },
                    "template": {
                      "default": 0,
                      "description": "Determines if the guest is a template.",
                      "optional": 1,
                      "type": "boolean"
                    },
                    "uptime": {
                      "description": "Uptime in seconds.",
                      "optional": 1,
                      "renderer": "duration",
                      "type": "integer"
                    },
                    "vmid": {
                      "description": "The (unique) ID of the VM.",
                      "format": "pve-vmid",
                      "maximum": 999999999,
                      "minimum": 100,
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/lxc/{vmid}/status/start": {
      "post": {
        "summary": "Start the container.",
        "description": "Start the container.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "debug",
            "in": "query",
            "description": "If set, enables very verbose debug log-level on start.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "skiplock",
            "in": "query",
            "description": "Ignore locks - only root is allowed to use this option.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/lxc/{vmid}/status/stop": {
      "post": {
        "summary": "Stop the container. This will abruptly stop all processes running in the container.",
        "description": "Stop the container. This will abruptly stop all processes running in the container.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "overrule-shutdown",
            "in": "query",
            "description": "Try to abort active 'vzshutdown' tasks before stopping.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "skiplock",
            "in": "query",
            "description": "Ignore locks - only root is allowed to use this option.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/lxc/{vmid}/status/shutdown": {
      "post": {
        "summary": "Shutdown the container. This will trigger a clean shutdown of the container, see lxc-stop(1) for details.",
        "description": "Shutdown the container. This will trigger a clean shutdown of the container, see lxc-stop(1) for details.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "forceStop",
            "in": "query",
            "description": "Make sure the Container stops.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "timeout",
            "in": "query",
            "description": "Wait maximal timeout seconds.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 60,
              "minimum": 0
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/lxc/{vmid}/status/suspend": {
      "post": {
        "summary": "Suspend the container. This is experimental.",
        "description": "Suspend the container. This is experimental.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/lxc/{vmid}/status/resume": {
      "post": {
        "summary": "Resume the container.",
        "description": "Resume the container.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/lxc/{vmid}/status/reboot": {
      "post": {
        "summary": "Reboot the container by shutting it down, and starting it again. Applies pending changes.",
        "description": "Reboot the container by shutting it down, and starting it again. Applies pending changes.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "timeout",
            "in": "query",
            "description": "Wait maximal timeout seconds for the shutdown.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/lxc/{vmid}/snapshot": {
      "get": {
        "summary": "List all snapshots.",
        "description": "List all snapshots.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "description": {
                        "description": "Snapshot description.",
                        "type": "string"
                      },
                      "name": {
                        "description": "Snapshot identifier. Value 'current' identifies the current VM.",
                        "type": "string"
                      },
                      "parent": {
                        "description": "Parent snapshot identifier.",
                        "optional": 1,
                        "type": "string"
                      },
                      "snaptime": {
                        "description": "Snapshot creation time",
                        "optional": 1,
                        "renderer": "timestamp",
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{name}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Snapshot a container.",
        "description": "Snapshot a container.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "description",
            "in": "query",
            "description": "A textual description or comment.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "snapname",
            "in": "query",
            "description": "The name of the snapshot.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-configid",
              "maxLength": 40
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "description": "the task ID.",
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/lxc/{vmid}/snapshot/{snapname}": {
      "delete": {
        "summary": "Delete a LXC snapshot.",
        "description": "Delete a LXC snapshot.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "force",
            "in": "query",
            "description": "For removal from config file, even if removing disk snapshots fails.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "snapname",
            "in": "path",
            "description": "The name of the snapshot.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-configid",
              "maxLength": 40
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "description": "the task ID.",
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "",
        "description": "",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "snapname",
            "in": "path",
            "description": "The name of the snapshot.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-configid",
              "maxLength": 40
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {},
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{cmd}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/lxc/{vmid}/snapshot/{snapname}/rollback": {
      "post": {
        "summary": "Rollback LXC state to specified snapshot.",
        "description": "Rollback LXC state to specified snapshot.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "snapname",
            "in": "path",
            "description": "The name of the snapshot.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-configid",
              "maxLength": 40
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "Whether the container should get started after rolling back successfully",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "description": "the task ID.",
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/lxc/{vmid}/snapshot/{snapname}/config": {
      "get": {
        "summary": "Get snapshot configuration",
        "description": "Get snapshot configuration",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "snapname",
            "in": "path",
            "description": "The name of the snapshot.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-configid",
              "maxLength": 40
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update snapshot metadata.",
        "description": "Update snapshot metadata.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "description",
            "in": "query",
            "description": "A textual description or comment.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "snapname",
            "in": "path",
            "description": "The name of the snapshot.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-configid",
              "maxLength": 40
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/lxc/{vmid}/firewall": {
      "get": {
        "summary": "Directory index.",
        "description": "Directory index.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {},
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{name}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/lxc/{vmid}/firewall/rules": {
      "get": {
        "summary": "List rules.",
        "description": "List rules.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "pos": {
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{pos}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create new rule.",
        "description": "Create new rule.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "action",
            "in": "query",
            "description": "Rule action ('ACCEPT', 'DROP', 'REJECT') or security group name.",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "[A-Za-z][A-Za-z0-9\\-\\_]+",
              "maxLength": 20
            }
          },
          {
            "name": "comment",
            "in": "query",
            "description": "Descriptive comment.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dest",
            "in": "query",
            "description": "Restrict packet destination address. This can refer to a single IP address, an IP set ('+ipsetname') or an IP alias definition. You can also specify an address range like '20.34.101.207-201.3.9.99', or a list of IP addresses and networks (entries are separated by comma). Please do not mix IPv4 and IPv6 addresses inside such lists.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-fw-addr-spec",
              "maxLength": 512
            }
          },
          {
            "name": "digest",
            "in": "query",
            "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 64
            }
          },
          {
            "name": "dport",
            "in": "query",
            "description": "Restrict TCP/UDP destination port. You can use service names or simple numbers (0-65535), as defined in '/etc/services'. Port ranges can be specified with '\\d+:\\d+', for example '80:85', and you can use comma separated list to match several ports or ranges.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-fw-dport-spec"
            }
          },
          {
            "name": "enable",
            "in": "query",
            "description": "Flag to enable/disable a rule.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "name": "icmp-type",
            "in": "query",
            "description": "Specify icmp-type. Only valid if proto equals 'icmp' or 'icmpv6'/'ipv6-icmp'.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-fw-icmp-type-spec"
            }
          },
          {
            "name": "iface",
            "in": "query",
            "description": "Network interface name. You have to use network configuration key names for VMs and containers ('net\\d+'). Host related rules can use arbitrary strings.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-iface",
              "maxLength": 20
            }
          },
          {
            "name": "log",
            "in": "query",
            "description": "Log level for firewall rule.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "emerg",
                "alert",
                "crit",
                "err",
                "warning",
                "notice",
                "info",
                "debug",
                "nolog"
              ]
            }
          },
          {
            "name": "macro",
            "in": "query",
            "description": "Use predefined standard macro.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 128
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "pos",
            "in": "query",
            "description": "Update rule at position <pos>.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "name": "proto",
            "in": "query",
            "description": "IP protocol. You can use protocol names ('tcp'/'udp') or simple numbers, as defined in '/etc/protocols'.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-fw-protocol-spec"
            }
          },
          {
            "name": "source",
            "in": "query",
            "description": "Restrict packet source address. This can refer to a single IP address, an IP set ('+ipsetname') or an IP alias definition. You can also specify an address range like '20.34.101.207-201.3.9.99', or a list of IP addresses and networks (entries are separated by comma). Please do not mix IPv4 and IPv6 addresses inside such lists.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-fw-addr-spec",
              "maxLength": 512
            }
          },
          {
            "name": "sport",
            "in": "query",
            "description": "Restrict TCP/UDP source port. You can use service names or simple numbers (0-65535), as defined in '/etc/services'. Port ranges can be specified with '\\d+:\\d+', for example '80:85', and you can use comma separated list to match several ports or ranges.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-fw-sport-spec"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Rule type.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "in",
                "out",
                "forward",
                "group"
              ]
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/lxc/{vmid}/firewall/rules/{pos}": {
      "delete": {
        "summary": "Delete rule.",
        "description": "Delete rule.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "digest",
            "in": "query",
            "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 64
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "pos",
            "in": "path",
            "description": "Update rule at position <pos>.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Get single rule data.",
        "description": "Get single rule data.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "pos",
            "in": "path",
            "description": "Update rule at position <pos>.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "action": {
                      "type": "string"
                    },
                    "comment": {
                      "optional": 1,
                      "type": "string"
                    },
                    "dest": {
                      "optional": 1,
                      "type": "string"
                    },
                    "dport": {
                      "optional": 1,
                      "type": "string"
                    },
                    "enable": {
                      "optional": 1,
                      "type": "integer"
                    },
                    "icmp-type": {
                      "optional": 1,
                      "type": "string"
                    },
                    "iface": {
                      "optional": 1,
                      "type": "string"
                    },
                    "ipversion": {
                      "optional": 1,
                      "type": "integer"
                    },
                    "log": {
                      "description": "Log level for firewall rule",
                      "enum": [
                        "emerg",
                        "alert",
                        "crit",
                        "err",
                        "warning",
                        "notice",
                        "info",
                        "debug",
                        "nolog"
                      ],
                      "optional": 1,
                      "type": "string"
                    },
                    "macro": {
                      "optional": 1,
                      "type": "string"
                    },
                    "pos": {
                      "type": "integer"
                    },
                    "proto": {
                      "optional": 1,
                      "type": "string"
                    },
                    "source": {
                      "optional": 1,
                      "type": "string"
                    },
                    "sport": {
                      "optional": 1,
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Modify rule data.",
        "description": "Modify rule data.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "action",
            "in": "query",
            "description": "Rule action ('ACCEPT', 'DROP', 'REJECT') or security group name.",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "[A-Za-z][A-Za-z0-9\\-\\_]+",
              "maxLength": 20
            }
          },
          {
            "name": "comment",
            "in": "query",
            "description": "Descriptive comment.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "delete",
            "in": "query",
            "description": "A list of settings you want to delete.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-configid-list"
            }
          },
          {
            "name": "dest",
            "in": "query",
            "description": "Restrict packet destination address. This can refer to a single IP address, an IP set ('+ipsetname') or an IP alias definition. You can also specify an address range like '20.34.101.207-201.3.9.99', or a list of IP addresses and networks (entries are separated by comma). Please do not mix IPv4 and IPv6 addresses inside such lists.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-fw-addr-spec",
              "maxLength": 512
            }
          },
          {
            "name": "digest",
            "in": "query",
            "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 64
            }
          },
          {
            "name": "dport",
            "in": "query",
            "description": "Restrict TCP/UDP destination port. You can use service names or simple numbers (0-65535), as defined in '/etc/services'. Port ranges can be specified with '\\d+:\\d+', for example '80:85', and you can use comma separated list to match several ports or ranges.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-fw-dport-spec"
            }
          },
          {
            "name": "enable",
            "in": "query",
            "description": "Flag to enable/disable a rule.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "name": "icmp-type",
            "in": "query",
            "description": "Specify icmp-type. Only valid if proto equals 'icmp' or 'icmpv6'/'ipv6-icmp'.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-fw-icmp-type-spec"
            }
          },
          {
            "name": "iface",
            "in": "query",
            "description": "Network interface name. You have to use network configuration key names for VMs and containers ('net\\d+'). Host related rules can use arbitrary strings.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-iface",
              "maxLength": 20
            }
          },
          {
            "name": "log",
            "in": "query",
            "description": "Log level for firewall rule.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "emerg",
                "alert",
                "crit",
                "err",
                "warning",
                "notice",
                "info",
                "debug",
                "nolog"
              ]
            }
          },
          {
            "name": "macro",
            "in": "query",
            "description": "Use predefined standard macro.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 128
            }
          },
          {
            "name": "moveto",
            "in": "query",
            "description": "Move rule to new position <moveto>. Other arguments are ignored.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "pos",
            "in": "path",
            "description": "Update rule at position <pos>.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "name": "proto",
            "in": "query",
            "description": "IP protocol. You can use protocol names ('tcp'/'udp') or simple numbers, as defined in '/etc/protocols'.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-fw-protocol-spec"
            }
          },
          {
            "name": "source",
            "in": "query",
            "description": "Restrict packet source address. This can refer to a single IP address, an IP set ('+ipsetname') or an IP alias definition. You can also specify an address range like '20.34.101.207-201.3.9.99', or a list of IP addresses and networks (entries are separated by comma). Please do not mix IPv4 and IPv6 addresses inside such lists.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-fw-addr-spec",
              "maxLength": 512
            }
          },
          {
            "name": "sport",
            "in": "query",
            "description": "Restrict TCP/UDP source port. You can use service names or simple numbers (0-65535), as defined in '/etc/services'. Port ranges can be specified with '\\d+:\\d+', for example '80:85', and you can use comma separated list to match several ports or ranges.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-fw-sport-spec"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Rule type.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "in",
                "out",
                "forward",
                "group"
              ]
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/lxc/{vmid}/firewall/aliases": {
      "get": {
        "summary": "List aliases",
        "description": "List aliases",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "cidr": {
                        "type": "string"
                      },
                      "comment": {
                        "optional": 1,
                        "type": "string"
                      },
                      "digest": {
                        "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
                        "maxLength": 64,
                        "optional": 0,
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{name}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create IP or Network Alias.",
        "description": "Create IP or Network Alias.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "cidr",
            "in": "query",
            "description": "Network/IP specification in CIDR format.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "IPorCIDR"
            }
          },
          {
            "name": "comment",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Alias name.",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "[A-Za-z][A-Za-z0-9\\-\\_]+",
              "maxLength": 64
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/lxc/{vmid}/firewall/aliases/{name}": {
      "delete": {
        "summary": "Remove IP or Network alias.",
        "description": "Remove IP or Network alias.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "digest",
            "in": "query",
            "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 64
            }
          },
          {
            "name": "name",
            "in": "path",
            "description": "Alias name.",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "[A-Za-z][A-Za-z0-9\\-\\_]+",
              "maxLength": 64
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Read alias.",
        "description": "Read alias.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Alias name.",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "[A-Za-z][A-Za-z0-9\\-\\_]+",
              "maxLength": 64
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update IP or Network alias.",
        "description": "Update IP or Network alias.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "cidr",
            "in": "query",
            "description": "Network/IP specification in CIDR format.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "IPorCIDR"
            }
          },
          {
            "name": "comment",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "digest",
            "in": "query",
            "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 64
            }
          },
          {
            "name": "name",
            "in": "path",
            "description": "Alias name.",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "[A-Za-z][A-Za-z0-9\\-\\_]+",
              "maxLength": 64
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "rename",
            "in": "query",
            "description": "Rename an existing alias.",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "[A-Za-z][A-Za-z0-9\\-\\_]+",
              "maxLength": 64
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/lxc/{vmid}/firewall/ipset": {
      "get": {
        "summary": "List IPSets",
        "description": "List IPSets",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "comment": {
                        "optional": 1,
                        "type": "string"
                      },
                      "digest": {
                        "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
                        "maxLength": 64,
                        "optional": 0,
                        "type": "string"
                      },
                      "name": {
                        "description": "IP set name.",
                        "maxLength": 64,
                        "minLength": 2,
                        "pattern": "[A-Za-z][A-Za-z0-9\\-\\_]+",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{name}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create new IPSet",
        "description": "Create new IPSet",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "comment",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "digest",
            "in": "query",
            "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 64
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "IP set name.",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "[A-Za-z][A-Za-z0-9\\-\\_]+",
              "maxLength": 64
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "rename",
            "in": "query",
            "description": "Rename an existing IPSet. You can set 'rename' to the same value as 'name' to update the 'comment' of an existing IPSet.",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "[A-Za-z][A-Za-z0-9\\-\\_]+",
              "maxLength": 64
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/lxc/{vmid}/firewall/ipset/{name}": {
      "delete": {
        "summary": "Delete IPSet",
        "description": "Delete IPSet",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "force",
            "in": "query",
            "description": "Delete all members of the IPSet, if there are any.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "name",
            "in": "path",
            "description": "IP set name.",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "[A-Za-z][A-Za-z0-9\\-\\_]+",
              "maxLength": 64
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "List IPSet content",
        "description": "List IPSet content",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "IP set name.",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "[A-Za-z][A-Za-z0-9\\-\\_]+",
              "maxLength": 64
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "cidr": {
                        "type": "string"
                      },
                      "comment": {
                        "optional": 1,
                        "type": "string"
                      },
                      "digest": {
                        "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
                        "maxLength": 64,
                        "optional": 0,
                        "type": "string"
                      },
                      "nomatch": {
                        "optional": 1,
                        "type": "boolean"
                      }
                    },
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{cidr}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Add IP or Network to IPSet.",
        "description": "Add IP or Network to IPSet.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "cidr",
            "in": "query",
            "description": "Network/IP specification in CIDR format.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "IPorCIDRorAlias"
            }
          },
          {
            "name": "comment",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "path",
            "description": "IP set name.",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "[A-Za-z][A-Za-z0-9\\-\\_]+",
              "maxLength": 64
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "nomatch",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/lxc/{vmid}/firewall/ipset/{name}/{cidr}": {
      "delete": {
        "summary": "Remove IP or Network from IPSet.",
        "description": "Remove IP or Network from IPSet.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "cidr",
            "in": "path",
            "description": "Network/IP specification in CIDR format.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "IPorCIDRorAlias"
            }
          },
          {
            "name": "digest",
            "in": "query",
            "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 64
            }
          },
          {
            "name": "name",
            "in": "path",
            "description": "IP set name.",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "[A-Za-z][A-Za-z0-9\\-\\_]+",
              "maxLength": 64
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Read IP or Network settings from IPSet.",
        "description": "Read IP or Network settings from IPSet.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "cidr",
            "in": "path",
            "description": "Network/IP specification in CIDR format.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "IPorCIDRorAlias"
            }
          },
          {
            "name": "name",
            "in": "path",
            "description": "IP set name.",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "[A-Za-z][A-Za-z0-9\\-\\_]+",
              "maxLength": 64
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update IP or Network settings",
        "description": "Update IP or Network settings",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "cidr",
            "in": "path",
            "description": "Network/IP specification in CIDR format.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "IPorCIDRorAlias"
            }
          },
          {
            "name": "comment",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "digest",
            "in": "query",
            "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 64
            }
          },
          {
            "name": "name",
            "in": "path",
            "description": "IP set name.",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "[A-Za-z][A-Za-z0-9\\-\\_]+",
              "maxLength": 64
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "nomatch",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/lxc/{vmid}/firewall/options": {
      "get": {
        "summary": "Get VM firewall options.",
        "description": "Get VM firewall options.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "dhcp": {
                      "default": 0,
                      "description": "Enable DHCP.",
                      "optional": 1,
                      "type": "boolean"
                    },
                    "enable": {
                      "default": 0,
                      "description": "Enable/disable firewall rules.",
                      "optional": 1,
                      "type": "boolean"
                    },
                    "ipfilter": {
                      "description": "Enable default IP filters. This is equivalent to adding an empty ipfilter-net<id> ipset for every interface. Such ipsets implicitly contain sane default restrictions such as restricting IPv6 link local addresses to the one derived from the interface's MAC address. For containers the configured IP addresses will be implicitly added.",
                      "optional": 1,
                      "type": "boolean"
                    },
                    "log_level_in": {
                      "description": "Log level for incoming traffic.",
                      "enum": [
                        "emerg",
                        "alert",
                        "crit",
                        "err",
                        "warning",
                        "notice",
                        "info",
                        "debug",
                        "nolog"
                      ],
                      "optional": 1,
                      "type": "string"
                    },
                    "log_level_out": {
                      "description": "Log level for outgoing traffic.",
                      "enum": [
                        "emerg",
                        "alert",
                        "crit",
                        "err",
                        "warning",
                        "notice",
                        "info",
                        "debug",
                        "nolog"
                      ],
                      "optional": 1,
                      "type": "string"
                    },
                    "macfilter": {
                      "default": 1,
                      "description": "Enable/disable MAC address filter.",
                      "optional": 1,
                      "type": "boolean"
                    },
                    "ndp": {
                      "default": 0,
                      "description": "Enable NDP (Neighbor Discovery Protocol).",
                      "optional": 1,
                      "type": "boolean"
                    },
                    "policy_in": {
                      "description": "Input policy.",
                      "enum": [
                        "ACCEPT",
                        "REJECT",
                        "DROP"
                      ],
                      "optional": 1,
                      "type": "string"
                    },
                    "policy_out": {
                      "description": "Output policy.",
                      "enum": [
                        "ACCEPT",
                        "REJECT",
                        "DROP"
                      ],
                      "optional": 1,
                      "type": "string"
                    },
                    "radv": {
                      "description": "Allow sending Router Advertisement.",
                      "optional": 1,
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Set Firewall options.",
        "description": "Set Firewall options.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "delete",
            "in": "query",
            "description": "A list of settings you want to delete.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-configid-list"
            }
          },
          {
            "name": "dhcp",
            "in": "query",
            "description": "Enable DHCP.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "digest",
            "in": "query",
            "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 64
            }
          },
          {
            "name": "enable",
            "in": "query",
            "description": "Enable/disable firewall rules.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "ipfilter",
            "in": "query",
            "description": "Enable default IP filters. This is equivalent to adding an empty ipfilter-net<id> ipset for every interface. Such ipsets implicitly contain sane default restrictions such as restricting IPv6 link local addresses to the one derived from the interface's MAC address. For containers the configured IP addresses will be implicitly added.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "log_level_in",
            "in": "query",
            "description": "Log level for incoming traffic.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "emerg",
                "alert",
                "crit",
                "err",
                "warning",
                "notice",
                "info",
                "debug",
                "nolog"
              ]
            }
          },
          {
            "name": "log_level_out",
            "in": "query",
            "description": "Log level for outgoing traffic.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "emerg",
                "alert",
                "crit",
                "err",
                "warning",
                "notice",
                "info",
                "debug",
                "nolog"
              ]
            }
          },
          {
            "name": "macfilter",
            "in": "query",
            "description": "Enable/disable MAC address filter.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 1
            }
          },
          {
            "name": "ndp",
            "in": "query",
            "description": "Enable NDP (Neighbor Discovery Protocol).",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "policy_in",
            "in": "query",
            "description": "Input policy.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "ACCEPT",
                "REJECT",
                "DROP"
              ]
            }
          },
          {
            "name": "policy_out",
            "in": "query",
            "description": "Output policy.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "ACCEPT",
                "REJECT",
                "DROP"
              ]
            }
          },
          {
            "name": "radv",
            "in": "query",
            "description": "Allow sending Router Advertisement.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/lxc/{vmid}/firewall/log": {
      "get": {
        "summary": "Read firewall log",
        "description": "Read firewall log",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "since",
            "in": "query",
            "description": "Display log since this UNIX epoch.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "name": "start",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "name": "until",
            "in": "query",
            "description": "Display log until this UNIX epoch.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "n": {
                        "description": "Line number",
                        "type": "integer"
                      },
                      "t": {
                        "description": "Line text",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/lxc/{vmid}/firewall/refs": {
      "get": {
        "summary": "Lists possible IPSet/Alias reference which are allowed in source/dest properties.",
        "description": "Lists possible IPSet/Alias reference which are allowed in source/dest properties.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Only list references of specified type.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "alias",
                "ipset"
              ]
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "comment": {
                        "optional": 1,
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      },
                      "ref": {
                        "type": "string"
                      },
                      "scope": {
                        "type": "string"
                      },
                      "type": {
                        "enum": [
                          "alias",
                          "ipset"
                        ],
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/lxc/{vmid}/rrd": {
      "get": {
        "summary": "Read VM RRD statistics (returns PNG)",
        "description": "Read VM RRD statistics (returns PNG)",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "cf",
            "in": "query",
            "description": "The RRD consolidation function",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "AVERAGE",
                "MAX"
              ]
            }
          },
          {
            "name": "ds",
            "in": "query",
            "description": "The list of datasources you want to display.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-configid-list"
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "timeframe",
            "in": "query",
            "description": "Specify the time frame you are interested in.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "hour",
                "day",
                "week",
                "month",
                "year"
              ]
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "filename": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/lxc/{vmid}/rrddata": {
      "get": {
        "summary": "Read VM RRD statistics",
        "description": "Read VM RRD statistics",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "cf",
            "in": "query",
            "description": "The RRD consolidation function",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "AVERAGE",
                "MAX"
              ]
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "timeframe",
            "in": "query",
            "description": "Specify the time frame you are interested in.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "hour",
                "day",
                "week",
                "month",
                "year"
              ]
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {},
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/lxc/{vmid}/vncproxy": {
      "post": {
        "summary": "Creates a TCP VNC proxy connections.",
        "description": "Creates a TCP VNC proxy connections.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "height",
            "in": "query",
            "description": "sets the height of the console in pixels.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 16,
              "maximum": 2160
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          },
          {
            "name": "websocket",
            "in": "query",
            "description": "use websocket instead of standard VNC.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "width",
            "in": "query",
            "description": "sets the width of the console in pixels.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 16,
              "maximum": 4096
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": 0,
                  "properties": {
                    "cert": {
                      "type": "string"
                    },
                    "port": {
                      "type": "integer"
                    },
                    "ticket": {
                      "type": "string"
                    },
                    "upid": {
                      "type": "string"
                    },
                    "user": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/lxc/{vmid}/termproxy": {
      "post": {
        "summary": "Creates a TCP proxy connection.",
        "description": "Creates a TCP proxy connection.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": 0,
                  "properties": {
                    "port": {
                      "type": "integer"
                    },
                    "ticket": {
                      "type": "string"
                    },
                    "upid": {
                      "type": "string"
                    },
                    "user": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/lxc/{vmid}/vncwebsocket": {
      "get": {
        "summary": "Opens a weksocket for VNC traffic.",
        "description": "Opens a weksocket for VNC traffic.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "port",
            "in": "query",
            "description": "Port number returned by previous vncproxy call.",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 5900,
              "maximum": 5999
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          },
          {
            "name": "vncticket",
            "in": "query",
            "description": "Ticket from previous call to vncproxy.",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 512
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "port": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/lxc/{vmid}/spiceproxy": {
      "post": {
        "summary": "Returns a SPICE configuration to connect to the CT.",
        "description": "Returns a SPICE configuration to connect to the CT.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "proxy",
            "in": "query",
            "description": "SPICE proxy server. This can be used by the client to specify the proxy server. All nodes in a cluster runs 'spiceproxy', so it is up to the client to choose one. By default, we return the node where the VM is currently running. As reasonable setting is to use same node you use to connect to the API (This is window.location.hostname for the JS GUI).",
            "required": false,
            "schema": {
              "type": "string",
              "format": "address"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": 1,
                  "description": "Returned values can be directly passed to the 'remote-viewer' application.",
                  "properties": {
                    "host": {
                      "type": "string"
                    },
                    "password": {
                      "type": "string"
                    },
                    "proxy": {
                      "type": "string"
                    },
                    "tls-port": {
                      "type": "integer"
                    },
                    "type": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/lxc/{vmid}/remote_migrate": {
      "post": {
        "summary": "Migrate the container to another cluster. Creates a new migration task. EXPERIMENTAL feature!",
        "description": "Migrate the container to another cluster. Creates a new migration task. EXPERIMENTAL feature!",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "bwlimit",
            "in": "query",
            "description": "Override I/O bandwidth limit (in KiB/s).",
            "required": false,
            "schema": {
              "type": "number",
              "default": "migrate limit from datacenter or storage config",
              "minimum": "0"
            }
          },
          {
            "name": "delete",
            "in": "query",
            "description": "Delete the original CT and related data after successful migration. By default the original CT is kept on the source cluster in a stopped state.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "online",
            "in": "query",
            "description": "Use online/live migration.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "restart",
            "in": "query",
            "description": "Use restart migration",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "target-bridge",
            "in": "query",
            "description": "Mapping from source to target bridges. Providing only a single bridge ID maps all source bridges to that bridge. Providing the special value '1' will map each source bridge to itself.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "bridge-pair-list"
            }
          },
          {
            "name": "target-endpoint",
            "in": "query",
            "description": "Remote target endpoint",
            "required": true,
            "schema": {
              "type": "string",
              "format": "proxmox-remote"
            }
          },
          {
            "name": "target-storage",
            "in": "query",
            "description": "Mapping from source to target storages. Providing only a single storage ID maps all source storages to that storage. Providing the special value '1' will map each source storage to itself.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "storage-pair-list"
            }
          },
          {
            "name": "target-vmid",
            "in": "query",
            "description": "The (unique) ID of the VM.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          },
          {
            "name": "timeout",
            "in": "query",
            "description": "Timeout in seconds for shutdown for restart migration",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 180
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "description": "the task ID.",
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/lxc/{vmid}/migrate": {
      "get": {
        "summary": "Get preconditions for migration.",
        "description": "Get preconditions for migration.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "target",
            "in": "query",
            "description": "Target node.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "allowed-nodes": {
                      "description": "List of nodes allowed for migration.",
                      "items": {
                        "description": "An allowed node",
                        "type": "string"
                      },
                      "optional": 1,
                      "type": "array"
                    },
                    "dependent-ha-resources": {
                      "description": "HA resources, which will be migrated to the same target node as the VM, because these are in positive affinity with the VM.",
                      "items": {
                        "description": "The '<ty>:<id>' resource IDs of a HA resource with a positive affinity rule to this CT.",
                        "type": "string"
                      },
                      "optional": 1,
                      "type": "array"
                    },
                    "not-allowed-nodes": {
                      "description": "List of not allowed nodes with additional information.",
                      "optional": 1,
                      "properties": {
                        "blocking-ha-resources": {
                          "description": "HA resources, which are blocking the container from being migrated to the node.",
                          "items": {
                            "description": "A blocking HA resource",
                            "properties": {
                              "cause": {
                                "description": "The reason why the HA resource is blocking the migration.",
                                "enum": [
                                  "resource-affinity"
                                ],
                                "type": "string"
                              },
                              "sid": {
                                "description": "The blocking HA resource id",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "optional": 1,
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "running": {
                      "description": "Determines if the container is running.",
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Migrate the container to another node. Creates a new migration task.",
        "description": "Migrate the container to another node. Creates a new migration task.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "bwlimit",
            "in": "query",
            "description": "Override I/O bandwidth limit (in KiB/s).",
            "required": false,
            "schema": {
              "type": "number",
              "default": "migrate limit from datacenter or storage config",
              "minimum": "0"
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "online",
            "in": "query",
            "description": "Use online/live migration.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "restart",
            "in": "query",
            "description": "Use restart migration",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "target",
            "in": "query",
            "description": "Target node.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "target-storage",
            "in": "query",
            "description": "Mapping from source to target storages. Providing only a single storage ID maps all source storages to that storage. Providing the special value '1' will map each source storage to itself.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "storage-pair-list"
            }
          },
          {
            "name": "timeout",
            "in": "query",
            "description": "Timeout in seconds for shutdown for restart migration",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 180
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "description": "the task ID.",
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/lxc/{vmid}/feature": {
      "get": {
        "summary": "Check if feature for virtual machine is available.",
        "description": "Check if feature for virtual machine is available.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "feature",
            "in": "query",
            "description": "Feature to check.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "snapshot",
                "clone",
                "copy"
              ]
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "snapname",
            "in": "query",
            "description": "The name of the snapshot.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-configid",
              "maxLength": 40
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "hasFeature": {
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/lxc/{vmid}/template": {
      "post": {
        "summary": "Create a Template.",
        "description": "Create a Template.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/lxc/{vmid}/clone": {
      "post": {
        "summary": "Create a container clone/copy",
        "description": "Create a container clone/copy",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "bwlimit",
            "in": "query",
            "description": "Override I/O bandwidth limit (in KiB/s).",
            "required": false,
            "schema": {
              "type": "number",
              "default": "clone limit from datacenter or storage config",
              "minimum": "0"
            }
          },
          {
            "name": "description",
            "in": "query",
            "description": "Description for the new CT.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "full",
            "in": "query",
            "description": "Create a full copy of all disks. This is always done when you clone a normal CT. For CT templates, we try to create a linked clone by default.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "hostname",
            "in": "query",
            "description": "Set a hostname for the new CT.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "dns-name"
            }
          },
          {
            "name": "newid",
            "in": "query",
            "description": "VMID for the clone.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "pool",
            "in": "query",
            "description": "Add the new CT to the specified pool.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-poolid"
            }
          },
          {
            "name": "snapname",
            "in": "query",
            "description": "The name of the snapshot.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-configid",
              "maxLength": 40
            }
          },
          {
            "name": "storage",
            "in": "query",
            "description": "Target storage for full clone.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-storage-id"
            }
          },
          {
            "name": "target",
            "in": "query",
            "description": "Target node. Only allowed if the original VM is on shared storage.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/lxc/{vmid}/resize": {
      "put": {
        "summary": "Resize a container mount point.",
        "description": "Resize a container mount point.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "digest",
            "in": "query",
            "description": "Prevent changes if current configuration file has different SHA1 digest. This can be used to prevent concurrent modifications.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 40
            }
          },
          {
            "name": "disk",
            "in": "query",
            "description": "The disk you want to resize.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "rootfs",
                "mp0",
                "mp1",
                "mp2",
                "mp3",
                "mp4",
                "mp5",
                "mp6",
                "mp7",
                "mp8",
                "mp9",
                "mp10",
                "mp11",
                "mp12",
                "mp13",
                "mp14",
                "mp15",
                "mp16",
                "mp17",
                "mp18",
                "mp19",
                "mp20",
                "mp21",
                "mp22",
                "mp23",
                "mp24",
                "mp25",
                "mp26",
                "mp27",
                "mp28",
                "mp29",
                "mp30",
                "mp31",
                "mp32",
                "mp33",
                "mp34",
                "mp35",
                "mp36",
                "mp37",
                "mp38",
                "mp39",
                "mp40",
                "mp41",
                "mp42",
                "mp43",
                "mp44",
                "mp45",
                "mp46",
                "mp47",
                "mp48",
                "mp49",
                "mp50",
                "mp51",
                "mp52",
                "mp53",
                "mp54",
                "mp55",
                "mp56",
                "mp57",
                "mp58",
                "mp59",
                "mp60",
                "mp61",
                "mp62",
                "mp63",
                "mp64",
                "mp65",
                "mp66",
                "mp67",
                "mp68",
                "mp69",
                "mp70",
                "mp71",
                "mp72",
                "mp73",
                "mp74",
                "mp75",
                "mp76",
                "mp77",
                "mp78",
                "mp79",
                "mp80",
                "mp81",
                "mp82",
                "mp83",
                "mp84",
                "mp85",
                "mp86",
                "mp87",
                "mp88",
                "mp89",
                "mp90",
                "mp91",
                "mp92",
                "mp93",
                "mp94",
                "mp95",
                "mp96",
                "mp97",
                "mp98",
                "mp99",
                "mp100",
                "mp101",
                "mp102",
                "mp103",
                "mp104",
                "mp105",
                "mp106",
                "mp107",
                "mp108",
                "mp109",
                "mp110",
                "mp111",
                "mp112",
                "mp113",
                "mp114",
                "mp115",
                "mp116",
                "mp117",
                "mp118",
                "mp119",
                "mp120",
                "mp121",
                "mp122",
                "mp123",
                "mp124",
                "mp125",
                "mp126",
                "mp127",
                "mp128",
                "mp129",
                "mp130",
                "mp131",
                "mp132",
                "mp133",
                "mp134",
                "mp135",
                "mp136",
                "mp137",
                "mp138",
                "mp139",
                "mp140",
                "mp141",
                "mp142",
                "mp143",
                "mp144",
                "mp145",
                "mp146",
                "mp147",
                "mp148",
                "mp149",
                "mp150",
                "mp151",
                "mp152",
                "mp153",
                "mp154",
                "mp155",
                "mp156",
                "mp157",
                "mp158",
                "mp159",
                "mp160",
                "mp161",
                "mp162",
                "mp163",
                "mp164",
                "mp165",
                "mp166",
                "mp167",
                "mp168",
                "mp169",
                "mp170",
                "mp171",
                "mp172",
                "mp173",
                "mp174",
                "mp175",
                "mp176",
                "mp177",
                "mp178",
                "mp179",
                "mp180",
                "mp181",
                "mp182",
                "mp183",
                "mp184",
                "mp185",
                "mp186",
                "mp187",
                "mp188",
                "mp189",
                "mp190",
                "mp191",
                "mp192",
                "mp193",
                "mp194",
                "mp195",
                "mp196",
                "mp197",
                "mp198",
                "mp199",
                "mp200",
                "mp201",
                "mp202",
                "mp203",
                "mp204",
                "mp205",
                "mp206",
                "mp207",
                "mp208",
                "mp209",
                "mp210",
                "mp211",
                "mp212",
                "mp213",
                "mp214",
                "mp215",
                "mp216",
                "mp217",
                "mp218",
                "mp219",
                "mp220",
                "mp221",
                "mp222",
                "mp223",
                "mp224",
                "mp225",
                "mp226",
                "mp227",
                "mp228",
                "mp229",
                "mp230",
                "mp231",
                "mp232",
                "mp233",
                "mp234",
                "mp235",
                "mp236",
                "mp237",
                "mp238",
                "mp239",
                "mp240",
                "mp241",
                "mp242",
                "mp243",
                "mp244",
                "mp245",
                "mp246",
                "mp247",
                "mp248",
                "mp249",
                "mp250",
                "mp251",
                "mp252",
                "mp253",
                "mp254",
                "mp255"
              ]
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "The new size. With the '+' sign the value is added to the actual size of the volume and without it, the value is taken as an absolute one. Shrinking disk size is not supported.",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "\\+?\\d+(\\.\\d+)?[KMGT]?"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "description": "the task ID.",
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/lxc/{vmid}/move_volume": {
      "post": {
        "summary": "Move a rootfs-/mp-volume to a different storage or to a different container.",
        "description": "Move a rootfs-/mp-volume to a different storage or to a different container.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "bwlimit",
            "in": "query",
            "description": "Override I/O bandwidth limit (in KiB/s).",
            "required": false,
            "schema": {
              "type": "number",
              "default": "clone limit from datacenter or storage config",
              "minimum": "0"
            }
          },
          {
            "name": "delete",
            "in": "query",
            "description": "Delete the original volume after successful copy. By default the original is kept as an unused volume entry.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "digest",
            "in": "query",
            "description": "Prevent changes if current configuration file has different SHA1 \" .\n\t\t    \"digest. This can be used to prevent concurrent modifications.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 40
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "storage",
            "in": "query",
            "description": "Target Storage.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-storage-id"
            }
          },
          {
            "name": "target-digest",
            "in": "query",
            "description": "Prevent changes if current configuration file of the target \" .\n\t\t    \"container has a different SHA1 digest. This can be used to prevent \" .\n\t\t    \"concurrent modifications.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 40
            }
          },
          {
            "name": "target-vmid",
            "in": "query",
            "description": "The (unique) ID of the VM.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          },
          {
            "name": "target-volume",
            "in": "query",
            "description": "The config key the volume will be moved to. Default is the source volume key.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "rootfs",
                "mp0",
                "mp1",
                "mp2",
                "mp3",
                "mp4",
                "mp5",
                "mp6",
                "mp7",
                "mp8",
                "mp9",
                "mp10",
                "mp11",
                "mp12",
                "mp13",
                "mp14",
                "mp15",
                "mp16",
                "mp17",
                "mp18",
                "mp19",
                "mp20",
                "mp21",
                "mp22",
                "mp23",
                "mp24",
                "mp25",
                "mp26",
                "mp27",
                "mp28",
                "mp29",
                "mp30",
                "mp31",
                "mp32",
                "mp33",
                "mp34",
                "mp35",
                "mp36",
                "mp37",
                "mp38",
                "mp39",
                "mp40",
                "mp41",
                "mp42",
                "mp43",
                "mp44",
                "mp45",
                "mp46",
                "mp47",
                "mp48",
                "mp49",
                "mp50",
                "mp51",
                "mp52",
                "mp53",
                "mp54",
                "mp55",
                "mp56",
                "mp57",
                "mp58",
                "mp59",
                "mp60",
                "mp61",
                "mp62",
                "mp63",
                "mp64",
                "mp65",
                "mp66",
                "mp67",
                "mp68",
                "mp69",
                "mp70",
                "mp71",
                "mp72",
                "mp73",
                "mp74",
                "mp75",
                "mp76",
                "mp77",
                "mp78",
                "mp79",
                "mp80",
                "mp81",
                "mp82",
                "mp83",
                "mp84",
                "mp85",
                "mp86",
                "mp87",
                "mp88",
                "mp89",
                "mp90",
                "mp91",
                "mp92",
                "mp93",
                "mp94",
                "mp95",
                "mp96",
                "mp97",
                "mp98",
                "mp99",
                "mp100",
                "mp101",
                "mp102",
                "mp103",
                "mp104",
                "mp105",
                "mp106",
                "mp107",
                "mp108",
                "mp109",
                "mp110",
                "mp111",
                "mp112",
                "mp113",
                "mp114",
                "mp115",
                "mp116",
                "mp117",
                "mp118",
                "mp119",
                "mp120",
                "mp121",
                "mp122",
                "mp123",
                "mp124",
                "mp125",
                "mp126",
                "mp127",
                "mp128",
                "mp129",
                "mp130",
                "mp131",
                "mp132",
                "mp133",
                "mp134",
                "mp135",
                "mp136",
                "mp137",
                "mp138",
                "mp139",
                "mp140",
                "mp141",
                "mp142",
                "mp143",
                "mp144",
                "mp145",
                "mp146",
                "mp147",
                "mp148",
                "mp149",
                "mp150",
                "mp151",
                "mp152",
                "mp153",
                "mp154",
                "mp155",
                "mp156",
                "mp157",
                "mp158",
                "mp159",
                "mp160",
                "mp161",
                "mp162",
                "mp163",
                "mp164",
                "mp165",
                "mp166",
                "mp167",
                "mp168",
                "mp169",
                "mp170",
                "mp171",
                "mp172",
                "mp173",
                "mp174",
                "mp175",
                "mp176",
                "mp177",
                "mp178",
                "mp179",
                "mp180",
                "mp181",
                "mp182",
                "mp183",
                "mp184",
                "mp185",
                "mp186",
                "mp187",
                "mp188",
                "mp189",
                "mp190",
                "mp191",
                "mp192",
                "mp193",
                "mp194",
                "mp195",
                "mp196",
                "mp197",
                "mp198",
                "mp199",
                "mp200",
                "mp201",
                "mp202",
                "mp203",
                "mp204",
                "mp205",
                "mp206",
                "mp207",
                "mp208",
                "mp209",
                "mp210",
                "mp211",
                "mp212",
                "mp213",
                "mp214",
                "mp215",
                "mp216",
                "mp217",
                "mp218",
                "mp219",
                "mp220",
                "mp221",
                "mp222",
                "mp223",
                "mp224",
                "mp225",
                "mp226",
                "mp227",
                "mp228",
                "mp229",
                "mp230",
                "mp231",
                "mp232",
                "mp233",
                "mp234",
                "mp235",
                "mp236",
                "mp237",
                "mp238",
                "mp239",
                "mp240",
                "mp241",
                "mp242",
                "mp243",
                "mp244",
                "mp245",
                "mp246",
                "mp247",
                "mp248",
                "mp249",
                "mp250",
                "mp251",
                "mp252",
                "mp253",
                "mp254",
                "mp255",
                "unused0",
                "unused1",
                "unused2",
                "unused3",
                "unused4",
                "unused5",
                "unused6",
                "unused7",
                "unused8",
                "unused9",
                "unused10",
                "unused11",
                "unused12",
                "unused13",
                "unused14",
                "unused15",
                "unused16",
                "unused17",
                "unused18",
                "unused19",
                "unused20",
                "unused21",
                "unused22",
                "unused23",
                "unused24",
                "unused25",
                "unused26",
                "unused27",
                "unused28",
                "unused29",
                "unused30",
                "unused31",
                "unused32",
                "unused33",
                "unused34",
                "unused35",
                "unused36",
                "unused37",
                "unused38",
                "unused39",
                "unused40",
                "unused41",
                "unused42",
                "unused43",
                "unused44",
                "unused45",
                "unused46",
                "unused47",
                "unused48",
                "unused49",
                "unused50",
                "unused51",
                "unused52",
                "unused53",
                "unused54",
                "unused55",
                "unused56",
                "unused57",
                "unused58",
                "unused59",
                "unused60",
                "unused61",
                "unused62",
                "unused63",
                "unused64",
                "unused65",
                "unused66",
                "unused67",
                "unused68",
                "unused69",
                "unused70",
                "unused71",
                "unused72",
                "unused73",
                "unused74",
                "unused75",
                "unused76",
                "unused77",
                "unused78",
                "unused79",
                "unused80",
                "unused81",
                "unused82",
                "unused83",
                "unused84",
                "unused85",
                "unused86",
                "unused87",
                "unused88",
                "unused89",
                "unused90",
                "unused91",
                "unused92",
                "unused93",
                "unused94",
                "unused95",
                "unused96",
                "unused97",
                "unused98",
                "unused99",
                "unused100",
                "unused101",
                "unused102",
                "unused103",
                "unused104",
                "unused105",
                "unused106",
                "unused107",
                "unused108",
                "unused109",
                "unused110",
                "unused111",
                "unused112",
                "unused113",
                "unused114",
                "unused115",
                "unused116",
                "unused117",
                "unused118",
                "unused119",
                "unused120",
                "unused121",
                "unused122",
                "unused123",
                "unused124",
                "unused125",
                "unused126",
                "unused127",
                "unused128",
                "unused129",
                "unused130",
                "unused131",
                "unused132",
                "unused133",
                "unused134",
                "unused135",
                "unused136",
                "unused137",
                "unused138",
                "unused139",
                "unused140",
                "unused141",
                "unused142",
                "unused143",
                "unused144",
                "unused145",
                "unused146",
                "unused147",
                "unused148",
                "unused149",
                "unused150",
                "unused151",
                "unused152",
                "unused153",
                "unused154",
                "unused155",
                "unused156",
                "unused157",
                "unused158",
                "unused159",
                "unused160",
                "unused161",
                "unused162",
                "unused163",
                "unused164",
                "unused165",
                "unused166",
                "unused167",
                "unused168",
                "unused169",
                "unused170",
                "unused171",
                "unused172",
                "unused173",
                "unused174",
                "unused175",
                "unused176",
                "unused177",
                "unused178",
                "unused179",
                "unused180",
                "unused181",
                "unused182",
                "unused183",
                "unused184",
                "unused185",
                "unused186",
                "unused187",
                "unused188",
                "unused189",
                "unused190",
                "unused191",
                "unused192",
                "unused193",
                "unused194",
                "unused195",
                "unused196",
                "unused197",
                "unused198",
                "unused199",
                "unused200",
                "unused201",
                "unused202",
                "unused203",
                "unused204",
                "unused205",
                "unused206",
                "unused207",
                "unused208",
                "unused209",
                "unused210",
                "unused211",
                "unused212",
                "unused213",
                "unused214",
                "unused215",
                "unused216",
                "unused217",
                "unused218",
                "unused219",
                "unused220",
                "unused221",
                "unused222",
                "unused223",
                "unused224",
                "unused225",
                "unused226",
                "unused227",
                "unused228",
                "unused229",
                "unused230",
                "unused231",
                "unused232",
                "unused233",
                "unused234",
                "unused235",
                "unused236",
                "unused237",
                "unused238",
                "unused239",
                "unused240",
                "unused241",
                "unused242",
                "unused243",
                "unused244",
                "unused245",
                "unused246",
                "unused247",
                "unused248",
                "unused249",
                "unused250",
                "unused251",
                "unused252",
                "unused253",
                "unused254",
                "unused255"
              ]
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          },
          {
            "name": "volume",
            "in": "query",
            "description": "Volume which will be moved.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "rootfs",
                "mp0",
                "mp1",
                "mp2",
                "mp3",
                "mp4",
                "mp5",
                "mp6",
                "mp7",
                "mp8",
                "mp9",
                "mp10",
                "mp11",
                "mp12",
                "mp13",
                "mp14",
                "mp15",
                "mp16",
                "mp17",
                "mp18",
                "mp19",
                "mp20",
                "mp21",
                "mp22",
                "mp23",
                "mp24",
                "mp25",
                "mp26",
                "mp27",
                "mp28",
                "mp29",
                "mp30",
                "mp31",
                "mp32",
                "mp33",
                "mp34",
                "mp35",
                "mp36",
                "mp37",
                "mp38",
                "mp39",
                "mp40",
                "mp41",
                "mp42",
                "mp43",
                "mp44",
                "mp45",
                "mp46",
                "mp47",
                "mp48",
                "mp49",
                "mp50",
                "mp51",
                "mp52",
                "mp53",
                "mp54",
                "mp55",
                "mp56",
                "mp57",
                "mp58",
                "mp59",
                "mp60",
                "mp61",
                "mp62",
                "mp63",
                "mp64",
                "mp65",
                "mp66",
                "mp67",
                "mp68",
                "mp69",
                "mp70",
                "mp71",
                "mp72",
                "mp73",
                "mp74",
                "mp75",
                "mp76",
                "mp77",
                "mp78",
                "mp79",
                "mp80",
                "mp81",
                "mp82",
                "mp83",
                "mp84",
                "mp85",
                "mp86",
                "mp87",
                "mp88",
                "mp89",
                "mp90",
                "mp91",
                "mp92",
                "mp93",
                "mp94",
                "mp95",
                "mp96",
                "mp97",
                "mp98",
                "mp99",
                "mp100",
                "mp101",
                "mp102",
                "mp103",
                "mp104",
                "mp105",
                "mp106",
                "mp107",
                "mp108",
                "mp109",
                "mp110",
                "mp111",
                "mp112",
                "mp113",
                "mp114",
                "mp115",
                "mp116",
                "mp117",
                "mp118",
                "mp119",
                "mp120",
                "mp121",
                "mp122",
                "mp123",
                "mp124",
                "mp125",
                "mp126",
                "mp127",
                "mp128",
                "mp129",
                "mp130",
                "mp131",
                "mp132",
                "mp133",
                "mp134",
                "mp135",
                "mp136",
                "mp137",
                "mp138",
                "mp139",
                "mp140",
                "mp141",
                "mp142",
                "mp143",
                "mp144",
                "mp145",
                "mp146",
                "mp147",
                "mp148",
                "mp149",
                "mp150",
                "mp151",
                "mp152",
                "mp153",
                "mp154",
                "mp155",
                "mp156",
                "mp157",
                "mp158",
                "mp159",
                "mp160",
                "mp161",
                "mp162",
                "mp163",
                "mp164",
                "mp165",
                "mp166",
                "mp167",
                "mp168",
                "mp169",
                "mp170",
                "mp171",
                "mp172",
                "mp173",
                "mp174",
                "mp175",
                "mp176",
                "mp177",
                "mp178",
                "mp179",
                "mp180",
                "mp181",
                "mp182",
                "mp183",
                "mp184",
                "mp185",
                "mp186",
                "mp187",
                "mp188",
                "mp189",
                "mp190",
                "mp191",
                "mp192",
                "mp193",
                "mp194",
                "mp195",
                "mp196",
                "mp197",
                "mp198",
                "mp199",
                "mp200",
                "mp201",
                "mp202",
                "mp203",
                "mp204",
                "mp205",
                "mp206",
                "mp207",
                "mp208",
                "mp209",
                "mp210",
                "mp211",
                "mp212",
                "mp213",
                "mp214",
                "mp215",
                "mp216",
                "mp217",
                "mp218",
                "mp219",
                "mp220",
                "mp221",
                "mp222",
                "mp223",
                "mp224",
                "mp225",
                "mp226",
                "mp227",
                "mp228",
                "mp229",
                "mp230",
                "mp231",
                "mp232",
                "mp233",
                "mp234",
                "mp235",
                "mp236",
                "mp237",
                "mp238",
                "mp239",
                "mp240",
                "mp241",
                "mp242",
                "mp243",
                "mp244",
                "mp245",
                "mp246",
                "mp247",
                "mp248",
                "mp249",
                "mp250",
                "mp251",
                "mp252",
                "mp253",
                "mp254",
                "mp255",
                "unused0",
                "unused1",
                "unused2",
                "unused3",
                "unused4",
                "unused5",
                "unused6",
                "unused7",
                "unused8",
                "unused9",
                "unused10",
                "unused11",
                "unused12",
                "unused13",
                "unused14",
                "unused15",
                "unused16",
                "unused17",
                "unused18",
                "unused19",
                "unused20",
                "unused21",
                "unused22",
                "unused23",
                "unused24",
                "unused25",
                "unused26",
                "unused27",
                "unused28",
                "unused29",
                "unused30",
                "unused31",
                "unused32",
                "unused33",
                "unused34",
                "unused35",
                "unused36",
                "unused37",
                "unused38",
                "unused39",
                "unused40",
                "unused41",
                "unused42",
                "unused43",
                "unused44",
                "unused45",
                "unused46",
                "unused47",
                "unused48",
                "unused49",
                "unused50",
                "unused51",
                "unused52",
                "unused53",
                "unused54",
                "unused55",
                "unused56",
                "unused57",
                "unused58",
                "unused59",
                "unused60",
                "unused61",
                "unused62",
                "unused63",
                "unused64",
                "unused65",
                "unused66",
                "unused67",
                "unused68",
                "unused69",
                "unused70",
                "unused71",
                "unused72",
                "unused73",
                "unused74",
                "unused75",
                "unused76",
                "unused77",
                "unused78",
                "unused79",
                "unused80",
                "unused81",
                "unused82",
                "unused83",
                "unused84",
                "unused85",
                "unused86",
                "unused87",
                "unused88",
                "unused89",
                "unused90",
                "unused91",
                "unused92",
                "unused93",
                "unused94",
                "unused95",
                "unused96",
                "unused97",
                "unused98",
                "unused99",
                "unused100",
                "unused101",
                "unused102",
                "unused103",
                "unused104",
                "unused105",
                "unused106",
                "unused107",
                "unused108",
                "unused109",
                "unused110",
                "unused111",
                "unused112",
                "unused113",
                "unused114",
                "unused115",
                "unused116",
                "unused117",
                "unused118",
                "unused119",
                "unused120",
                "unused121",
                "unused122",
                "unused123",
                "unused124",
                "unused125",
                "unused126",
                "unused127",
                "unused128",
                "unused129",
                "unused130",
                "unused131",
                "unused132",
                "unused133",
                "unused134",
                "unused135",
                "unused136",
                "unused137",
                "unused138",
                "unused139",
                "unused140",
                "unused141",
                "unused142",
                "unused143",
                "unused144",
                "unused145",
                "unused146",
                "unused147",
                "unused148",
                "unused149",
                "unused150",
                "unused151",
                "unused152",
                "unused153",
                "unused154",
                "unused155",
                "unused156",
                "unused157",
                "unused158",
                "unused159",
                "unused160",
                "unused161",
                "unused162",
                "unused163",
                "unused164",
                "unused165",
                "unused166",
                "unused167",
                "unused168",
                "unused169",
                "unused170",
                "unused171",
                "unused172",
                "unused173",
                "unused174",
                "unused175",
                "unused176",
                "unused177",
                "unused178",
                "unused179",
                "unused180",
                "unused181",
                "unused182",
                "unused183",
                "unused184",
                "unused185",
                "unused186",
                "unused187",
                "unused188",
                "unused189",
                "unused190",
                "unused191",
                "unused192",
                "unused193",
                "unused194",
                "unused195",
                "unused196",
                "unused197",
                "unused198",
                "unused199",
                "unused200",
                "unused201",
                "unused202",
                "unused203",
                "unused204",
                "unused205",
                "unused206",
                "unused207",
                "unused208",
                "unused209",
                "unused210",
                "unused211",
                "unused212",
                "unused213",
                "unused214",
                "unused215",
                "unused216",
                "unused217",
                "unused218",
                "unused219",
                "unused220",
                "unused221",
                "unused222",
                "unused223",
                "unused224",
                "unused225",
                "unused226",
                "unused227",
                "unused228",
                "unused229",
                "unused230",
                "unused231",
                "unused232",
                "unused233",
                "unused234",
                "unused235",
                "unused236",
                "unused237",
                "unused238",
                "unused239",
                "unused240",
                "unused241",
                "unused242",
                "unused243",
                "unused244",
                "unused245",
                "unused246",
                "unused247",
                "unused248",
                "unused249",
                "unused250",
                "unused251",
                "unused252",
                "unused253",
                "unused254",
                "unused255"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/lxc/{vmid}/pending": {
      "get": {
        "summary": "Get container configuration, including pending changes.",
        "description": "Get container configuration, including pending changes.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "delete": {
                        "description": "Indicates a pending delete request if present and not 0.",
                        "maximum": 2,
                        "minimum": 0,
                        "optional": 1,
                        "type": "integer"
                      },
                      "key": {
                        "description": "Configuration option name.",
                        "type": "string"
                      },
                      "pending": {
                        "description": "Pending value.",
                        "optional": 1,
                        "type": "string"
                      },
                      "value": {
                        "description": "Current value.",
                        "optional": 1,
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/lxc/{vmid}/interfaces": {
      "get": {
        "summary": "Get IP addresses of the specified container interface.",
        "description": "Get IP addresses of the specified container interface.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "hardware-address": {
                        "description": "The MAC address of the interface",
                        "optional": 0,
                        "type": "string"
                      },
                      "hwaddr": {
                        "description": "The MAC address of the interface",
                        "optional": 0,
                        "type": "string"
                      },
                      "inet": {
                        "description": "The IPv4 address of the interface",
                        "optional": 1,
                        "type": "string"
                      },
                      "inet6": {
                        "description": "The IPv6 address of the interface",
                        "optional": 1,
                        "type": "string"
                      },
                      "ip-addresses": {
                        "description": "The addresses of the interface",
                        "items": {
                          "properties": {
                            "ip-address": {
                              "description": "IP-Address",
                              "optional": 1,
                              "type": "string"
                            },
                            "ip-address-type": {
                              "description": "IP-Family",
                              "optional": 1,
                              "type": "string"
                            },
                            "prefix": {
                              "description": "IP-Prefix",
                              "optional": 1,
                              "type": "integer"
                            }
                          },
                          "type": "object"
                        },
                        "optional": 0,
                        "type": "array"
                      },
                      "name": {
                        "description": "The name of the interface",
                        "optional": 0,
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/lxc/{vmid}/mtunnel": {
      "post": {
        "summary": "Migration tunnel endpoint - only for internal use by CT migration.",
        "description": "Migration tunnel endpoint - only for internal use by CT migration.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "bridges",
            "in": "query",
            "description": "List of network bridges to check availability. Will be checked again for actually used bridges during migration.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-bridge-id-list"
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "storages",
            "in": "query",
            "description": "List of storages to check permission and availability. Will be checked again for all actually used storages during migration.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-storage-id-list"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": 0,
                  "properties": {
                    "socket": {
                      "type": "string"
                    },
                    "ticket": {
                      "type": "string"
                    },
                    "upid": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/lxc/{vmid}/mtunnelwebsocket": {
      "get": {
        "summary": "Migration tunnel endpoint for websocket upgrade - only for internal use by VM migration.",
        "description": "Migration tunnel endpoint for websocket upgrade - only for internal use by VM migration.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "socket",
            "in": "query",
            "description": "unix socket to forward to",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ticket",
            "in": "query",
            "description": "ticket return by initial 'mtunnel' API call, or retrieved via 'ticket' tunnel command",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "vmid",
            "in": "path",
            "description": "The (unique) ID of the VM.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "port": {
                      "optional": 1,
                      "type": "string"
                    },
                    "socket": {
                      "optional": 1,
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/ceph": {
      "get": {
        "summary": "Directory index.",
        "description": "Directory index.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {},
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{name}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/ceph/cfg": {
      "get": {
        "summary": "Directory index.",
        "description": "Directory index.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {},
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{name}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/ceph/cfg/raw": {
      "get": {
        "summary": "Get the Ceph configuration file.",
        "description": "Get the Ceph configuration file.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/ceph/cfg/db": {
      "get": {
        "summary": "Get the Ceph configuration database.",
        "description": "Get the Ceph configuration database.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "can_update_at_runtime": {
                        "type": "boolean"
                      },
                      "level": {
                        "type": "string"
                      },
                      "mask": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      },
                      "section": {
                        "type": "string"
                      },
                      "value": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/ceph/cfg/value": {
      "get": {
        "summary": "Get configured values from either the config file or config DB.",
        "description": "Get configured values from either the config file or config DB.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "config-keys",
            "in": "query",
            "description": "List of <section>:<config key> items.",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "(?^:^(:?(?^i:[0-9a-z\\-_\\.]+:[0-9a-zA-Z\\-_]+))(:?[;, ](?^i:[0-9a-z\\-_\\.]+:[0-9a-zA-Z\\-_]+))*$)"
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Contains {section}->{key} children with the values",
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/ceph/osd": {
      "get": {
        "summary": "Get Ceph osd list/tree.",
        "description": "Get Ceph osd list/tree.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "flags": {
                        "type": "string"
                      },
                      "root": {
                        "description": "Tree with OSDs in the CRUSH map structure.",
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create OSD",
        "description": "Create OSD",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "crush-device-class",
            "in": "query",
            "description": "Set the device class of the OSD in crush.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "db_dev",
            "in": "query",
            "description": "Block device name for block.db.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "db_dev_size",
            "in": "query",
            "description": "Size in GiB for block.db.",
            "required": false,
            "schema": {
              "type": "number",
              "default": "bluestore_block_db_size or 10% of OSD size",
              "minimum": 1
            }
          },
          {
            "name": "dev",
            "in": "query",
            "description": "Block device name.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "encrypted",
            "in": "query",
            "description": "Enables encryption of the OSD.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "osds-per-device",
            "in": "query",
            "description": "OSD services per physical device. Only useful for fast NVMe devices\"\n\t\t    .\" to utilize their performance better.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": "1"
            }
          },
          {
            "name": "wal_dev",
            "in": "query",
            "description": "Block device name for block.wal.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "wal_dev_size",
            "in": "query",
            "description": "Size in GiB for block.wal.",
            "required": false,
            "schema": {
              "type": "number",
              "default": "bluestore_block_wal_size or 1% of OSD size",
              "minimum": 0.5
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/ceph/osd/{osdid}": {
      "delete": {
        "summary": "Destroy OSD",
        "description": "Destroy OSD",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "cleanup",
            "in": "query",
            "description": "If set, we remove partition table entries.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "osdid",
            "in": "path",
            "description": "OSD ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "OSD index.",
        "description": "OSD index.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "osdid",
            "in": "path",
            "description": "OSD ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {},
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{name}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/ceph/osd/{osdid}/metadata": {
      "get": {
        "summary": "Get OSD details",
        "description": "Get OSD details",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "osdid",
            "in": "path",
            "description": "OSD ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "devices": {
                      "description": "Array containing data about devices",
                      "items": {
                        "properties": {
                          "dev_node": {
                            "description": "Device node",
                            "type": "string"
                          },
                          "device": {
                            "description": "Kind of OSD device",
                            "enum": [
                              "block",
                              "db",
                              "wal"
                            ],
                            "type": "string"
                          },
                          "devices": {
                            "description": "Physical disks used",
                            "type": "string"
                          },
                          "size": {
                            "description": "Size in bytes",
                            "type": "integer"
                          },
                          "support_discard": {
                            "description": "Discard support of the physical device",
                            "type": "boolean"
                          },
                          "type": {
                            "description": "Type of device. For example, hdd or ssd",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "osd": {
                      "description": "General information about the OSD",
                      "properties": {
                        "back_addr": {
                          "description": "Address and port used to talk to other OSDs.",
                          "type": "string"
                        },
                        "front_addr": {
                          "description": "Address and port used to talk to clients and monitors.",
                          "type": "string"
                        },
                        "hb_back_addr": {
                          "description": "Heartbeat address and port for other OSDs.",
                          "type": "string"
                        },
                        "hb_front_addr": {
                          "description": "Heartbeat address and port for clients and monitors.",
                          "type": "string"
                        },
                        "hostname": {
                          "description": "Name of the host containing the OSD.",
                          "type": "string"
                        },
                        "id": {
                          "description": "ID of the OSD.",
                          "type": "integer"
                        },
                        "mem_usage": {
                          "description": "Memory usage of the OSD service.",
                          "type": "integer"
                        },
                        "osd_data": {
                          "description": "Path to the OSD's data directory.",
                          "type": "string"
                        },
                        "osd_objectstore": {
                          "description": "The type of object store used.",
                          "type": "string"
                        },
                        "pid": {
                          "description": "OSD process ID.",
                          "type": "integer"
                        },
                        "version": {
                          "description": "Ceph version of the OSD service.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/ceph/osd/{osdid}/lv-info": {
      "get": {
        "summary": "Get OSD volume details",
        "description": "Get OSD volume details",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "osdid",
            "in": "path",
            "description": "OSD ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "OSD device type",
            "required": false,
            "schema": {
              "type": "string",
              "default": "block",
              "enum": [
                "block",
                "db",
                "wal"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "creation_time": {
                      "description": "Creation time as reported by `lvs`.",
                      "type": "string"
                    },
                    "lv_name": {
                      "description": "Name of the logical volume (LV).",
                      "type": "string"
                    },
                    "lv_path": {
                      "description": "Path to the logical volume (LV).",
                      "type": "string"
                    },
                    "lv_size": {
                      "description": "Size of the logical volume (LV).",
                      "type": "integer"
                    },
                    "lv_uuid": {
                      "description": "UUID of the logical volume (LV).",
                      "type": "string"
                    },
                    "vg_name": {
                      "description": "Name of the volume group (VG).",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/ceph/osd/{osdid}/in": {
      "post": {
        "summary": "ceph osd in",
        "description": "ceph osd in",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "osdid",
            "in": "path",
            "description": "OSD ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/ceph/osd/{osdid}/out": {
      "post": {
        "summary": "ceph osd out",
        "description": "ceph osd out",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "osdid",
            "in": "path",
            "description": "OSD ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/ceph/osd/{osdid}/scrub": {
      "post": {
        "summary": "Instruct the OSD to scrub.",
        "description": "Instruct the OSD to scrub.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "deep",
            "in": "query",
            "description": "If set, instructs a deep scrub instead of a normal one.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "osdid",
            "in": "path",
            "description": "OSD ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/ceph/mds": {
      "get": {
        "summary": "MDS directory index.",
        "description": "MDS directory index.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "addr": {
                        "optional": 1,
                        "type": "string"
                      },
                      "host": {
                        "optional": 1,
                        "type": "string"
                      },
                      "name": {
                        "description": "The name (ID) for the MDS",
                        "type": "string"
                      },
                      "rank": {
                        "optional": 1,
                        "type": "integer"
                      },
                      "standby_replay": {
                        "description": "If true, the standby MDS is polling the active MDS for faster recovery (hot standby).",
                        "optional": 1,
                        "type": "boolean"
                      },
                      "state": {
                        "description": "State of the MDS",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{name}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/ceph/mds/{name}": {
      "delete": {
        "summary": "Destroy Ceph Metadata Server",
        "description": "Destroy Ceph Metadata Server",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "The name (ID) of the mds",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "[a-zA-Z0-9]([a-zA-Z0-9\\-]*[a-zA-Z0-9])?"
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create Ceph Metadata Server (MDS)",
        "description": "Create Ceph Metadata Server (MDS)",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "hotstandby",
            "in": "query",
            "description": "Determines whether a ceph-mds daemon should poll and replay the log of an active MDS. Faster switch on MDS failure, but needs more idle resources.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": "0"
            }
          },
          {
            "name": "name",
            "in": "path",
            "description": "The ID for the mds, when omitted the same as the nodename",
            "required": false,
            "schema": {
              "type": "string",
              "default": "nodename",
              "pattern": "[a-zA-Z0-9]([a-zA-Z0-9\\-]*[a-zA-Z0-9])?",
              "maxLength": 200
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/ceph/mgr": {
      "get": {
        "summary": "MGR directory index.",
        "description": "MGR directory index.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "addr": {
                        "optional": 1,
                        "type": "string"
                      },
                      "host": {
                        "optional": 1,
                        "type": "string"
                      },
                      "name": {
                        "description": "The name (ID) for the MGR",
                        "type": "string"
                      },
                      "state": {
                        "description": "State of the MGR",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{name}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/ceph/mgr/{id}": {
      "delete": {
        "summary": "Destroy Ceph Manager.",
        "description": "Destroy Ceph Manager.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the manager",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "[a-zA-Z0-9]([a-zA-Z0-9\\-]*[a-zA-Z0-9])?"
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create Ceph Manager",
        "description": "Create Ceph Manager",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID for the manager, when omitted the same as the nodename",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "[a-zA-Z0-9]([a-zA-Z0-9\\-]*[a-zA-Z0-9])?",
              "maxLength": 200
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/ceph/mon": {
      "get": {
        "summary": "Get Ceph monitor list.",
        "description": "Get Ceph monitor list.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "addr": {
                        "optional": 1,
                        "type": "string"
                      },
                      "ceph_version": {
                        "optional": 1,
                        "type": "string"
                      },
                      "ceph_version_short": {
                        "optional": 1,
                        "type": "string"
                      },
                      "direxists": {
                        "optional": 1,
                        "type": "string"
                      },
                      "host": {
                        "optional": 1,
                        "type": "boolean"
                      },
                      "name": {
                        "type": "string"
                      },
                      "quorum": {
                        "optional": 1,
                        "type": "boolean"
                      },
                      "rank": {
                        "optional": 1,
                        "type": "integer"
                      },
                      "service": {
                        "optional": 1,
                        "type": "integer"
                      },
                      "state": {
                        "optional": 1,
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{name}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/ceph/mon/{monid}": {
      "delete": {
        "summary": "Destroy Ceph Monitor and Manager.",
        "description": "Destroy Ceph Monitor and Manager.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "monid",
            "in": "path",
            "description": "Monitor ID",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "[a-zA-Z0-9]([a-zA-Z0-9\\-]*[a-zA-Z0-9])?"
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create Ceph Monitor and Manager",
        "description": "Create Ceph Monitor and Manager",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "mon-address",
            "in": "query",
            "description": "Overwrites autodetected monitor IP address(es). Must be in the public network(s) of Ceph.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "ip-list"
            }
          },
          {
            "name": "monid",
            "in": "path",
            "description": "The ID for the monitor, when omitted the same as the nodename",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "[a-zA-Z0-9]([a-zA-Z0-9\\-]*[a-zA-Z0-9])?",
              "maxLength": 200
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/ceph/fs": {
      "get": {
        "summary": "Directory index.",
        "description": "Directory index.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "data_pool": {
                        "description": "The name of the data pool.",
                        "type": "string"
                      },
                      "metadata_pool": {
                        "description": "The name of the metadata pool.",
                        "type": "string"
                      },
                      "name": {
                        "description": "The ceph filesystem name.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{name}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/ceph/fs/{name}": {
      "post": {
        "summary": "Create a Ceph filesystem",
        "description": "Create a Ceph filesystem",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "add-storage",
            "in": "query",
            "description": "Configure the created CephFS as storage for this cluster.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "name",
            "in": "path",
            "description": "The ceph filesystem name.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "cephfs",
              "pattern": "(?^:^[^:/\\s]+$)"
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "pg_num",
            "in": "query",
            "description": "Number of placement groups for the backing data pool. The metadata pool will use a quarter of this.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 128,
              "minimum": 8,
              "maximum": 32768
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/ceph/pool": {
      "get": {
        "summary": "List all pools and their settings (which are settable by the POST/PUT endpoints).",
        "description": "List all pools and their settings (which are settable by the POST/PUT endpoints).",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "application_metadata": {
                        "optional": 1,
                        "title": "Associated Applications",
                        "type": "object"
                      },
                      "autoscale_status": {
                        "optional": 1,
                        "title": "Autoscale Status",
                        "type": "object"
                      },
                      "bytes_used": {
                        "renderer": "bytes",
                        "title": "Used",
                        "type": "integer"
                      },
                      "crush_rule": {
                        "title": "Crush Rule",
                        "type": "integer"
                      },
                      "crush_rule_name": {
                        "title": "Crush Rule Name",
                        "type": "string"
                      },
                      "min_size": {
                        "title": "Min Size",
                        "type": "integer"
                      },
                      "percent_used": {
                        "title": "%-Used",
                        "type": "number"
                      },
                      "pg_autoscale_mode": {
                        "optional": 1,
                        "title": "PG Autoscale Mode",
                        "type": "string"
                      },
                      "pg_num": {
                        "title": "PG Num",
                        "type": "integer"
                      },
                      "pg_num_final": {
                        "optional": 1,
                        "title": "Optimal PG Num",
                        "type": "integer"
                      },
                      "pg_num_min": {
                        "optional": 1,
                        "title": "min. PG Num",
                        "type": "integer"
                      },
                      "pool": {
                        "title": "ID",
                        "type": "integer"
                      },
                      "pool_name": {
                        "title": "Name",
                        "type": "string"
                      },
                      "size": {
                        "title": "Size",
                        "type": "integer"
                      },
                      "target_size": {
                        "optional": 1,
                        "title": "PG Autoscale Target Size",
                        "type": "integer"
                      },
                      "target_size_ratio": {
                        "optional": 1,
                        "title": "PG Autoscale Target Ratio",
                        "type": "number"
                      },
                      "type": {
                        "enum": [
                          "replicated",
                          "erasure",
                          "unknown"
                        ],
                        "title": "Type",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{pool_name}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create Ceph pool",
        "description": "Create Ceph pool",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "add_storages",
            "in": "query",
            "description": "Configure VM and CT storage using the new pool.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": "0; for erasure coded pools: 1"
            }
          },
          {
            "name": "application",
            "in": "query",
            "description": "The application of the pool.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "rbd",
              "enum": [
                "rbd",
                "cephfs",
                "rgw"
              ]
            }
          },
          {
            "name": "crush_rule",
            "in": "query",
            "description": "The rule to use for mapping object placement in the cluster.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "erasure-coding",
            "in": "query",
            "description": "Create an erasure coded pool for RBD with an accompaning replicated pool for metadata storage. With EC, the common ceph options 'size', 'min_size' and 'crush_rule' parameters will be applied to the metadata pool.",
            "required": false,
            "schema": {
              "type": "string",
              "format": {
                "device-class": {
                  "description": "CRUSH device class. Will create an erasure coded pool plus a replicated pool for metadata.",
                  "format_description": "class",
                  "optional": 1,
                  "type": "string"
                },
                "failure-domain": {
                  "default": "host",
                  "description": "CRUSH failure domain. Default is 'host'. Will create an erasure coded pool plus a replicated pool for metadata.",
                  "format_description": "domain",
                  "optional": 1,
                  "type": "string"
                },
                "k": {
                  "description": "Number of data chunks. Will create an erasure coded pool plus a replicated pool for metadata.",
                  "minimum": 2,
                  "type": "integer"
                },
                "m": {
                  "description": "Number of coding chunks. Will create an erasure coded pool plus a replicated pool for metadata.",
                  "minimum": 1,
                  "type": "integer"
                },
                "profile": {
                  "description": "Override the erasure code (EC) profile to use. Will create an erasure coded pool plus a replicated pool for metadata.",
                  "format_description": "profile",
                  "optional": 1,
                  "type": "string"
                }
              }
            }
          },
          {
            "name": "min_size",
            "in": "query",
            "description": "Minimum number of replicas per object",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 2,
              "minimum": 1,
              "maximum": 7
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "The name of the pool. It must be unique.",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "(?^:^[^:/\\s]+$)"
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "pg_autoscale_mode",
            "in": "query",
            "description": "The automatic PG scaling mode of the pool.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "warn",
              "enum": [
                "on",
                "off",
                "warn"
              ]
            }
          },
          {
            "name": "pg_num",
            "in": "query",
            "description": "Number of placement groups.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 128,
              "minimum": 1,
              "maximum": 32768
            }
          },
          {
            "name": "pg_num_min",
            "in": "query",
            "description": "Minimal number of placement groups.",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 32768
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of replicas per object",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 3,
              "minimum": 1,
              "maximum": 7
            }
          },
          {
            "name": "target_size",
            "in": "query",
            "description": "The estimated target size of the pool for the PG autoscaler.",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "^(\\d+(\\.\\d+)?)([KMGT])?$"
            }
          },
          {
            "name": "target_size_ratio",
            "in": "query",
            "description": "The estimated target ratio of the pool for the PG autoscaler.",
            "required": false,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/ceph/pool/{name}": {
      "delete": {
        "summary": "Destroy pool",
        "description": "Destroy pool",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "force",
            "in": "query",
            "description": "If true, destroys pool even if in use",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "name",
            "in": "path",
            "description": "The name of the pool. It must be unique.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "remove_ecprofile",
            "in": "query",
            "description": "Remove the erasure code profile. Defaults to true, if applicable.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 1
            }
          },
          {
            "name": "remove_storages",
            "in": "query",
            "description": "Remove all pveceph-managed storages configured for this pool",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Pool index.",
        "description": "Pool index.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "The name of the pool.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {},
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{name}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Change POOL settings",
        "description": "Change POOL settings",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "application",
            "in": "query",
            "description": "The application of the pool.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "rbd",
                "cephfs",
                "rgw"
              ]
            }
          },
          {
            "name": "crush_rule",
            "in": "query",
            "description": "The rule to use for mapping object placement in the cluster.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "min_size",
            "in": "query",
            "description": "Minimum number of replicas per object",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 7
            }
          },
          {
            "name": "name",
            "in": "path",
            "description": "The name of the pool. It must be unique.",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "(?^:^[^:/\\s]+$)"
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "pg_autoscale_mode",
            "in": "query",
            "description": "The automatic PG scaling mode of the pool.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "on",
                "off",
                "warn"
              ]
            }
          },
          {
            "name": "pg_num",
            "in": "query",
            "description": "Number of placement groups.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 32768
            }
          },
          {
            "name": "pg_num_min",
            "in": "query",
            "description": "Minimal number of placement groups.",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 32768
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of replicas per object",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 7
            }
          },
          {
            "name": "target_size",
            "in": "query",
            "description": "The estimated target size of the pool for the PG autoscaler.",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "^(\\d+(\\.\\d+)?)([KMGT])?$"
            }
          },
          {
            "name": "target_size_ratio",
            "in": "query",
            "description": "The estimated target ratio of the pool for the PG autoscaler.",
            "required": false,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/ceph/pool/{name}/status": {
      "get": {
        "summary": "Show the current pool status.",
        "description": "Show the current pool status.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "The name of the pool. It must be unique.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "verbose",
            "in": "query",
            "description": "If enabled, will display additional data(eg. statistics).",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "application": {
                      "default": "rbd",
                      "description": "The application of the pool.",
                      "enum": [
                        "rbd",
                        "cephfs",
                        "rgw"
                      ],
                      "optional": 1,
                      "title": "Application",
                      "type": "string"
                    },
                    "application_list": {
                      "optional": 1,
                      "title": "Application",
                      "type": "array"
                    },
                    "autoscale_status": {
                      "optional": 1,
                      "title": "Autoscale Status",
                      "type": "object"
                    },
                    "crush_rule": {
                      "description": "The rule to use for mapping object placement in the cluster.",
                      "optional": 1,
                      "title": "Crush Rule Name",
                      "type": "string"
                    },
                    "fast_read": {
                      "title": "Fast Read",
                      "type": "boolean"
                    },
                    "hashpspool": {
                      "title": "hashpspool",
                      "type": "boolean"
                    },
                    "id": {
                      "title": "ID",
                      "type": "integer"
                    },
                    "min_size": {
                      "default": 2,
                      "description": "Minimum number of replicas per object",
                      "maximum": 7,
                      "minimum": 1,
                      "optional": 1,
                      "title": "Min Size",
                      "type": "integer"
                    },
                    "name": {
                      "description": "The name of the pool. It must be unique.",
                      "pattern": "(?^:^[^:/\\s]+$)",
                      "title": "Name",
                      "type": "string"
                    },
                    "nodeep-scrub": {
                      "title": "nodeep-scrub",
                      "type": "boolean"
                    },
                    "nodelete": {
                      "title": "nodelete",
                      "type": "boolean"
                    },
                    "nopgchange": {
                      "title": "nopgchange",
                      "type": "boolean"
                    },
                    "noscrub": {
                      "title": "noscrub",
                      "type": "boolean"
                    },
                    "nosizechange": {
                      "title": "nosizechange",
                      "type": "boolean"
                    },
                    "pg_autoscale_mode": {
                      "default": "warn",
                      "description": "The automatic PG scaling mode of the pool.",
                      "enum": [
                        "on",
                        "off",
                        "warn"
                      ],
                      "optional": 1,
                      "title": "PG Autoscale Mode",
                      "type": "string"
                    },
                    "pg_num": {
                      "default": 128,
                      "description": "Number of placement groups.",
                      "maximum": 32768,
                      "minimum": 1,
                      "optional": 1,
                      "title": "PG Num",
                      "type": "integer"
                    },
                    "pg_num_min": {
                      "description": "Minimal number of placement groups.",
                      "maximum": 32768,
                      "optional": 1,
                      "title": "min. PG Num",
                      "type": "integer"
                    },
                    "pgp_num": {
                      "title": "PGP num",
                      "type": "integer"
                    },
                    "size": {
                      "default": 3,
                      "description": "Number of replicas per object",
                      "maximum": 7,
                      "minimum": 1,
                      "optional": 1,
                      "title": "Size",
                      "type": "integer"
                    },
                    "statistics": {
                      "optional": 1,
                      "title": "Statistics",
                      "type": "object"
                    },
                    "target_size": {
                      "description": "The estimated target size of the pool for the PG autoscaler.",
                      "optional": 1,
                      "pattern": "^(\\d+(\\.\\d+)?)([KMGT])?$",
                      "title": "PG Autoscale Target Size",
                      "type": "string"
                    },
                    "target_size_ratio": {
                      "description": "The estimated target ratio of the pool for the PG autoscaler.",
                      "optional": 1,
                      "title": "PG Autoscale Target Ratio",
                      "type": "number"
                    },
                    "use_gmt_hitset": {
                      "title": "use_gmt_hitset",
                      "type": "boolean"
                    },
                    "write_fadvise_dontneed": {
                      "title": "write_fadvise_dontneed",
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/ceph/init": {
      "post": {
        "summary": "Create initial ceph default configuration and setup symlinks.",
        "description": "Create initial ceph default configuration and setup symlinks.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "cluster-network",
            "in": "query",
            "description": "Declare a separate cluster network, OSDs will routeheartbeat, object replication and recovery traffic over it",
            "required": false,
            "schema": {
              "type": "string",
              "format": "CIDR",
              "maxLength": 128
            }
          },
          {
            "name": "disable_cephx",
            "in": "query",
            "description": "Disable cephx authentication.\n\nWARNING: cephx is a security feature protecting against man-in-the-middle attacks. Only consider disabling cephx if your network is private!",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "min_size",
            "in": "query",
            "description": "Minimum number of available replicas per object to allow I/O",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 2,
              "minimum": 1,
              "maximum": 7
            }
          },
          {
            "name": "network",
            "in": "query",
            "description": "Use specific network for all ceph related traffic",
            "required": false,
            "schema": {
              "type": "string",
              "format": "CIDR",
              "maxLength": 128
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "pg_bits",
            "in": "query",
            "description": "Placement group bits, used to specify the default number of placement groups.\n\nDepreacted. This setting was deprecated in recent Ceph versions.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 6,
              "minimum": 6,
              "maximum": 14
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Targeted number of replicas per object",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 3,
              "minimum": 1,
              "maximum": 7
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/ceph/stop": {
      "post": {
        "summary": "Stop ceph services.",
        "description": "Stop ceph services.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "service",
            "in": "query",
            "description": "Ceph service name.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "ceph.target",
              "pattern": "(ceph|mon|mds|osd|mgr)(\\.[a-zA-Z0-9]([a-zA-Z0-9\\-]*[a-zA-Z0-9])?)?"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/ceph/start": {
      "post": {
        "summary": "Start ceph services.",
        "description": "Start ceph services.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "service",
            "in": "query",
            "description": "Ceph service name.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "ceph.target",
              "pattern": "(ceph|mon|mds|osd|mgr)(\\.[a-zA-Z0-9]([a-zA-Z0-9\\-]*[a-zA-Z0-9])?)?"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/ceph/restart": {
      "post": {
        "summary": "Restart ceph services.",
        "description": "Restart ceph services.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "service",
            "in": "query",
            "description": "Ceph service name.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "ceph.target",
              "pattern": "(mon|mds|osd|mgr)(\\.[a-zA-Z0-9]([a-zA-Z0-9\\-]*[a-zA-Z0-9])?)?"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/ceph/status": {
      "get": {
        "summary": "Get ceph status.",
        "description": "Get ceph status.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/ceph/crush": {
      "get": {
        "summary": "Get OSD crush map",
        "description": "Get OSD crush map",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/ceph/log": {
      "get": {
        "summary": "Read ceph log",
        "description": "Read ceph log",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "start",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "n": {
                        "description": "Line number",
                        "type": "integer"
                      },
                      "t": {
                        "description": "Line text",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/ceph/rules": {
      "get": {
        "summary": "List ceph rules.",
        "description": "List ceph rules.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "name": {
                        "description": "Name of the CRUSH rule.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{name}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/ceph/cmd-safety": {
      "get": {
        "summary": "Heuristical check if it is safe to perform an action.",
        "description": "Heuristical check if it is safe to perform an action.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "action",
            "in": "query",
            "description": "Action to check",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "stop",
                "destroy"
              ]
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "ID of the service",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "service",
            "in": "query",
            "description": "Service type",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "osd",
                "mon",
                "mds"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "safe": {
                      "description": "If it is safe to run the command.",
                      "type": "boolean"
                    },
                    "status": {
                      "description": "Status message given by Ceph.",
                      "optional": 1,
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/vzdump": {
      "post": {
        "summary": "Create backup.",
        "description": "Create backup.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "all",
            "in": "query",
            "description": "Backup all known guest systems on this host.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "bwlimit",
            "in": "query",
            "description": "Limit I/O bandwidth (in KiB/s).",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0,
              "minimum": 0
            }
          },
          {
            "name": "compress",
            "in": "query",
            "description": "Compress dump file.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "0",
              "enum": [
                "0",
                "1",
                "gzip",
                "lzo",
                "zstd"
              ]
            }
          },
          {
            "name": "dumpdir",
            "in": "query",
            "description": "Store resulting files to specified directory.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Exclude specified guest systems (assumes --all)",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-vmid-list"
            }
          },
          {
            "name": "exclude-path",
            "in": "query",
            "description": "Exclude certain files/directories (shell globs). Paths starting with '/' are anchored to the container's root, other paths match relative to each subdirectory.",
            "required": false,
            "schema": {
              "type": "array"
            }
          },
          {
            "name": "fleecing",
            "in": "query",
            "description": "Options for backup fleecing (VM only).",
            "required": false,
            "schema": {
              "type": "string",
              "format": "backup-fleecing"
            }
          },
          {
            "name": "ionice",
            "in": "query",
            "description": "Set IO priority when using the BFQ scheduler. For snapshot and suspend mode backups of VMs, this only affects the compressor. A value of 8 means the idle priority is used, otherwise the best-effort priority is used with the specified value.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 7,
              "minimum": 0,
              "maximum": 8
            }
          },
          {
            "name": "job-id",
            "in": "query",
            "description": "The ID of the backup job. If set, the 'backup-job' metadata field of the backup notification will be set to this value. Only root@pam can set this parameter.",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "\\S+",
              "maxLength": 50
            }
          },
          {
            "name": "lockwait",
            "in": "query",
            "description": "Maximal time to wait for the global lock (minutes).",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 180,
              "minimum": 0
            }
          },
          {
            "name": "mailnotification",
            "in": "query",
            "description": "Deprecated: use notification targets/matchers instead. Specify when to send a notification mail",
            "required": false,
            "schema": {
              "type": "string",
              "default": "always",
              "enum": [
                "always",
                "failure"
              ]
            }
          },
          {
            "name": "mailto",
            "in": "query",
            "description": "Deprecated: Use notification targets/matchers instead. Comma-separated list of email addresses or users that should receive email notifications.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "email-or-username-list"
            }
          },
          {
            "name": "maxfiles",
            "in": "query",
            "description": "Deprecated: use 'prune-backups' instead. Maximal number of backup files per guest system.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "mode",
            "in": "query",
            "description": "Backup mode.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "snapshot",
              "enum": [
                "snapshot",
                "suspend",
                "stop"
              ]
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "Only run if executed on this node.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "notes-template",
            "in": "query",
            "description": "Template string for generating notes for the backup(s). It can contain variables which will be replaced by their values. Currently supported are {{cluster}}, {{guestname}}, {{node}}, and {{vmid}}, but more might be added in the future. Needs to be a single line, newline and backslash need to be escaped as '\\n' and '\\\\' respectively.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 1024
            }
          },
          {
            "name": "notification-mode",
            "in": "query",
            "description": "Determine which notification system to use. If set to 'legacy-sendmail', vzdump will consider the mailto/mailnotification parameters and send emails to the specified address(es) via the 'sendmail' command. If set to 'notification-system', a notification will be sent via PVE's notification system, and the mailto and mailnotification will be ignored. If set to 'auto' (default setting), an email will be sent if mailto is set, and the notification system will be used if not.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "auto",
              "enum": [
                "auto",
                "legacy-sendmail",
                "notification-system"
              ]
            }
          },
          {
            "name": "pbs-change-detection-mode",
            "in": "query",
            "description": "PBS mode used to detect file changes and switch encoding format for container backups.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "legacy",
                "data",
                "metadata"
              ]
            }
          },
          {
            "name": "performance",
            "in": "query",
            "description": "Other performance-related settings.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "backup-performance"
            }
          },
          {
            "name": "pigz",
            "in": "query",
            "description": "Use pigz instead of gzip when N>0. N=1 uses half of cores, N>1 uses N as thread count.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "pool",
            "in": "query",
            "description": "Backup all known guest systems included in the specified pool.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "protected",
            "in": "query",
            "description": "If true, mark backup(s) as protected.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "prune-backups",
            "in": "query",
            "description": "Use these retention options instead of those from the storage configuration.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "keep-all=1",
              "format": "prune-backups"
            }
          },
          {
            "name": "quiet",
            "in": "query",
            "description": "Be quiet.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "remove",
            "in": "query",
            "description": "Prune older backups according to 'prune-backups'.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 1
            }
          },
          {
            "name": "script",
            "in": "query",
            "description": "Use specified hook script.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "stdexcludes",
            "in": "query",
            "description": "Exclude temporary files and logs.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 1
            }
          },
          {
            "name": "stdout",
            "in": "query",
            "description": "Write tar to stdout, not to a file.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "stop",
            "in": "query",
            "description": "Stop running backup jobs on this host.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "stopwait",
            "in": "query",
            "description": "Maximal time to wait until a guest system is stopped (minutes).",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 0
            }
          },
          {
            "name": "storage",
            "in": "query",
            "description": "Store resulting file to this storage.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-storage-id"
            }
          },
          {
            "name": "tmpdir",
            "in": "query",
            "description": "Store temporary files to specified directory.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "vmid",
            "in": "query",
            "description": "The ID of the guest system you want to backup.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-vmid-list"
            }
          },
          {
            "name": "zstd",
            "in": "query",
            "description": "Zstd threads. N=0 uses half of the available cores, if N is set to a value bigger than 0, N is used as thread count.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/vzdump/defaults": {
      "get": {
        "summary": "Get the currently configured vzdump defaults.",
        "description": "Get the currently configured vzdump defaults.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "storage",
            "in": "query",
            "description": "The storage identifier.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-storage-id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": 0,
                  "properties": {
                    "all": {
                      "default": 0,
                      "description": "Backup all known guest systems on this host.",
                      "optional": 1,
                      "type": "boolean"
                    },
                    "bwlimit": {
                      "default": 0,
                      "description": "Limit I/O bandwidth (in KiB/s).",
                      "minimum": 0,
                      "optional": 1,
                      "type": "integer"
                    },
                    "compress": {
                      "default": "0",
                      "description": "Compress dump file.",
                      "enum": [
                        "0",
                        "1",
                        "gzip",
                        "lzo",
                        "zstd"
                      ],
                      "optional": 1,
                      "type": "string"
                    },
                    "dumpdir": {
                      "description": "Store resulting files to specified directory.",
                      "optional": 1,
                      "type": "string"
                    },
                    "exclude": {
                      "description": "Exclude specified guest systems (assumes --all)",
                      "format": "pve-vmid-list",
                      "optional": 1,
                      "type": "string"
                    },
                    "exclude-path": {
                      "description": "Exclude certain files/directories (shell globs). Paths starting with '/' are anchored to the container's root, other paths match relative to each subdirectory.",
                      "items": {
                        "type": "string"
                      },
                      "optional": 1,
                      "type": "array"
                    },
                    "fleecing": {
                      "description": "Options for backup fleecing (VM only).",
                      "format": "backup-fleecing",
                      "optional": 1,
                      "type": "string"
                    },
                    "ionice": {
                      "default": 7,
                      "description": "Set IO priority when using the BFQ scheduler. For snapshot and suspend mode backups of VMs, this only affects the compressor. A value of 8 means the idle priority is used, otherwise the best-effort priority is used with the specified value.",
                      "maximum": 8,
                      "minimum": 0,
                      "optional": 1,
                      "type": "integer"
                    },
                    "lockwait": {
                      "default": 180,
                      "description": "Maximal time to wait for the global lock (minutes).",
                      "minimum": 0,
                      "optional": 1,
                      "type": "integer"
                    },
                    "mailnotification": {
                      "default": "always",
                      "description": "Deprecated: use notification targets/matchers instead. Specify when to send a notification mail",
                      "enum": [
                        "always",
                        "failure"
                      ],
                      "optional": 1,
                      "type": "string"
                    },
                    "mailto": {
                      "description": "Deprecated: Use notification targets/matchers instead. Comma-separated list of email addresses or users that should receive email notifications.",
                      "format": "email-or-username-list",
                      "optional": 1,
                      "type": "string"
                    },
                    "maxfiles": {
                      "description": "Deprecated: use 'prune-backups' instead. Maximal number of backup files per guest system.",
                      "minimum": 1,
                      "optional": 1,
                      "type": "integer"
                    },
                    "mode": {
                      "default": "snapshot",
                      "description": "Backup mode.",
                      "enum": [
                        "snapshot",
                        "suspend",
                        "stop"
                      ],
                      "optional": 1,
                      "type": "string"
                    },
                    "node": {
                      "description": "Only run if executed on this node.",
                      "format": "pve-node",
                      "optional": 1,
                      "type": "string"
                    },
                    "notes-template": {
                      "description": "Template string for generating notes for the backup(s). It can contain variables which will be replaced by their values. Currently supported are {{cluster}}, {{guestname}}, {{node}}, and {{vmid}}, but more might be added in the future. Needs to be a single line, newline and backslash need to be escaped as '\\n' and '\\\\' respectively.",
                      "maxLength": 1024,
                      "optional": 1,
                      "requires": "storage",
                      "type": "string"
                    },
                    "notification-mode": {
                      "default": "auto",
                      "description": "Determine which notification system to use. If set to 'legacy-sendmail', vzdump will consider the mailto/mailnotification parameters and send emails to the specified address(es) via the 'sendmail' command. If set to 'notification-system', a notification will be sent via PVE's notification system, and the mailto and mailnotification will be ignored. If set to 'auto' (default setting), an email will be sent if mailto is set, and the notification system will be used if not.",
                      "enum": [
                        "auto",
                        "legacy-sendmail",
                        "notification-system"
                      ],
                      "optional": 1,
                      "type": "string"
                    },
                    "pbs-change-detection-mode": {
                      "description": "PBS mode used to detect file changes and switch encoding format for container backups.",
                      "enum": [
                        "legacy",
                        "data",
                        "metadata"
                      ],
                      "optional": 1,
                      "type": "string"
                    },
                    "performance": {
                      "description": "Other performance-related settings.",
                      "format": "backup-performance",
                      "optional": 1,
                      "type": "string"
                    },
                    "pigz": {
                      "default": 0,
                      "description": "Use pigz instead of gzip when N>0. N=1 uses half of cores, N>1 uses N as thread count.",
                      "optional": 1,
                      "type": "integer"
                    },
                    "pool": {
                      "description": "Backup all known guest systems included in the specified pool.",
                      "optional": 1,
                      "type": "string"
                    },
                    "protected": {
                      "description": "If true, mark backup(s) as protected.",
                      "optional": 1,
                      "requires": "storage",
                      "type": "boolean"
                    },
                    "prune-backups": {
                      "default": "keep-all=1",
                      "description": "Use these retention options instead of those from the storage configuration.",
                      "format": "prune-backups",
                      "optional": 1,
                      "type": "string"
                    },
                    "quiet": {
                      "default": 0,
                      "description": "Be quiet.",
                      "optional": 1,
                      "type": "boolean"
                    },
                    "remove": {
                      "default": 1,
                      "description": "Prune older backups according to 'prune-backups'.",
                      "optional": 1,
                      "type": "boolean"
                    },
                    "script": {
                      "description": "Use specified hook script.",
                      "optional": 1,
                      "type": "string"
                    },
                    "stdexcludes": {
                      "default": 1,
                      "description": "Exclude temporary files and logs.",
                      "optional": 1,
                      "type": "boolean"
                    },
                    "stop": {
                      "default": 0,
                      "description": "Stop running backup jobs on this host.",
                      "optional": 1,
                      "type": "boolean"
                    },
                    "stopwait": {
                      "default": 10,
                      "description": "Maximal time to wait until a guest system is stopped (minutes).",
                      "minimum": 0,
                      "optional": 1,
                      "type": "integer"
                    },
                    "storage": {
                      "description": "Store resulting file to this storage.",
                      "format": "pve-storage-id",
                      "format_description": "storage ID",
                      "optional": 1,
                      "type": "string"
                    },
                    "tmpdir": {
                      "description": "Store temporary files to specified directory.",
                      "optional": 1,
                      "type": "string"
                    },
                    "vmid": {
                      "description": "The ID of the guest system you want to backup.",
                      "format": "pve-vmid-list",
                      "optional": 1,
                      "type": "string"
                    },
                    "zstd": {
                      "default": 1,
                      "description": "Zstd threads. N=0 uses half of the available cores, if N is set to a value bigger than 0, N is used as thread count.",
                      "optional": 1,
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/vzdump/extractconfig": {
      "get": {
        "summary": "Extract configuration from vzdump backup archive.",
        "description": "Extract configuration from vzdump backup archive.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "volume",
            "in": "query",
            "description": "Volume identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/services": {
      "get": {
        "summary": "Service list.",
        "description": "Service list.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {},
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{service}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/services/{service}": {
      "get": {
        "summary": "Directory index",
        "description": "Directory index",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "service",
            "in": "path",
            "description": "Service ID",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "chrony",
                "corosync",
                "cron",
                "ksmtuned",
                "lxcfs",
                "postfix",
                "proxmox-firewall",
                "pve-cluster",
                "pve-firewall",
                "pve-ha-crm",
                "pve-ha-lrm",
                "pve-lxc-syscalld",
                "pvedaemon",
                "pvefw-logger",
                "pveproxy",
                "pvescheduler",
                "pvestatd",
                "qmeventd",
                "spiceproxy",
                "sshd",
                "syslog",
                "systemd-journald",
                "systemd-timesyncd"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "subdir": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{subdir}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/services/{service}/state": {
      "get": {
        "summary": "Read service properties",
        "description": "Read service properties",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "service",
            "in": "path",
            "description": "Service ID",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "chrony",
                "corosync",
                "cron",
                "ksmtuned",
                "lxcfs",
                "postfix",
                "proxmox-firewall",
                "pve-cluster",
                "pve-firewall",
                "pve-ha-crm",
                "pve-ha-lrm",
                "pve-lxc-syscalld",
                "pvedaemon",
                "pvefw-logger",
                "pveproxy",
                "pvescheduler",
                "pvestatd",
                "qmeventd",
                "spiceproxy",
                "sshd",
                "syslog",
                "systemd-journald",
                "systemd-timesyncd"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/services/{service}/start": {
      "post": {
        "summary": "Start service.",
        "description": "Start service.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "service",
            "in": "path",
            "description": "Service ID",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "chrony",
                "corosync",
                "cron",
                "ksmtuned",
                "lxcfs",
                "postfix",
                "proxmox-firewall",
                "pve-cluster",
                "pve-firewall",
                "pve-ha-crm",
                "pve-ha-lrm",
                "pve-lxc-syscalld",
                "pvedaemon",
                "pvefw-logger",
                "pveproxy",
                "pvescheduler",
                "pvestatd",
                "qmeventd",
                "spiceproxy",
                "sshd",
                "syslog",
                "systemd-journald",
                "systemd-timesyncd"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/services/{service}/stop": {
      "post": {
        "summary": "Stop service.",
        "description": "Stop service.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "service",
            "in": "path",
            "description": "Service ID",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "chrony",
                "corosync",
                "cron",
                "ksmtuned",
                "lxcfs",
                "postfix",
                "proxmox-firewall",
                "pve-cluster",
                "pve-firewall",
                "pve-ha-crm",
                "pve-ha-lrm",
                "pve-lxc-syscalld",
                "pvedaemon",
                "pvefw-logger",
                "pveproxy",
                "pvescheduler",
                "pvestatd",
                "qmeventd",
                "spiceproxy",
                "sshd",
                "syslog",
                "systemd-journald",
                "systemd-timesyncd"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/services/{service}/restart": {
      "post": {
        "summary": "Hard restart service. Use reload if you want to reduce interruptions.",
        "description": "Hard restart service. Use reload if you want to reduce interruptions.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "service",
            "in": "path",
            "description": "Service ID",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "chrony",
                "corosync",
                "cron",
                "ksmtuned",
                "lxcfs",
                "postfix",
                "proxmox-firewall",
                "pve-cluster",
                "pve-firewall",
                "pve-ha-crm",
                "pve-ha-lrm",
                "pve-lxc-syscalld",
                "pvedaemon",
                "pvefw-logger",
                "pveproxy",
                "pvescheduler",
                "pvestatd",
                "qmeventd",
                "spiceproxy",
                "sshd",
                "syslog",
                "systemd-journald",
                "systemd-timesyncd"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/services/{service}/reload": {
      "post": {
        "summary": "Reload service. Falls back to restart if service cannot be reloaded.",
        "description": "Reload service. Falls back to restart if service cannot be reloaded.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "service",
            "in": "path",
            "description": "Service ID",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "chrony",
                "corosync",
                "cron",
                "ksmtuned",
                "lxcfs",
                "postfix",
                "proxmox-firewall",
                "pve-cluster",
                "pve-firewall",
                "pve-ha-crm",
                "pve-ha-lrm",
                "pve-lxc-syscalld",
                "pvedaemon",
                "pvefw-logger",
                "pveproxy",
                "pvescheduler",
                "pvestatd",
                "qmeventd",
                "spiceproxy",
                "sshd",
                "syslog",
                "systemd-journald",
                "systemd-timesyncd"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/subscription": {
      "delete": {
        "summary": "Delete subscription key of this node.",
        "description": "Delete subscription key of this node.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Read subscription info.",
        "description": "Read subscription info.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": 0,
                  "properties": {
                    "checktime": {
                      "description": "Timestamp of the last check done.",
                      "optional": 1,
                      "type": "integer"
                    },
                    "key": {
                      "description": "The subscription key, if set and permitted to access.",
                      "optional": 1,
                      "type": "string"
                    },
                    "level": {
                      "description": "A short code for the subscription level.",
                      "optional": 1,
                      "type": "string"
                    },
                    "message": {
                      "description": "A more human readable status message.",
                      "optional": 1,
                      "type": "string"
                    },
                    "nextduedate": {
                      "description": "Next due date of the set subscription.",
                      "optional": 1,
                      "type": "string"
                    },
                    "productname": {
                      "description": "Human readable productname of the set subscription.",
                      "optional": 1,
                      "type": "string"
                    },
                    "regdate": {
                      "description": "Register date of the set subscription.",
                      "optional": 1,
                      "type": "string"
                    },
                    "serverid": {
                      "description": "The server ID, if permitted to access.",
                      "optional": 1,
                      "type": "string"
                    },
                    "signature": {
                      "description": "Signature for offline keys",
                      "optional": 1,
                      "type": "string"
                    },
                    "sockets": {
                      "description": "The number of sockets for this host.",
                      "optional": 1,
                      "type": "integer"
                    },
                    "status": {
                      "description": "The current subscription status.",
                      "enum": [
                        "new",
                        "notfound",
                        "active",
                        "invalid",
                        "expired",
                        "suspended"
                      ],
                      "type": "string"
                    },
                    "url": {
                      "description": "URL to the web shop.",
                      "optional": 1,
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Update subscription info.",
        "description": "Update subscription info.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "force",
            "in": "query",
            "description": "Always connect to server, even if local cache is still valid.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Set subscription key.",
        "description": "Set subscription key.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "Proxmox VE subscription key",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "\\s*pve([1248])([cbsp])-[0-9a-f]{10}\\s*",
              "maxLength": 32
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/network": {
      "delete": {
        "summary": "Revert network configuration changes.",
        "description": "Revert network configuration changes.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "List available networks",
        "description": "List available networks",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Only list specific interface types.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "bridge",
                "bond",
                "eth",
                "alias",
                "vlan",
                "fabric",
                "OVSBridge",
                "OVSBond",
                "OVSPort",
                "OVSIntPort",
                "vnet",
                "any_bridge",
                "any_local_bridge",
                "include_sdn"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "active": {
                        "description": "Set to true if the interface is active.",
                        "optional": 1,
                        "type": "boolean"
                      },
                      "address": {
                        "description": "IP address.",
                        "format": "ipv4",
                        "optional": 1,
                        "requires": "netmask",
                        "type": "string"
                      },
                      "address6": {
                        "description": "IP address.",
                        "format": "ipv6",
                        "optional": 1,
                        "requires": "netmask6",
                        "type": "string"
                      },
                      "autostart": {
                        "description": "Automatically start interface on boot.",
                        "optional": 1,
                        "type": "boolean"
                      },
                      "bond-primary": {
                        "description": "Specify the primary interface for active-backup bond.",
                        "format": "pve-iface",
                        "optional": 1,
                        "type": "string"
                      },
                      "bond_mode": {
                        "description": "Bonding mode.",
                        "enum": [
                          "balance-rr",
                          "active-backup",
                          "balance-xor",
                          "broadcast",
                          "802.3ad",
                          "balance-tlb",
                          "balance-alb",
                          "balance-slb",
                          "lacp-balance-slb",
                          "lacp-balance-tcp"
                        ],
                        "optional": 1,
                        "type": "string"
                      },
                      "bond_xmit_hash_policy": {
                        "description": "Selects the transmit hash policy to use for slave selection in balance-xor and 802.3ad modes.",
                        "enum": [
                          "layer2",
                          "layer2+3",
                          "layer3+4"
                        ],
                        "optional": 1,
                        "type": "string"
                      },
                      "bridge-access": {
                        "description": "The bridge port access VLAN.",
                        "optional": 1,
                        "type": "integer"
                      },
                      "bridge-arp-nd-suppress": {
                        "description": "Bridge port ARP/ND suppress flag.",
                        "optional": 1,
                        "type": "boolean"
                      },
                      "bridge-learning": {
                        "description": "Bridge port learning flag.",
                        "optional": 1,
                        "type": "boolean"
                      },
                      "bridge-multicast-flood": {
                        "description": "Bridge port multicast flood flag.",
                        "optional": 1,
                        "type": "boolean"
                      },
                      "bridge-unicast-flood": {
                        "description": "Bridge port unicast flood flag.",
                        "optional": 1,
                        "type": "boolean"
                      },
                      "bridge_ports": {
                        "description": "Specify the interfaces you want to add to your bridge.",
                        "format": "pve-iface-list",
                        "optional": 1,
                        "type": "string"
                      },
                      "bridge_vids": {
                        "description": "Specify the allowed VLANs. For example: '2 4 100-200'. Only used if the bridge is VLAN aware.",
                        "format": "pve-vlan-id-or-range-list",
                        "optional": 1,
                        "type": "string"
                      },
                      "bridge_vlan_aware": {
                        "description": "Enable bridge vlan support.",
                        "optional": 1,
                        "type": "boolean"
                      },
                      "cidr": {
                        "description": "IPv4 CIDR.",
                        "format": "CIDRv4",
                        "optional": 1,
                        "type": "string"
                      },
                      "cidr6": {
                        "description": "IPv6 CIDR.",
                        "format": "CIDRv6",
                        "optional": 1,
                        "type": "string"
                      },
                      "comments": {
                        "description": "Comments",
                        "optional": 1,
                        "type": "string"
                      },
                      "comments6": {
                        "description": "Comments",
                        "optional": 1,
                        "type": "string"
                      },
                      "exists": {
                        "description": "Set to true if the interface physically exists.",
                        "optional": 1,
                        "type": "boolean"
                      },
                      "families": {
                        "description": "The network families.",
                        "items": {
                          "description": "A network family.",
                          "enum": [
                            "inet",
                            "inet6"
                          ],
                          "type": "string"
                        },
                        "optional": 1,
                        "type": "array"
                      },
                      "gateway": {
                        "description": "Default gateway address.",
                        "format": "ipv4",
                        "optional": 1,
                        "type": "string"
                      },
                      "gateway6": {
                        "description": "Default ipv6 gateway address.",
                        "format": "ipv6",
                        "optional": 1,
                        "type": "string"
                      },
                      "iface": {
                        "description": "Network interface name.",
                        "format": "pve-iface",
                        "maxLength": 20,
                        "minLength": 2,
                        "type": "string"
                      },
                      "link-type": {
                        "description": "The link type.",
                        "optional": 1,
                        "type": "string"
                      },
                      "method": {
                        "description": "The network configuration method for IPv4.",
                        "enum": [
                          "loopback",
                          "dhcp",
                          "manual",
                          "static",
                          "auto"
                        ],
                        "optional": 1,
                        "type": "string"
                      },
                      "method6": {
                        "description": "The network configuration method for IPv6.",
                        "enum": [
                          "loopback",
                          "dhcp",
                          "manual",
                          "static",
                          "auto"
                        ],
                        "optional": 1,
                        "type": "string"
                      },
                      "mtu": {
                        "description": "MTU.",
                        "maximum": 65520,
                        "minimum": 1280,
                        "optional": 1,
                        "type": "integer"
                      },
                      "netmask": {
                        "description": "Network mask.",
                        "format": "ipv4mask",
                        "optional": 1,
                        "requires": "address",
                        "type": "string"
                      },
                      "netmask6": {
                        "description": "Network mask.",
                        "maximum": 128,
                        "minimum": 0,
                        "optional": 1,
                        "requires": "address6",
                        "type": "integer"
                      },
                      "options": {
                        "description": "A list of additional interface options for IPv4.",
                        "items": {
                          "description": "An interface property.",
                          "type": "string"
                        },
                        "optional": 1,
                        "type": "array"
                      },
                      "options6": {
                        "description": "A list of additional interface options for IPv6.",
                        "items": {
                          "description": "An interface property.",
                          "type": "string"
                        },
                        "optional": 1,
                        "type": "array"
                      },
                      "ovs_bonds": {
                        "description": "Specify the interfaces used by the bonding device.",
                        "format": "pve-iface-list",
                        "optional": 1,
                        "type": "string"
                      },
                      "ovs_bridge": {
                        "description": "The OVS bridge associated with a OVS port. This is required when you create an OVS port.",
                        "format": "pve-iface",
                        "optional": 1,
                        "type": "string"
                      },
                      "ovs_options": {
                        "description": "OVS interface options.",
                        "maxLength": 1024,
                        "optional": 1,
                        "type": "string"
                      },
                      "ovs_ports": {
                        "description": "Specify the interfaces you want to add to your bridge.",
                        "format": "pve-iface-list",
                        "optional": 1,
                        "type": "string"
                      },
                      "ovs_tag": {
                        "description": "Specify a VLan tag (used by OVSPort, OVSIntPort, OVSBond)",
                        "maximum": 4094,
                        "minimum": 1,
                        "optional": 1,
                        "type": "integer"
                      },
                      "priority": {
                        "description": "The order of the interface.",
                        "optional": 1,
                        "type": "integer"
                      },
                      "slaves": {
                        "description": "Specify the interfaces used by the bonding device.",
                        "format": "pve-iface-list",
                        "optional": 1,
                        "type": "string"
                      },
                      "type": {
                        "description": "Network interface type",
                        "enum": [
                          "bridge",
                          "bond",
                          "eth",
                          "alias",
                          "vlan",
                          "fabric",
                          "OVSBridge",
                          "OVSBond",
                          "OVSPort",
                          "OVSIntPort",
                          "vnet",
                          "unknown"
                        ],
                        "type": "string"
                      },
                      "uplink-id": {
                        "description": "The uplink ID.",
                        "optional": 1,
                        "type": "string"
                      },
                      "vlan-id": {
                        "description": "vlan-id for a custom named vlan interface (ifupdown2 only).",
                        "maximum": 4094,
                        "minimum": 1,
                        "optional": 1,
                        "type": "integer"
                      },
                      "vlan-protocol": {
                        "description": "The VLAN protocol.",
                        "enum": [
                          "802.1ad",
                          "802.1q"
                        ],
                        "optional": 1,
                        "type": "string"
                      },
                      "vlan-raw-device": {
                        "description": "Specify the raw interface for the vlan interface.",
                        "format": "pve-iface",
                        "optional": 1,
                        "type": "string"
                      },
                      "vxlan-id": {
                        "description": "The VXLAN ID.",
                        "optional": 1,
                        "type": "integer"
                      },
                      "vxlan-local-tunnelip": {
                        "description": "The VXLAN local tunnel IP.",
                        "optional": 1,
                        "type": "string"
                      },
                      "vxlan-physdev": {
                        "description": "The physical device for the VXLAN tunnel.",
                        "optional": 1,
                        "type": "string"
                      },
                      "vxlan-svcnodeip": {
                        "description": "The VXLAN SVC node IP.",
                        "optional": 1,
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{iface}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create network device configuration",
        "description": "Create network device configuration",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "address",
            "in": "query",
            "description": "IP address.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "ipv4"
            }
          },
          {
            "name": "address6",
            "in": "query",
            "description": "IP address.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "ipv6"
            }
          },
          {
            "name": "autostart",
            "in": "query",
            "description": "Automatically start interface on boot.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "bond-primary",
            "in": "query",
            "description": "Specify the primary interface for active-backup bond.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-iface"
            }
          },
          {
            "name": "bond_mode",
            "in": "query",
            "description": "Bonding mode.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "balance-rr",
                "active-backup",
                "balance-xor",
                "broadcast",
                "802.3ad",
                "balance-tlb",
                "balance-alb",
                "balance-slb",
                "lacp-balance-slb",
                "lacp-balance-tcp"
              ]
            }
          },
          {
            "name": "bond_xmit_hash_policy",
            "in": "query",
            "description": "Selects the transmit hash policy to use for slave selection in balance-xor and 802.3ad modes.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "layer2",
                "layer2+3",
                "layer3+4"
              ]
            }
          },
          {
            "name": "bridge_ports",
            "in": "query",
            "description": "Specify the interfaces you want to add to your bridge.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-iface-list"
            }
          },
          {
            "name": "bridge_vids",
            "in": "query",
            "description": "Specify the allowed VLANs. For example: '2 4 100-200'. Only used if the bridge is VLAN aware.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-vlan-id-or-range-list"
            }
          },
          {
            "name": "bridge_vlan_aware",
            "in": "query",
            "description": "Enable bridge vlan support.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "cidr",
            "in": "query",
            "description": "IPv4 CIDR.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "CIDRv4"
            }
          },
          {
            "name": "cidr6",
            "in": "query",
            "description": "IPv6 CIDR.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "CIDRv6"
            }
          },
          {
            "name": "comments",
            "in": "query",
            "description": "Comments",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "comments6",
            "in": "query",
            "description": "Comments",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "gateway",
            "in": "query",
            "description": "Default gateway address.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "ipv4"
            }
          },
          {
            "name": "gateway6",
            "in": "query",
            "description": "Default ipv6 gateway address.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "ipv6"
            }
          },
          {
            "name": "iface",
            "in": "query",
            "description": "Network interface name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-iface",
              "maxLength": 20
            }
          },
          {
            "name": "mtu",
            "in": "query",
            "description": "MTU.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1280,
              "maximum": 65520
            }
          },
          {
            "name": "netmask",
            "in": "query",
            "description": "Network mask.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "ipv4mask"
            }
          },
          {
            "name": "netmask6",
            "in": "query",
            "description": "Network mask.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "maximum": 128
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "ovs_bonds",
            "in": "query",
            "description": "Specify the interfaces used by the bonding device.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-iface-list"
            }
          },
          {
            "name": "ovs_bridge",
            "in": "query",
            "description": "The OVS bridge associated with a OVS port. This is required when you create an OVS port.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-iface"
            }
          },
          {
            "name": "ovs_options",
            "in": "query",
            "description": "OVS interface options.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 1024
            }
          },
          {
            "name": "ovs_ports",
            "in": "query",
            "description": "Specify the interfaces you want to add to your bridge.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-iface-list"
            }
          },
          {
            "name": "ovs_tag",
            "in": "query",
            "description": "Specify a VLan tag (used by OVSPort, OVSIntPort, OVSBond)",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 4094
            }
          },
          {
            "name": "slaves",
            "in": "query",
            "description": "Specify the interfaces used by the bonding device.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-iface-list"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Network interface type",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "bridge",
                "bond",
                "eth",
                "alias",
                "vlan",
                "fabric",
                "OVSBridge",
                "OVSBond",
                "OVSPort",
                "OVSIntPort",
                "vnet",
                "unknown"
              ]
            }
          },
          {
            "name": "vlan-id",
            "in": "query",
            "description": "vlan-id for a custom named vlan interface (ifupdown2 only).",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 4094
            }
          },
          {
            "name": "vlan-raw-device",
            "in": "query",
            "description": "Specify the raw interface for the vlan interface.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-iface"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Reload network configuration",
        "description": "Reload network configuration",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "regenerate-frr",
            "in": "query",
            "description": "Whether FRR config generation should get skipped or not.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/network/{iface}": {
      "delete": {
        "summary": "Delete network device configuration",
        "description": "Delete network device configuration",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "iface",
            "in": "path",
            "description": "Network interface name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-iface",
              "maxLength": 20
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Read network device configuration",
        "description": "Read network device configuration",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "iface",
            "in": "path",
            "description": "Network interface name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-iface",
              "maxLength": 20
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "method": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update network device configuration",
        "description": "Update network device configuration",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "address",
            "in": "query",
            "description": "IP address.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "ipv4"
            }
          },
          {
            "name": "address6",
            "in": "query",
            "description": "IP address.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "ipv6"
            }
          },
          {
            "name": "autostart",
            "in": "query",
            "description": "Automatically start interface on boot.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "bond-primary",
            "in": "query",
            "description": "Specify the primary interface for active-backup bond.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-iface"
            }
          },
          {
            "name": "bond_mode",
            "in": "query",
            "description": "Bonding mode.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "balance-rr",
                "active-backup",
                "balance-xor",
                "broadcast",
                "802.3ad",
                "balance-tlb",
                "balance-alb",
                "balance-slb",
                "lacp-balance-slb",
                "lacp-balance-tcp"
              ]
            }
          },
          {
            "name": "bond_xmit_hash_policy",
            "in": "query",
            "description": "Selects the transmit hash policy to use for slave selection in balance-xor and 802.3ad modes.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "layer2",
                "layer2+3",
                "layer3+4"
              ]
            }
          },
          {
            "name": "bridge_ports",
            "in": "query",
            "description": "Specify the interfaces you want to add to your bridge.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-iface-list"
            }
          },
          {
            "name": "bridge_vids",
            "in": "query",
            "description": "Specify the allowed VLANs. For example: '2 4 100-200'. Only used if the bridge is VLAN aware.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-vlan-id-or-range-list"
            }
          },
          {
            "name": "bridge_vlan_aware",
            "in": "query",
            "description": "Enable bridge vlan support.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "cidr",
            "in": "query",
            "description": "IPv4 CIDR.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "CIDRv4"
            }
          },
          {
            "name": "cidr6",
            "in": "query",
            "description": "IPv6 CIDR.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "CIDRv6"
            }
          },
          {
            "name": "comments",
            "in": "query",
            "description": "Comments",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "comments6",
            "in": "query",
            "description": "Comments",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "delete",
            "in": "query",
            "description": "A list of settings you want to delete.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-configid-list"
            }
          },
          {
            "name": "gateway",
            "in": "query",
            "description": "Default gateway address.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "ipv4"
            }
          },
          {
            "name": "gateway6",
            "in": "query",
            "description": "Default ipv6 gateway address.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "ipv6"
            }
          },
          {
            "name": "iface",
            "in": "path",
            "description": "Network interface name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-iface",
              "maxLength": 20
            }
          },
          {
            "name": "mtu",
            "in": "query",
            "description": "MTU.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1280,
              "maximum": 65520
            }
          },
          {
            "name": "netmask",
            "in": "query",
            "description": "Network mask.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "ipv4mask"
            }
          },
          {
            "name": "netmask6",
            "in": "query",
            "description": "Network mask.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "maximum": 128
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "ovs_bonds",
            "in": "query",
            "description": "Specify the interfaces used by the bonding device.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-iface-list"
            }
          },
          {
            "name": "ovs_bridge",
            "in": "query",
            "description": "The OVS bridge associated with a OVS port. This is required when you create an OVS port.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-iface"
            }
          },
          {
            "name": "ovs_options",
            "in": "query",
            "description": "OVS interface options.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 1024
            }
          },
          {
            "name": "ovs_ports",
            "in": "query",
            "description": "Specify the interfaces you want to add to your bridge.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-iface-list"
            }
          },
          {
            "name": "ovs_tag",
            "in": "query",
            "description": "Specify a VLan tag (used by OVSPort, OVSIntPort, OVSBond)",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 4094
            }
          },
          {
            "name": "slaves",
            "in": "query",
            "description": "Specify the interfaces used by the bonding device.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-iface-list"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Network interface type",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "bridge",
                "bond",
                "eth",
                "alias",
                "vlan",
                "fabric",
                "OVSBridge",
                "OVSBond",
                "OVSPort",
                "OVSIntPort",
                "vnet",
                "unknown"
              ]
            }
          },
          {
            "name": "vlan-id",
            "in": "query",
            "description": "vlan-id for a custom named vlan interface (ifupdown2 only).",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 4094
            }
          },
          {
            "name": "vlan-raw-device",
            "in": "query",
            "description": "Specify the raw interface for the vlan interface.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-iface"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/tasks": {
      "get": {
        "summary": "Read task list for one node (finished tasks).",
        "description": "Read task list for one node (finished tasks).",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "errors",
            "in": "query",
            "description": "Only list tasks with a status of ERROR.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Only list this number of tasks.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 50,
              "minimum": 0
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "since",
            "in": "query",
            "description": "Only list tasks since this UNIX epoch.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "source",
            "in": "query",
            "description": "List archived, active or all tasks.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "archive",
              "enum": [
                "archive",
                "active",
                "all"
              ]
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "List tasks beginning from this offset.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0,
              "minimum": 0
            }
          },
          {
            "name": "statusfilter",
            "in": "query",
            "description": "List of Task States that should be returned.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-task-status-type-list"
            }
          },
          {
            "name": "typefilter",
            "in": "query",
            "description": "Only list tasks of this type (e.g., vzstart, vzdump).",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "until",
            "in": "query",
            "description": "Only list tasks until this UNIX epoch.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "userfilter",
            "in": "query",
            "description": "Only list tasks from this user.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "vmid",
            "in": "query",
            "description": "Only list tasks for this VM.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "endtime": {
                        "optional": 1,
                        "title": "Endtime",
                        "type": "integer"
                      },
                      "id": {
                        "title": "ID",
                        "type": "string"
                      },
                      "node": {
                        "title": "Node",
                        "type": "string"
                      },
                      "pid": {
                        "title": "PID",
                        "type": "integer"
                      },
                      "pstart": {
                        "type": "integer"
                      },
                      "starttime": {
                        "title": "Starttime",
                        "type": "integer"
                      },
                      "status": {
                        "optional": 1,
                        "title": "Status",
                        "type": "string"
                      },
                      "type": {
                        "title": "Type",
                        "type": "string"
                      },
                      "upid": {
                        "title": "UPID",
                        "type": "string"
                      },
                      "user": {
                        "title": "User",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{upid}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/tasks/{upid}": {
      "delete": {
        "summary": "Stop a task.",
        "description": "Stop a task.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "upid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "",
        "description": "",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "upid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {},
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{name}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/tasks/{upid}/log": {
      "get": {
        "summary": "Read task log.",
        "description": "Read task log.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "download",
            "in": "query",
            "description": "Whether the tasklog file should be downloaded. This parameter can't be used in conjunction with other parameters",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The number of lines to read from the tasklog.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 50,
              "minimum": 0
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "Start at this line when reading the tasklog",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0,
              "minimum": 0
            }
          },
          {
            "name": "upid",
            "in": "path",
            "description": "The task's unique ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "n": {
                        "description": "Line number",
                        "type": "integer"
                      },
                      "t": {
                        "description": "Line text",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/tasks/{upid}/status": {
      "get": {
        "summary": "Read task status.",
        "description": "Read task status.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "upid",
            "in": "path",
            "description": "The task's unique ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "exitstatus": {
                      "optional": 1,
                      "type": "string"
                    },
                    "id": {
                      "type": "string"
                    },
                    "node": {
                      "type": "string"
                    },
                    "pid": {
                      "type": "integer"
                    },
                    "pstart": {
                      "type": "integer"
                    },
                    "starttime": {
                      "type": "integer"
                    },
                    "status": {
                      "enum": [
                        "running",
                        "stopped"
                      ],
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "upid": {
                      "type": "string"
                    },
                    "user": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/scan": {
      "get": {
        "summary": "Index of available scan methods",
        "description": "Index of available scan methods",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "method": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{method}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/scan/nfs": {
      "get": {
        "summary": "Scan remote NFS server.",
        "description": "Scan remote NFS server.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "server",
            "in": "query",
            "description": "The server address (name or IP).",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-storage-server"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "options": {
                        "description": "NFS export options.",
                        "type": "string"
                      },
                      "path": {
                        "description": "The exported path.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/scan/cifs": {
      "get": {
        "summary": "Scan remote CIFS server.",
        "description": "Scan remote CIFS server.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "domain",
            "in": "query",
            "description": "SMB domain (Workgroup).",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "User password.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "server",
            "in": "query",
            "description": "The server address (name or IP).",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-storage-server"
            }
          },
          {
            "name": "username",
            "in": "query",
            "description": "User name.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "description": {
                        "description": "Descriptive text from server.",
                        "type": "string"
                      },
                      "share": {
                        "description": "The cifs share name.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/scan/pbs": {
      "get": {
        "summary": "Scan remote Proxmox Backup Server.",
        "description": "Scan remote Proxmox Backup Server.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "fingerprint",
            "in": "query",
            "description": "Certificate SHA 256 fingerprint.",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "([A-Fa-f0-9]{2}:){31}[A-Fa-f0-9]{2}"
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "User password or API token secret.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "port",
            "in": "query",
            "description": "Optional port.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 8007,
              "minimum": 1,
              "maximum": 65535
            }
          },
          {
            "name": "server",
            "in": "query",
            "description": "The server address (name or IP).",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-storage-server"
            }
          },
          {
            "name": "username",
            "in": "query",
            "description": "User-name or API token-ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "comment": {
                        "description": "Comment from server.",
                        "optional": 1,
                        "type": "string"
                      },
                      "store": {
                        "description": "The datastore name.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/scan/iscsi": {
      "get": {
        "summary": "Scan remote iSCSI server.",
        "description": "Scan remote iSCSI server.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "portal",
            "in": "query",
            "description": "The iSCSI portal (IP or DNS name with optional port).",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-storage-portal-dns"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "portal": {
                        "description": "The iSCSI portal name.",
                        "type": "string"
                      },
                      "target": {
                        "description": "The iSCSI target name.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/scan/lvm": {
      "get": {
        "summary": "List local LVM volume groups.",
        "description": "List local LVM volume groups.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "vg": {
                        "description": "The LVM logical volume group name.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/scan/lvmthin": {
      "get": {
        "summary": "List local LVM Thin Pools.",
        "description": "List local LVM Thin Pools.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "vg",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "[a-zA-Z0-9\\.\\+\\_][a-zA-Z0-9\\.\\+\\_\\-]+",
              "maxLength": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "lv": {
                        "description": "The LVM Thin Pool name (LVM logical volume).",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/scan/zfs": {
      "get": {
        "summary": "Scan zfs pool list on local node.",
        "description": "Scan zfs pool list on local node.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "pool": {
                        "description": "ZFS pool name.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/hardware": {
      "get": {
        "summary": "Index of hardware types",
        "description": "Index of hardware types",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "type": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{type}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/hardware/pci": {
      "get": {
        "summary": "List local PCI devices.",
        "description": "List local PCI devices.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "pci-class-blacklist",
            "in": "query",
            "description": "A list of blacklisted PCI classes, which will not be returned. Following are filtered by default: Memory Controller (05), Bridge (06) and Processor (0b).",
            "required": false,
            "schema": {
              "type": "string",
              "default": "05;06;0b",
              "format": "string-list"
            }
          },
          {
            "name": "verbose",
            "in": "query",
            "description": "If disabled, does only print the PCI IDs. Otherwise, additional information like vendor and device will be returned.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "class": {
                        "description": "The PCI Class of the device.",
                        "type": "string"
                      },
                      "device": {
                        "description": "The Device ID.",
                        "type": "string"
                      },
                      "device_name": {
                        "optional": 1,
                        "type": "string"
                      },
                      "id": {
                        "description": "The PCI ID.",
                        "type": "string"
                      },
                      "iommugroup": {
                        "description": "The IOMMU group in which the device is in. If no IOMMU group is detected, it is set to -1.",
                        "type": "integer"
                      },
                      "mdev": {
                        "description": "If set, marks that the device is capable of creating mediated devices.",
                        "optional": 1,
                        "type": "boolean"
                      },
                      "subsystem_device": {
                        "description": "The Subsystem Device ID.",
                        "optional": 1,
                        "type": "string"
                      },
                      "subsystem_device_name": {
                        "optional": 1,
                        "type": "string"
                      },
                      "subsystem_vendor": {
                        "description": "The Subsystem Vendor ID.",
                        "optional": 1,
                        "type": "string"
                      },
                      "subsystem_vendor_name": {
                        "optional": 1,
                        "type": "string"
                      },
                      "vendor": {
                        "description": "The Vendor ID.",
                        "type": "string"
                      },
                      "vendor_name": {
                        "optional": 1,
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{id}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/hardware/pci/{pci-id-or-mapping}": {
      "get": {
        "summary": "Index of available pci methods",
        "description": "Index of available pci methods",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "pci-id-or-mapping",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "(?:(?:[0-9a-fA-F]{4}:)?[0-9a-fA-F]{2}:[0-9a-fA-F]{2}\\.[0-9a-fA-F])|([a-zA-Z][a-zA-Z0-9_-]+)"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "method": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{method}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/hardware/pci/{pci-id-or-mapping}/mdev": {
      "get": {
        "summary": "List mediated device types for given PCI device.",
        "description": "List mediated device types for given PCI device.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "pci-id-or-mapping",
            "in": "path",
            "description": "The PCI ID or mapping to list the mdev types for.",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "(?:(?:[0-9a-fA-F]{4}:)?[0-9a-fA-F]{2}:[0-9a-fA-F]{2}\\.[0-9a-fA-F])|([a-zA-Z][a-zA-Z0-9_-]+)"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "available": {
                        "description": "The number of still available instances of this type.",
                        "type": "integer"
                      },
                      "description": {
                        "description": "Additional description of the type.",
                        "type": "string"
                      },
                      "name": {
                        "description": "A human readable name for the type.",
                        "optional": 1,
                        "type": "string"
                      },
                      "type": {
                        "description": "The name of the mdev type.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/hardware/usb": {
      "get": {
        "summary": "List local USB devices.",
        "description": "List local USB devices.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "busnum": {
                        "type": "integer"
                      },
                      "class": {
                        "type": "integer"
                      },
                      "devnum": {
                        "type": "integer"
                      },
                      "level": {
                        "type": "integer"
                      },
                      "manufacturer": {
                        "optional": 1,
                        "type": "string"
                      },
                      "port": {
                        "type": "integer"
                      },
                      "prodid": {
                        "type": "string"
                      },
                      "product": {
                        "optional": 1,
                        "type": "string"
                      },
                      "serial": {
                        "optional": 1,
                        "type": "string"
                      },
                      "speed": {
                        "type": "string"
                      },
                      "usbpath": {
                        "optional": 1,
                        "type": "string"
                      },
                      "vendid": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/capabilities": {
      "get": {
        "summary": "Node capabilities index.",
        "description": "Node capabilities index.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {},
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{name}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/capabilities/qemu": {
      "get": {
        "summary": "QEMU capabilities index.",
        "description": "QEMU capabilities index.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {},
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{name}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/capabilities/qemu/cpu": {
      "get": {
        "summary": "List all custom and default CPU models.",
        "description": "List all custom and default CPU models.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "custom": {
                        "description": "True if this is a custom CPU model.",
                        "type": "boolean"
                      },
                      "name": {
                        "description": "Name of the CPU model. Identifies it for subsequent API calls. Prefixed with 'custom-' for custom models.",
                        "type": "string"
                      },
                      "vendor": {
                        "description": "CPU vendor visible to the guest when this model is selected. Vendor of 'reported-model' in case of custom models.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{name}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/capabilities/qemu/machines": {
      "get": {
        "summary": "Get available QEMU/KVM machine types.",
        "description": "Get available QEMU/KVM machine types.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "additionalProperties": 1,
                    "properties": {
                      "changes": {
                        "description": "Notable changes of a version, currently only set for +pveX versions.",
                        "optional": 1,
                        "type": "string"
                      },
                      "id": {
                        "description": "Full name of machine type and version.",
                        "type": "string"
                      },
                      "type": {
                        "description": "The machine type.",
                        "enum": [
                          "q35",
                          "i440fx"
                        ],
                        "type": "string"
                      },
                      "version": {
                        "description": "The machine version.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/capabilities/qemu/migration": {
      "get": {
        "summary": "Get node-specific QEMU migration capabilities of the node. Requires the 'Sys.Audit' permission on '/nodes/<node>'.",
        "description": "Get node-specific QEMU migration capabilities of the node. Requires the 'Sys.Audit' permission on '/nodes/<node>'.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": 0,
                  "properties": {
                    "dbus-vmstate": {
                      "description": "Whether the host supports live-migrating additional VM state via the dbus-vmstate helper.",
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/storage": {
      "get": {
        "summary": "Get status for all datastores.",
        "description": "Get status for all datastores.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "content",
            "in": "query",
            "description": "Only list stores which support this content type.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-storage-content-list"
            }
          },
          {
            "name": "enabled",
            "in": "query",
            "description": "Only list stores which are enabled (not disabled in config).",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "format",
            "in": "query",
            "description": "Include information about formats",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "storage",
            "in": "query",
            "description": "Only list status for  specified storage",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-storage-id"
            }
          },
          {
            "name": "target",
            "in": "query",
            "description": "If target is different to 'node', we only lists shared storages which content is accessible on this 'node' and the specified 'target' node.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "active": {
                        "description": "Set when storage is accessible.",
                        "optional": 1,
                        "type": "boolean"
                      },
                      "avail": {
                        "description": "Available storage space in bytes.",
                        "optional": 1,
                        "renderer": "bytes",
                        "type": "integer"
                      },
                      "content": {
                        "description": "Allowed storage content types.",
                        "format": "pve-storage-content-list",
                        "type": "string"
                      },
                      "enabled": {
                        "description": "Set when storage is enabled (not disabled).",
                        "optional": 1,
                        "type": "boolean"
                      },
                      "shared": {
                        "description": "Shared flag from storage configuration.",
                        "optional": 1,
                        "type": "boolean"
                      },
                      "storage": {
                        "description": "The storage identifier.",
                        "format": "pve-storage-id",
                        "format_description": "storage ID",
                        "type": "string"
                      },
                      "total": {
                        "description": "Total storage space in bytes.",
                        "optional": 1,
                        "renderer": "bytes",
                        "type": "integer"
                      },
                      "type": {
                        "description": "Storage type.",
                        "type": "string"
                      },
                      "used": {
                        "description": "Used storage space in bytes.",
                        "optional": 1,
                        "renderer": "bytes",
                        "type": "integer"
                      },
                      "used_fraction": {
                        "description": "Used fraction (used/total).",
                        "optional": 1,
                        "renderer": "fraction_as_percentage",
                        "type": "number"
                      }
                    },
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{storage}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/storage/{storage}": {
      "get": {
        "summary": "",
        "description": "",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "storage",
            "in": "path",
            "description": "The storage identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-storage-id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "subdir": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{subdir}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/storage/{storage}/prunebackups": {
      "delete": {
        "summary": "Prune backups. Only those using the standard naming scheme are considered.",
        "description": "Prune backups. Only those using the standard naming scheme are considered.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "prune-backups",
            "in": "query",
            "description": "Use these retention options instead of those from the storage configuration.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "prune-backups"
            }
          },
          {
            "name": "storage",
            "in": "path",
            "description": "The storage identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-storage-id"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Either 'qemu' or 'lxc'. Only consider backups for guests of this type.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "qemu",
                "lxc"
              ]
            }
          },
          {
            "name": "vmid",
            "in": "query",
            "description": "Only prune backups for this VM.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Get prune information for backups. NOTE: this is only a preview and might not be what a subsequent prune call does if backups are removed/added in the meantime.",
        "description": "Get prune information for backups. NOTE: this is only a preview and might not be what a subsequent prune call does if backups are removed/added in the meantime.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "prune-backups",
            "in": "query",
            "description": "Use these retention options instead of those from the storage configuration.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "prune-backups"
            }
          },
          {
            "name": "storage",
            "in": "path",
            "description": "The storage identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-storage-id"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Either 'qemu' or 'lxc'. Only consider backups for guests of this type.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "qemu",
                "lxc"
              ]
            }
          },
          {
            "name": "vmid",
            "in": "query",
            "description": "Only consider backups for this guest.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "ctime": {
                        "description": "Creation time of the backup (seconds since the UNIX epoch).",
                        "type": "integer"
                      },
                      "mark": {
                        "description": "Whether the backup would be kept or removed. Backups that are protected or don't use the standard naming scheme are not removed.",
                        "enum": [
                          "keep",
                          "remove",
                          "protected",
                          "renamed"
                        ],
                        "type": "string"
                      },
                      "type": {
                        "description": "One of 'qemu', 'lxc', 'openvz' or 'unknown'.",
                        "type": "string"
                      },
                      "vmid": {
                        "description": "The VM the backup belongs to.",
                        "optional": 1,
                        "type": "integer"
                      },
                      "volid": {
                        "description": "Backup volume ID.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/storage/{storage}/content": {
      "get": {
        "summary": "List storage content.",
        "description": "List storage content.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "content",
            "in": "query",
            "description": "Only list content of this type.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-storage-content"
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "storage",
            "in": "path",
            "description": "The storage identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-storage-id"
            }
          },
          {
            "name": "vmid",
            "in": "query",
            "description": "Only list images for this VM",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "ctime": {
                        "description": "Creation time (seconds since the UNIX Epoch).",
                        "minimum": 0,
                        "optional": 1,
                        "type": "integer"
                      },
                      "encrypted": {
                        "description": "If whole backup is encrypted, value is the fingerprint or '1'  if encrypted. Only useful for the Proxmox Backup Server storage type.",
                        "optional": 1,
                        "type": "string"
                      },
                      "format": {
                        "description": "Format identifier ('raw', 'qcow2', 'subvol', 'iso', 'tgz' ...)",
                        "type": "string"
                      },
                      "notes": {
                        "description": "Optional notes. If they contain multiple lines, only the first one is returned here.",
                        "optional": 1,
                        "type": "string"
                      },
                      "parent": {
                        "description": "Volume identifier of parent (for linked cloned).",
                        "optional": 1,
                        "type": "string"
                      },
                      "protected": {
                        "description": "Protection status. Currently only supported for backups.",
                        "optional": 1,
                        "type": "boolean"
                      },
                      "size": {
                        "description": "Volume size in bytes.",
                        "renderer": "bytes",
                        "type": "integer"
                      },
                      "used": {
                        "description": "Used space. Please note that most storage plugins do not report anything useful here.",
                        "optional": 1,
                        "renderer": "bytes",
                        "type": "integer"
                      },
                      "verification": {
                        "description": "Last backup verification result, only useful for PBS storages.",
                        "optional": 1,
                        "properties": {
                          "state": {
                            "description": "Last backup verification state.",
                            "type": "string"
                          },
                          "upid": {
                            "description": "Last backup verification UPID.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "vmid": {
                        "description": "Associated Owner VMID.",
                        "optional": 1,
                        "type": "integer"
                      },
                      "volid": {
                        "description": "Volume identifier.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{volid}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Allocate disk images.",
        "description": "Allocate disk images.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "filename",
            "in": "query",
            "description": "The name of the file to create.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "format",
            "in": "query",
            "description": "Format of the image.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "raw",
                "qcow2",
                "subvol",
                "vmdk"
              ]
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Size in kilobyte (1024 bytes). Optional suffixes 'M' (megabyte, 1024K) and 'G' (gigabyte, 1024M)",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "\\d+[MG]?"
            }
          },
          {
            "name": "storage",
            "in": "path",
            "description": "The storage identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-storage-id"
            }
          },
          {
            "name": "vmid",
            "in": "query",
            "description": "Specify owner VM",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Volume identifier",
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/storage/{storage}/content/{volume}": {
      "delete": {
        "summary": "Delete volume",
        "description": "Delete volume",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "delay",
            "in": "query",
            "description": "Time to wait for the task to finish. We return 'null' if the task finish within that time.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 30
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "storage",
            "in": "path",
            "description": "The storage identifier.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-storage-id"
            }
          },
          {
            "name": "volume",
            "in": "path",
            "description": "Volume identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "optional": 1,
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Get volume attributes",
        "description": "Get volume attributes",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "storage",
            "in": "path",
            "description": "The storage identifier.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-storage-id"
            }
          },
          {
            "name": "volume",
            "in": "path",
            "description": "Volume identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "format": {
                      "description": "Format identifier ('raw', 'qcow2', 'subvol', 'iso', 'tgz' ...)",
                      "type": "string"
                    },
                    "notes": {
                      "description": "Optional notes.",
                      "optional": 1,
                      "type": "string"
                    },
                    "path": {
                      "description": "The Path",
                      "type": "string"
                    },
                    "protected": {
                      "description": "Protection status. Currently only supported for backups.",
                      "optional": 1,
                      "type": "boolean"
                    },
                    "size": {
                      "description": "Volume size in bytes.",
                      "renderer": "bytes",
                      "type": "integer"
                    },
                    "used": {
                      "description": "Used space. Please note that most storage plugins do not report anything useful here.",
                      "renderer": "bytes",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Copy a volume. This is experimental code - do not use.",
        "description": "Copy a volume. This is experimental code - do not use.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "storage",
            "in": "path",
            "description": "The storage identifier.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-storage-id"
            }
          },
          {
            "name": "target",
            "in": "query",
            "description": "Target volume identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "target_node",
            "in": "query",
            "description": "Target node. Default is local node.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "volume",
            "in": "path",
            "description": "Source volume identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update volume attributes",
        "description": "Update volume attributes",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "notes",
            "in": "query",
            "description": "The new notes.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "protected",
            "in": "query",
            "description": "Protection status. Currently only supported for backups.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "storage",
            "in": "path",
            "description": "The storage identifier.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-storage-id"
            }
          },
          {
            "name": "volume",
            "in": "path",
            "description": "Volume identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/storage/{storage}/file-restore/list": {
      "get": {
        "summary": "List files and directories for single file restore under the given path.",
        "description": "List files and directories for single file restore under the given path.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "filepath",
            "in": "query",
            "description": "base64-path to the directory or file being listed, or \"/\".",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "storage",
            "in": "path",
            "description": "The storage identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-storage-id"
            }
          },
          {
            "name": "volume",
            "in": "query",
            "description": "Backup volume ID or name. Currently only PBS snapshots are supported.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "filepath": {
                        "description": "base64 path of the current entry",
                        "type": "string"
                      },
                      "leaf": {
                        "description": "If this entry is a leaf in the directory graph.",
                        "type": "boolean"
                      },
                      "mtime": {
                        "description": "Entry last-modified time (unix timestamp).",
                        "optional": 1,
                        "type": "integer"
                      },
                      "size": {
                        "description": "Entry file size.",
                        "optional": 1,
                        "type": "integer"
                      },
                      "text": {
                        "description": "Entry display text.",
                        "type": "string"
                      },
                      "type": {
                        "description": "Entry type.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/storage/{storage}/file-restore/download": {
      "get": {
        "summary": "Extract a file or directory (as zip archive) from a PBS backup.",
        "description": "Extract a file or directory (as zip archive) from a PBS backup.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "filepath",
            "in": "query",
            "description": "base64-path to the directory or file to download.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "storage",
            "in": "path",
            "description": "The storage identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-storage-id"
            }
          },
          {
            "name": "tar",
            "in": "query",
            "description": "Download dirs as 'tar.zst' instead of 'zip'.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "volume",
            "in": "query",
            "description": "Backup volume ID or name. Currently only PBS snapshots are supported.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "any"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/storage/{storage}/status": {
      "get": {
        "summary": "Read storage status.",
        "description": "Read storage status.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "storage",
            "in": "path",
            "description": "The storage identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-storage-id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/storage/{storage}/rrd": {
      "get": {
        "summary": "Read storage RRD statistics (returns PNG).",
        "description": "Read storage RRD statistics (returns PNG).",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "cf",
            "in": "query",
            "description": "The RRD consolidation function",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "AVERAGE",
                "MAX"
              ]
            }
          },
          {
            "name": "ds",
            "in": "query",
            "description": "The list of datasources you want to display.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-configid-list"
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "storage",
            "in": "path",
            "description": "The storage identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-storage-id"
            }
          },
          {
            "name": "timeframe",
            "in": "query",
            "description": "Specify the time frame you are interested in.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "hour",
                "day",
                "week",
                "month",
                "year"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "filename": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/storage/{storage}/rrddata": {
      "get": {
        "summary": "Read storage RRD statistics.",
        "description": "Read storage RRD statistics.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "cf",
            "in": "query",
            "description": "The RRD consolidation function",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "AVERAGE",
                "MAX"
              ]
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "storage",
            "in": "path",
            "description": "The storage identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-storage-id"
            }
          },
          {
            "name": "timeframe",
            "in": "query",
            "description": "Specify the time frame you are interested in.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "hour",
                "day",
                "week",
                "month",
                "year"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {},
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/storage/{storage}/upload": {
      "post": {
        "summary": "Upload templates, ISO images, OVAs and VM images.",
        "description": "Upload templates, ISO images, OVAs and VM images.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "checksum",
            "in": "query",
            "description": "The expected checksum of the file.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "checksum-algorithm",
            "in": "query",
            "description": "The algorithm to calculate the checksum of the file.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "md5",
                "sha1",
                "sha224",
                "sha256",
                "sha384",
                "sha512"
              ]
            }
          },
          {
            "name": "content",
            "in": "query",
            "description": "Content type.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-storage-content",
              "enum": [
                "iso",
                "vztmpl",
                "import"
              ]
            }
          },
          {
            "name": "filename",
            "in": "query",
            "description": "The name of the file to create. Caution: This will be normalized!",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 255
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "storage",
            "in": "path",
            "description": "The storage identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-storage-id"
            }
          },
          {
            "name": "tmpfilename",
            "in": "query",
            "description": "The source file name. This parameter is usually set by the REST handler. You can only overwrite it when connecting to the trusted port on localhost.",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "/var/tmp/pveupload-[0-9a-f]+"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/storage/{storage}/download-url": {
      "post": {
        "summary": "Download templates, ISO images, OVAs and VM images by using an URL.",
        "description": "Download templates, ISO images, OVAs and VM images by using an URL.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "checksum",
            "in": "query",
            "description": "The expected checksum of the file.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "checksum-algorithm",
            "in": "query",
            "description": "The algorithm to calculate the checksum of the file.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "md5",
                "sha1",
                "sha224",
                "sha256",
                "sha384",
                "sha512"
              ]
            }
          },
          {
            "name": "compression",
            "in": "query",
            "description": "Decompress the downloaded file using the specified compression algorithm.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": null
            }
          },
          {
            "name": "content",
            "in": "query",
            "description": "Content type.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-storage-content",
              "enum": [
                "iso",
                "vztmpl",
                "import"
              ]
            }
          },
          {
            "name": "filename",
            "in": "query",
            "description": "The name of the file to create. Caution: This will be normalized!",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 255
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "storage",
            "in": "path",
            "description": "The storage identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-storage-id"
            }
          },
          {
            "name": "url",
            "in": "query",
            "description": "The URL to download the file from.",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "https?://.*"
            }
          },
          {
            "name": "verify-certificates",
            "in": "query",
            "description": "If false, no SSL/TLS certificates will be verified.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/storage/{storage}/import-metadata": {
      "get": {
        "summary": "Get the base parameters for creating a guest which imports data from a foreign importable guest, like an ESXi VM",
        "description": "Get the base parameters for creating a guest which imports data from a foreign importable guest, like an ESXi VM",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "storage",
            "in": "path",
            "description": "The storage identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-storage-id"
            }
          },
          {
            "name": "volume",
            "in": "query",
            "description": "Volume identifier for the guest archive/entry.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": 0,
                  "description": "Information about how to import a guest.",
                  "properties": {
                    "create-args": {
                      "additionalProperties": 1,
                      "description": "Parameters which can be used in a call to create a VM or container.",
                      "type": "object"
                    },
                    "disks": {
                      "additionalProperties": 1,
                      "description": "Recognised disk volumes as `$bus$id` => `$storeid:$path` map.",
                      "optional": 1,
                      "type": "object"
                    },
                    "net": {
                      "additionalProperties": 1,
                      "description": "Recognised network interfaces as `net$id` => { ...params } object.",
                      "optional": 1,
                      "type": "object"
                    },
                    "source": {
                      "description": "The type of the import-source of this guest volume.",
                      "enum": [
                        "esxi"
                      ],
                      "type": "string"
                    },
                    "type": {
                      "description": "The type of guest this is going to produce.",
                      "enum": [
                        "vm"
                      ],
                      "type": "string"
                    },
                    "warnings": {
                      "description": "List of known issues that can affect the import of a guest. Note that lack of warning does not imply that there cannot be any problems.",
                      "items": {
                        "additionalProperties": 1,
                        "properties": {
                          "key": {
                            "description": "Related subject (config) key of warning.",
                            "optional": 1,
                            "type": "string"
                          },
                          "type": {
                            "description": "What this warning is about.",
                            "enum": [
                              "cdrom-image-ignored",
                              "efi-state-lost",
                              "guest-is-running",
                              "nvme-unsupported",
                              "ova-needs-extracting",
                              "ovmf-with-lsi-unsupported",
                              "serial-port-socket-only"
                            ],
                            "type": "string"
                          },
                          "value": {
                            "description": "Related subject (config) value of warning.",
                            "optional": 1,
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "optional": 1,
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/disks": {
      "get": {
        "summary": "Node index.",
        "description": "Node index.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {},
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{name}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/disks/lvm": {
      "get": {
        "summary": "List LVM Volume Groups",
        "description": "List LVM Volume Groups",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "children": {
                      "items": {
                        "properties": {
                          "children": {
                            "description": "The underlying physical volumes",
                            "items": {
                              "properties": {
                                "free": {
                                  "description": "The free bytes in the physical volume",
                                  "type": "integer"
                                },
                                "leaf": {
                                  "type": "boolean"
                                },
                                "name": {
                                  "description": "The name of the physical volume",
                                  "type": "string"
                                },
                                "size": {
                                  "description": "The size of the physical volume in bytes",
                                  "type": "integer"
                                }
                              },
                              "type": "object"
                            },
                            "optional": 1,
                            "type": "array"
                          },
                          "free": {
                            "description": "The free bytes in the volume group",
                            "type": "integer"
                          },
                          "leaf": {
                            "type": "boolean"
                          },
                          "name": {
                            "description": "The name of the volume group",
                            "type": "string"
                          },
                          "size": {
                            "description": "The size of the volume group in bytes",
                            "type": "integer"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "leaf": {
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create an LVM Volume Group",
        "description": "Create an LVM Volume Group",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "add_storage",
            "in": "query",
            "description": "Configure storage using the Volume Group",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "device",
            "in": "query",
            "description": "The block device you want to create the volume group on",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "The storage identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-storage-id"
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/disks/lvm/{name}": {
      "delete": {
        "summary": "Remove an LVM Volume Group.",
        "description": "Remove an LVM Volume Group.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "cleanup-config",
            "in": "query",
            "description": "Marks associated storage(s) as not available on this node anymore or removes them from the configuration (if configured for this node only).",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "cleanup-disks",
            "in": "query",
            "description": "Also wipe disks so they can be repurposed afterwards.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "name",
            "in": "path",
            "description": "The storage identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-storage-id"
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/disks/lvmthin": {
      "get": {
        "summary": "List LVM thinpools",
        "description": "List LVM thinpools",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "lv": {
                        "description": "The name of the thinpool.",
                        "type": "string"
                      },
                      "lv_size": {
                        "description": "The size of the thinpool in bytes.",
                        "type": "integer"
                      },
                      "metadata_size": {
                        "description": "The size of the metadata lv in bytes.",
                        "type": "integer"
                      },
                      "metadata_used": {
                        "description": "The used bytes of the metadata lv.",
                        "type": "integer"
                      },
                      "used": {
                        "description": "The used bytes of the thinpool.",
                        "type": "integer"
                      },
                      "vg": {
                        "description": "The associated volume group.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create an LVM thinpool",
        "description": "Create an LVM thinpool",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "add_storage",
            "in": "query",
            "description": "Configure storage using the thinpool.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "device",
            "in": "query",
            "description": "The block device you want to create the thinpool on.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "The storage identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-storage-id"
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/disks/lvmthin/{name}": {
      "delete": {
        "summary": "Remove an LVM thin pool.",
        "description": "Remove an LVM thin pool.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "cleanup-config",
            "in": "query",
            "description": "Marks associated storage(s) as not available on this node anymore or removes them from the configuration (if configured for this node only).",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "cleanup-disks",
            "in": "query",
            "description": "Also wipe disks so they can be repurposed afterwards.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "name",
            "in": "path",
            "description": "The storage identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-storage-id"
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "volume-group",
            "in": "query",
            "description": "The storage identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-storage-id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/disks/directory": {
      "get": {
        "summary": "PVE Managed Directory storages.",
        "description": "PVE Managed Directory storages.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "device": {
                        "description": "The mounted device.",
                        "type": "string"
                      },
                      "options": {
                        "description": "The mount options.",
                        "type": "string"
                      },
                      "path": {
                        "description": "The mount path.",
                        "type": "string"
                      },
                      "type": {
                        "description": "The filesystem type.",
                        "type": "string"
                      },
                      "unitfile": {
                        "description": "The path of the mount unit.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a Filesystem on an unused disk. Will be mounted under '/mnt/pve/NAME'.",
        "description": "Create a Filesystem on an unused disk. Will be mounted under '/mnt/pve/NAME'.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "add_storage",
            "in": "query",
            "description": "Configure storage using the directory.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "device",
            "in": "query",
            "description": "The block device you want to create the filesystem on.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filesystem",
            "in": "query",
            "description": "The desired filesystem.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "ext4",
              "enum": [
                "ext4",
                "xfs"
              ]
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "The storage identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-storage-id"
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/disks/directory/{name}": {
      "delete": {
        "summary": "Unmounts the storage and removes the mount unit.",
        "description": "Unmounts the storage and removes the mount unit.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "cleanup-config",
            "in": "query",
            "description": "Marks associated storage(s) as not available on this node anymore or removes them from the configuration (if configured for this node only).",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "cleanup-disks",
            "in": "query",
            "description": "Also wipe disk so it can be repurposed afterwards.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "name",
            "in": "path",
            "description": "The storage identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-storage-id"
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/disks/zfs": {
      "get": {
        "summary": "List Zpools.",
        "description": "List Zpools.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "alloc": {
                        "description": "",
                        "type": "integer"
                      },
                      "dedup": {
                        "description": "",
                        "type": "number"
                      },
                      "frag": {
                        "description": "",
                        "type": "integer"
                      },
                      "free": {
                        "description": "",
                        "type": "integer"
                      },
                      "health": {
                        "description": "",
                        "type": "string"
                      },
                      "name": {
                        "description": "",
                        "type": "string"
                      },
                      "size": {
                        "description": "",
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{name}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a ZFS pool.",
        "description": "Create a ZFS pool.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "add_storage",
            "in": "query",
            "description": "Configure storage using the zpool.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "ashift",
            "in": "query",
            "description": "Pool sector size exponent.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 12,
              "minimum": 9,
              "maximum": 16
            }
          },
          {
            "name": "compression",
            "in": "query",
            "description": "The compression algorithm to use.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "on",
              "enum": [
                "on",
                "off",
                "gzip",
                "lz4",
                "lzjb",
                "zle",
                "zstd"
              ]
            }
          },
          {
            "name": "devices",
            "in": "query",
            "description": "The block devices you want to create the zpool on.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "string-list"
            }
          },
          {
            "name": "draid-config",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": {
                "data": {
                  "description": "The number of data devices per redundancy group. (dRAID)",
                  "minimum": 1,
                  "type": "integer"
                },
                "spares": {
                  "description": "Number of dRAID spares.",
                  "minimum": 0,
                  "type": "integer"
                }
              }
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "The storage identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-storage-id"
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "raidlevel",
            "in": "query",
            "description": "The RAID level to use.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "single",
                "mirror",
                "raid10",
                "raidz",
                "raidz2",
                "raidz3",
                "draid",
                "draid2",
                "draid3"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/disks/zfs/{name}": {
      "delete": {
        "summary": "Destroy a ZFS pool.",
        "description": "Destroy a ZFS pool.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "cleanup-config",
            "in": "query",
            "description": "Marks associated storage(s) as not available on this node anymore or removes them from the configuration (if configured for this node only).",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "cleanup-disks",
            "in": "query",
            "description": "Also wipe disks so they can be repurposed afterwards.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "name",
            "in": "path",
            "description": "The storage identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-storage-id"
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Get details about a zpool.",
        "description": "Get details about a zpool.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "The storage identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-storage-id"
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "action": {
                      "description": "Information about the recommended action to fix the state.",
                      "optional": 1,
                      "type": "string"
                    },
                    "children": {
                      "description": "The pool configuration information, including the vdevs for each section (e.g. spares, cache), may be nested.",
                      "items": {
                        "properties": {
                          "cksum": {
                            "optional": 1,
                            "type": "number"
                          },
                          "msg": {
                            "description": "An optional message about the vdev.",
                            "type": "string"
                          },
                          "name": {
                            "description": "The name of the vdev or section.",
                            "type": "string"
                          },
                          "read": {
                            "optional": 1,
                            "type": "number"
                          },
                          "state": {
                            "description": "The state of the vdev.",
                            "optional": 1,
                            "type": "string"
                          },
                          "write": {
                            "optional": 1,
                            "type": "number"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "errors": {
                      "description": "Information about the errors on the zpool.",
                      "type": "string"
                    },
                    "name": {
                      "description": "The name of the zpool.",
                      "type": "string"
                    },
                    "scan": {
                      "description": "Information about the last/current scrub.",
                      "optional": 1,
                      "type": "string"
                    },
                    "state": {
                      "description": "The state of the zpool.",
                      "type": "string"
                    },
                    "status": {
                      "description": "Information about the state of the zpool.",
                      "optional": 1,
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/disks/list": {
      "get": {
        "summary": "List local disks.",
        "description": "List local disks.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "include-partitions",
            "in": "query",
            "description": "Also include partitions.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "skipsmart",
            "in": "query",
            "description": "Skip smart checks.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Only list specific types of disks.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "unused",
                "journal_disks"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "devpath": {
                        "description": "The device path",
                        "type": "string"
                      },
                      "gpt": {
                        "type": "boolean"
                      },
                      "health": {
                        "optional": 1,
                        "type": "string"
                      },
                      "model": {
                        "optional": 1,
                        "type": "string"
                      },
                      "mounted": {
                        "type": "boolean"
                      },
                      "osdid": {
                        "type": "integer"
                      },
                      "osdid-list": {
                        "items": {
                          "type": "integer"
                        },
                        "type": "array"
                      },
                      "parent": {
                        "description": "For partitions only. The device path of the disk the partition resides on.",
                        "optional": 1,
                        "type": "string"
                      },
                      "serial": {
                        "optional": 1,
                        "type": "string"
                      },
                      "size": {
                        "type": "integer"
                      },
                      "used": {
                        "optional": 1,
                        "type": "string"
                      },
                      "vendor": {
                        "optional": 1,
                        "type": "string"
                      },
                      "wwn": {
                        "optional": 1,
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/disks/smart": {
      "get": {
        "summary": "Get SMART Health of a disk.",
        "description": "Get SMART Health of a disk.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "disk",
            "in": "query",
            "description": "Block device name",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^/dev/[a-zA-Z0-9\\/]+$"
            }
          },
          {
            "name": "healthonly",
            "in": "query",
            "description": "If true returns only the health status",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "attributes": {
                      "optional": 1,
                      "type": "array"
                    },
                    "health": {
                      "type": "string"
                    },
                    "text": {
                      "optional": 1,
                      "type": "string"
                    },
                    "type": {
                      "optional": 1,
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/disks/initgpt": {
      "post": {
        "summary": "Initialize Disk with GPT",
        "description": "Initialize Disk with GPT",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "disk",
            "in": "query",
            "description": "Block device name",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^/dev/[a-zA-Z0-9\\/]+$"
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "uuid",
            "in": "query",
            "description": "UUID for the GPT table",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "[a-fA-F0-9\\-]+",
              "maxLength": 36
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/disks/wipedisk": {
      "put": {
        "summary": "Wipe a disk or partition.",
        "description": "Wipe a disk or partition.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "disk",
            "in": "query",
            "description": "Block device name",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^/dev/[a-zA-Z0-9\\/]+$"
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/apt": {
      "get": {
        "summary": "Directory index for apt (Advanced Package Tool).",
        "description": "Directory index for apt (Advanced Package Tool).",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "id": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{id}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/apt/update": {
      "get": {
        "summary": "List available updates.",
        "description": "List available updates.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "Arch": {
                        "description": "Package Architecture.",
                        "type": "string"
                      },
                      "Description": {
                        "description": "Human-readable package description.",
                        "type": "string"
                      },
                      "NotifyStatus": {
                        "description": "Version for which PVE has already sent an update notification for.",
                        "optional": 1,
                        "type": "string"
                      },
                      "OldVersion": {
                        "description": "Old version currently installed.",
                        "optional": 1,
                        "type": "string"
                      },
                      "Origin": {
                        "description": "Package origin.",
                        "type": "string"
                      },
                      "Package": {
                        "description": "Package name.",
                        "type": "string"
                      },
                      "Priority": {
                        "description": "Package priority in human-readable form.",
                        "type": "string"
                      },
                      "Section": {
                        "description": "Package section.",
                        "type": "string"
                      },
                      "Title": {
                        "description": "Package title.",
                        "type": "string"
                      },
                      "Version": {
                        "description": "New version to be updated to.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "This is used to resynchronize the package index files from their sources (apt-get update).",
        "description": "This is used to resynchronize the package index files from their sources (apt-get update).",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "notify",
            "in": "query",
            "description": "Send notification about new packages.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "quiet",
            "in": "query",
            "description": "Only produces output suitable for logging, omitting progress indicators.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/apt/changelog": {
      "get": {
        "summary": "Get package changelogs.",
        "description": "Get package changelogs.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Package name.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "version",
            "in": "query",
            "description": "Package version.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/apt/repositories": {
      "get": {
        "summary": "Get APT repository information.",
        "description": "Get APT repository information.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Result from parsing the APT repository files in /etc/apt/.",
                  "properties": {
                    "digest": {
                      "description": "Common digest of all files.",
                      "type": "string"
                    },
                    "errors": {
                      "description": "List of problematic repository files.",
                      "items": {
                        "properties": {
                          "error": {
                            "description": "The error message",
                            "type": "string"
                          },
                          "path": {
                            "description": "Path to the problematic file.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "files": {
                      "description": "List of parsed repository files.",
                      "items": {
                        "properties": {
                          "digest": {
                            "description": "Digest of the file as bytes.",
                            "items": {
                              "type": "integer"
                            },
                            "type": "array"
                          },
                          "file-type": {
                            "description": "Format of the file.",
                            "enum": [
                              "list",
                              "sources"
                            ],
                            "type": "string"
                          },
                          "path": {
                            "description": "Path to the problematic file.",
                            "type": "string"
                          },
                          "repositories": {
                            "description": "The parsed repositories.",
                            "items": {
                              "properties": {
                                "Comment": {
                                  "description": "Associated comment",
                                  "optional": 1,
                                  "type": "string"
                                },
                                "Components": {
                                  "description": "List of repository components",
                                  "items": {
                                    "type": "string"
                                  },
                                  "optional": 1,
                                  "type": "array"
                                },
                                "Enabled": {
                                  "description": "Whether the repository is enabled or not",
                                  "type": "boolean"
                                },
                                "FileType": {
                                  "description": "Format of the defining file.",
                                  "enum": [
                                    "list",
                                    "sources"
                                  ],
                                  "type": "string"
                                },
                                "Options": {
                                  "description": "Additional options",
                                  "items": {
                                    "properties": {
                                      "Key": {
                                        "type": "string"
                                      },
                                      "Values": {
                                        "items": {
                                          "type": "string"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "optional": 1,
                                  "type": "array"
                                },
                                "Suites": {
                                  "description": "List of package distribuitions",
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                },
                                "Types": {
                                  "description": "List of package types.",
                                  "items": {
                                    "enum": [
                                      "deb",
                                      "deb-src"
                                    ],
                                    "type": "string"
                                  },
                                  "type": "array"
                                },
                                "URIs": {
                                  "description": "List of repository URIs.",
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "infos": {
                      "description": "Additional information/warnings for APT repositories.",
                      "items": {
                        "properties": {
                          "index": {
                            "description": "Index of the associated repository within the file.",
                            "type": "string"
                          },
                          "kind": {
                            "description": "Kind of the information (e.g. warning).",
                            "type": "string"
                          },
                          "message": {
                            "description": "Information message.",
                            "type": "string"
                          },
                          "path": {
                            "description": "Path to the associated file.",
                            "type": "string"
                          },
                          "property": {
                            "description": "Property from which the info originates.",
                            "optional": 1,
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "standard-repos": {
                      "description": "List of standard repositories and their configuration status",
                      "items": {
                        "properties": {
                          "handle": {
                            "description": "Handle to identify the repository.",
                            "type": "string"
                          },
                          "name": {
                            "description": "Full name of the repository.",
                            "type": "string"
                          },
                          "status": {
                            "description": "Indicating enabled/disabled status, if the repository is configured.",
                            "optional": 1,
                            "type": "boolean"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Change the properties of a repository. Currently only allows enabling/disabling.",
        "description": "Change the properties of a repository. Currently only allows enabling/disabling.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "digest",
            "in": "query",
            "description": "Digest to detect modifications.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 80
            }
          },
          {
            "name": "enabled",
            "in": "query",
            "description": "Whether the repository should be enabled or not.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "index",
            "in": "query",
            "description": "Index within the file (starting from 0).",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "path",
            "in": "query",
            "description": "Path to the containing file.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Add a standard repository to the configuration",
        "description": "Add a standard repository to the configuration",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "digest",
            "in": "query",
            "description": "Digest to detect modifications.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 80
            }
          },
          {
            "name": "handle",
            "in": "query",
            "description": "Handle that identifies a repository.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/apt/versions": {
      "get": {
        "summary": "Get package information for important Proxmox packages.",
        "description": "Get package information for important Proxmox packages.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {},
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/firewall": {
      "get": {
        "summary": "Directory index.",
        "description": "Directory index.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {},
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{name}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/firewall/rules": {
      "get": {
        "summary": "List rules.",
        "description": "List rules.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "pos": {
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{pos}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create new rule.",
        "description": "Create new rule.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "action",
            "in": "query",
            "description": "Rule action ('ACCEPT', 'DROP', 'REJECT') or security group name.",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "[A-Za-z][A-Za-z0-9\\-\\_]+",
              "maxLength": 20
            }
          },
          {
            "name": "comment",
            "in": "query",
            "description": "Descriptive comment.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dest",
            "in": "query",
            "description": "Restrict packet destination address. This can refer to a single IP address, an IP set ('+ipsetname') or an IP alias definition. You can also specify an address range like '20.34.101.207-201.3.9.99', or a list of IP addresses and networks (entries are separated by comma). Please do not mix IPv4 and IPv6 addresses inside such lists.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-fw-addr-spec",
              "maxLength": 512
            }
          },
          {
            "name": "digest",
            "in": "query",
            "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 64
            }
          },
          {
            "name": "dport",
            "in": "query",
            "description": "Restrict TCP/UDP destination port. You can use service names or simple numbers (0-65535), as defined in '/etc/services'. Port ranges can be specified with '\\d+:\\d+', for example '80:85', and you can use comma separated list to match several ports or ranges.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-fw-dport-spec"
            }
          },
          {
            "name": "enable",
            "in": "query",
            "description": "Flag to enable/disable a rule.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "name": "icmp-type",
            "in": "query",
            "description": "Specify icmp-type. Only valid if proto equals 'icmp' or 'icmpv6'/'ipv6-icmp'.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-fw-icmp-type-spec"
            }
          },
          {
            "name": "iface",
            "in": "query",
            "description": "Network interface name. You have to use network configuration key names for VMs and containers ('net\\d+'). Host related rules can use arbitrary strings.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-iface",
              "maxLength": 20
            }
          },
          {
            "name": "log",
            "in": "query",
            "description": "Log level for firewall rule.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "emerg",
                "alert",
                "crit",
                "err",
                "warning",
                "notice",
                "info",
                "debug",
                "nolog"
              ]
            }
          },
          {
            "name": "macro",
            "in": "query",
            "description": "Use predefined standard macro.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 128
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "pos",
            "in": "query",
            "description": "Update rule at position <pos>.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "name": "proto",
            "in": "query",
            "description": "IP protocol. You can use protocol names ('tcp'/'udp') or simple numbers, as defined in '/etc/protocols'.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-fw-protocol-spec"
            }
          },
          {
            "name": "source",
            "in": "query",
            "description": "Restrict packet source address. This can refer to a single IP address, an IP set ('+ipsetname') or an IP alias definition. You can also specify an address range like '20.34.101.207-201.3.9.99', or a list of IP addresses and networks (entries are separated by comma). Please do not mix IPv4 and IPv6 addresses inside such lists.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-fw-addr-spec",
              "maxLength": 512
            }
          },
          {
            "name": "sport",
            "in": "query",
            "description": "Restrict TCP/UDP source port. You can use service names or simple numbers (0-65535), as defined in '/etc/services'. Port ranges can be specified with '\\d+:\\d+', for example '80:85', and you can use comma separated list to match several ports or ranges.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-fw-sport-spec"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Rule type.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "in",
                "out",
                "forward",
                "group"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/firewall/rules/{pos}": {
      "delete": {
        "summary": "Delete rule.",
        "description": "Delete rule.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "digest",
            "in": "query",
            "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 64
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "pos",
            "in": "path",
            "description": "Update rule at position <pos>.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Get single rule data.",
        "description": "Get single rule data.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "pos",
            "in": "path",
            "description": "Update rule at position <pos>.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "action": {
                      "type": "string"
                    },
                    "comment": {
                      "optional": 1,
                      "type": "string"
                    },
                    "dest": {
                      "optional": 1,
                      "type": "string"
                    },
                    "dport": {
                      "optional": 1,
                      "type": "string"
                    },
                    "enable": {
                      "optional": 1,
                      "type": "integer"
                    },
                    "icmp-type": {
                      "optional": 1,
                      "type": "string"
                    },
                    "iface": {
                      "optional": 1,
                      "type": "string"
                    },
                    "ipversion": {
                      "optional": 1,
                      "type": "integer"
                    },
                    "log": {
                      "description": "Log level for firewall rule",
                      "enum": [
                        "emerg",
                        "alert",
                        "crit",
                        "err",
                        "warning",
                        "notice",
                        "info",
                        "debug",
                        "nolog"
                      ],
                      "optional": 1,
                      "type": "string"
                    },
                    "macro": {
                      "optional": 1,
                      "type": "string"
                    },
                    "pos": {
                      "type": "integer"
                    },
                    "proto": {
                      "optional": 1,
                      "type": "string"
                    },
                    "source": {
                      "optional": 1,
                      "type": "string"
                    },
                    "sport": {
                      "optional": 1,
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Modify rule data.",
        "description": "Modify rule data.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "action",
            "in": "query",
            "description": "Rule action ('ACCEPT', 'DROP', 'REJECT') or security group name.",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "[A-Za-z][A-Za-z0-9\\-\\_]+",
              "maxLength": 20
            }
          },
          {
            "name": "comment",
            "in": "query",
            "description": "Descriptive comment.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "delete",
            "in": "query",
            "description": "A list of settings you want to delete.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-configid-list"
            }
          },
          {
            "name": "dest",
            "in": "query",
            "description": "Restrict packet destination address. This can refer to a single IP address, an IP set ('+ipsetname') or an IP alias definition. You can also specify an address range like '20.34.101.207-201.3.9.99', or a list of IP addresses and networks (entries are separated by comma). Please do not mix IPv4 and IPv6 addresses inside such lists.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-fw-addr-spec",
              "maxLength": 512
            }
          },
          {
            "name": "digest",
            "in": "query",
            "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 64
            }
          },
          {
            "name": "dport",
            "in": "query",
            "description": "Restrict TCP/UDP destination port. You can use service names or simple numbers (0-65535), as defined in '/etc/services'. Port ranges can be specified with '\\d+:\\d+', for example '80:85', and you can use comma separated list to match several ports or ranges.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-fw-dport-spec"
            }
          },
          {
            "name": "enable",
            "in": "query",
            "description": "Flag to enable/disable a rule.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "name": "icmp-type",
            "in": "query",
            "description": "Specify icmp-type. Only valid if proto equals 'icmp' or 'icmpv6'/'ipv6-icmp'.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-fw-icmp-type-spec"
            }
          },
          {
            "name": "iface",
            "in": "query",
            "description": "Network interface name. You have to use network configuration key names for VMs and containers ('net\\d+'). Host related rules can use arbitrary strings.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-iface",
              "maxLength": 20
            }
          },
          {
            "name": "log",
            "in": "query",
            "description": "Log level for firewall rule.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "emerg",
                "alert",
                "crit",
                "err",
                "warning",
                "notice",
                "info",
                "debug",
                "nolog"
              ]
            }
          },
          {
            "name": "macro",
            "in": "query",
            "description": "Use predefined standard macro.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 128
            }
          },
          {
            "name": "moveto",
            "in": "query",
            "description": "Move rule to new position <moveto>. Other arguments are ignored.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "pos",
            "in": "path",
            "description": "Update rule at position <pos>.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "name": "proto",
            "in": "query",
            "description": "IP protocol. You can use protocol names ('tcp'/'udp') or simple numbers, as defined in '/etc/protocols'.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-fw-protocol-spec"
            }
          },
          {
            "name": "source",
            "in": "query",
            "description": "Restrict packet source address. This can refer to a single IP address, an IP set ('+ipsetname') or an IP alias definition. You can also specify an address range like '20.34.101.207-201.3.9.99', or a list of IP addresses and networks (entries are separated by comma). Please do not mix IPv4 and IPv6 addresses inside such lists.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-fw-addr-spec",
              "maxLength": 512
            }
          },
          {
            "name": "sport",
            "in": "query",
            "description": "Restrict TCP/UDP source port. You can use service names or simple numbers (0-65535), as defined in '/etc/services'. Port ranges can be specified with '\\d+:\\d+', for example '80:85', and you can use comma separated list to match several ports or ranges.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-fw-sport-spec"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Rule type.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "in",
                "out",
                "forward",
                "group"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/firewall/options": {
      "get": {
        "summary": "Get host firewall options.",
        "description": "Get host firewall options.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "enable": {
                      "description": "Enable host firewall rules.",
                      "optional": 1,
                      "type": "boolean"
                    },
                    "log_level_forward": {
                      "description": "Log level for forwarded traffic.",
                      "enum": [
                        "emerg",
                        "alert",
                        "crit",
                        "err",
                        "warning",
                        "notice",
                        "info",
                        "debug",
                        "nolog"
                      ],
                      "optional": 1,
                      "type": "string"
                    },
                    "log_level_in": {
                      "description": "Log level for incoming traffic.",
                      "enum": [
                        "emerg",
                        "alert",
                        "crit",
                        "err",
                        "warning",
                        "notice",
                        "info",
                        "debug",
                        "nolog"
                      ],
                      "optional": 1,
                      "type": "string"
                    },
                    "log_level_out": {
                      "description": "Log level for outgoing traffic.",
                      "enum": [
                        "emerg",
                        "alert",
                        "crit",
                        "err",
                        "warning",
                        "notice",
                        "info",
                        "debug",
                        "nolog"
                      ],
                      "optional": 1,
                      "type": "string"
                    },
                    "log_nf_conntrack": {
                      "default": 0,
                      "description": "Enable logging of conntrack information.",
                      "optional": 1,
                      "type": "boolean"
                    },
                    "ndp": {
                      "default": 0,
                      "description": "Enable NDP (Neighbor Discovery Protocol).",
                      "optional": 1,
                      "type": "boolean"
                    },
                    "nf_conntrack_allow_invalid": {
                      "default": 0,
                      "description": "Allow invalid packets on connection tracking.",
                      "optional": 1,
                      "type": "boolean"
                    },
                    "nf_conntrack_helpers": {
                      "default": "",
                      "description": "Enable conntrack helpers for specific protocols. Supported protocols: amanda, ftp, irc, netbios-ns, pptp, sane, sip, snmp, tftp",
                      "format": "pve-fw-conntrack-helper",
                      "optional": 1,
                      "type": "string"
                    },
                    "nf_conntrack_max": {
                      "default": 262144,
                      "description": "Maximum number of tracked connections.",
                      "minimum": 32768,
                      "optional": 1,
                      "type": "integer"
                    },
                    "nf_conntrack_tcp_timeout_established": {
                      "default": 432000,
                      "description": "Conntrack established timeout.",
                      "minimum": 7875,
                      "optional": 1,
                      "type": "integer"
                    },
                    "nf_conntrack_tcp_timeout_syn_recv": {
                      "default": 60,
                      "description": "Conntrack syn recv timeout.",
                      "maximum": 60,
                      "minimum": 30,
                      "optional": 1,
                      "type": "integer"
                    },
                    "nftables": {
                      "default": 0,
                      "description": "Enable nftables based firewall (tech preview)",
                      "optional": 1,
                      "type": "boolean"
                    },
                    "nosmurfs": {
                      "description": "Enable SMURFS filter.",
                      "optional": 1,
                      "type": "boolean"
                    },
                    "protection_synflood": {
                      "default": 0,
                      "description": "Enable synflood protection",
                      "optional": 1,
                      "type": "boolean"
                    },
                    "protection_synflood_burst": {
                      "default": 1000,
                      "description": "Synflood protection rate burst by ip src.",
                      "optional": 1,
                      "type": "integer"
                    },
                    "protection_synflood_rate": {
                      "default": 200,
                      "description": "Synflood protection rate syn/sec by ip src.",
                      "optional": 1,
                      "type": "integer"
                    },
                    "smurf_log_level": {
                      "description": "Log level for SMURFS filter.",
                      "enum": [
                        "emerg",
                        "alert",
                        "crit",
                        "err",
                        "warning",
                        "notice",
                        "info",
                        "debug",
                        "nolog"
                      ],
                      "optional": 1,
                      "type": "string"
                    },
                    "tcp_flags_log_level": {
                      "description": "Log level for illegal tcp flags filter.",
                      "enum": [
                        "emerg",
                        "alert",
                        "crit",
                        "err",
                        "warning",
                        "notice",
                        "info",
                        "debug",
                        "nolog"
                      ],
                      "optional": 1,
                      "type": "string"
                    },
                    "tcpflags": {
                      "default": 0,
                      "description": "Filter illegal combinations of TCP flags.",
                      "optional": 1,
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Set Firewall options.",
        "description": "Set Firewall options.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "delete",
            "in": "query",
            "description": "A list of settings you want to delete.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-configid-list"
            }
          },
          {
            "name": "digest",
            "in": "query",
            "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 64
            }
          },
          {
            "name": "enable",
            "in": "query",
            "description": "Enable host firewall rules.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "log_level_forward",
            "in": "query",
            "description": "Log level for forwarded traffic.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "emerg",
                "alert",
                "crit",
                "err",
                "warning",
                "notice",
                "info",
                "debug",
                "nolog"
              ]
            }
          },
          {
            "name": "log_level_in",
            "in": "query",
            "description": "Log level for incoming traffic.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "emerg",
                "alert",
                "crit",
                "err",
                "warning",
                "notice",
                "info",
                "debug",
                "nolog"
              ]
            }
          },
          {
            "name": "log_level_out",
            "in": "query",
            "description": "Log level for outgoing traffic.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "emerg",
                "alert",
                "crit",
                "err",
                "warning",
                "notice",
                "info",
                "debug",
                "nolog"
              ]
            }
          },
          {
            "name": "log_nf_conntrack",
            "in": "query",
            "description": "Enable logging of conntrack information.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "ndp",
            "in": "query",
            "description": "Enable NDP (Neighbor Discovery Protocol).",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "nf_conntrack_allow_invalid",
            "in": "query",
            "description": "Allow invalid packets on connection tracking.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "nf_conntrack_helpers",
            "in": "query",
            "description": "Enable conntrack helpers for specific protocols. Supported protocols: amanda, ftp, irc, netbios-ns, pptp, sane, sip, snmp, tftp",
            "required": false,
            "schema": {
              "type": "string",
              "default": "",
              "format": "pve-fw-conntrack-helper"
            }
          },
          {
            "name": "nf_conntrack_max",
            "in": "query",
            "description": "Maximum number of tracked connections.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 262144,
              "minimum": 32768
            }
          },
          {
            "name": "nf_conntrack_tcp_timeout_established",
            "in": "query",
            "description": "Conntrack established timeout.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 432000,
              "minimum": 7875
            }
          },
          {
            "name": "nf_conntrack_tcp_timeout_syn_recv",
            "in": "query",
            "description": "Conntrack syn recv timeout.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 60,
              "minimum": 30,
              "maximum": 60
            }
          },
          {
            "name": "nftables",
            "in": "query",
            "description": "Enable nftables based firewall (tech preview)",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "nosmurfs",
            "in": "query",
            "description": "Enable SMURFS filter.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "protection_synflood",
            "in": "query",
            "description": "Enable synflood protection",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "protection_synflood_burst",
            "in": "query",
            "description": "Synflood protection rate burst by ip src.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000
            }
          },
          {
            "name": "protection_synflood_rate",
            "in": "query",
            "description": "Synflood protection rate syn/sec by ip src.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 200
            }
          },
          {
            "name": "smurf_log_level",
            "in": "query",
            "description": "Log level for SMURFS filter.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "emerg",
                "alert",
                "crit",
                "err",
                "warning",
                "notice",
                "info",
                "debug",
                "nolog"
              ]
            }
          },
          {
            "name": "tcp_flags_log_level",
            "in": "query",
            "description": "Log level for illegal tcp flags filter.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "emerg",
                "alert",
                "crit",
                "err",
                "warning",
                "notice",
                "info",
                "debug",
                "nolog"
              ]
            }
          },
          {
            "name": "tcpflags",
            "in": "query",
            "description": "Filter illegal combinations of TCP flags.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/firewall/log": {
      "get": {
        "summary": "Read firewall log",
        "description": "Read firewall log",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "since",
            "in": "query",
            "description": "Display log since this UNIX epoch.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "name": "start",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "name": "until",
            "in": "query",
            "description": "Display log until this UNIX epoch.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "n": {
                        "description": "Line number",
                        "type": "integer"
                      },
                      "t": {
                        "description": "Line text",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/replication": {
      "get": {
        "summary": "List status of all replication jobs on this node.",
        "description": "List status of all replication jobs on this node.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "guest",
            "in": "query",
            "description": "Only list replication jobs for this guest.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "pve-vmid",
              "minimum": 100,
              "maximum": 999999999
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "id": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{id}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/replication/{id}": {
      "get": {
        "summary": "Directory index.",
        "description": "Directory index.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Replication Job ID. The ID is composed of a Guest ID and a job number, separated by a hyphen, i.e. '<GUEST>-<JOBNUM>'.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-replication-job-id",
              "pattern": "[1-9][0-9]{2,8}-\\d{1,9}"
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {},
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{name}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/replication/{id}/status": {
      "get": {
        "summary": "Get replication job status.",
        "description": "Get replication job status.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Replication Job ID. The ID is composed of a Guest ID and a job number, separated by a hyphen, i.e. '<GUEST>-<JOBNUM>'.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-replication-job-id",
              "pattern": "[1-9][0-9]{2,8}-\\d{1,9}"
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/replication/{id}/log": {
      "get": {
        "summary": "Read replication job log.",
        "description": "Read replication job log.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Replication Job ID. The ID is composed of a Guest ID and a job number, separated by a hyphen, i.e. '<GUEST>-<JOBNUM>'.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-replication-job-id",
              "pattern": "[1-9][0-9]{2,8}-\\d{1,9}"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "start",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "n": {
                        "description": "Line number",
                        "type": "integer"
                      },
                      "t": {
                        "description": "Line text",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/replication/{id}/schedule_now": {
      "post": {
        "summary": "Schedule replication job to start as soon as possible.",
        "description": "Schedule replication job to start as soon as possible.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Replication Job ID. The ID is composed of a Guest ID and a job number, separated by a hyphen, i.e. '<GUEST>-<JOBNUM>'.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-replication-job-id",
              "pattern": "[1-9][0-9]{2,8}-\\d{1,9}"
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/certificates": {
      "get": {
        "summary": "Node index.",
        "description": "Node index.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {},
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{name}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/certificates/acme": {
      "get": {
        "summary": "ACME index.",
        "description": "ACME index.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {},
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{name}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/certificates/acme/certificate": {
      "delete": {
        "summary": "Revoke existing certificate from CA.",
        "description": "Revoke existing certificate from CA.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Order a new certificate from ACME-compatible CA.",
        "description": "Order a new certificate from ACME-compatible CA.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "force",
            "in": "query",
            "description": "Overwrite existing custom certificate.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Renew existing certificate from CA.",
        "description": "Renew existing certificate from CA.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "force",
            "in": "query",
            "description": "Force renewal even if expiry is more than 30 days away.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/certificates/info": {
      "get": {
        "summary": "Get information about node's certificates.",
        "description": "Get information about node's certificates.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "filename": {
                        "optional": 1,
                        "type": "string"
                      },
                      "fingerprint": {
                        "description": "Certificate SHA 256 fingerprint.",
                        "optional": 1,
                        "pattern": "([A-Fa-f0-9]{2}:){31}[A-Fa-f0-9]{2}",
                        "type": "string"
                      },
                      "issuer": {
                        "description": "Certificate issuer name.",
                        "optional": 1,
                        "type": "string"
                      },
                      "notafter": {
                        "description": "Certificate's notAfter timestamp (UNIX epoch).",
                        "optional": 1,
                        "renderer": "timestamp",
                        "type": "integer"
                      },
                      "notbefore": {
                        "description": "Certificate's notBefore timestamp (UNIX epoch).",
                        "optional": 1,
                        "renderer": "timestamp",
                        "type": "integer"
                      },
                      "pem": {
                        "description": "Certificate in PEM format",
                        "format": "pem-certificate",
                        "optional": 1,
                        "type": "string"
                      },
                      "public-key-bits": {
                        "description": "Certificate's public key size",
                        "optional": 1,
                        "type": "integer"
                      },
                      "public-key-type": {
                        "description": "Certificate's public key algorithm",
                        "optional": 1,
                        "type": "string"
                      },
                      "san": {
                        "description": "List of Certificate's SubjectAlternativeName entries.",
                        "items": {
                          "type": "string"
                        },
                        "optional": 1,
                        "renderer": "yaml",
                        "type": "array"
                      },
                      "subject": {
                        "description": "Certificate subject name.",
                        "optional": 1,
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/certificates/custom": {
      "delete": {
        "summary": "DELETE custom certificate chain and key.",
        "description": "DELETE custom certificate chain and key.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "restart",
            "in": "query",
            "description": "Restart pveproxy.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Upload or update custom certificate chain and key.",
        "description": "Upload or update custom certificate chain and key.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "certificates",
            "in": "query",
            "description": "PEM encoded certificate (chain).",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pem-certificate-chain"
            }
          },
          {
            "name": "force",
            "in": "query",
            "description": "Overwrite existing custom or ACME certificate files.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "key",
            "in": "query",
            "description": "PEM encoded private key.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pem-string"
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "restart",
            "in": "query",
            "description": "Restart pveproxy.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "filename": {
                      "optional": 1,
                      "type": "string"
                    },
                    "fingerprint": {
                      "description": "Certificate SHA 256 fingerprint.",
                      "optional": 1,
                      "pattern": "([A-Fa-f0-9]{2}:){31}[A-Fa-f0-9]{2}",
                      "type": "string"
                    },
                    "issuer": {
                      "description": "Certificate issuer name.",
                      "optional": 1,
                      "type": "string"
                    },
                    "notafter": {
                      "description": "Certificate's notAfter timestamp (UNIX epoch).",
                      "optional": 1,
                      "renderer": "timestamp",
                      "type": "integer"
                    },
                    "notbefore": {
                      "description": "Certificate's notBefore timestamp (UNIX epoch).",
                      "optional": 1,
                      "renderer": "timestamp",
                      "type": "integer"
                    },
                    "pem": {
                      "description": "Certificate in PEM format",
                      "format": "pem-certificate",
                      "optional": 1,
                      "type": "string"
                    },
                    "public-key-bits": {
                      "description": "Certificate's public key size",
                      "optional": 1,
                      "type": "integer"
                    },
                    "public-key-type": {
                      "description": "Certificate's public key algorithm",
                      "optional": 1,
                      "type": "string"
                    },
                    "san": {
                      "description": "List of Certificate's SubjectAlternativeName entries.",
                      "items": {
                        "type": "string"
                      },
                      "optional": 1,
                      "renderer": "yaml",
                      "type": "array"
                    },
                    "subject": {
                      "description": "Certificate subject name.",
                      "optional": 1,
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/config": {
      "get": {
        "summary": "Get node configuration options.",
        "description": "Get node configuration options.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "property",
            "in": "query",
            "description": "Return only a specific property from the node configuration.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "all",
              "enum": [
                "acme",
                "acmedomain0",
                "acmedomain1",
                "acmedomain2",
                "acmedomain3",
                "acmedomain4",
                "acmedomain5",
                "ballooning-target",
                "description",
                "startall-onboot-delay",
                "wakeonlan"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "acme": {
                      "description": "Node specific ACME settings.",
                      "format": {
                        "account": {
                          "default": "default",
                          "description": "ACME account config file name.",
                          "format": "pve-configid",
                          "format_description": "name",
                          "optional": 1,
                          "type": "string"
                        },
                        "domains": {
                          "description": "List of domains for this node's ACME certificate",
                          "format": "pve-acme-domain-list",
                          "format_description": "domain[;domain;...]",
                          "optional": 1,
                          "type": "string"
                        }
                      },
                      "optional": 1,
                      "type": "string"
                    },
                    "acmedomain[n]": {
                      "description": "ACME domain and validation plugin",
                      "format": {
                        "alias": {
                          "description": "Alias for the Domain to verify ACME Challenge over DNS",
                          "format": "pve-acme-alias",
                          "format_description": "domain",
                          "optional": 1,
                          "type": "string"
                        },
                        "domain": {
                          "default_key": 1,
                          "description": "domain for this node's ACME certificate",
                          "format": "pve-acme-domain",
                          "format_description": "domain",
                          "type": "string"
                        },
                        "plugin": {
                          "default": "standalone",
                          "description": "The ACME plugin ID",
                          "format": "pve-configid",
                          "format_description": "name of the plugin configuration",
                          "optional": 1,
                          "type": "string"
                        }
                      },
                      "optional": 1,
                      "type": "string"
                    },
                    "ballooning-target": {
                      "default": 80,
                      "description": "RAM usage target for ballooning (in percent of total memory)",
                      "maximum": 100,
                      "minimum": 0,
                      "optional": 1,
                      "type": "integer"
                    },
                    "description": {
                      "description": "Description for the Node. Shown in the web-interface node notes panel. This is saved as comment inside the configuration file.",
                      "maxLength": 65536,
                      "optional": 1,
                      "type": "string"
                    },
                    "digest": {
                      "description": "Prevent changes if current configuration file has different SHA1 digest. This can be used to prevent concurrent modifications.",
                      "maxLength": 40,
                      "optional": 1,
                      "type": "string"
                    },
                    "startall-onboot-delay": {
                      "default": 0,
                      "description": "Initial delay in seconds, before starting all the Virtual Guests with on-boot enabled.",
                      "maximum": 300,
                      "minimum": 0,
                      "optional": 1,
                      "type": "integer"
                    },
                    "wakeonlan": {
                      "description": "Node specific wake on LAN settings.",
                      "format": {
                        "bind-interface": {
                          "default": "The interface carrying the default route",
                          "description": "Bind to this interface when sending wake on LAN packet",
                          "format": "pve-iface",
                          "format_description": "bind interface",
                          "optional": 1,
                          "type": "string"
                        },
                        "broadcast-address": {
                          "default": "255.255.255.255",
                          "description": "IPv4 broadcast address to use when sending wake on LAN packet",
                          "format": "ipv4",
                          "format_description": "IPv4 broadcast address",
                          "optional": 1,
                          "type": "string"
                        },
                        "mac": {
                          "default_key": 1,
                          "description": "MAC address for wake on LAN",
                          "format": "mac-addr",
                          "format_description": "MAC address",
                          "type": "string"
                        }
                      },
                      "optional": 1,
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Set node configuration options.",
        "description": "Set node configuration options.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "acme",
            "in": "query",
            "description": "Node specific ACME settings.",
            "required": false,
            "schema": {
              "type": "string",
              "format": {
                "account": {
                  "default": "default",
                  "description": "ACME account config file name.",
                  "format": "pve-configid",
                  "format_description": "name",
                  "optional": 1,
                  "type": "string"
                },
                "domains": {
                  "description": "List of domains for this node's ACME certificate",
                  "format": "pve-acme-domain-list",
                  "format_description": "domain[;domain;...]",
                  "optional": 1,
                  "type": "string"
                }
              }
            }
          },
          {
            "name": "acmedomain[n]",
            "in": "query",
            "description": "ACME domain and validation plugin",
            "required": false,
            "schema": {
              "type": "string",
              "format": {
                "alias": {
                  "description": "Alias for the Domain to verify ACME Challenge over DNS",
                  "format": "pve-acme-alias",
                  "format_description": "domain",
                  "optional": 1,
                  "type": "string"
                },
                "domain": {
                  "default_key": 1,
                  "description": "domain for this node's ACME certificate",
                  "format": "pve-acme-domain",
                  "format_description": "domain",
                  "type": "string"
                },
                "plugin": {
                  "default": "standalone",
                  "description": "The ACME plugin ID",
                  "format": "pve-configid",
                  "format_description": "name of the plugin configuration",
                  "optional": 1,
                  "type": "string"
                }
              }
            }
          },
          {
            "name": "ballooning-target",
            "in": "query",
            "description": "RAM usage target for ballooning (in percent of total memory)",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 80,
              "minimum": 0,
              "maximum": 100
            }
          },
          {
            "name": "delete",
            "in": "query",
            "description": "A list of settings you want to delete.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-configid-list"
            }
          },
          {
            "name": "description",
            "in": "query",
            "description": "Description for the Node. Shown in the web-interface node notes panel. This is saved as comment inside the configuration file.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 65536
            }
          },
          {
            "name": "digest",
            "in": "query",
            "description": "Prevent changes if current configuration file has different SHA1 digest. This can be used to prevent concurrent modifications.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 40
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "startall-onboot-delay",
            "in": "query",
            "description": "Initial delay in seconds, before starting all the Virtual Guests with on-boot enabled.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0,
              "minimum": 0,
              "maximum": 300
            }
          },
          {
            "name": "wakeonlan",
            "in": "query",
            "description": "Node specific wake on LAN settings.",
            "required": false,
            "schema": {
              "type": "string",
              "format": {
                "bind-interface": {
                  "default": "The interface carrying the default route",
                  "description": "Bind to this interface when sending wake on LAN packet",
                  "format": "pve-iface",
                  "format_description": "bind interface",
                  "optional": 1,
                  "type": "string"
                },
                "broadcast-address": {
                  "default": "255.255.255.255",
                  "description": "IPv4 broadcast address to use when sending wake on LAN packet",
                  "format": "ipv4",
                  "format_description": "IPv4 broadcast address",
                  "optional": 1,
                  "type": "string"
                },
                "mac": {
                  "default_key": 1,
                  "description": "MAC address for wake on LAN",
                  "format": "mac-addr",
                  "format_description": "MAC address",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/sdn": {
      "get": {
        "summary": "SDN index.",
        "description": "SDN index.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {},
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{name}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/sdn/zones": {
      "get": {
        "summary": "Get status for all zones.",
        "description": "Get status for all zones.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "status": {
                        "description": "Status of zone",
                        "enum": [
                          "available",
                          "pending",
                          "error"
                        ],
                        "type": "string"
                      },
                      "zone": {
                        "description": "The SDN zone object identifier.",
                        "format": "pve-sdn-zone-id",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{zone}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/sdn/zones/{zone}": {
      "get": {
        "summary": "",
        "description": "",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "zone",
            "in": "path",
            "description": "The SDN zone object identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-sdn-zone-id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "subdir": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{subdir}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/sdn/zones/{zone}/content": {
      "get": {
        "summary": "List zone content.",
        "description": "List zone content.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "zone",
            "in": "path",
            "description": "The SDN zone object identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-sdn-zone-id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "status": {
                        "description": "Status.",
                        "optional": 1,
                        "type": "string"
                      },
                      "statusmsg": {
                        "description": "Status details",
                        "optional": 1,
                        "type": "string"
                      },
                      "vnet": {
                        "description": "Vnet identifier.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{vnet}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/version": {
      "get": {
        "summary": "API version details",
        "description": "API version details",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "release": {
                      "description": "The current installed Proxmox VE Release",
                      "type": "string"
                    },
                    "repoid": {
                      "description": "The short git commit hash ID from which this version was build",
                      "type": "string"
                    },
                    "version": {
                      "description": "The current installed pve-manager package version",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/status": {
      "get": {
        "summary": "Read node status",
        "description": "Read node status",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": 1,
                  "properties": {
                    "boot-info": {
                      "description": "Meta-information about the boot mode.",
                      "properties": {
                        "mode": {
                          "description": "Through which firmware the system got booted.",
                          "enum": [
                            "efi",
                            "legacy-bios"
                          ],
                          "type": "string"
                        },
                        "secureboot": {
                          "description": "System is booted in secure mode, only applicable for the \"efi\" mode.",
                          "optional": 1,
                          "type": "boolean"
                        }
                      },
                      "type": "object"
                    },
                    "cpu": {
                      "description": "The current cpu usage.",
                      "type": "number"
                    },
                    "cpuinfo": {
                      "properties": {
                        "cores": {
                          "description": "The number of physical cores of the CPU.",
                          "type": "integer"
                        },
                        "cpus": {
                          "description": "The number of logical threads of the CPU.",
                          "type": "integer"
                        },
                        "model": {
                          "description": "The CPU model",
                          "type": "string"
                        },
                        "sockets": {
                          "description": "The number of logical threads of the CPU.",
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    },
                    "current-kernel": {
                      "description": "Meta-information about the currently booted kernel of this node.",
                      "properties": {
                        "machine": {
                          "description": "Hardware (architecture) type",
                          "type": "string"
                        },
                        "release": {
                          "description": "OS kernel release (e.g., \"6.8.0\")",
                          "type": "string"
                        },
                        "sysname": {
                          "description": "OS kernel name (e.g., \"Linux\")",
                          "type": "string"
                        },
                        "version": {
                          "description": "OS kernel version with build info",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "loadavg": {
                      "description": "An array of load avg for 1, 5 and 15 minutes respectively.",
                      "items": {
                        "description": "The value of the load.",
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "memory": {
                      "properties": {
                        "available": {
                          "description": "The available memory in bytes.",
                          "type": "integer"
                        },
                        "free": {
                          "description": "The free memory in bytes.",
                          "type": "integer"
                        },
                        "total": {
                          "description": "The total memory in bytes.",
                          "type": "integer"
                        },
                        "used": {
                          "description": "The used memory in bytes.",
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    },
                    "pveversion": {
                      "description": "The PVE version string.",
                      "type": "string"
                    },
                    "rootfs": {
                      "properties": {
                        "avail": {
                          "description": "The available bytes in the root filesystem.",
                          "type": "integer"
                        },
                        "free": {
                          "description": "The free bytes on the root filesystem.",
                          "type": "integer"
                        },
                        "total": {
                          "description": "The total size of the root filesystem in bytes.",
                          "type": "integer"
                        },
                        "used": {
                          "description": "The used bytes in the root filesystem.",
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Reboot or shutdown a node.",
        "description": "Reboot or shutdown a node.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "command",
            "in": "query",
            "description": "Specify the command.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "reboot",
                "shutdown"
              ]
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/netstat": {
      "get": {
        "summary": "Read tap/vm network device interface counters",
        "description": "Read tap/vm network device interface counters",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {},
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/execute": {
      "post": {
        "summary": "Execute multiple commands in order, root only.",
        "description": "Execute multiple commands in order, root only.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "commands",
            "in": "query",
            "description": "JSON encoded array of commands.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-command-batch"
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {},
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/wakeonlan": {
      "post": {
        "summary": "Try to wake a node via 'wake on LAN' network packet.",
        "description": "Try to wake a node via 'wake on LAN' network packet.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "target node for wake on LAN packet",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "description": "MAC address used to assemble the WoL magic packet.",
                  "format": "mac-addr",
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/rrd": {
      "get": {
        "summary": "Read node RRD statistics (returns PNG)",
        "description": "Read node RRD statistics (returns PNG)",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "cf",
            "in": "query",
            "description": "The RRD consolidation function",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "AVERAGE",
                "MAX"
              ]
            }
          },
          {
            "name": "ds",
            "in": "query",
            "description": "The list of datasources you want to display.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-configid-list"
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "timeframe",
            "in": "query",
            "description": "Specify the time frame you are interested in.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "hour",
                "day",
                "week",
                "month",
                "year",
                "decade"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "filename": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/rrddata": {
      "get": {
        "summary": "Read node RRD statistics",
        "description": "Read node RRD statistics",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "cf",
            "in": "query",
            "description": "The RRD consolidation function",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "AVERAGE",
                "MAX"
              ]
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "timeframe",
            "in": "query",
            "description": "Specify the time frame you are interested in.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "hour",
                "day",
                "week",
                "month",
                "year",
                "decade"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {},
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/syslog": {
      "get": {
        "summary": "Read system log",
        "description": "Read system log",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "service",
            "in": "query",
            "description": "Service ID",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 128
            }
          },
          {
            "name": "since",
            "in": "query",
            "description": "Display all log since this date-time string.",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "^\\d{4}-\\d{2}-\\d{2}( \\d{2}:\\d{2}(:\\d{2})?)?$"
            }
          },
          {
            "name": "start",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "name": "until",
            "in": "query",
            "description": "Display all log until this date-time string.",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "^\\d{4}-\\d{2}-\\d{2}( \\d{2}:\\d{2}(:\\d{2})?)?$"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "n": {
                        "description": "Line number",
                        "type": "integer"
                      },
                      "t": {
                        "description": "Line text",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/journal": {
      "get": {
        "summary": "Read Journal",
        "description": "Read Journal",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "endcursor",
            "in": "query",
            "description": "End before the given Cursor. Conflicts with 'until'",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lastentries",
            "in": "query",
            "description": "Limit to the last X lines. Conflicts with a range.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "since",
            "in": "query",
            "description": "Display all log since this UNIX epoch. Conflicts with 'startcursor'.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "name": "startcursor",
            "in": "query",
            "description": "Start after the given Cursor. Conflicts with 'since'",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "until",
            "in": "query",
            "description": "Display all log until this UNIX epoch. Conflicts with 'endcursor'.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/vncshell": {
      "post": {
        "summary": "Creates a VNC Shell proxy.",
        "description": "Creates a VNC Shell proxy.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "cmd",
            "in": "query",
            "description": "Run specific command or default to login (requires 'root@pam')",
            "required": false,
            "schema": {
              "type": "string",
              "default": "login",
              "enum": [
                "ceph_install",
                "login",
                "upgrade"
              ]
            }
          },
          {
            "name": "cmd-opts",
            "in": "query",
            "description": "Add parameters to a command. Encoded as null terminated strings.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "height",
            "in": "query",
            "description": "sets the height of the console in pixels.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 16,
              "maximum": 2160
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "websocket",
            "in": "query",
            "description": "use websocket instead of standard vnc.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "width",
            "in": "query",
            "description": "sets the width of the console in pixels.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 16,
              "maximum": 4096
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": 0,
                  "properties": {
                    "cert": {
                      "type": "string"
                    },
                    "port": {
                      "type": "integer"
                    },
                    "ticket": {
                      "type": "string"
                    },
                    "upid": {
                      "type": "string"
                    },
                    "user": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/termproxy": {
      "post": {
        "summary": "Creates a VNC Shell proxy.",
        "description": "Creates a VNC Shell proxy.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "cmd",
            "in": "query",
            "description": "Run specific command or default to login (requires 'root@pam')",
            "required": false,
            "schema": {
              "type": "string",
              "default": "login",
              "enum": [
                "ceph_install",
                "login",
                "upgrade"
              ]
            }
          },
          {
            "name": "cmd-opts",
            "in": "query",
            "description": "Add parameters to a command. Encoded as null terminated strings.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": 0,
                  "properties": {
                    "port": {
                      "type": "integer"
                    },
                    "ticket": {
                      "type": "string"
                    },
                    "upid": {
                      "type": "string"
                    },
                    "user": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/vncwebsocket": {
      "get": {
        "summary": "Opens a websocket for VNC traffic.",
        "description": "Opens a websocket for VNC traffic.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "port",
            "in": "query",
            "description": "Port number returned by previous vncproxy call.",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 5900,
              "maximum": 5999
            }
          },
          {
            "name": "vncticket",
            "in": "query",
            "description": "Ticket from previous call to vncproxy.",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 512
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "port": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/spiceshell": {
      "post": {
        "summary": "Creates a SPICE shell.",
        "description": "Creates a SPICE shell.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "cmd",
            "in": "query",
            "description": "Run specific command or default to login (requires 'root@pam')",
            "required": false,
            "schema": {
              "type": "string",
              "default": "login",
              "enum": [
                "ceph_install",
                "login",
                "upgrade"
              ]
            }
          },
          {
            "name": "cmd-opts",
            "in": "query",
            "description": "Add parameters to a command. Encoded as null terminated strings.",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "proxy",
            "in": "query",
            "description": "SPICE proxy server. This can be used by the client to specify the proxy server. All nodes in a cluster runs 'spiceproxy', so it is up to the client to choose one. By default, we return the node where the VM is currently running. As reasonable setting is to use same node you use to connect to the API (This is window.location.hostname for the JS GUI).",
            "required": false,
            "schema": {
              "type": "string",
              "format": "address"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": 1,
                  "description": "Returned values can be directly passed to the 'remote-viewer' application.",
                  "properties": {
                    "host": {
                      "type": "string"
                    },
                    "password": {
                      "type": "string"
                    },
                    "proxy": {
                      "type": "string"
                    },
                    "tls-port": {
                      "type": "integer"
                    },
                    "type": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/dns": {
      "get": {
        "summary": "Read DNS settings.",
        "description": "Read DNS settings.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": 0,
                  "properties": {
                    "dns1": {
                      "description": "First name server IP address.",
                      "optional": 1,
                      "type": "string"
                    },
                    "dns2": {
                      "description": "Second name server IP address.",
                      "optional": 1,
                      "type": "string"
                    },
                    "dns3": {
                      "description": "Third name server IP address.",
                      "optional": 1,
                      "type": "string"
                    },
                    "search": {
                      "description": "Search domain for host-name lookup.",
                      "optional": 1,
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Write DNS settings.",
        "description": "Write DNS settings.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "dns1",
            "in": "query",
            "description": "First name server IP address.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "ip"
            }
          },
          {
            "name": "dns2",
            "in": "query",
            "description": "Second name server IP address.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "ip"
            }
          },
          {
            "name": "dns3",
            "in": "query",
            "description": "Third name server IP address.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "ip"
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Search domain for host-name lookup.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/time": {
      "get": {
        "summary": "Read server time and time zone settings.",
        "description": "Read server time and time zone settings.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": 0,
                  "properties": {
                    "localtime": {
                      "description": "Seconds since 1970-01-01 00:00:00 (local time)",
                      "minimum": 1297163644,
                      "renderer": "timestamp_gmt",
                      "type": "integer"
                    },
                    "time": {
                      "description": "Seconds since 1970-01-01 00:00:00 UTC.",
                      "minimum": 1297163644,
                      "renderer": "timestamp",
                      "type": "integer"
                    },
                    "timezone": {
                      "description": "Time zone",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Set time zone.",
        "description": "Set time zone.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "timezone",
            "in": "query",
            "description": "Time zone. The file '/usr/share/zoneinfo/zone.tab' contains the list of valid names.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/aplinfo": {
      "get": {
        "summary": "Get list of appliances.",
        "description": "Get list of appliances.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {},
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Download appliance templates.",
        "description": "Download appliance templates.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "storage",
            "in": "query",
            "description": "The storage where the template will be stored",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-storage-id"
            }
          },
          {
            "name": "template",
            "in": "query",
            "description": "The template which will downloaded",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 255
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/query-url-metadata": {
      "get": {
        "summary": "Query metadata of an URL: file size, file name and mime type.",
        "description": "Query metadata of an URL: file size, file name and mime type.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "url",
            "in": "query",
            "description": "The URL to query the metadata from.",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "https?://.*"
            }
          },
          {
            "name": "verify-certificates",
            "in": "query",
            "description": "If false, no SSL/TLS certificates will be verified.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "filename": {
                      "optional": 1,
                      "type": "string"
                    },
                    "mimetype": {
                      "optional": 1,
                      "type": "string"
                    },
                    "size": {
                      "optional": 1,
                      "renderer": "bytes",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/report": {
      "get": {
        "summary": "Gather various systems information about a node",
        "description": "Gather various systems information about a node",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/startall": {
      "post": {
        "summary": "Start all VMs and containers located on this node (by default only those with onboot=1).",
        "description": "Start all VMs and containers located on this node (by default only those with onboot=1).",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "force",
            "in": "query",
            "description": "Issue start command even if virtual guest have 'onboot' not set or set to off.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": "off"
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "vms",
            "in": "query",
            "description": "Only consider guests from this comma separated list of VMIDs.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-vmid-list"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/stopall": {
      "post": {
        "summary": "Stop all VMs and Containers.",
        "description": "Stop all VMs and Containers.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "force-stop",
            "in": "query",
            "description": "Force a hard-stop after the timeout.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 1
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "timeout",
            "in": "query",
            "description": "Timeout for each guest shutdown task. Depending on `force-stop`, the shutdown gets then simply aborted or a hard-stop is forced.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 180,
              "minimum": 0,
              "maximum": 7200
            }
          },
          {
            "name": "vms",
            "in": "query",
            "description": "Only consider Guests with these IDs.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-vmid-list"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/suspendall": {
      "post": {
        "summary": "Suspend all VMs.",
        "description": "Suspend all VMs.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "vms",
            "in": "query",
            "description": "Only consider Guests with these IDs.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-vmid-list"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/migrateall": {
      "post": {
        "summary": "Migrate all VMs and Containers.",
        "description": "Migrate all VMs and Containers.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "maxworkers",
            "in": "query",
            "description": "Maximal number of parallel migration job. If not set, uses'max_workers' from datacenter.cfg. One of both must be set!",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "target",
            "in": "query",
            "description": "Target node.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          },
          {
            "name": "vms",
            "in": "query",
            "description": "Only consider Guests with these IDs.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-vmid-list"
            }
          },
          {
            "name": "with-local-disks",
            "in": "query",
            "description": "Enable live storage migration for local disk",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node}/hosts": {
      "get": {
        "summary": "Get the content of /etc/hosts.",
        "description": "Get the content of /etc/hosts.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "description": "The content of /etc/hosts.",
                      "type": "string"
                    },
                    "digest": {
                      "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
                      "maxLength": 64,
                      "optional": 1,
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Write /etc/hosts.",
        "description": "Write /etc/hosts.",
        "tags": [
          "nodes"
        ],
        "parameters": [
          {
            "name": "data",
            "in": "query",
            "description": "The target content of /etc/hosts.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "digest",
            "in": "query",
            "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 64
            }
          },
          {
            "name": "node",
            "in": "path",
            "description": "The cluster node name.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-node"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/storage": {
      "get": {
        "summary": "Storage index.",
        "description": "Storage index.",
        "tags": [
          "storage"
        ],
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "description": "Only list storage of specific type",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "btrfs",
                "cephfs",
                "cifs",
                "dir",
                "esxi",
                "iscsi",
                "iscsidirect",
                "lvm",
                "lvmthin",
                "nfs",
                "pbs",
                "rbd",
                "zfs",
                "zfspool"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "storage": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{storage}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new storage.",
        "description": "Create a new storage.",
        "tags": [
          "storage"
        ],
        "parameters": [
          {
            "name": "authsupported",
            "in": "query",
            "description": "Authsupported.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "base",
            "in": "query",
            "description": "Base volume. This volume is automatically activated.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-volume-id"
            }
          },
          {
            "name": "blocksize",
            "in": "query",
            "description": "block size",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "bwlimit",
            "in": "query",
            "description": "Set I/O bandwidth limit for various operations (in KiB/s).",
            "required": false,
            "schema": {
              "type": "string",
              "format": {
                "clone": {
                  "description": "bandwidth limit in KiB/s for cloning disks",
                  "format_description": "LIMIT",
                  "minimum": "0",
                  "optional": 1,
                  "type": "number"
                },
                "default": {
                  "description": "default bandwidth limit in KiB/s",
                  "format_description": "LIMIT",
                  "minimum": "0",
                  "optional": 1,
                  "type": "number"
                },
                "migration": {
                  "description": "bandwidth limit in KiB/s for migrating guests (including moving local disks)",
                  "format_description": "LIMIT",
                  "minimum": "0",
                  "optional": 1,
                  "type": "number"
                },
                "move": {
                  "description": "bandwidth limit in KiB/s for moving disks",
                  "format_description": "LIMIT",
                  "minimum": "0",
                  "optional": 1,
                  "type": "number"
                },
                "restore": {
                  "description": "bandwidth limit in KiB/s for restoring guests from backups",
                  "format_description": "LIMIT",
                  "minimum": "0",
                  "optional": 1,
                  "type": "number"
                }
              }
            }
          },
          {
            "name": "comstar_hg",
            "in": "query",
            "description": "host group for comstar views",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "comstar_tg",
            "in": "query",
            "description": "target group for comstar views",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "content",
            "in": "query",
            "description": "Allowed content types.\n\nNOTE: the value 'rootdir' is used for Containers, and value 'images' for VMs.\n",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-storage-content-list"
            }
          },
          {
            "name": "content-dirs",
            "in": "query",
            "description": "Overrides for default content type directories.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-dir-override-list"
            }
          },
          {
            "name": "create-base-path",
            "in": "query",
            "description": "Create the base directory if it doesn't exist.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": "yes"
            }
          },
          {
            "name": "create-subdirs",
            "in": "query",
            "description": "Populate the directory with the default structure.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": "yes"
            }
          },
          {
            "name": "data-pool",
            "in": "query",
            "description": "Data Pool (for erasure coding only)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "datastore",
            "in": "query",
            "description": "Proxmox Backup Server datastore name.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "disable",
            "in": "query",
            "description": "Flag to disable the storage.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "domain",
            "in": "query",
            "description": "CIFS domain.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 256
            }
          },
          {
            "name": "encryption-key",
            "in": "query",
            "description": "Encryption key. Use 'autogen' to generate one automatically without passphrase.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "export",
            "in": "query",
            "description": "NFS export path.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-storage-path"
            }
          },
          {
            "name": "fingerprint",
            "in": "query",
            "description": "Certificate SHA 256 fingerprint.",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "([A-Fa-f0-9]{2}:){31}[A-Fa-f0-9]{2}"
            }
          },
          {
            "name": "format",
            "in": "query",
            "description": "Default image format.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "raw",
                "qcow2",
                "subvol",
                "vmdk"
              ]
            }
          },
          {
            "name": "fs-name",
            "in": "query",
            "description": "The Ceph filesystem name.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-configid"
            }
          },
          {
            "name": "fuse",
            "in": "query",
            "description": "Mount CephFS through FUSE.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "is_mountpoint",
            "in": "query",
            "description": "Assume the given path is an externally managed mountpoint and consider the storage offline if it is not mounted. Using a boolean (yes/no) value serves as a shortcut to using the target path in this field.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "no"
            }
          },
          {
            "name": "iscsiprovider",
            "in": "query",
            "description": "iscsi provider",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "keyring",
            "in": "query",
            "description": "Client keyring contents (for external clusters).",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "krbd",
            "in": "query",
            "description": "Always access rbd through krbd kernel module.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "lio_tpg",
            "in": "query",
            "description": "target portal group for Linux LIO targets",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "master-pubkey",
            "in": "query",
            "description": "Base64-encoded, PEM-formatted public RSA key. Used to encrypt a copy of the encryption-key which will be added to each encrypted backup.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "max-protected-backups",
            "in": "query",
            "description": "Maximal number of protected backups per guest. Use '-1' for unlimited.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": "Unlimited for users with Datastore.Allocate privilege, 5 for other users",
              "minimum": -1
            }
          },
          {
            "name": "mkdir",
            "in": "query",
            "description": "Create the directory if it doesn't exist and populate it with default sub-dirs. NOTE: Deprecated, use the 'create-base-path' and 'create-subdirs' options instead.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": "yes"
            }
          },
          {
            "name": "monhost",
            "in": "query",
            "description": "IP addresses of monitors (for external clusters).",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-storage-portal-dns-list"
            }
          },
          {
            "name": "mountpoint",
            "in": "query",
            "description": "mount point",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-storage-path"
            }
          },
          {
            "name": "namespace",
            "in": "query",
            "description": "Namespace.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "nocow",
            "in": "query",
            "description": "Set the NOCOW flag on files. Disables data checksumming and causes data errors to be unrecoverable from while allowing direct I/O. Only use this if data does not need to be any more safe than on a single ext4 formatted disk with no underlying raid system.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "nodes",
            "in": "query",
            "description": "List of nodes for which the storage configuration applies.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-node-list"
            }
          },
          {
            "name": "nowritecache",
            "in": "query",
            "description": "disable write caching on the target",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "options",
            "in": "query",
            "description": "NFS/CIFS mount options (see 'man nfs' or 'man mount.cifs')",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-storage-options"
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "Password for accessing the share/datastore.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 256
            }
          },
          {
            "name": "path",
            "in": "query",
            "description": "File system path.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-storage-path"
            }
          },
          {
            "name": "pool",
            "in": "query",
            "description": "Pool.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "port",
            "in": "query",
            "description": "Use this port to connect to the storage instead of the default one (for example, with PBS or ESXi). For NFS and CIFS, use the 'options' option to configure the port via the mount options.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 65535
            }
          },
          {
            "name": "portal",
            "in": "query",
            "description": "iSCSI portal (IP or DNS name with optional port).",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-storage-portal-dns"
            }
          },
          {
            "name": "preallocation",
            "in": "query",
            "description": "Preallocation mode for raw and qcow2 images. Using 'metadata' on raw images results in preallocation=off.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "metadata",
              "enum": [
                "off",
                "metadata",
                "falloc",
                "full"
              ]
            }
          },
          {
            "name": "prune-backups",
            "in": "query",
            "description": "The retention options with shorter intervals are processed first with --keep-last being the very first one. Each option covers a specific period of time. We say that backups within this period are covered by this option. The next option does not take care of already covered backups and only considers older backups.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "prune-backups"
            }
          },
          {
            "name": "saferemove",
            "in": "query",
            "description": "Zero-out data when removing LVs.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "saferemove_throughput",
            "in": "query",
            "description": "Wipe throughput (cstream -t parameter value).",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "server",
            "in": "query",
            "description": "Server IP or DNS name.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-storage-server"
            }
          },
          {
            "name": "share",
            "in": "query",
            "description": "CIFS share.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "shared",
            "in": "query",
            "description": "Indicate that this is a single storage with the same contents on all nodes (or all listed in the 'nodes' option). It will not make the contents of a local storage automatically accessible to other nodes, it just marks an already shared storage as such!",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "skip-cert-verification",
            "in": "query",
            "description": "Disable TLS certificate verification, only enable on fully trusted networks!",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": "false"
            }
          },
          {
            "name": "smbversion",
            "in": "query",
            "description": "SMB protocol version. 'default' if not set, negotiates the highest SMB2+ version supported by both the client and server.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "default",
              "enum": [
                "default",
                "2.0",
                "2.1",
                "3",
                "3.0",
                "3.11"
              ]
            }
          },
          {
            "name": "snapshot-as-volume-chain",
            "in": "query",
            "description": "Enable support for creating storage-vendor agnostic snapshot through volume backing-chains.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "sparse",
            "in": "query",
            "description": "use sparse volumes",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "storage",
            "in": "query",
            "description": "The storage identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-storage-id"
            }
          },
          {
            "name": "subdir",
            "in": "query",
            "description": "Subdir to mount.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-storage-path"
            }
          },
          {
            "name": "tagged_only",
            "in": "query",
            "description": "Only use logical volumes tagged with 'pve-vm-ID'.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "target",
            "in": "query",
            "description": "iSCSI target.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "thinpool",
            "in": "query",
            "description": "LVM thin pool LV name.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-storage-vgname"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Storage type.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "btrfs",
                "cephfs",
                "cifs",
                "dir",
                "esxi",
                "iscsi",
                "iscsidirect",
                "lvm",
                "lvmthin",
                "nfs",
                "pbs",
                "rbd",
                "zfs",
                "zfspool"
              ]
            }
          },
          {
            "name": "username",
            "in": "query",
            "description": "RBD Id.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "vgname",
            "in": "query",
            "description": "Volume group name.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-storage-vgname"
            }
          },
          {
            "name": "zfs-base-path",
            "in": "query",
            "description": "Base path where to look for the created ZFS block devices. Set automatically during creation if not specified. Usually '/dev/zvol'.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-storage-path"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "config": {
                      "additionalProperties": 1,
                      "description": "Partial, possible server generated, configuration properties.",
                      "optional": 1,
                      "properties": {
                        "encryption-key": {
                          "description": "The, possible auto-generated, encryption-key.",
                          "optional": 1,
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "storage": {
                      "description": "The ID of the created storage.",
                      "type": "string"
                    },
                    "type": {
                      "description": "The type of the created storage.",
                      "enum": [
                        "btrfs",
                        "cephfs",
                        "cifs",
                        "dir",
                        "esxi",
                        "iscsi",
                        "iscsidirect",
                        "lvm",
                        "lvmthin",
                        "nfs",
                        "pbs",
                        "rbd",
                        "zfs",
                        "zfspool"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/storage/{storage}": {
      "delete": {
        "summary": "Delete storage configuration.",
        "description": "Delete storage configuration.",
        "tags": [
          "storage"
        ],
        "parameters": [
          {
            "name": "storage",
            "in": "path",
            "description": "The storage identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-storage-id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Read storage configuration.",
        "description": "Read storage configuration.",
        "tags": [
          "storage"
        ],
        "parameters": [
          {
            "name": "storage",
            "in": "path",
            "description": "The storage identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-storage-id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update storage configuration.",
        "description": "Update storage configuration.",
        "tags": [
          "storage"
        ],
        "parameters": [
          {
            "name": "blocksize",
            "in": "query",
            "description": "block size",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "bwlimit",
            "in": "query",
            "description": "Set I/O bandwidth limit for various operations (in KiB/s).",
            "required": false,
            "schema": {
              "type": "string",
              "format": {
                "clone": {
                  "description": "bandwidth limit in KiB/s for cloning disks",
                  "format_description": "LIMIT",
                  "minimum": "0",
                  "optional": 1,
                  "type": "number"
                },
                "default": {
                  "description": "default bandwidth limit in KiB/s",
                  "format_description": "LIMIT",
                  "minimum": "0",
                  "optional": 1,
                  "type": "number"
                },
                "migration": {
                  "description": "bandwidth limit in KiB/s for migrating guests (including moving local disks)",
                  "format_description": "LIMIT",
                  "minimum": "0",
                  "optional": 1,
                  "type": "number"
                },
                "move": {
                  "description": "bandwidth limit in KiB/s for moving disks",
                  "format_description": "LIMIT",
                  "minimum": "0",
                  "optional": 1,
                  "type": "number"
                },
                "restore": {
                  "description": "bandwidth limit in KiB/s for restoring guests from backups",
                  "format_description": "LIMIT",
                  "minimum": "0",
                  "optional": 1,
                  "type": "number"
                }
              }
            }
          },
          {
            "name": "comstar_hg",
            "in": "query",
            "description": "host group for comstar views",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "comstar_tg",
            "in": "query",
            "description": "target group for comstar views",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "content",
            "in": "query",
            "description": "Allowed content types.\n\nNOTE: the value 'rootdir' is used for Containers, and value 'images' for VMs.\n",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-storage-content-list"
            }
          },
          {
            "name": "content-dirs",
            "in": "query",
            "description": "Overrides for default content type directories.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-dir-override-list"
            }
          },
          {
            "name": "create-base-path",
            "in": "query",
            "description": "Create the base directory if it doesn't exist.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": "yes"
            }
          },
          {
            "name": "create-subdirs",
            "in": "query",
            "description": "Populate the directory with the default structure.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": "yes"
            }
          },
          {
            "name": "data-pool",
            "in": "query",
            "description": "Data Pool (for erasure coding only)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "delete",
            "in": "query",
            "description": "A list of settings you want to delete.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-configid-list",
              "maxLength": 4096
            }
          },
          {
            "name": "digest",
            "in": "query",
            "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 64
            }
          },
          {
            "name": "disable",
            "in": "query",
            "description": "Flag to disable the storage.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "domain",
            "in": "query",
            "description": "CIFS domain.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 256
            }
          },
          {
            "name": "encryption-key",
            "in": "query",
            "description": "Encryption key. Use 'autogen' to generate one automatically without passphrase.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fingerprint",
            "in": "query",
            "description": "Certificate SHA 256 fingerprint.",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "([A-Fa-f0-9]{2}:){31}[A-Fa-f0-9]{2}"
            }
          },
          {
            "name": "format",
            "in": "query",
            "description": "Default image format.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "raw",
                "qcow2",
                "subvol",
                "vmdk"
              ]
            }
          },
          {
            "name": "fs-name",
            "in": "query",
            "description": "The Ceph filesystem name.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-configid"
            }
          },
          {
            "name": "fuse",
            "in": "query",
            "description": "Mount CephFS through FUSE.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "is_mountpoint",
            "in": "query",
            "description": "Assume the given path is an externally managed mountpoint and consider the storage offline if it is not mounted. Using a boolean (yes/no) value serves as a shortcut to using the target path in this field.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "no"
            }
          },
          {
            "name": "keyring",
            "in": "query",
            "description": "Client keyring contents (for external clusters).",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "krbd",
            "in": "query",
            "description": "Always access rbd through krbd kernel module.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "lio_tpg",
            "in": "query",
            "description": "target portal group for Linux LIO targets",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "master-pubkey",
            "in": "query",
            "description": "Base64-encoded, PEM-formatted public RSA key. Used to encrypt a copy of the encryption-key which will be added to each encrypted backup.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "max-protected-backups",
            "in": "query",
            "description": "Maximal number of protected backups per guest. Use '-1' for unlimited.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": "Unlimited for users with Datastore.Allocate privilege, 5 for other users",
              "minimum": -1
            }
          },
          {
            "name": "mkdir",
            "in": "query",
            "description": "Create the directory if it doesn't exist and populate it with default sub-dirs. NOTE: Deprecated, use the 'create-base-path' and 'create-subdirs' options instead.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": "yes"
            }
          },
          {
            "name": "monhost",
            "in": "query",
            "description": "IP addresses of monitors (for external clusters).",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-storage-portal-dns-list"
            }
          },
          {
            "name": "mountpoint",
            "in": "query",
            "description": "mount point",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-storage-path"
            }
          },
          {
            "name": "namespace",
            "in": "query",
            "description": "Namespace.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "nocow",
            "in": "query",
            "description": "Set the NOCOW flag on files. Disables data checksumming and causes data errors to be unrecoverable from while allowing direct I/O. Only use this if data does not need to be any more safe than on a single ext4 formatted disk with no underlying raid system.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "nodes",
            "in": "query",
            "description": "List of nodes for which the storage configuration applies.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-node-list"
            }
          },
          {
            "name": "nowritecache",
            "in": "query",
            "description": "disable write caching on the target",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "options",
            "in": "query",
            "description": "NFS/CIFS mount options (see 'man nfs' or 'man mount.cifs')",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-storage-options"
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "Password for accessing the share/datastore.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 256
            }
          },
          {
            "name": "pool",
            "in": "query",
            "description": "Pool.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "port",
            "in": "query",
            "description": "Use this port to connect to the storage instead of the default one (for example, with PBS or ESXi). For NFS and CIFS, use the 'options' option to configure the port via the mount options.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 65535
            }
          },
          {
            "name": "preallocation",
            "in": "query",
            "description": "Preallocation mode for raw and qcow2 images. Using 'metadata' on raw images results in preallocation=off.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "metadata",
              "enum": [
                "off",
                "metadata",
                "falloc",
                "full"
              ]
            }
          },
          {
            "name": "prune-backups",
            "in": "query",
            "description": "The retention options with shorter intervals are processed first with --keep-last being the very first one. Each option covers a specific period of time. We say that backups within this period are covered by this option. The next option does not take care of already covered backups and only considers older backups.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "prune-backups"
            }
          },
          {
            "name": "saferemove",
            "in": "query",
            "description": "Zero-out data when removing LVs.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "saferemove_throughput",
            "in": "query",
            "description": "Wipe throughput (cstream -t parameter value).",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "server",
            "in": "query",
            "description": "Server IP or DNS name.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-storage-server"
            }
          },
          {
            "name": "shared",
            "in": "query",
            "description": "Indicate that this is a single storage with the same contents on all nodes (or all listed in the 'nodes' option). It will not make the contents of a local storage automatically accessible to other nodes, it just marks an already shared storage as such!",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "skip-cert-verification",
            "in": "query",
            "description": "Disable TLS certificate verification, only enable on fully trusted networks!",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": "false"
            }
          },
          {
            "name": "smbversion",
            "in": "query",
            "description": "SMB protocol version. 'default' if not set, negotiates the highest SMB2+ version supported by both the client and server.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "default",
              "enum": [
                "default",
                "2.0",
                "2.1",
                "3",
                "3.0",
                "3.11"
              ]
            }
          },
          {
            "name": "snapshot-as-volume-chain",
            "in": "query",
            "description": "Enable support for creating storage-vendor agnostic snapshot through volume backing-chains.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "sparse",
            "in": "query",
            "description": "use sparse volumes",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "storage",
            "in": "path",
            "description": "The storage identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-storage-id"
            }
          },
          {
            "name": "subdir",
            "in": "query",
            "description": "Subdir to mount.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-storage-path"
            }
          },
          {
            "name": "tagged_only",
            "in": "query",
            "description": "Only use logical volumes tagged with 'pve-vm-ID'.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "username",
            "in": "query",
            "description": "RBD Id.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "zfs-base-path",
            "in": "query",
            "description": "Base path where to look for the created ZFS block devices. Set automatically during creation if not specified. Usually '/dev/zvol'.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-storage-path"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "config": {
                      "additionalProperties": 1,
                      "description": "Partial, possible server generated, configuration properties.",
                      "optional": 1,
                      "properties": {
                        "encryption-key": {
                          "description": "The, possible auto-generated, encryption-key.",
                          "optional": 1,
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "storage": {
                      "description": "The ID of the created storage.",
                      "type": "string"
                    },
                    "type": {
                      "description": "The type of the created storage.",
                      "enum": [
                        "btrfs",
                        "cephfs",
                        "cifs",
                        "dir",
                        "esxi",
                        "iscsi",
                        "iscsidirect",
                        "lvm",
                        "lvmthin",
                        "nfs",
                        "pbs",
                        "rbd",
                        "zfs",
                        "zfspool"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/access": {
      "get": {
        "summary": "Directory index.",
        "description": "Directory index.",
        "tags": [
          "access"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "subdir": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{subdir}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/access/users": {
      "get": {
        "summary": "User index.",
        "description": "User index.",
        "tags": [
          "access"
        ],
        "parameters": [
          {
            "name": "enabled",
            "in": "query",
            "description": "Optional filter for enable property.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "full",
            "in": "query",
            "description": "Include group and token information.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "comment": {
                        "maxLength": 2048,
                        "optional": 1,
                        "type": "string"
                      },
                      "email": {
                        "format": "email-opt",
                        "maxLength": 254,
                        "optional": 1,
                        "type": "string"
                      },
                      "enable": {
                        "default": 1,
                        "description": "Enable the account (default). You can set this to '0' to disable the account",
                        "optional": 1,
                        "type": "boolean"
                      },
                      "expire": {
                        "description": "Account expiration date (seconds since epoch). '0' means no expiration date.",
                        "minimum": 0,
                        "optional": 1,
                        "type": "integer"
                      },
                      "firstname": {
                        "maxLength": 1024,
                        "optional": 1,
                        "type": "string"
                      },
                      "groups": {
                        "format": "pve-groupid-list",
                        "optional": 1,
                        "type": "string"
                      },
                      "keys": {
                        "description": "Keys for two factor auth (yubico).",
                        "optional": 1,
                        "pattern": "[0-9a-zA-Z!=]{0,4096}",
                        "type": "string"
                      },
                      "lastname": {
                        "maxLength": 1024,
                        "optional": 1,
                        "type": "string"
                      },
                      "realm-type": {
                        "description": "The type of the users realm",
                        "format": "pve-realm",
                        "optional": 1,
                        "type": "string"
                      },
                      "tfa-locked-until": {
                        "description": "Contains a timestamp until when a user is locked out of 2nd factors.",
                        "optional": 1,
                        "type": "integer"
                      },
                      "tokens": {
                        "items": {
                          "properties": {
                            "comment": {
                              "optional": 1,
                              "type": "string"
                            },
                            "expire": {
                              "default": "same as user",
                              "description": "API token expiration date (seconds since epoch). '0' means no expiration date.",
                              "minimum": 0,
                              "optional": 1,
                              "type": "integer"
                            },
                            "privsep": {
                              "default": 1,
                              "description": "Restrict API token privileges with separate ACLs (default), or give full privileges of corresponding user.",
                              "optional": 1,
                              "type": "boolean"
                            },
                            "tokenid": {
                              "description": "User-specific token identifier.",
                              "pattern": "(?^:[A-Za-z][A-Za-z0-9\\.\\-_]+)",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "optional": 1,
                        "type": "array"
                      },
                      "totp-locked": {
                        "description": "True if the user is currently locked out of TOTP factors.",
                        "optional": 1,
                        "type": "boolean"
                      },
                      "userid": {
                        "description": "Full User ID, in the `name@realm` format.",
                        "format": "pve-userid",
                        "maxLength": 64,
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{userid}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create new user.",
        "description": "Create new user.",
        "tags": [
          "access"
        ],
        "parameters": [
          {
            "name": "comment",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 2048
            }
          },
          {
            "name": "email",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "email-opt",
              "maxLength": 254
            }
          },
          {
            "name": "enable",
            "in": "query",
            "description": "Enable the account (default). You can set this to '0' to disable the account",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 1
            }
          },
          {
            "name": "expire",
            "in": "query",
            "description": "Account expiration date (seconds since epoch). '0' means no expiration date.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "name": "firstname",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 1024
            }
          },
          {
            "name": "groups",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-groupid-list"
            }
          },
          {
            "name": "keys",
            "in": "query",
            "description": "Keys for two factor auth (yubico).",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "[0-9a-zA-Z!=]{0,4096}"
            }
          },
          {
            "name": "lastname",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 1024
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "Initial password.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 64
            }
          },
          {
            "name": "userid",
            "in": "query",
            "description": "Full User ID, in the `name@realm` format.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-userid",
              "maxLength": 64
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/access/users/{userid}": {
      "delete": {
        "summary": "Delete user.",
        "description": "Delete user.",
        "tags": [
          "access"
        ],
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "description": "Full User ID, in the `name@realm` format.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-userid",
              "maxLength": 64
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Get user configuration.",
        "description": "Get user configuration.",
        "tags": [
          "access"
        ],
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "description": "Full User ID, in the `name@realm` format.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-userid",
              "maxLength": 64
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": 0,
                  "properties": {
                    "comment": {
                      "maxLength": 2048,
                      "optional": 1,
                      "type": "string"
                    },
                    "email": {
                      "format": "email-opt",
                      "maxLength": 254,
                      "optional": 1,
                      "type": "string"
                    },
                    "enable": {
                      "default": 1,
                      "description": "Enable the account (default). You can set this to '0' to disable the account",
                      "optional": 1,
                      "type": "boolean"
                    },
                    "expire": {
                      "description": "Account expiration date (seconds since epoch). '0' means no expiration date.",
                      "minimum": 0,
                      "optional": 1,
                      "type": "integer"
                    },
                    "firstname": {
                      "maxLength": 1024,
                      "optional": 1,
                      "type": "string"
                    },
                    "groups": {
                      "items": {
                        "format": "pve-groupid",
                        "type": "string"
                      },
                      "optional": 1,
                      "type": "array"
                    },
                    "keys": {
                      "description": "Keys for two factor auth (yubico).",
                      "optional": 1,
                      "pattern": "[0-9a-zA-Z!=]{0,4096}",
                      "type": "string"
                    },
                    "lastname": {
                      "maxLength": 1024,
                      "optional": 1,
                      "type": "string"
                    },
                    "tokens": {
                      "additionalProperties": {
                        "properties": {
                          "comment": {
                            "optional": 1,
                            "type": "string"
                          },
                          "expire": {
                            "default": "same as user",
                            "description": "API token expiration date (seconds since epoch). '0' means no expiration date.",
                            "minimum": 0,
                            "optional": 1,
                            "type": "integer"
                          },
                          "privsep": {
                            "default": 1,
                            "description": "Restrict API token privileges with separate ACLs (default), or give full privileges of corresponding user.",
                            "optional": 1,
                            "type": "boolean"
                          }
                        },
                        "type": "object"
                      },
                      "optional": 1,
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update user configuration.",
        "description": "Update user configuration.",
        "tags": [
          "access"
        ],
        "parameters": [
          {
            "name": "append",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "comment",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 2048
            }
          },
          {
            "name": "email",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "email-opt",
              "maxLength": 254
            }
          },
          {
            "name": "enable",
            "in": "query",
            "description": "Enable the account (default). You can set this to '0' to disable the account",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 1
            }
          },
          {
            "name": "expire",
            "in": "query",
            "description": "Account expiration date (seconds since epoch). '0' means no expiration date.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "name": "firstname",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 1024
            }
          },
          {
            "name": "groups",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-groupid-list"
            }
          },
          {
            "name": "keys",
            "in": "query",
            "description": "Keys for two factor auth (yubico).",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "[0-9a-zA-Z!=]{0,4096}"
            }
          },
          {
            "name": "lastname",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 1024
            }
          },
          {
            "name": "userid",
            "in": "path",
            "description": "Full User ID, in the `name@realm` format.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-userid",
              "maxLength": 64
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/access/users/{userid}/tfa": {
      "get": {
        "summary": "Get user TFA types (Personal and Realm).",
        "description": "Get user TFA types (Personal and Realm).",
        "tags": [
          "access"
        ],
        "parameters": [
          {
            "name": "multiple",
            "in": "query",
            "description": "Request all entries as an array.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "userid",
            "in": "path",
            "description": "Full User ID, in the `name@realm` format.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-userid",
              "maxLength": 64
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": 0,
                  "properties": {
                    "realm": {
                      "description": "The type of TFA the users realm has set, if any.",
                      "enum": [
                        "oath",
                        "yubico"
                      ],
                      "optional": 1,
                      "type": "string"
                    },
                    "types": {
                      "description": "Array of the user configured TFA types, if any. Only available if 'multiple' was not passed.",
                      "items": {
                        "description": "A TFA type.",
                        "enum": [
                          "totp",
                          "u2f",
                          "yubico",
                          "webauthn",
                          "recovedry"
                        ],
                        "type": "string"
                      },
                      "optional": 1,
                      "type": "array"
                    },
                    "user": {
                      "description": "The type of TFA the user has set, if any. Only set if 'multiple' was not passed.",
                      "enum": [
                        "oath",
                        "u2f"
                      ],
                      "optional": 1,
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/access/users/{userid}/unlock-tfa": {
      "put": {
        "summary": "Unlock a user's TFA authentication.",
        "description": "Unlock a user's TFA authentication.",
        "tags": [
          "access"
        ],
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "description": "Full User ID, in the `name@realm` format.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-userid",
              "maxLength": 64
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/access/users/{userid}/token": {
      "get": {
        "summary": "Get user API tokens.",
        "description": "Get user API tokens.",
        "tags": [
          "access"
        ],
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "description": "Full User ID, in the `name@realm` format.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-userid",
              "maxLength": 64
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "comment": {
                        "optional": 1,
                        "type": "string"
                      },
                      "expire": {
                        "default": "same as user",
                        "description": "API token expiration date (seconds since epoch). '0' means no expiration date.",
                        "minimum": 0,
                        "optional": 1,
                        "type": "integer"
                      },
                      "privsep": {
                        "default": 1,
                        "description": "Restrict API token privileges with separate ACLs (default), or give full privileges of corresponding user.",
                        "optional": 1,
                        "type": "boolean"
                      },
                      "tokenid": {
                        "description": "User-specific token identifier.",
                        "pattern": "(?^:[A-Za-z][A-Za-z0-9\\.\\-_]+)",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{tokenid}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/access/users/{userid}/token/{tokenid}": {
      "delete": {
        "summary": "Remove API token for a specific user.",
        "description": "Remove API token for a specific user.",
        "tags": [
          "access"
        ],
        "parameters": [
          {
            "name": "tokenid",
            "in": "path",
            "description": "User-specific token identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "(?^:[A-Za-z][A-Za-z0-9\\.\\-_]+)"
            }
          },
          {
            "name": "userid",
            "in": "path",
            "description": "Full User ID, in the `name@realm` format.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-userid",
              "maxLength": 64
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Get specific API token information.",
        "description": "Get specific API token information.",
        "tags": [
          "access"
        ],
        "parameters": [
          {
            "name": "tokenid",
            "in": "path",
            "description": "User-specific token identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "(?^:[A-Za-z][A-Za-z0-9\\.\\-_]+)"
            }
          },
          {
            "name": "userid",
            "in": "path",
            "description": "Full User ID, in the `name@realm` format.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-userid",
              "maxLength": 64
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "comment": {
                      "optional": 1,
                      "type": "string"
                    },
                    "expire": {
                      "default": "same as user",
                      "description": "API token expiration date (seconds since epoch). '0' means no expiration date.",
                      "minimum": 0,
                      "optional": 1,
                      "type": "integer"
                    },
                    "privsep": {
                      "default": 1,
                      "description": "Restrict API token privileges with separate ACLs (default), or give full privileges of corresponding user.",
                      "optional": 1,
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Generate a new API token for a specific user. NOTE: returns API token value, which needs to be stored as it cannot be retrieved afterwards!",
        "description": "Generate a new API token for a specific user. NOTE: returns API token value, which needs to be stored as it cannot be retrieved afterwards!",
        "tags": [
          "access"
        ],
        "parameters": [
          {
            "name": "comment",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expire",
            "in": "query",
            "description": "API token expiration date (seconds since epoch). '0' means no expiration date.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": "same as user",
              "minimum": 0
            }
          },
          {
            "name": "privsep",
            "in": "query",
            "description": "Restrict API token privileges with separate ACLs (default), or give full privileges of corresponding user.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 1
            }
          },
          {
            "name": "tokenid",
            "in": "path",
            "description": "User-specific token identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "(?^:[A-Za-z][A-Za-z0-9\\.\\-_]+)"
            }
          },
          {
            "name": "userid",
            "in": "path",
            "description": "Full User ID, in the `name@realm` format.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-userid",
              "maxLength": 64
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": 0,
                  "properties": {
                    "full-tokenid": {
                      "description": "The full token id.",
                      "format_description": "<userid>!<tokenid>",
                      "type": "string"
                    },
                    "info": {
                      "properties": {
                        "comment": {
                          "optional": 1,
                          "type": "string"
                        },
                        "expire": {
                          "default": "same as user",
                          "description": "API token expiration date (seconds since epoch). '0' means no expiration date.",
                          "minimum": 0,
                          "optional": 1,
                          "type": "integer"
                        },
                        "privsep": {
                          "default": 1,
                          "description": "Restrict API token privileges with separate ACLs (default), or give full privileges of corresponding user.",
                          "optional": 1,
                          "type": "boolean"
                        }
                      },
                      "type": "object"
                    },
                    "value": {
                      "description": "API token value used for authentication.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update API token for a specific user.",
        "description": "Update API token for a specific user.",
        "tags": [
          "access"
        ],
        "parameters": [
          {
            "name": "comment",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expire",
            "in": "query",
            "description": "API token expiration date (seconds since epoch). '0' means no expiration date.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": "same as user",
              "minimum": 0
            }
          },
          {
            "name": "privsep",
            "in": "query",
            "description": "Restrict API token privileges with separate ACLs (default), or give full privileges of corresponding user.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 1
            }
          },
          {
            "name": "tokenid",
            "in": "path",
            "description": "User-specific token identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "(?^:[A-Za-z][A-Za-z0-9\\.\\-_]+)"
            }
          },
          {
            "name": "userid",
            "in": "path",
            "description": "Full User ID, in the `name@realm` format.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-userid",
              "maxLength": 64
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Updated token information.",
                  "properties": {
                    "comment": {
                      "optional": 1,
                      "type": "string"
                    },
                    "expire": {
                      "default": "same as user",
                      "description": "API token expiration date (seconds since epoch). '0' means no expiration date.",
                      "minimum": 0,
                      "optional": 1,
                      "type": "integer"
                    },
                    "privsep": {
                      "default": 1,
                      "description": "Restrict API token privileges with separate ACLs (default), or give full privileges of corresponding user.",
                      "optional": 1,
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/access/groups": {
      "get": {
        "summary": "Group index.",
        "description": "Group index.",
        "tags": [
          "access"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "comment": {
                        "optional": 1,
                        "type": "string"
                      },
                      "groupid": {
                        "format": "pve-groupid",
                        "type": "string"
                      },
                      "users": {
                        "description": "list of users which form this group",
                        "format": "pve-userid-list",
                        "optional": 1,
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{groupid}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create new group.",
        "description": "Create new group.",
        "tags": [
          "access"
        ],
        "parameters": [
          {
            "name": "comment",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groupid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-groupid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/access/groups/{groupid}": {
      "delete": {
        "summary": "Delete group.",
        "description": "Delete group.",
        "tags": [
          "access"
        ],
        "parameters": [
          {
            "name": "groupid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-groupid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Get group configuration.",
        "description": "Get group configuration.",
        "tags": [
          "access"
        ],
        "parameters": [
          {
            "name": "groupid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-groupid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": 0,
                  "properties": {
                    "comment": {
                      "optional": 1,
                      "type": "string"
                    },
                    "members": {
                      "items": {
                        "description": "Full User ID, in the `name@realm` format.",
                        "format": "pve-userid",
                        "maxLength": 64,
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update group data.",
        "description": "Update group data.",
        "tags": [
          "access"
        ],
        "parameters": [
          {
            "name": "comment",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groupid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-groupid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/access/roles": {
      "get": {
        "summary": "Role index.",
        "description": "Role index.",
        "tags": [
          "access"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "privs": {
                        "format": "pve-priv-list",
                        "optional": 1,
                        "type": "string"
                      },
                      "roleid": {
                        "format": "pve-roleid",
                        "type": "string"
                      },
                      "special": {
                        "default": 0,
                        "optional": 1,
                        "type": "boolean"
                      }
                    },
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{roleid}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create new role.",
        "description": "Create new role.",
        "tags": [
          "access"
        ],
        "parameters": [
          {
            "name": "privs",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-priv-list"
            }
          },
          {
            "name": "roleid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-roleid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/access/roles/{roleid}": {
      "delete": {
        "summary": "Delete role.",
        "description": "Delete role.",
        "tags": [
          "access"
        ],
        "parameters": [
          {
            "name": "roleid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-roleid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Get role configuration.",
        "description": "Get role configuration.",
        "tags": [
          "access"
        ],
        "parameters": [
          {
            "name": "roleid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-roleid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": 0,
                  "properties": {
                    "Datastore.Allocate": {
                      "optional": 1,
                      "type": "boolean"
                    },
                    "Datastore.AllocateSpace": {
                      "optional": 1,
                      "type": "boolean"
                    },
                    "Datastore.AllocateTemplate": {
                      "optional": 1,
                      "type": "boolean"
                    },
                    "Datastore.Audit": {
                      "optional": 1,
                      "type": "boolean"
                    },
                    "Group.Allocate": {
                      "optional": 1,
                      "type": "boolean"
                    },
                    "Mapping.Audit": {
                      "optional": 1,
                      "type": "boolean"
                    },
                    "Mapping.Modify": {
                      "optional": 1,
                      "type": "boolean"
                    },
                    "Mapping.Use": {
                      "optional": 1,
                      "type": "boolean"
                    },
                    "Permissions.Modify": {
                      "optional": 1,
                      "type": "boolean"
                    },
                    "Pool.Allocate": {
                      "optional": 1,
                      "type": "boolean"
                    },
                    "Pool.Audit": {
                      "optional": 1,
                      "type": "boolean"
                    },
                    "Realm.Allocate": {
                      "optional": 1,
                      "type": "boolean"
                    },
                    "Realm.AllocateUser": {
                      "optional": 1,
                      "type": "boolean"
                    },
                    "SDN.Allocate": {
                      "optional": 1,
                      "type": "boolean"
                    },
                    "SDN.Audit": {
                      "optional": 1,
                      "type": "boolean"
                    },
                    "SDN.Use": {
                      "optional": 1,
                      "type": "boolean"
                    },
                    "Sys.AccessNetwork": {
                      "optional": 1,
                      "type": "boolean"
                    },
                    "Sys.Audit": {
                      "optional": 1,
                      "type": "boolean"
                    },
                    "Sys.Console": {
                      "optional": 1,
                      "type": "boolean"
                    },
                    "Sys.Incoming": {
                      "optional": 1,
                      "type": "boolean"
                    },
                    "Sys.Modify": {
                      "optional": 1,
                      "type": "boolean"
                    },
                    "Sys.PowerMgmt": {
                      "optional": 1,
                      "type": "boolean"
                    },
                    "Sys.Syslog": {
                      "optional": 1,
                      "type": "boolean"
                    },
                    "User.Modify": {
                      "optional": 1,
                      "type": "boolean"
                    },
                    "VM.Allocate": {
                      "optional": 1,
                      "type": "boolean"
                    },
                    "VM.Audit": {
                      "optional": 1,
                      "type": "boolean"
                    },
                    "VM.Backup": {
                      "optional": 1,
                      "type": "boolean"
                    },
                    "VM.Clone": {
                      "optional": 1,
                      "type": "boolean"
                    },
                    "VM.Config.CDROM": {
                      "optional": 1,
                      "type": "boolean"
                    },
                    "VM.Config.CPU": {
                      "optional": 1,
                      "type": "boolean"
                    },
                    "VM.Config.Cloudinit": {
                      "optional": 1,
                      "type": "boolean"
                    },
                    "VM.Config.Disk": {
                      "optional": 1,
                      "type": "boolean"
                    },
                    "VM.Config.HWType": {
                      "optional": 1,
                      "type": "boolean"
                    },
                    "VM.Config.Memory": {
                      "optional": 1,
                      "type": "boolean"
                    },
                    "VM.Config.Network": {
                      "optional": 1,
                      "type": "boolean"
                    },
                    "VM.Config.Options": {
                      "optional": 1,
                      "type": "boolean"
                    },
                    "VM.Console": {
                      "optional": 1,
                      "type": "boolean"
                    },
                    "VM.GuestAgent.Audit": {
                      "optional": 1,
                      "type": "boolean"
                    },
                    "VM.GuestAgent.FileRead": {
                      "optional": 1,
                      "type": "boolean"
                    },
                    "VM.GuestAgent.FileSystemMgmt": {
                      "optional": 1,
                      "type": "boolean"
                    },
                    "VM.GuestAgent.FileWrite": {
                      "optional": 1,
                      "type": "boolean"
                    },
                    "VM.GuestAgent.Unrestricted": {
                      "optional": 1,
                      "type": "boolean"
                    },
                    "VM.Migrate": {
                      "optional": 1,
                      "type": "boolean"
                    },
                    "VM.PowerMgmt": {
                      "optional": 1,
                      "type": "boolean"
                    },
                    "VM.Replicate": {
                      "optional": 1,
                      "type": "boolean"
                    },
                    "VM.Snapshot": {
                      "optional": 1,
                      "type": "boolean"
                    },
                    "VM.Snapshot.Rollback": {
                      "optional": 1,
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update an existing role.",
        "description": "Update an existing role.",
        "tags": [
          "access"
        ],
        "parameters": [
          {
            "name": "append",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "privs",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-priv-list"
            }
          },
          {
            "name": "roleid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-roleid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/access/acl": {
      "get": {
        "summary": "Get Access Control List (ACLs).",
        "description": "Get Access Control List (ACLs).",
        "tags": [
          "access"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "additionalProperties": 0,
                    "properties": {
                      "path": {
                        "description": "Access control path",
                        "type": "string"
                      },
                      "propagate": {
                        "default": 1,
                        "description": "Allow to propagate (inherit) permissions.",
                        "optional": 1,
                        "type": "boolean"
                      },
                      "roleid": {
                        "type": "string"
                      },
                      "type": {
                        "enum": [
                          "user",
                          "group",
                          "token"
                        ],
                        "type": "string"
                      },
                      "ugid": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update Access Control List (add or remove permissions).",
        "description": "Update Access Control List (add or remove permissions).",
        "tags": [
          "access"
        ],
        "parameters": [
          {
            "name": "delete",
            "in": "query",
            "description": "Remove permissions (instead of adding it).",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "groups",
            "in": "query",
            "description": "List of groups.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-groupid-list"
            }
          },
          {
            "name": "path",
            "in": "query",
            "description": "Access control path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "propagate",
            "in": "query",
            "description": "Allow to propagate (inherit) permissions.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 1
            }
          },
          {
            "name": "roles",
            "in": "query",
            "description": "List of roles.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-roleid-list"
            }
          },
          {
            "name": "tokens",
            "in": "query",
            "description": "List of API tokens.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-tokenid-list"
            }
          },
          {
            "name": "users",
            "in": "query",
            "description": "List of users.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-userid-list"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/access/domains": {
      "get": {
        "summary": "Authentication domain index.",
        "description": "Authentication domain index.",
        "tags": [
          "access"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "comment": {
                        "description": "A comment. The GUI use this text when you select a domain (Realm) on the login window.",
                        "optional": 1,
                        "type": "string"
                      },
                      "realm": {
                        "type": "string"
                      },
                      "tfa": {
                        "description": "Two-factor authentication provider.",
                        "enum": [
                          "yubico",
                          "oath"
                        ],
                        "optional": 1,
                        "type": "string"
                      },
                      "type": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{realm}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Add an authentication server.",
        "description": "Add an authentication server.",
        "tags": [
          "access"
        ],
        "parameters": [
          {
            "name": "acr-values",
            "in": "query",
            "description": "Specifies the Authentication Context Class Reference values that theAuthorization Server is being requested to use for the Auth Request.",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "^[^\\x00-\\x1F\\x7F <>#\"]*$"
            }
          },
          {
            "name": "autocreate",
            "in": "query",
            "description": "Automatically create users if they do not exist.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "base_dn",
            "in": "query",
            "description": "LDAP base domain name",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 256
            }
          },
          {
            "name": "bind_dn",
            "in": "query",
            "description": "LDAP bind domain name",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 256
            }
          },
          {
            "name": "capath",
            "in": "query",
            "description": "Path to the CA certificate store",
            "required": false,
            "schema": {
              "type": "string",
              "default": "/etc/ssl/certs"
            }
          },
          {
            "name": "case-sensitive",
            "in": "query",
            "description": "username is case-sensitive",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 1
            }
          },
          {
            "name": "cert",
            "in": "query",
            "description": "Path to the client certificate",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "certkey",
            "in": "query",
            "description": "Path to the client certificate key",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "check-connection",
            "in": "query",
            "description": "Check bind connection to the server.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "client-id",
            "in": "query",
            "description": "OpenID Client ID",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 256
            }
          },
          {
            "name": "client-key",
            "in": "query",
            "description": "OpenID Client Key",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 256
            }
          },
          {
            "name": "comment",
            "in": "query",
            "description": "Description.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 4096
            }
          },
          {
            "name": "default",
            "in": "query",
            "description": "Use this as default realm",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "domain",
            "in": "query",
            "description": "AD domain name",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "\\S+",
              "maxLength": 256
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "LDAP filter for user sync.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 2048
            }
          },
          {
            "name": "group_classes",
            "in": "query",
            "description": "The objectclasses for groups.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "groupOfNames, group, univentionGroup, ipausergroup",
              "format": "ldap-simple-attr-list"
            }
          },
          {
            "name": "group_dn",
            "in": "query",
            "description": "LDAP base domain name for group sync. If not set, the base_dn will be used.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 256
            }
          },
          {
            "name": "group_filter",
            "in": "query",
            "description": "LDAP filter for group sync.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 2048
            }
          },
          {
            "name": "group_name_attr",
            "in": "query",
            "description": "LDAP attribute representing a groups name. If not set or found, the first value of the DN will be used as name.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "ldap-simple-attr",
              "maxLength": 256
            }
          },
          {
            "name": "groups-autocreate",
            "in": "query",
            "description": "Automatically create groups if they do not exist.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "groups-claim",
            "in": "query",
            "description": "OpenID claim used to retrieve groups with.",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "(?^:[A-Za-z0-9\\.\\-_]+)",
              "maxLength": 256
            }
          },
          {
            "name": "groups-overwrite",
            "in": "query",
            "description": "All groups will be overwritten for the user on login.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "issuer-url",
            "in": "query",
            "description": "OpenID Issuer Url",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 256
            }
          },
          {
            "name": "mode",
            "in": "query",
            "description": "LDAP protocol mode.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "ldap",
              "enum": [
                "ldap",
                "ldaps",
                "ldap+starttls"
              ]
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "LDAP bind password. Will be stored in '/etc/pve/priv/realm/<REALM>.pw'.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "port",
            "in": "query",
            "description": "Server port.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 65535
            }
          },
          {
            "name": "prompt",
            "in": "query",
            "description": "Specifies whether the Authorization Server prompts the End-User for reauthentication and consent.",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "(?:none|login|consent|select_account|\\S+)"
            }
          },
          {
            "name": "query-userinfo",
            "in": "query",
            "description": "Enables querying the userinfo endpoint for claims values.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 1
            }
          },
          {
            "name": "realm",
            "in": "query",
            "description": "Authentication domain ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-realm",
              "maxLength": 32
            }
          },
          {
            "name": "scopes",
            "in": "query",
            "description": "Specifies the scopes (user details) that should be authorized and returned, for example 'email' or 'profile'.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "email profile"
            }
          },
          {
            "name": "secure",
            "in": "query",
            "description": "Use secure LDAPS protocol. DEPRECATED: use 'mode' instead.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "server1",
            "in": "query",
            "description": "Server IP address (or DNS name)",
            "required": false,
            "schema": {
              "type": "string",
              "format": "address",
              "maxLength": 256
            }
          },
          {
            "name": "server2",
            "in": "query",
            "description": "Fallback Server IP address (or DNS name)",
            "required": false,
            "schema": {
              "type": "string",
              "format": "address",
              "maxLength": 256
            }
          },
          {
            "name": "sslversion",
            "in": "query",
            "description": "LDAPS TLS/SSL version. It's not recommended to use version older than 1.2!",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "tlsv1",
                "tlsv1_1",
                "tlsv1_2",
                "tlsv1_3"
              ]
            }
          },
          {
            "name": "sync-defaults-options",
            "in": "query",
            "description": "The default options for behavior of synchronizations.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "realm-sync-options"
            }
          },
          {
            "name": "sync_attributes",
            "in": "query",
            "description": "Comma separated list of key=value pairs for specifying which LDAP attributes map to which PVE user field. For example, to map the LDAP attribute 'mail' to PVEs 'email', write  'email=mail'. By default, each PVE user field is represented  by an LDAP attribute of the same name.",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "\\w+=[^,]+(,\\s*\\w+=[^,]+)*"
            }
          },
          {
            "name": "tfa",
            "in": "query",
            "description": "Use Two-factor authentication.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-tfa-config",
              "maxLength": 128
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Realm type.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "ad",
                "ldap",
                "openid",
                "pam",
                "pve"
              ]
            }
          },
          {
            "name": "user_attr",
            "in": "query",
            "description": "LDAP user attribute name",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "\\S{2,}",
              "maxLength": 256
            }
          },
          {
            "name": "user_classes",
            "in": "query",
            "description": "The objectclasses for users.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "inetorgperson, posixaccount, person, user",
              "format": "ldap-simple-attr-list"
            }
          },
          {
            "name": "username-claim",
            "in": "query",
            "description": "OpenID claim used to generate the unique username.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "verify",
            "in": "query",
            "description": "Verify the server's SSL certificate",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/access/domains/{realm}": {
      "delete": {
        "summary": "Delete an authentication server.",
        "description": "Delete an authentication server.",
        "tags": [
          "access"
        ],
        "parameters": [
          {
            "name": "realm",
            "in": "path",
            "description": "Authentication domain ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-realm",
              "maxLength": 32
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Get auth server configuration.",
        "description": "Get auth server configuration.",
        "tags": [
          "access"
        ],
        "parameters": [
          {
            "name": "realm",
            "in": "path",
            "description": "Authentication domain ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-realm",
              "maxLength": 32
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update authentication server settings.",
        "description": "Update authentication server settings.",
        "tags": [
          "access"
        ],
        "parameters": [
          {
            "name": "acr-values",
            "in": "query",
            "description": "Specifies the Authentication Context Class Reference values that theAuthorization Server is being requested to use for the Auth Request.",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "^[^\\x00-\\x1F\\x7F <>#\"]*$"
            }
          },
          {
            "name": "autocreate",
            "in": "query",
            "description": "Automatically create users if they do not exist.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "base_dn",
            "in": "query",
            "description": "LDAP base domain name",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 256
            }
          },
          {
            "name": "bind_dn",
            "in": "query",
            "description": "LDAP bind domain name",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 256
            }
          },
          {
            "name": "capath",
            "in": "query",
            "description": "Path to the CA certificate store",
            "required": false,
            "schema": {
              "type": "string",
              "default": "/etc/ssl/certs"
            }
          },
          {
            "name": "case-sensitive",
            "in": "query",
            "description": "username is case-sensitive",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 1
            }
          },
          {
            "name": "cert",
            "in": "query",
            "description": "Path to the client certificate",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "certkey",
            "in": "query",
            "description": "Path to the client certificate key",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "check-connection",
            "in": "query",
            "description": "Check bind connection to the server.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "client-id",
            "in": "query",
            "description": "OpenID Client ID",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 256
            }
          },
          {
            "name": "client-key",
            "in": "query",
            "description": "OpenID Client Key",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 256
            }
          },
          {
            "name": "comment",
            "in": "query",
            "description": "Description.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 4096
            }
          },
          {
            "name": "default",
            "in": "query",
            "description": "Use this as default realm",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "delete",
            "in": "query",
            "description": "A list of settings you want to delete.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-configid-list",
              "maxLength": 4096
            }
          },
          {
            "name": "digest",
            "in": "query",
            "description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 64
            }
          },
          {
            "name": "domain",
            "in": "query",
            "description": "AD domain name",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "\\S+",
              "maxLength": 256
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "LDAP filter for user sync.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 2048
            }
          },
          {
            "name": "group_classes",
            "in": "query",
            "description": "The objectclasses for groups.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "groupOfNames, group, univentionGroup, ipausergroup",
              "format": "ldap-simple-attr-list"
            }
          },
          {
            "name": "group_dn",
            "in": "query",
            "description": "LDAP base domain name for group sync. If not set, the base_dn will be used.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 256
            }
          },
          {
            "name": "group_filter",
            "in": "query",
            "description": "LDAP filter for group sync.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 2048
            }
          },
          {
            "name": "group_name_attr",
            "in": "query",
            "description": "LDAP attribute representing a groups name. If not set or found, the first value of the DN will be used as name.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "ldap-simple-attr",
              "maxLength": 256
            }
          },
          {
            "name": "groups-autocreate",
            "in": "query",
            "description": "Automatically create groups if they do not exist.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "groups-claim",
            "in": "query",
            "description": "OpenID claim used to retrieve groups with.",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "(?^:[A-Za-z0-9\\.\\-_]+)",
              "maxLength": 256
            }
          },
          {
            "name": "groups-overwrite",
            "in": "query",
            "description": "All groups will be overwritten for the user on login.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "issuer-url",
            "in": "query",
            "description": "OpenID Issuer Url",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 256
            }
          },
          {
            "name": "mode",
            "in": "query",
            "description": "LDAP protocol mode.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "ldap",
              "enum": [
                "ldap",
                "ldaps",
                "ldap+starttls"
              ]
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "LDAP bind password. Will be stored in '/etc/pve/priv/realm/<REALM>.pw'.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "port",
            "in": "query",
            "description": "Server port.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 65535
            }
          },
          {
            "name": "prompt",
            "in": "query",
            "description": "Specifies whether the Authorization Server prompts the End-User for reauthentication and consent.",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "(?:none|login|consent|select_account|\\S+)"
            }
          },
          {
            "name": "query-userinfo",
            "in": "query",
            "description": "Enables querying the userinfo endpoint for claims values.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 1
            }
          },
          {
            "name": "realm",
            "in": "path",
            "description": "Authentication domain ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-realm",
              "maxLength": 32
            }
          },
          {
            "name": "scopes",
            "in": "query",
            "description": "Specifies the scopes (user details) that should be authorized and returned, for example 'email' or 'profile'.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "email profile"
            }
          },
          {
            "name": "secure",
            "in": "query",
            "description": "Use secure LDAPS protocol. DEPRECATED: use 'mode' instead.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "server1",
            "in": "query",
            "description": "Server IP address (or DNS name)",
            "required": false,
            "schema": {
              "type": "string",
              "format": "address",
              "maxLength": 256
            }
          },
          {
            "name": "server2",
            "in": "query",
            "description": "Fallback Server IP address (or DNS name)",
            "required": false,
            "schema": {
              "type": "string",
              "format": "address",
              "maxLength": 256
            }
          },
          {
            "name": "sslversion",
            "in": "query",
            "description": "LDAPS TLS/SSL version. It's not recommended to use version older than 1.2!",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "tlsv1",
                "tlsv1_1",
                "tlsv1_2",
                "tlsv1_3"
              ]
            }
          },
          {
            "name": "sync-defaults-options",
            "in": "query",
            "description": "The default options for behavior of synchronizations.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "realm-sync-options"
            }
          },
          {
            "name": "sync_attributes",
            "in": "query",
            "description": "Comma separated list of key=value pairs for specifying which LDAP attributes map to which PVE user field. For example, to map the LDAP attribute 'mail' to PVEs 'email', write  'email=mail'. By default, each PVE user field is represented  by an LDAP attribute of the same name.",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "\\w+=[^,]+(,\\s*\\w+=[^,]+)*"
            }
          },
          {
            "name": "tfa",
            "in": "query",
            "description": "Use Two-factor authentication.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-tfa-config",
              "maxLength": 128
            }
          },
          {
            "name": "user_attr",
            "in": "query",
            "description": "LDAP user attribute name",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "\\S{2,}",
              "maxLength": 256
            }
          },
          {
            "name": "user_classes",
            "in": "query",
            "description": "The objectclasses for users.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "inetorgperson, posixaccount, person, user",
              "format": "ldap-simple-attr-list"
            }
          },
          {
            "name": "verify",
            "in": "query",
            "description": "Verify the server's SSL certificate",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/access/domains/{realm}/sync": {
      "post": {
        "summary": "Syncs users and/or groups from the configured LDAP to user.cfg. NOTE: Synced groups will have the name 'name-$realm', so make sure those groups do not exist to prevent overwriting.",
        "description": "Syncs users and/or groups from the configured LDAP to user.cfg. NOTE: Synced groups will have the name 'name-$realm', so make sure those groups do not exist to prevent overwriting.",
        "tags": [
          "access"
        ],
        "parameters": [
          {
            "name": "dry-run",
            "in": "query",
            "description": "If set, does not write anything.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "enable-new",
            "in": "query",
            "description": "Enable newly synced users immediately.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": "1"
            }
          },
          {
            "name": "full",
            "in": "query",
            "description": "DEPRECATED: use 'remove-vanished' instead. If set, uses the LDAP Directory as source of truth, deleting users or groups not returned from the sync and removing all locally modified properties of synced users. If not set, only syncs information which is present in the synced data, and does not delete or modify anything else.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "purge",
            "in": "query",
            "description": "DEPRECATED: use 'remove-vanished' instead. Remove ACLs for users or groups which were removed from the config during a sync.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "realm",
            "in": "path",
            "description": "Authentication domain ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-realm",
              "maxLength": 32
            }
          },
          {
            "name": "remove-vanished",
            "in": "query",
            "description": "A semicolon-separated list of things to remove when they or the user vanishes during a sync. The following values are possible: 'entry' removes the user/group when not returned from the sync. 'properties' removes the set properties on existing user/group that do not appear in the source (even custom ones). 'acl' removes acls when the user/group is not returned from the sync. Instead of a list it also can be 'none' (the default).",
            "required": false,
            "schema": {
              "type": "string",
              "default": "none",
              "pattern": "(?:(?:(?:acl|properties|entry);)*(?:acl|properties|entry))|none"
            }
          },
          {
            "name": "scope",
            "in": "query",
            "description": "Select what to sync.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "users",
                "groups",
                "both"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Worker Task-UPID",
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/access/openid": {
      "get": {
        "summary": "Directory index.",
        "description": "Directory index.",
        "tags": [
          "access"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "subdir": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{subdir}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/access/openid/auth-url": {
      "post": {
        "summary": "Get the OpenId Authorization Url for the specified realm.",
        "description": "Get the OpenId Authorization Url for the specified realm.",
        "tags": [
          "access"
        ],
        "parameters": [
          {
            "name": "realm",
            "in": "query",
            "description": "Authentication domain ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-realm",
              "maxLength": 32
            }
          },
          {
            "name": "redirect-url",
            "in": "query",
            "description": "Redirection Url. The client should set this to the used server url (location.origin).",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 255
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Redirection URL.",
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/access/openid/login": {
      "post": {
        "summary": " Verify OpenID authorization code and create a ticket.",
        "description": " Verify OpenID authorization code and create a ticket.",
        "tags": [
          "access"
        ],
        "parameters": [
          {
            "name": "code",
            "in": "query",
            "description": "OpenId authorization code.",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 4096
            }
          },
          {
            "name": "redirect-url",
            "in": "query",
            "description": "Redirection Url. The client should set this to the used server url (location.origin).",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 255
            }
          },
          {
            "name": "state",
            "in": "query",
            "description": "OpenId state.",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 1024
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "CSRFPreventionToken": {
                      "type": "string"
                    },
                    "cap": {
                      "type": "object"
                    },
                    "clustername": {
                      "optional": 1,
                      "type": "string"
                    },
                    "ticket": {
                      "type": "string"
                    },
                    "username": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/access/tfa": {
      "get": {
        "summary": "List TFA configurations of users.",
        "description": "List TFA configurations of users.",
        "tags": [
          "access"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "description": "The list tuples of user and TFA entries.",
                  "items": {
                    "properties": {
                      "entries": {
                        "items": {
                          "description": "TFA Entry.",
                          "properties": {
                            "created": {
                              "description": "Creation time of this entry as unix epoch.",
                              "type": "integer"
                            },
                            "description": {
                              "description": "User chosen description for this entry.",
                              "type": "string"
                            },
                            "enable": {
                              "default": 1,
                              "description": "Whether this TFA entry is currently enabled.",
                              "optional": 1,
                              "type": "boolean"
                            },
                            "id": {
                              "description": "The id used to reference this entry.",
                              "type": "string"
                            },
                            "type": {
                              "description": "TFA Entry Type.",
                              "enum": [
                                "totp",
                                "u2f",
                                "webauthn",
                                "recovery",
                                "yubico"
                              ],
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "tfa-locked-until": {
                        "description": "Contains a timestamp until when a user is locked out of 2nd factors.",
                        "optional": 1,
                        "type": "integer"
                      },
                      "totp-locked": {
                        "description": "True if the user is currently locked out of TOTP factors.",
                        "optional": 1,
                        "type": "boolean"
                      },
                      "userid": {
                        "description": "User this entry belongs to.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{userid}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/access/tfa/{userid}": {
      "get": {
        "summary": "List TFA configurations of users.",
        "description": "List TFA configurations of users.",
        "tags": [
          "access"
        ],
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "description": "Full User ID, in the `name@realm` format.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-userid",
              "maxLength": 64
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "description": "A list of the user's TFA entries.",
                  "items": {
                    "description": "TFA Entry.",
                    "properties": {
                      "created": {
                        "description": "Creation time of this entry as unix epoch.",
                        "type": "integer"
                      },
                      "description": {
                        "description": "User chosen description for this entry.",
                        "type": "string"
                      },
                      "enable": {
                        "default": 1,
                        "description": "Whether this TFA entry is currently enabled.",
                        "optional": 1,
                        "type": "boolean"
                      },
                      "id": {
                        "description": "The id used to reference this entry.",
                        "type": "string"
                      },
                      "type": {
                        "description": "TFA Entry Type.",
                        "enum": [
                          "totp",
                          "u2f",
                          "webauthn",
                          "recovery",
                          "yubico"
                        ],
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{id}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Add a TFA entry for a user.",
        "description": "Add a TFA entry for a user.",
        "tags": [
          "access"
        ],
        "parameters": [
          {
            "name": "challenge",
            "in": "query",
            "description": "When responding to a u2f challenge: the original challenge string",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "description",
            "in": "query",
            "description": "A description to distinguish multiple entries from one another",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 255
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "The current password of the user performing the change.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 64
            }
          },
          {
            "name": "totp",
            "in": "query",
            "description": "A totp URI.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "TFA Entry Type.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "totp",
                "u2f",
                "webauthn",
                "recovery",
                "yubico"
              ]
            }
          },
          {
            "name": "userid",
            "in": "path",
            "description": "Full User ID, in the `name@realm` format.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-userid",
              "maxLength": 64
            }
          },
          {
            "name": "value",
            "in": "query",
            "description": "The current value for the provided totp URI, or a Webauthn/U2F challenge response",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "challenge": {
                      "description": "When adding u2f entries, this contains a challenge the user must respond to in order to finish the registration.",
                      "optional": 1,
                      "type": "string"
                    },
                    "id": {
                      "description": "The id of a newly added TFA entry.",
                      "type": "string"
                    },
                    "recovery": {
                      "description": "When adding recovery codes, this contains the list of codes to be displayed to the user",
                      "items": {
                        "description": "A recovery entry.",
                        "type": "string"
                      },
                      "optional": 1,
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/access/tfa/{userid}/{id}": {
      "delete": {
        "summary": "Delete a TFA entry by ID.",
        "description": "Delete a TFA entry by ID.",
        "tags": [
          "access"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A TFA entry id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "The current password of the user performing the change.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 64
            }
          },
          {
            "name": "userid",
            "in": "path",
            "description": "Full User ID, in the `name@realm` format.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-userid",
              "maxLength": 64
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Fetch a requested TFA entry if present.",
        "description": "Fetch a requested TFA entry if present.",
        "tags": [
          "access"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A TFA entry id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userid",
            "in": "path",
            "description": "Full User ID, in the `name@realm` format.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-userid",
              "maxLength": 64
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "description": "TFA Entry.",
                  "properties": {
                    "created": {
                      "description": "Creation time of this entry as unix epoch.",
                      "type": "integer"
                    },
                    "description": {
                      "description": "User chosen description for this entry.",
                      "type": "string"
                    },
                    "enable": {
                      "default": 1,
                      "description": "Whether this TFA entry is currently enabled.",
                      "optional": 1,
                      "type": "boolean"
                    },
                    "id": {
                      "description": "The id used to reference this entry.",
                      "type": "string"
                    },
                    "type": {
                      "description": "TFA Entry Type.",
                      "enum": [
                        "totp",
                        "u2f",
                        "webauthn",
                        "recovery",
                        "yubico"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Add a TFA entry for a user.",
        "description": "Add a TFA entry for a user.",
        "tags": [
          "access"
        ],
        "parameters": [
          {
            "name": "description",
            "in": "query",
            "description": "A description to distinguish multiple entries from one another",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 255
            }
          },
          {
            "name": "enable",
            "in": "query",
            "description": "Whether the entry should be enabled for login.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "A TFA entry id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "The current password of the user performing the change.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 64
            }
          },
          {
            "name": "userid",
            "in": "path",
            "description": "Full User ID, in the `name@realm` format.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-userid",
              "maxLength": 64
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/access/ticket": {
      "get": {
        "summary": "Dummy. Useful for formatters which want to provide a login page.",
        "description": "Dummy. Useful for formatters which want to provide a login page.",
        "tags": [
          "access"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create or verify authentication ticket.",
        "description": "Create or verify authentication ticket.",
        "tags": [
          "access"
        ],
        "parameters": [
          {
            "name": "new-format",
            "in": "query",
            "description": "This parameter is now ignored and assumed to be 1.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 1
            }
          },
          {
            "name": "otp",
            "in": "query",
            "description": "One-time password for Two-factor authentication.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "The secret password. This can also be a valid ticket.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "path",
            "in": "query",
            "description": "Verify ticket, and check if user have access 'privs' on 'path'",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 64
            }
          },
          {
            "name": "privs",
            "in": "query",
            "description": "Verify ticket, and check if user have access 'privs' on 'path'",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-priv-list",
              "maxLength": 64
            }
          },
          {
            "name": "realm",
            "in": "query",
            "description": "You can optionally pass the realm using this parameter. Normally the realm is simply added to the username <username>@<realm>.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-realm",
              "maxLength": 32
            }
          },
          {
            "name": "tfa-challenge",
            "in": "query",
            "description": "The signed TFA challenge string the user wants to respond to.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "username",
            "in": "query",
            "description": "User name",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 64
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "CSRFPreventionToken": {
                      "optional": 1,
                      "type": "string"
                    },
                    "clustername": {
                      "optional": 1,
                      "type": "string"
                    },
                    "ticket": {
                      "optional": 1,
                      "type": "string"
                    },
                    "username": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/access/password": {
      "put": {
        "summary": "Change user password.",
        "description": "Change user password.",
        "tags": [
          "access"
        ],
        "parameters": [
          {
            "name": "confirmation-password",
            "in": "query",
            "description": "The current password of the user performing the change.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 64
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "The new password.",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 64
            }
          },
          {
            "name": "userid",
            "in": "query",
            "description": "Full User ID, in the `name@realm` format.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-userid",
              "maxLength": 64
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/access/permissions": {
      "get": {
        "summary": "Retrieve effective permissions of given user/token.",
        "description": "Retrieve effective permissions of given user/token.",
        "tags": [
          "access"
        ],
        "parameters": [
          {
            "name": "path",
            "in": "query",
            "description": "Only dump this specific path, not the whole tree.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userid",
            "in": "query",
            "description": "User ID or full API token ID",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "(?^:^(?^:[^\\s:/]+)\\@(?^:[A-Za-z][A-Za-z0-9\\.\\-_]+)(?:!(?^:[A-Za-z][A-Za-z0-9\\.\\-_]+))?$)"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Map of \"path\" => (Map of \"privilege\" => \"propagate boolean\").",
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/pools": {
      "delete": {
        "summary": "Delete pool.",
        "description": "Delete pool.",
        "tags": [
          "pools"
        ],
        "parameters": [
          {
            "name": "poolid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-poolid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "List pools or get pool configuration.",
        "description": "List pools or get pool configuration.",
        "tags": [
          "pools"
        ],
        "parameters": [
          {
            "name": "poolid",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-poolid"
            }
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "qemu",
                "lxc",
                "storage"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "comment": {
                        "optional": 1,
                        "type": "string"
                      },
                      "members": {
                        "items": {
                          "additionalProperties": 1,
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "node": {
                              "type": "string"
                            },
                            "storage": {
                              "optional": 1,
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "qemu",
                                "lxc",
                                "openvz",
                                "storage"
                              ],
                              "type": "string"
                            },
                            "vmid": {
                              "optional": 1,
                              "type": "integer"
                            }
                          },
                          "type": "object"
                        },
                        "optional": 1,
                        "type": "array"
                      },
                      "poolid": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "links": [
                    {
                      "href": "{poolid}",
                      "rel": "child"
                    }
                  ],
                  "type": "array"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create new pool.",
        "description": "Create new pool.",
        "tags": [
          "pools"
        ],
        "parameters": [
          {
            "name": "comment",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "poolid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-poolid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update pool.",
        "description": "Update pool.",
        "tags": [
          "pools"
        ],
        "parameters": [
          {
            "name": "allow-move",
            "in": "query",
            "description": "Allow adding a guest even if already in another pool. The guest will be removed from its current pool and added to this one.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "comment",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "delete",
            "in": "query",
            "description": "Remove the passed VMIDs and/or storage IDs instead of adding them.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "poolid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-poolid"
            }
          },
          {
            "name": "storage",
            "in": "query",
            "description": "List of storage IDs to add or remove from this pool.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-storage-id-list"
            }
          },
          {
            "name": "vms",
            "in": "query",
            "description": "List of guest VMIDs to add or remove from this pool.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-vmid-list"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/pools/{poolid}": {
      "delete": {
        "summary": "Delete pool (deprecated, no support for nested pools, use 'DELETE /pools/?poolid={poolid}').",
        "description": "Delete pool (deprecated, no support for nested pools, use 'DELETE /pools/?poolid={poolid}').",
        "tags": [
          "pools"
        ],
        "parameters": [
          {
            "name": "poolid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-poolid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Get pool configuration (deprecated, no support for nested pools, use 'GET /pools/?poolid={poolid}').",
        "description": "Get pool configuration (deprecated, no support for nested pools, use 'GET /pools/?poolid={poolid}').",
        "tags": [
          "pools"
        ],
        "parameters": [
          {
            "name": "poolid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-poolid"
            }
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "qemu",
                "lxc",
                "storage"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": 0,
                  "properties": {
                    "comment": {
                      "optional": 1,
                      "type": "string"
                    },
                    "members": {
                      "items": {
                        "additionalProperties": 1,
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "node": {
                            "type": "string"
                          },
                          "storage": {
                            "optional": 1,
                            "type": "string"
                          },
                          "type": {
                            "enum": [
                              "qemu",
                              "lxc",
                              "openvz",
                              "storage"
                            ],
                            "type": "string"
                          },
                          "vmid": {
                            "optional": 1,
                            "type": "integer"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update pool data (deprecated, no support for nested pools - use 'PUT /pools/?poolid={poolid}' instead).",
        "description": "Update pool data (deprecated, no support for nested pools - use 'PUT /pools/?poolid={poolid}' instead).",
        "tags": [
          "pools"
        ],
        "parameters": [
          {
            "name": "allow-move",
            "in": "query",
            "description": "Allow adding a guest even if already in another pool. The guest will be removed from its current pool and added to this one.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "comment",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "delete",
            "in": "query",
            "description": "Remove the passed VMIDs and/or storage IDs instead of adding them.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": 0
            }
          },
          {
            "name": "poolid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "pve-poolid"
            }
          },
          {
            "name": "storage",
            "in": "query",
            "description": "List of storage IDs to add or remove from this pool.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-storage-id-list"
            }
          },
          {
            "name": "vms",
            "in": "query",
            "description": "List of guest VMIDs to add or remove from this pool.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "pve-vmid-list"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        }
      }
    },
    "/version": {
      "get": {
        "summary": "API version details, including some parts of the global datacenter config.",
        "description": "API version details, including some parts of the global datacenter config.",
        "tags": [
          "version"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "console": {
                      "description": "The default console viewer to use.",
                      "enum": [
                        "applet",
                        "vv",
                        "html5",
                        "xtermjs"
                      ],
                      "optional": 1,
                      "type": "string"
                    },
                    "release": {
                      "description": "The current Proxmox VE point release in `x.y` format.",
                      "type": "string"
                    },
                    "repoid": {
                      "description": "The short git revision from which this version was build.",
                      "pattern": "[0-9a-fA-F]{8,64}",
                      "type": "string"
                    },
                    "version": {
                      "description": "The full pve-manager package version of this node.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      }
    }
  }
}