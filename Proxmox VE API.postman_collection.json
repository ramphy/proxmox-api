{
	"info": {
		"_postman_id": "9c85beac-ce59-49c2-96c3-5f6c6e8bb90b",
		"name": "Proxmox VE API",
		"description": "API for Proxmox Virtual Environment",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "8391802"
	},
	"item": [
		{
			"name": "cluster",
			"item": [
				{
					"name": "replication",
					"item": [
						{
							"name": "{id}",
							"item": [
								{
									"name": "Mark replication job for removal.",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/cluster/replication/:id?force=0&keep=0",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cluster",
												"replication",
												":id"
											],
											"query": [
												{
													"key": "force",
													"value": "0",
													"description": "Will remove the jobconfig entry, but will not cleanup."
												},
												{
													"key": "keep",
													"value": "0",
													"description": "Keep replicated data at target (do not remove)."
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "82646-597475",
													"description": "(Required) Replication Job ID. The ID is composed of a Guest ID and a job number, separated by a hyphen, i.e. '<GUEST>-<JOBNUM>'."
												}
											]
										},
										"description": "Mark replication job for removal."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/replication/:id?force=0&keep=0",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"replication",
														":id"
													],
													"query": [
														{
															"key": "force",
															"value": "0",
															"description": "Will remove the jobconfig entry, but will not cleanup."
														},
														{
															"key": "keep",
															"value": "0",
															"description": "Keep replicated data at target (do not remove)."
														}
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "null"
										}
									]
								},
								{
									"name": "Read replication job configuration.",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/cluster/replication/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cluster",
												"replication",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "82646-597475",
													"description": "(Required) Replication Job ID. The ID is composed of a Guest ID and a job number, separated by a hyphen, i.e. '<GUEST>-<JOBNUM>'."
												}
											]
										},
										"description": "Read replication job configuration."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/replication/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"replication",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{}"
										}
									]
								},
								{
									"name": "Update replication job configuration.",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/cluster/replication/:id?comment=string&delete=string&digest=string&disable=true&rate=7270.67406404274&remove_job=full&schedule=*/15&source=string",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cluster",
												"replication",
												":id"
											],
											"query": [
												{
													"key": "comment",
													"value": "string",
													"description": "Description."
												},
												{
													"key": "delete",
													"value": "string",
													"description": "A list of settings you want to delete."
												},
												{
													"key": "digest",
													"value": "string",
													"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
												},
												{
													"key": "disable",
													"value": "true",
													"description": "Flag to disable/deactivate the entry."
												},
												{
													"key": "rate",
													"value": "7270.67406404274",
													"description": "Rate limit in mbps (megabytes per second) as floating point number."
												},
												{
													"key": "remove_job",
													"value": "full",
													"description": "Mark the replication job for removal. The job will remove all local replication snapshots. When set to 'full', it also tries to remove replicated volumes on the target. The job then removes itself from the configuration file."
												},
												{
													"key": "schedule",
													"value": "*/15",
													"description": "Storage replication schedule. The format is a subset of `systemd` calendar events."
												},
												{
													"key": "source",
													"value": "string",
													"description": "For internal use, to detect if the guest was stolen."
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "82646-597475",
													"description": "(Required) Replication Job ID. The ID is composed of a Guest ID and a job number, separated by a hyphen, i.e. '<GUEST>-<JOBNUM>'."
												}
											]
										},
										"description": "Update replication job configuration."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/replication/:id?comment=string&delete=string&digest=string&disable=true&rate=7270.67406404274&remove_job=full&schedule=*/15&source=string",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"replication",
														":id"
													],
													"query": [
														{
															"key": "comment",
															"value": "string",
															"description": "Description."
														},
														{
															"key": "delete",
															"value": "string",
															"description": "A list of settings you want to delete."
														},
														{
															"key": "digest",
															"value": "string",
															"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
														},
														{
															"key": "disable",
															"value": "true",
															"description": "Flag to disable/deactivate the entry."
														},
														{
															"key": "rate",
															"value": "7270.67406404274",
															"description": "Rate limit in mbps (megabytes per second) as floating point number."
														},
														{
															"key": "remove_job",
															"value": "full",
															"description": "Mark the replication job for removal. The job will remove all local replication snapshots. When set to 'full', it also tries to remove replicated volumes on the target. The job then removes itself from the configuration file."
														},
														{
															"key": "schedule",
															"value": "*/15",
															"description": "Storage replication schedule. The format is a subset of `systemd` calendar events."
														},
														{
															"key": "source",
															"value": "string",
															"description": "For internal use, to detect if the guest was stolen."
														}
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "null"
										}
									]
								}
							]
						},
						{
							"name": "List replication jobs.",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/cluster/replication",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"cluster",
										"replication"
									]
								},
								"description": "List replication jobs."
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/cluster/replication",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cluster",
												"replication"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[]"
								}
							]
						},
						{
							"name": "Create a new replication job",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/cluster/replication?comment=string&disable=false&id=82646-597475&rate=7270.67406404274&remove_job=full&schedule=*/15&source=string&target=string&type=local",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"cluster",
										"replication"
									],
									"query": [
										{
											"key": "comment",
											"value": "string",
											"description": "Description."
										},
										{
											"key": "disable",
											"value": "false",
											"description": "Flag to disable/deactivate the entry."
										},
										{
											"key": "id",
											"value": "82646-597475",
											"description": "(Required) Replication Job ID. The ID is composed of a Guest ID and a job number, separated by a hyphen, i.e. '<GUEST>-<JOBNUM>'."
										},
										{
											"key": "rate",
											"value": "7270.67406404274",
											"description": "Rate limit in mbps (megabytes per second) as floating point number."
										},
										{
											"key": "remove_job",
											"value": "full",
											"description": "Mark the replication job for removal. The job will remove all local replication snapshots. When set to 'full', it also tries to remove replicated volumes on the target. The job then removes itself from the configuration file."
										},
										{
											"key": "schedule",
											"value": "*/15",
											"description": "Storage replication schedule. The format is a subset of `systemd` calendar events."
										},
										{
											"key": "source",
											"value": "string",
											"description": "For internal use, to detect if the guest was stolen."
										},
										{
											"key": "target",
											"value": "string",
											"description": "(Required) Target node."
										},
										{
											"key": "type",
											"value": "local",
											"description": "(Required) Section type."
										}
									]
								},
								"description": "Create a new replication job"
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/cluster/replication?comment=string&disable=false&id=82646-597475&rate=7270.67406404274&remove_job=full&schedule=*/15&source=string&target=string&type=local",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cluster",
												"replication"
											],
											"query": [
												{
													"key": "comment",
													"value": "string",
													"description": "Description."
												},
												{
													"key": "disable",
													"value": "false",
													"description": "Flag to disable/deactivate the entry."
												},
												{
													"key": "id",
													"value": "82646-597475",
													"description": "(Required) Replication Job ID. The ID is composed of a Guest ID and a job number, separated by a hyphen, i.e. '<GUEST>-<JOBNUM>'."
												},
												{
													"key": "rate",
													"value": "7270.67406404274",
													"description": "Rate limit in mbps (megabytes per second) as floating point number."
												},
												{
													"key": "remove_job",
													"value": "full",
													"description": "Mark the replication job for removal. The job will remove all local replication snapshots. When set to 'full', it also tries to remove replicated volumes on the target. The job then removes itself from the configuration file."
												},
												{
													"key": "schedule",
													"value": "*/15",
													"description": "Storage replication schedule. The format is a subset of `systemd` calendar events."
												},
												{
													"key": "source",
													"value": "string",
													"description": "For internal use, to detect if the guest was stolen."
												},
												{
													"key": "target",
													"value": "string",
													"description": "(Required) Target node."
												},
												{
													"key": "type",
													"value": "local",
													"description": "(Required) Section type."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "null"
								}
							]
						}
					]
				},
				{
					"name": "metrics",
					"item": [
						{
							"name": "server",
							"item": [
								{
									"name": "{id}",
									"item": [
										{
											"name": "Remove Metric server.",
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/metrics/server/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"metrics",
														"server",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "string",
															"description": "(Required) "
														}
													]
												},
												"description": "Remove Metric server."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/cluster/metrics/server/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"cluster",
																"metrics",
																"server",
																":id"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "null"
												}
											]
										},
										{
											"name": "Read metric server configuration.",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/metrics/server/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"metrics",
														"server",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "string",
															"description": "(Required) "
														}
													]
												},
												"description": "Read metric server configuration."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/cluster/metrics/server/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"cluster",
																"metrics",
																"server",
																":id"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{}"
												}
											]
										},
										{
											"name": "Create a new external metric server config",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/metrics/server/:id?api-path-prefix=string&bucket=string&disable=true&influxdbproto=udp&max-body-size=25000000&mtu=1500&organization=string&otel-compression=gzip&otel-headers=string&otel-max-body-size=10000000&otel-path=/v1/metrics&otel-protocol=https&otel-resource-attributes=string&otel-timeout=5&otel-verify-ssl=1&path=string&port=54325&proto=udp&server=string&timeout=1&token=string&type=graphite&verify-certificate=1",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"metrics",
														"server",
														":id"
													],
													"query": [
														{
															"key": "api-path-prefix",
															"value": "string",
															"description": "An API path prefix inserted between '<host>:<port>/' and '/api2/'. Can be useful if the InfluxDB service runs behind a reverse proxy."
														},
														{
															"key": "bucket",
															"value": "string",
															"description": "The InfluxDB bucket/db. Only necessary when using the http v2 api."
														},
														{
															"key": "disable",
															"value": "true",
															"description": "Flag to disable the plugin."
														},
														{
															"key": "influxdbproto",
															"value": "udp"
														},
														{
															"key": "max-body-size",
															"value": "25000000",
															"description": "InfluxDB max-body-size in bytes. Requests are batched up to this size."
														},
														{
															"key": "mtu",
															"value": "1500",
															"description": "MTU for metrics transmission over UDP"
														},
														{
															"key": "organization",
															"value": "string",
															"description": "The InfluxDB organization. Only necessary when using the http v2 api. Has no meaning when using v2 compatibility api."
														},
														{
															"key": "otel-compression",
															"value": "gzip",
															"description": "Compression algorithm for requests"
														},
														{
															"key": "otel-headers",
															"value": "string",
															"description": "Custom HTTP headers (JSON format, base64 encoded)"
														},
														{
															"key": "otel-max-body-size",
															"value": "10000000",
															"description": "Maximum request body size in bytes"
														},
														{
															"key": "otel-path",
															"value": "/v1/metrics",
															"description": "OTLP endpoint path"
														},
														{
															"key": "otel-protocol",
															"value": "https",
															"description": "HTTP protocol"
														},
														{
															"key": "otel-resource-attributes",
															"value": "string",
															"description": "Additional resource attributes as JSON, base64 encoded"
														},
														{
															"key": "otel-timeout",
															"value": "5",
															"description": "HTTP request timeout in seconds"
														},
														{
															"key": "otel-verify-ssl",
															"value": "1",
															"description": "Verify SSL certificates"
														},
														{
															"key": "path",
															"value": "string",
															"description": "root graphite path (ex: proxmox.mycluster.mykey)"
														},
														{
															"key": "port",
															"value": "54325",
															"description": "(Required) server network port"
														},
														{
															"key": "proto",
															"value": "udp",
															"description": "Protocol to send graphite data. TCP or UDP (default)"
														},
														{
															"key": "server",
															"value": "string",
															"description": "(Required) server dns name or IP address"
														},
														{
															"key": "timeout",
															"value": "1",
															"description": "graphite TCP socket timeout (default=1)"
														},
														{
															"key": "token",
															"value": "string",
															"description": "The InfluxDB access token. Only necessary when using the http v2 api. If the v2 compatibility api is used, use 'user:password' instead."
														},
														{
															"key": "type",
															"value": "graphite",
															"description": "(Required) Plugin type."
														},
														{
															"key": "verify-certificate",
															"value": "1",
															"description": "Set to 0 to disable certificate verification for https endpoints."
														}
													],
													"variable": [
														{
															"key": "id",
															"value": "string",
															"description": "(Required) The ID of the entry."
														}
													]
												},
												"description": "Create a new external metric server config"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/cluster/metrics/server/:id?api-path-prefix=string&bucket=string&disable=true&influxdbproto=udp&max-body-size=25000000&mtu=1500&organization=string&otel-compression=gzip&otel-headers=string&otel-max-body-size=10000000&otel-path=/v1/metrics&otel-protocol=https&otel-resource-attributes=string&otel-timeout=5&otel-verify-ssl=1&path=string&port=54325&proto=udp&server=string&timeout=1&token=string&type=graphite&verify-certificate=1",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"cluster",
																"metrics",
																"server",
																":id"
															],
															"query": [
																{
																	"key": "api-path-prefix",
																	"value": "string",
																	"description": "An API path prefix inserted between '<host>:<port>/' and '/api2/'. Can be useful if the InfluxDB service runs behind a reverse proxy."
																},
																{
																	"key": "bucket",
																	"value": "string",
																	"description": "The InfluxDB bucket/db. Only necessary when using the http v2 api."
																},
																{
																	"key": "disable",
																	"value": "true",
																	"description": "Flag to disable the plugin."
																},
																{
																	"key": "influxdbproto",
																	"value": "udp"
																},
																{
																	"key": "max-body-size",
																	"value": "25000000",
																	"description": "InfluxDB max-body-size in bytes. Requests are batched up to this size."
																},
																{
																	"key": "mtu",
																	"value": "1500",
																	"description": "MTU for metrics transmission over UDP"
																},
																{
																	"key": "organization",
																	"value": "string",
																	"description": "The InfluxDB organization. Only necessary when using the http v2 api. Has no meaning when using v2 compatibility api."
																},
																{
																	"key": "otel-compression",
																	"value": "gzip",
																	"description": "Compression algorithm for requests"
																},
																{
																	"key": "otel-headers",
																	"value": "string",
																	"description": "Custom HTTP headers (JSON format, base64 encoded)"
																},
																{
																	"key": "otel-max-body-size",
																	"value": "10000000",
																	"description": "Maximum request body size in bytes"
																},
																{
																	"key": "otel-path",
																	"value": "/v1/metrics",
																	"description": "OTLP endpoint path"
																},
																{
																	"key": "otel-protocol",
																	"value": "https",
																	"description": "HTTP protocol"
																},
																{
																	"key": "otel-resource-attributes",
																	"value": "string",
																	"description": "Additional resource attributes as JSON, base64 encoded"
																},
																{
																	"key": "otel-timeout",
																	"value": "5",
																	"description": "HTTP request timeout in seconds"
																},
																{
																	"key": "otel-verify-ssl",
																	"value": "1",
																	"description": "Verify SSL certificates"
																},
																{
																	"key": "path",
																	"value": "string",
																	"description": "root graphite path (ex: proxmox.mycluster.mykey)"
																},
																{
																	"key": "port",
																	"value": "54325",
																	"description": "(Required) server network port"
																},
																{
																	"key": "proto",
																	"value": "udp",
																	"description": "Protocol to send graphite data. TCP or UDP (default)"
																},
																{
																	"key": "server",
																	"value": "string",
																	"description": "(Required) server dns name or IP address"
																},
																{
																	"key": "timeout",
																	"value": "1",
																	"description": "graphite TCP socket timeout (default=1)"
																},
																{
																	"key": "token",
																	"value": "string",
																	"description": "The InfluxDB access token. Only necessary when using the http v2 api. If the v2 compatibility api is used, use 'user:password' instead."
																},
																{
																	"key": "type",
																	"value": "graphite",
																	"description": "(Required) Plugin type."
																},
																{
																	"key": "verify-certificate",
																	"value": "1",
																	"description": "Set to 0 to disable certificate verification for https endpoints."
																}
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "null"
												}
											]
										},
										{
											"name": "Update metric server configuration.",
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/metrics/server/:id?api-path-prefix=string&bucket=string&delete=string&digest=string&disable=true&influxdbproto=udp&max-body-size=25000000&mtu=1500&organization=string&otel-compression=gzip&otel-headers=string&otel-max-body-size=10000000&otel-path=/v1/metrics&otel-protocol=https&otel-resource-attributes=string&otel-timeout=5&otel-verify-ssl=1&path=string&port=54325&proto=udp&server=string&timeout=1&token=string&verify-certificate=1",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"metrics",
														"server",
														":id"
													],
													"query": [
														{
															"key": "api-path-prefix",
															"value": "string",
															"description": "An API path prefix inserted between '<host>:<port>/' and '/api2/'. Can be useful if the InfluxDB service runs behind a reverse proxy."
														},
														{
															"key": "bucket",
															"value": "string",
															"description": "The InfluxDB bucket/db. Only necessary when using the http v2 api."
														},
														{
															"key": "delete",
															"value": "string",
															"description": "A list of settings you want to delete."
														},
														{
															"key": "digest",
															"value": "string",
															"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
														},
														{
															"key": "disable",
															"value": "true",
															"description": "Flag to disable the plugin."
														},
														{
															"key": "influxdbproto",
															"value": "udp"
														},
														{
															"key": "max-body-size",
															"value": "25000000",
															"description": "InfluxDB max-body-size in bytes. Requests are batched up to this size."
														},
														{
															"key": "mtu",
															"value": "1500",
															"description": "MTU for metrics transmission over UDP"
														},
														{
															"key": "organization",
															"value": "string",
															"description": "The InfluxDB organization. Only necessary when using the http v2 api. Has no meaning when using v2 compatibility api."
														},
														{
															"key": "otel-compression",
															"value": "gzip",
															"description": "Compression algorithm for requests"
														},
														{
															"key": "otel-headers",
															"value": "string",
															"description": "Custom HTTP headers (JSON format, base64 encoded)"
														},
														{
															"key": "otel-max-body-size",
															"value": "10000000",
															"description": "Maximum request body size in bytes"
														},
														{
															"key": "otel-path",
															"value": "/v1/metrics",
															"description": "OTLP endpoint path"
														},
														{
															"key": "otel-protocol",
															"value": "https",
															"description": "HTTP protocol"
														},
														{
															"key": "otel-resource-attributes",
															"value": "string",
															"description": "Additional resource attributes as JSON, base64 encoded"
														},
														{
															"key": "otel-timeout",
															"value": "5",
															"description": "HTTP request timeout in seconds"
														},
														{
															"key": "otel-verify-ssl",
															"value": "1",
															"description": "Verify SSL certificates"
														},
														{
															"key": "path",
															"value": "string",
															"description": "root graphite path (ex: proxmox.mycluster.mykey)"
														},
														{
															"key": "port",
															"value": "54325",
															"description": "(Required) server network port"
														},
														{
															"key": "proto",
															"value": "udp",
															"description": "Protocol to send graphite data. TCP or UDP (default)"
														},
														{
															"key": "server",
															"value": "string",
															"description": "(Required) server dns name or IP address"
														},
														{
															"key": "timeout",
															"value": "1",
															"description": "graphite TCP socket timeout (default=1)"
														},
														{
															"key": "token",
															"value": "string",
															"description": "The InfluxDB access token. Only necessary when using the http v2 api. If the v2 compatibility api is used, use 'user:password' instead."
														},
														{
															"key": "verify-certificate",
															"value": "1",
															"description": "Set to 0 to disable certificate verification for https endpoints."
														}
													],
													"variable": [
														{
															"key": "id",
															"value": "string",
															"description": "(Required) The ID of the entry."
														}
													]
												},
												"description": "Update metric server configuration."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/cluster/metrics/server/:id?api-path-prefix=string&bucket=string&delete=string&digest=string&disable=true&influxdbproto=udp&max-body-size=25000000&mtu=1500&organization=string&otel-compression=gzip&otel-headers=string&otel-max-body-size=10000000&otel-path=/v1/metrics&otel-protocol=https&otel-resource-attributes=string&otel-timeout=5&otel-verify-ssl=1&path=string&port=54325&proto=udp&server=string&timeout=1&token=string&verify-certificate=1",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"cluster",
																"metrics",
																"server",
																":id"
															],
															"query": [
																{
																	"key": "api-path-prefix",
																	"value": "string",
																	"description": "An API path prefix inserted between '<host>:<port>/' and '/api2/'. Can be useful if the InfluxDB service runs behind a reverse proxy."
																},
																{
																	"key": "bucket",
																	"value": "string",
																	"description": "The InfluxDB bucket/db. Only necessary when using the http v2 api."
																},
																{
																	"key": "delete",
																	"value": "string",
																	"description": "A list of settings you want to delete."
																},
																{
																	"key": "digest",
																	"value": "string",
																	"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
																},
																{
																	"key": "disable",
																	"value": "true",
																	"description": "Flag to disable the plugin."
																},
																{
																	"key": "influxdbproto",
																	"value": "udp"
																},
																{
																	"key": "max-body-size",
																	"value": "25000000",
																	"description": "InfluxDB max-body-size in bytes. Requests are batched up to this size."
																},
																{
																	"key": "mtu",
																	"value": "1500",
																	"description": "MTU for metrics transmission over UDP"
																},
																{
																	"key": "organization",
																	"value": "string",
																	"description": "The InfluxDB organization. Only necessary when using the http v2 api. Has no meaning when using v2 compatibility api."
																},
																{
																	"key": "otel-compression",
																	"value": "gzip",
																	"description": "Compression algorithm for requests"
																},
																{
																	"key": "otel-headers",
																	"value": "string",
																	"description": "Custom HTTP headers (JSON format, base64 encoded)"
																},
																{
																	"key": "otel-max-body-size",
																	"value": "10000000",
																	"description": "Maximum request body size in bytes"
																},
																{
																	"key": "otel-path",
																	"value": "/v1/metrics",
																	"description": "OTLP endpoint path"
																},
																{
																	"key": "otel-protocol",
																	"value": "https",
																	"description": "HTTP protocol"
																},
																{
																	"key": "otel-resource-attributes",
																	"value": "string",
																	"description": "Additional resource attributes as JSON, base64 encoded"
																},
																{
																	"key": "otel-timeout",
																	"value": "5",
																	"description": "HTTP request timeout in seconds"
																},
																{
																	"key": "otel-verify-ssl",
																	"value": "1",
																	"description": "Verify SSL certificates"
																},
																{
																	"key": "path",
																	"value": "string",
																	"description": "root graphite path (ex: proxmox.mycluster.mykey)"
																},
																{
																	"key": "port",
																	"value": "54325",
																	"description": "(Required) server network port"
																},
																{
																	"key": "proto",
																	"value": "udp",
																	"description": "Protocol to send graphite data. TCP or UDP (default)"
																},
																{
																	"key": "server",
																	"value": "string",
																	"description": "(Required) server dns name or IP address"
																},
																{
																	"key": "timeout",
																	"value": "1",
																	"description": "graphite TCP socket timeout (default=1)"
																},
																{
																	"key": "token",
																	"value": "string",
																	"description": "The InfluxDB access token. Only necessary when using the http v2 api. If the v2 compatibility api is used, use 'user:password' instead."
																},
																{
																	"key": "verify-certificate",
																	"value": "1",
																	"description": "Set to 0 to disable certificate verification for https endpoints."
																}
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "null"
												}
											]
										}
									]
								},
								{
									"name": "List configured metric servers.",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/cluster/metrics/server",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cluster",
												"metrics",
												"server"
											]
										},
										"description": "List configured metric servers."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/metrics/server",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"metrics",
														"server"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"disable\": true,\n    \"id\": \"string\",\n    \"port\": 2688,\n    \"server\": \"string\",\n    \"type\": \"string\"\n  },\n  {\n    \"disable\": true,\n    \"id\": \"string\",\n    \"port\": 4820,\n    \"server\": \"string\",\n    \"type\": \"string\"\n  }\n]"
										}
									]
								}
							]
						},
						{
							"name": "export",
							"item": [
								{
									"name": "Retrieve metrics of the cluster.",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/cluster/metrics/export?history=0&local-only=0&start-time=0",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cluster",
												"metrics",
												"export"
											],
											"query": [
												{
													"key": "history",
													"value": "0",
													"description": "Also return historic values. Returns full available metric history unless `start-time` is also set"
												},
												{
													"key": "local-only",
													"value": "0",
													"description": "Only return metrics for the current node instead of the whole cluster"
												},
												{
													"key": "start-time",
													"value": "0",
													"description": "Only include metrics with a timestamp > start-time."
												}
											]
										},
										"description": "Retrieve metrics of the cluster."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/metrics/export?history=0&local-only=0&start-time=0",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"metrics",
														"export"
													],
													"query": [
														{
															"key": "history",
															"value": "0",
															"description": "Also return historic values. Returns full available metric history unless `start-time` is also set"
														},
														{
															"key": "local-only",
															"value": "0",
															"description": "Only return metrics for the current node instead of the whole cluster"
														},
														{
															"key": "start-time",
															"value": "0",
															"description": "Only include metrics with a timestamp > start-time."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"data\": [\n    {\n      \"id\": \"string\",\n      \"metric\": \"string\",\n      \"timestamp\": 71,\n      \"type\": \"gauge\",\n      \"value\": 2298.8722797089367,\n      \"key_0\": {}\n    },\n    {\n      \"id\": \"string\",\n      \"metric\": \"string\",\n      \"timestamp\": 53,\n      \"type\": \"derive\",\n      \"value\": 2571.8309206304225\n    }\n  ],\n  \"key_0\": {}\n}"
										}
									]
								}
							]
						},
						{
							"name": "Metrics index.",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/cluster/metrics",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"cluster",
										"metrics"
									]
								},
								"description": "Metrics index."
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/cluster/metrics",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cluster",
												"metrics"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[]"
								}
							]
						}
					]
				},
				{
					"name": "notifications",
					"item": [
						{
							"name": "matcher-fields",
							"item": [
								{
									"name": "Returns known notification metadata fields",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/cluster/notifications/matcher-fields",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cluster",
												"notifications",
												"matcher-fields"
											]
										},
										"description": "Returns known notification metadata fields"
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/notifications/matcher-fields",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"notifications",
														"matcher-fields"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"name\": \"string\"\n  },\n  {\n    \"name\": \"string\"\n  }\n]"
										}
									]
								}
							]
						},
						{
							"name": "matcher-field-values",
							"item": [
								{
									"name": "Returns known notification metadata fields and their known values",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/cluster/notifications/matcher-field-values",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cluster",
												"notifications",
												"matcher-field-values"
											]
										},
										"description": "Returns known notification metadata fields and their known values"
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/notifications/matcher-field-values",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"notifications",
														"matcher-field-values"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"comment\": \"string\",\n    \"field\": \"string\",\n    \"value\": \"string\"\n  },\n  {\n    \"comment\": \"string\",\n    \"field\": \"string\",\n    \"value\": \"string\"\n  }\n]"
										}
									]
								}
							]
						},
						{
							"name": "endpoints",
							"item": [
								{
									"name": "sendmail",
									"item": [
										{
											"name": "{name}",
											"item": [
												{
													"name": "Remove sendmail endpoint",
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/cluster/notifications/endpoints/sendmail/:name",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"cluster",
																"notifications",
																"endpoints",
																"sendmail",
																":name"
															],
															"variable": [
																{
																	"key": "name",
																	"value": "string",
																	"description": "(Required) "
																}
															]
														},
														"description": "Remove sendmail endpoint"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/cluster/notifications/endpoints/sendmail/:name",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"cluster",
																		"notifications",
																		"endpoints",
																		"sendmail",
																		":name"
																	],
																	"variable": [
																		{
																			"key": "name"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "null"
														}
													]
												},
												{
													"name": "Return a specific sendmail endpoint",
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/cluster/notifications/endpoints/sendmail/:name",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"cluster",
																"notifications",
																"endpoints",
																"sendmail",
																":name"
															],
															"variable": [
																{
																	"key": "name",
																	"value": "string",
																	"description": "(Required) "
																}
															]
														},
														"description": "Return a specific sendmail endpoint"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/cluster/notifications/endpoints/sendmail/:name",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"cluster",
																		"notifications",
																		"endpoints",
																		"sendmail",
																		":name"
																	],
																	"variable": [
																		{
																			"key": "name"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"author\": \"string\",\n  \"comment\": \"string\",\n  \"digest\": \"string\",\n  \"disable\": 0,\n  \"from-address\": \"string\",\n  \"mailto\": [\n    \"string\",\n    \"string\"\n  ],\n  \"mailto-user\": [\n    \"string\",\n    \"string\"\n  ],\n  \"name\": \"string\"\n}"
														}
													]
												},
												{
													"name": "Update existing sendmail endpoint",
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/cluster/notifications/endpoints/sendmail/:name?author=string&comment=string&digest=string&disable=0&from-address=string",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"cluster",
																"notifications",
																"endpoints",
																"sendmail",
																":name"
															],
															"query": [
																{
																	"key": "author",
																	"value": "string",
																	"description": "Author of the mail"
																},
																{
																	"key": "comment",
																	"value": "string",
																	"description": "Comment"
																},
																{
																	"key": "digest",
																	"value": "string",
																	"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
																},
																{
																	"key": "disable",
																	"value": "0",
																	"description": "Disable this target"
																},
																{
																	"key": "from-address",
																	"value": "string",
																	"description": "`From` address for the mail"
																}
															],
															"variable": [
																{
																	"key": "name",
																	"value": "string",
																	"description": "(Required) The name of the endpoint."
																}
															]
														},
														"description": "Update existing sendmail endpoint"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/cluster/notifications/endpoints/sendmail/:name?author=string&comment=string&digest=string&disable=0&from-address=string",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"cluster",
																		"notifications",
																		"endpoints",
																		"sendmail",
																		":name"
																	],
																	"query": [
																		{
																			"key": "author",
																			"value": "string",
																			"description": "Author of the mail"
																		},
																		{
																			"key": "comment",
																			"value": "string",
																			"description": "Comment"
																		},
																		{
																			"key": "digest",
																			"value": "string",
																			"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
																		},
																		{
																			"key": "disable",
																			"value": "0",
																			"description": "Disable this target"
																		},
																		{
																			"key": "from-address",
																			"value": "string",
																			"description": "`From` address for the mail"
																		}
																	],
																	"variable": [
																		{
																			"key": "name"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "null"
														}
													]
												}
											]
										},
										{
											"name": "Returns a list of all sendmail endpoints",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/notifications/endpoints/sendmail",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"notifications",
														"endpoints",
														"sendmail"
													]
												},
												"description": "Returns a list of all sendmail endpoints"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/cluster/notifications/endpoints/sendmail",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"cluster",
																"notifications",
																"endpoints",
																"sendmail"
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "[\n  {\n    \"author\": \"string\",\n    \"comment\": \"string\",\n    \"disable\": 0,\n    \"from-address\": \"string\",\n    \"mailto\": [\n      \"string\",\n      \"string\"\n    ],\n    \"mailto-user\": [\n      \"string\",\n      \"string\"\n    ],\n    \"name\": \"string\",\n    \"origin\": \"builtin\"\n  },\n  {\n    \"author\": \"string\",\n    \"comment\": \"string\",\n    \"disable\": 0,\n    \"from-address\": \"string\",\n    \"mailto\": [\n      \"string\",\n      \"string\"\n    ],\n    \"mailto-user\": [\n      \"string\",\n      \"string\"\n    ],\n    \"name\": \"string\",\n    \"origin\": \"builtin\"\n  }\n]"
												}
											]
										},
										{
											"name": "Create a new sendmail endpoint",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/notifications/endpoints/sendmail?author=string&comment=string&disable=0&from-address=string&name=string",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"notifications",
														"endpoints",
														"sendmail"
													],
													"query": [
														{
															"key": "author",
															"value": "string",
															"description": "Author of the mail"
														},
														{
															"key": "comment",
															"value": "string",
															"description": "Comment"
														},
														{
															"key": "disable",
															"value": "0",
															"description": "Disable this target"
														},
														{
															"key": "from-address",
															"value": "string",
															"description": "`From` address for the mail"
														},
														{
															"key": "name",
															"value": "string",
															"description": "(Required) The name of the endpoint."
														}
													]
												},
												"description": "Create a new sendmail endpoint"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/cluster/notifications/endpoints/sendmail?author=string&comment=string&disable=0&from-address=string&name=string",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"cluster",
																"notifications",
																"endpoints",
																"sendmail"
															],
															"query": [
																{
																	"key": "author",
																	"value": "string",
																	"description": "Author of the mail"
																},
																{
																	"key": "comment",
																	"value": "string",
																	"description": "Comment"
																},
																{
																	"key": "disable",
																	"value": "0",
																	"description": "Disable this target"
																},
																{
																	"key": "from-address",
																	"value": "string",
																	"description": "`From` address for the mail"
																},
																{
																	"key": "name",
																	"value": "string",
																	"description": "(Required) The name of the endpoint."
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "null"
												}
											]
										}
									]
								},
								{
									"name": "gotify",
									"item": [
										{
											"name": "{name}",
											"item": [
												{
													"name": "Remove gotify endpoint",
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/cluster/notifications/endpoints/gotify/:name",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"cluster",
																"notifications",
																"endpoints",
																"gotify",
																":name"
															],
															"variable": [
																{
																	"key": "name",
																	"value": "string",
																	"description": "(Required) "
																}
															]
														},
														"description": "Remove gotify endpoint"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/cluster/notifications/endpoints/gotify/:name",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"cluster",
																		"notifications",
																		"endpoints",
																		"gotify",
																		":name"
																	],
																	"variable": [
																		{
																			"key": "name"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "null"
														}
													]
												},
												{
													"name": "Return a specific gotify endpoint",
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/cluster/notifications/endpoints/gotify/:name",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"cluster",
																"notifications",
																"endpoints",
																"gotify",
																":name"
															],
															"variable": [
																{
																	"key": "name",
																	"value": "string",
																	"description": "(Required) Name of the endpoint."
																}
															]
														},
														"description": "Return a specific gotify endpoint"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/cluster/notifications/endpoints/gotify/:name",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"cluster",
																		"notifications",
																		"endpoints",
																		"gotify",
																		":name"
																	],
																	"variable": [
																		{
																			"key": "name"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"comment\": \"string\",\n  \"digest\": \"string\",\n  \"disable\": 0,\n  \"name\": \"string\",\n  \"server\": \"string\"\n}"
														}
													]
												},
												{
													"name": "Update existing gotify endpoint",
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/cluster/notifications/endpoints/gotify/:name?comment=string&digest=string&disable=0&server=string&token=string",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"cluster",
																"notifications",
																"endpoints",
																"gotify",
																":name"
															],
															"query": [
																{
																	"key": "comment",
																	"value": "string",
																	"description": "Comment"
																},
																{
																	"key": "digest",
																	"value": "string",
																	"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
																},
																{
																	"key": "disable",
																	"value": "0",
																	"description": "Disable this target"
																},
																{
																	"key": "server",
																	"value": "string",
																	"description": "Server URL"
																},
																{
																	"key": "token",
																	"value": "string",
																	"description": "Secret token"
																}
															],
															"variable": [
																{
																	"key": "name",
																	"value": "string",
																	"description": "(Required) The name of the endpoint."
																}
															]
														},
														"description": "Update existing gotify endpoint"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/cluster/notifications/endpoints/gotify/:name?comment=string&digest=string&disable=0&server=string&token=string",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"cluster",
																		"notifications",
																		"endpoints",
																		"gotify",
																		":name"
																	],
																	"query": [
																		{
																			"key": "comment",
																			"value": "string",
																			"description": "Comment"
																		},
																		{
																			"key": "digest",
																			"value": "string",
																			"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
																		},
																		{
																			"key": "disable",
																			"value": "0",
																			"description": "Disable this target"
																		},
																		{
																			"key": "server",
																			"value": "string",
																			"description": "Server URL"
																		},
																		{
																			"key": "token",
																			"value": "string",
																			"description": "Secret token"
																		}
																	],
																	"variable": [
																		{
																			"key": "name"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "null"
														}
													]
												}
											]
										},
										{
											"name": "Returns a list of all gotify endpoints",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/notifications/endpoints/gotify",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"notifications",
														"endpoints",
														"gotify"
													]
												},
												"description": "Returns a list of all gotify endpoints"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/cluster/notifications/endpoints/gotify",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"cluster",
																"notifications",
																"endpoints",
																"gotify"
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "[\n  {\n    \"comment\": \"string\",\n    \"disable\": 0,\n    \"name\": \"string\",\n    \"origin\": \"modified-builtin\",\n    \"server\": \"string\"\n  },\n  {\n    \"comment\": \"string\",\n    \"disable\": 0,\n    \"name\": \"string\",\n    \"origin\": \"modified-builtin\",\n    \"server\": \"string\"\n  }\n]"
												}
											]
										},
										{
											"name": "Create a new gotify endpoint",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/notifications/endpoints/gotify?comment=string&disable=0&name=string&server=string&token=string",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"notifications",
														"endpoints",
														"gotify"
													],
													"query": [
														{
															"key": "comment",
															"value": "string",
															"description": "Comment"
														},
														{
															"key": "disable",
															"value": "0",
															"description": "Disable this target"
														},
														{
															"key": "name",
															"value": "string",
															"description": "(Required) The name of the endpoint."
														},
														{
															"key": "server",
															"value": "string",
															"description": "(Required) Server URL"
														},
														{
															"key": "token",
															"value": "string",
															"description": "(Required) Secret token"
														}
													]
												},
												"description": "Create a new gotify endpoint"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/cluster/notifications/endpoints/gotify?comment=string&disable=0&name=string&server=string&token=string",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"cluster",
																"notifications",
																"endpoints",
																"gotify"
															],
															"query": [
																{
																	"key": "comment",
																	"value": "string",
																	"description": "Comment"
																},
																{
																	"key": "disable",
																	"value": "0",
																	"description": "Disable this target"
																},
																{
																	"key": "name",
																	"value": "string",
																	"description": "(Required) The name of the endpoint."
																},
																{
																	"key": "server",
																	"value": "string",
																	"description": "(Required) Server URL"
																},
																{
																	"key": "token",
																	"value": "string",
																	"description": "(Required) Secret token"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "null"
												}
											]
										}
									]
								},
								{
									"name": "smtp",
									"item": [
										{
											"name": "{name}",
											"item": [
												{
													"name": "Remove smtp endpoint",
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/cluster/notifications/endpoints/smtp/:name",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"cluster",
																"notifications",
																"endpoints",
																"smtp",
																":name"
															],
															"variable": [
																{
																	"key": "name",
																	"value": "string",
																	"description": "(Required) "
																}
															]
														},
														"description": "Remove smtp endpoint"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/cluster/notifications/endpoints/smtp/:name",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"cluster",
																		"notifications",
																		"endpoints",
																		"smtp",
																		":name"
																	],
																	"variable": [
																		{
																			"key": "name"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "null"
														}
													]
												},
												{
													"name": "Return a specific smtp endpoint",
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/cluster/notifications/endpoints/smtp/:name",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"cluster",
																"notifications",
																"endpoints",
																"smtp",
																":name"
															],
															"variable": [
																{
																	"key": "name",
																	"value": "string",
																	"description": "(Required) "
																}
															]
														},
														"description": "Return a specific smtp endpoint"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/cluster/notifications/endpoints/smtp/:name",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"cluster",
																		"notifications",
																		"endpoints",
																		"smtp",
																		":name"
																	],
																	"variable": [
																		{
																			"key": "name"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"author\": \"string\",\n  \"comment\": \"string\",\n  \"digest\": \"string\",\n  \"disable\": 0,\n  \"from-address\": \"string\",\n  \"mailto\": [\n    \"string\",\n    \"string\"\n  ],\n  \"mailto-user\": [\n    \"string\",\n    \"string\"\n  ],\n  \"mode\": \"tls\",\n  \"name\": \"string\",\n  \"port\": 4735,\n  \"server\": \"string\",\n  \"username\": \"string\"\n}"
														}
													]
												},
												{
													"name": "Update existing smtp endpoint",
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/cluster/notifications/endpoints/smtp/:name?author=string&comment=string&digest=string&disable=0&from-address=string&mode=tls&password=string&port=5752&server=string&username=string",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"cluster",
																"notifications",
																"endpoints",
																"smtp",
																":name"
															],
															"query": [
																{
																	"key": "author",
																	"value": "string",
																	"description": "Author of the mail. Defaults to 'Proxmox VE'."
																},
																{
																	"key": "comment",
																	"value": "string",
																	"description": "Comment"
																},
																{
																	"key": "digest",
																	"value": "string",
																	"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
																},
																{
																	"key": "disable",
																	"value": "0",
																	"description": "Disable this target"
																},
																{
																	"key": "from-address",
																	"value": "string",
																	"description": "`From` address for the mail"
																},
																{
																	"key": "mode",
																	"value": "tls",
																	"description": "Determine which encryption method shall be used for the connection."
																},
																{
																	"key": "password",
																	"value": "string",
																	"description": "Password for SMTP authentication"
																},
																{
																	"key": "port",
																	"value": "5752",
																	"description": "The port to be used. Defaults to 465 for TLS based connections, 587 for STARTTLS based connections and port 25 for insecure plain-text connections."
																},
																{
																	"key": "server",
																	"value": "string",
																	"description": "The address of the SMTP server."
																},
																{
																	"key": "username",
																	"value": "string",
																	"description": "Username for SMTP authentication"
																}
															],
															"variable": [
																{
																	"key": "name",
																	"value": "string",
																	"description": "(Required) The name of the endpoint."
																}
															]
														},
														"description": "Update existing smtp endpoint"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/cluster/notifications/endpoints/smtp/:name?author=string&comment=string&digest=string&disable=0&from-address=string&mode=tls&password=string&port=5752&server=string&username=string",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"cluster",
																		"notifications",
																		"endpoints",
																		"smtp",
																		":name"
																	],
																	"query": [
																		{
																			"key": "author",
																			"value": "string",
																			"description": "Author of the mail. Defaults to 'Proxmox VE'."
																		},
																		{
																			"key": "comment",
																			"value": "string",
																			"description": "Comment"
																		},
																		{
																			"key": "digest",
																			"value": "string",
																			"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
																		},
																		{
																			"key": "disable",
																			"value": "0",
																			"description": "Disable this target"
																		},
																		{
																			"key": "from-address",
																			"value": "string",
																			"description": "`From` address for the mail"
																		},
																		{
																			"key": "mode",
																			"value": "tls",
																			"description": "Determine which encryption method shall be used for the connection."
																		},
																		{
																			"key": "password",
																			"value": "string",
																			"description": "Password for SMTP authentication"
																		},
																		{
																			"key": "port",
																			"value": "5752",
																			"description": "The port to be used. Defaults to 465 for TLS based connections, 587 for STARTTLS based connections and port 25 for insecure plain-text connections."
																		},
																		{
																			"key": "server",
																			"value": "string",
																			"description": "The address of the SMTP server."
																		},
																		{
																			"key": "username",
																			"value": "string",
																			"description": "Username for SMTP authentication"
																		}
																	],
																	"variable": [
																		{
																			"key": "name"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "null"
														}
													]
												}
											]
										},
										{
											"name": "Returns a list of all smtp endpoints",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/notifications/endpoints/smtp",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"notifications",
														"endpoints",
														"smtp"
													]
												},
												"description": "Returns a list of all smtp endpoints"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/cluster/notifications/endpoints/smtp",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"cluster",
																"notifications",
																"endpoints",
																"smtp"
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "[\n  {\n    \"author\": \"string\",\n    \"comment\": \"string\",\n    \"disable\": 0,\n    \"from-address\": \"string\",\n    \"mailto\": [\n      \"string\",\n      \"string\"\n    ],\n    \"mailto-user\": [\n      \"string\",\n      \"string\"\n    ],\n    \"mode\": \"tls\",\n    \"name\": \"string\",\n    \"origin\": \"builtin\",\n    \"port\": 7543,\n    \"server\": \"string\",\n    \"username\": \"string\"\n  },\n  {\n    \"author\": \"string\",\n    \"comment\": \"string\",\n    \"disable\": 0,\n    \"from-address\": \"string\",\n    \"mailto\": [\n      \"string\",\n      \"string\"\n    ],\n    \"mailto-user\": [\n      \"string\",\n      \"string\"\n    ],\n    \"mode\": \"tls\",\n    \"name\": \"string\",\n    \"origin\": \"builtin\",\n    \"port\": 8423,\n    \"server\": \"string\",\n    \"username\": \"string\"\n  }\n]"
												}
											]
										},
										{
											"name": "Create a new smtp endpoint",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/notifications/endpoints/smtp?author=string&comment=string&disable=0&from-address=string&mode=tls&name=string&password=string&port=5752&server=string&username=string",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"notifications",
														"endpoints",
														"smtp"
													],
													"query": [
														{
															"key": "author",
															"value": "string",
															"description": "Author of the mail. Defaults to 'Proxmox VE'."
														},
														{
															"key": "comment",
															"value": "string",
															"description": "Comment"
														},
														{
															"key": "disable",
															"value": "0",
															"description": "Disable this target"
														},
														{
															"key": "from-address",
															"value": "string",
															"description": "(Required) `From` address for the mail"
														},
														{
															"key": "mode",
															"value": "tls",
															"description": "Determine which encryption method shall be used for the connection."
														},
														{
															"key": "name",
															"value": "string",
															"description": "(Required) The name of the endpoint."
														},
														{
															"key": "password",
															"value": "string",
															"description": "Password for SMTP authentication"
														},
														{
															"key": "port",
															"value": "5752",
															"description": "The port to be used. Defaults to 465 for TLS based connections, 587 for STARTTLS based connections and port 25 for insecure plain-text connections."
														},
														{
															"key": "server",
															"value": "string",
															"description": "(Required) The address of the SMTP server."
														},
														{
															"key": "username",
															"value": "string",
															"description": "Username for SMTP authentication"
														}
													]
												},
												"description": "Create a new smtp endpoint"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/cluster/notifications/endpoints/smtp?author=string&comment=string&disable=0&from-address=string&mode=tls&name=string&password=string&port=5752&server=string&username=string",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"cluster",
																"notifications",
																"endpoints",
																"smtp"
															],
															"query": [
																{
																	"key": "author",
																	"value": "string",
																	"description": "Author of the mail. Defaults to 'Proxmox VE'."
																},
																{
																	"key": "comment",
																	"value": "string",
																	"description": "Comment"
																},
																{
																	"key": "disable",
																	"value": "0",
																	"description": "Disable this target"
																},
																{
																	"key": "from-address",
																	"value": "string",
																	"description": "(Required) `From` address for the mail"
																},
																{
																	"key": "mode",
																	"value": "tls",
																	"description": "Determine which encryption method shall be used for the connection."
																},
																{
																	"key": "name",
																	"value": "string",
																	"description": "(Required) The name of the endpoint."
																},
																{
																	"key": "password",
																	"value": "string",
																	"description": "Password for SMTP authentication"
																},
																{
																	"key": "port",
																	"value": "5752",
																	"description": "The port to be used. Defaults to 465 for TLS based connections, 587 for STARTTLS based connections and port 25 for insecure plain-text connections."
																},
																{
																	"key": "server",
																	"value": "string",
																	"description": "(Required) The address of the SMTP server."
																},
																{
																	"key": "username",
																	"value": "string",
																	"description": "Username for SMTP authentication"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "null"
												}
											]
										}
									]
								},
								{
									"name": "webhook",
									"item": [
										{
											"name": "{name}",
											"item": [
												{
													"name": "Remove webhook endpoint",
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/cluster/notifications/endpoints/webhook/:name",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"cluster",
																"notifications",
																"endpoints",
																"webhook",
																":name"
															],
															"variable": [
																{
																	"key": "name",
																	"value": "string",
																	"description": "(Required) "
																}
															]
														},
														"description": "Remove webhook endpoint"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/cluster/notifications/endpoints/webhook/:name",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"cluster",
																		"notifications",
																		"endpoints",
																		"webhook",
																		":name"
																	],
																	"variable": [
																		{
																			"key": "name"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "null"
														}
													]
												},
												{
													"name": "Return a specific webhook endpoint",
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/cluster/notifications/endpoints/webhook/:name",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"cluster",
																"notifications",
																"endpoints",
																"webhook",
																":name"
															],
															"variable": [
																{
																	"key": "name",
																	"value": "string",
																	"description": "(Required) Name of the endpoint."
																}
															]
														},
														"description": "Return a specific webhook endpoint"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/cluster/notifications/endpoints/webhook/:name",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"cluster",
																		"notifications",
																		"endpoints",
																		"webhook",
																		":name"
																	],
																	"variable": [
																		{
																			"key": "name"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"body\": \"string\",\n  \"comment\": \"string\",\n  \"digest\": \"string\",\n  \"disable\": 0,\n  \"header\": [\n    \"string\",\n    \"string\"\n  ],\n  \"method\": \"post\",\n  \"name\": \"string\",\n  \"secret\": [\n    \"string\",\n    \"string\"\n  ],\n  \"url\": \"string\"\n}"
														}
													]
												},
												{
													"name": "Update existing webhook endpoint",
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/cluster/notifications/endpoints/webhook/:name?body=string&comment=string&digest=string&disable=0&method=post&url=string",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"cluster",
																"notifications",
																"endpoints",
																"webhook",
																":name"
															],
															"query": [
																{
																	"key": "body",
																	"value": "string",
																	"description": "HTTP body, base64 encoded"
																},
																{
																	"key": "comment",
																	"value": "string",
																	"description": "Comment"
																},
																{
																	"key": "digest",
																	"value": "string",
																	"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
																},
																{
																	"key": "disable",
																	"value": "0",
																	"description": "Disable this target"
																},
																{
																	"key": "method",
																	"value": "post",
																	"description": "HTTP method"
																},
																{
																	"key": "url",
																	"value": "string",
																	"description": "Server URL"
																}
															],
															"variable": [
																{
																	"key": "name",
																	"value": "string",
																	"description": "(Required) The name of the endpoint."
																}
															]
														},
														"description": "Update existing webhook endpoint"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/cluster/notifications/endpoints/webhook/:name?body=string&comment=string&digest=string&disable=0&method=post&url=string",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"cluster",
																		"notifications",
																		"endpoints",
																		"webhook",
																		":name"
																	],
																	"query": [
																		{
																			"key": "body",
																			"value": "string",
																			"description": "HTTP body, base64 encoded"
																		},
																		{
																			"key": "comment",
																			"value": "string",
																			"description": "Comment"
																		},
																		{
																			"key": "digest",
																			"value": "string",
																			"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
																		},
																		{
																			"key": "disable",
																			"value": "0",
																			"description": "Disable this target"
																		},
																		{
																			"key": "method",
																			"value": "post",
																			"description": "HTTP method"
																		},
																		{
																			"key": "url",
																			"value": "string",
																			"description": "Server URL"
																		}
																	],
																	"variable": [
																		{
																			"key": "name"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "null"
														}
													]
												}
											]
										},
										{
											"name": "Returns a list of all webhook endpoints",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/notifications/endpoints/webhook",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"notifications",
														"endpoints",
														"webhook"
													]
												},
												"description": "Returns a list of all webhook endpoints"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/cluster/notifications/endpoints/webhook",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"cluster",
																"notifications",
																"endpoints",
																"webhook"
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "[\n  {\n    \"body\": \"string\",\n    \"comment\": \"string\",\n    \"disable\": 0,\n    \"header\": [\n      \"string\",\n      \"string\"\n    ],\n    \"method\": \"get\",\n    \"name\": \"string\",\n    \"origin\": \"builtin\",\n    \"secret\": [\n      \"string\",\n      \"string\"\n    ],\n    \"url\": \"string\"\n  },\n  {\n    \"body\": \"string\",\n    \"comment\": \"string\",\n    \"disable\": 0,\n    \"header\": [\n      \"string\",\n      \"string\"\n    ],\n    \"method\": \"put\",\n    \"name\": \"string\",\n    \"origin\": \"user-created\",\n    \"secret\": [\n      \"string\",\n      \"string\"\n    ],\n    \"url\": \"string\"\n  }\n]"
												}
											]
										},
										{
											"name": "Create a new webhook endpoint",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/notifications/endpoints/webhook?body=string&comment=string&disable=0&method=post&name=string&url=string",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"notifications",
														"endpoints",
														"webhook"
													],
													"query": [
														{
															"key": "body",
															"value": "string",
															"description": "HTTP body, base64 encoded"
														},
														{
															"key": "comment",
															"value": "string",
															"description": "Comment"
														},
														{
															"key": "disable",
															"value": "0",
															"description": "Disable this target"
														},
														{
															"key": "method",
															"value": "post",
															"description": "(Required) HTTP method"
														},
														{
															"key": "name",
															"value": "string",
															"description": "(Required) The name of the endpoint."
														},
														{
															"key": "url",
															"value": "string",
															"description": "(Required) Server URL"
														}
													]
												},
												"description": "Create a new webhook endpoint"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/cluster/notifications/endpoints/webhook?body=string&comment=string&disable=0&method=post&name=string&url=string",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"cluster",
																"notifications",
																"endpoints",
																"webhook"
															],
															"query": [
																{
																	"key": "body",
																	"value": "string",
																	"description": "HTTP body, base64 encoded"
																},
																{
																	"key": "comment",
																	"value": "string",
																	"description": "Comment"
																},
																{
																	"key": "disable",
																	"value": "0",
																	"description": "Disable this target"
																},
																{
																	"key": "method",
																	"value": "post",
																	"description": "(Required) HTTP method"
																},
																{
																	"key": "name",
																	"value": "string",
																	"description": "(Required) The name of the endpoint."
																},
																{
																	"key": "url",
																	"value": "string",
																	"description": "(Required) Server URL"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "null"
												}
											]
										}
									]
								},
								{
									"name": "Index for all available endpoint types.",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/cluster/notifications/endpoints",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cluster",
												"notifications",
												"endpoints"
											]
										},
										"description": "Index for all available endpoint types."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/notifications/endpoints",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"notifications",
														"endpoints"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[]"
										}
									]
								}
							]
						},
						{
							"name": "targets",
							"item": [
								{
									"name": "{name}",
									"item": [
										{
											"name": "test",
											"item": [
												{
													"name": "Send a test notification to a provided target.",
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/cluster/notifications/targets/:name/test",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"cluster",
																"notifications",
																"targets",
																":name",
																"test"
															],
															"variable": [
																{
																	"key": "name",
																	"value": "string",
																	"description": "(Required) Name of the target."
																}
															]
														},
														"description": "Send a test notification to a provided target."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/cluster/notifications/targets/:name/test",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"cluster",
																		"notifications",
																		"targets",
																		":name",
																		"test"
																	],
																	"variable": [
																		{
																			"key": "name"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "null"
														}
													]
												}
											]
										}
									]
								},
								{
									"name": "Returns a list of all entities that can be used as notification targets.",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/cluster/notifications/targets",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cluster",
												"notifications",
												"targets"
											]
										},
										"description": "Returns a list of all entities that can be used as notification targets."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/notifications/targets",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"notifications",
														"targets"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"comment\": \"string\",\n    \"disable\": 0,\n    \"name\": \"string\",\n    \"origin\": \"modified-builtin\",\n    \"type\": \"smtp\"\n  },\n  {\n    \"comment\": \"string\",\n    \"disable\": 0,\n    \"name\": \"string\",\n    \"origin\": \"modified-builtin\",\n    \"type\": \"smtp\"\n  }\n]"
										}
									]
								}
							]
						},
						{
							"name": "matchers",
							"item": [
								{
									"name": "{name}",
									"item": [
										{
											"name": "Remove matcher",
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/notifications/matchers/:name",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"notifications",
														"matchers",
														":name"
													],
													"variable": [
														{
															"key": "name",
															"value": "string",
															"description": "(Required) "
														}
													]
												},
												"description": "Remove matcher"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/cluster/notifications/matchers/:name",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"cluster",
																"notifications",
																"matchers",
																":name"
															],
															"variable": [
																{
																	"key": "name"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "null"
												}
											]
										},
										{
											"name": "Return a specific matcher",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/notifications/matchers/:name",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"notifications",
														"matchers",
														":name"
													],
													"variable": [
														{
															"key": "name",
															"value": "string",
															"description": "(Required) "
														}
													]
												},
												"description": "Return a specific matcher"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/cluster/notifications/matchers/:name",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"cluster",
																"notifications",
																"matchers",
																":name"
															],
															"variable": [
																{
																	"key": "name"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"comment\": \"string\",\n  \"digest\": \"string\",\n  \"disable\": 0,\n  \"invert-match\": true,\n  \"match-calendar\": [\n    \"string\",\n    \"string\"\n  ],\n  \"match-field\": [\n    \"string\",\n    \"string\"\n  ],\n  \"match-severity\": [\n    \"string\",\n    \"string\"\n  ],\n  \"mode\": \"all\",\n  \"name\": \"string\",\n  \"target\": [\n    \"string\",\n    \"string\"\n  ]\n}"
												}
											]
										},
										{
											"name": "Update existing matcher",
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/notifications/matchers/:name?comment=string&digest=string&disable=0&invert-match=true&mode=all",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"notifications",
														"matchers",
														":name"
													],
													"query": [
														{
															"key": "comment",
															"value": "string",
															"description": "Comment"
														},
														{
															"key": "digest",
															"value": "string",
															"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
														},
														{
															"key": "disable",
															"value": "0",
															"description": "Disable this matcher"
														},
														{
															"key": "invert-match",
															"value": "true",
															"description": "Invert match of the whole matcher"
														},
														{
															"key": "mode",
															"value": "all",
															"description": "Choose between 'all' and 'any' for when multiple properties are specified"
														}
													],
													"variable": [
														{
															"key": "name",
															"value": "string",
															"description": "(Required) Name of the matcher."
														}
													]
												},
												"description": "Update existing matcher"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/cluster/notifications/matchers/:name?comment=string&digest=string&disable=0&invert-match=true&mode=all",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"cluster",
																"notifications",
																"matchers",
																":name"
															],
															"query": [
																{
																	"key": "comment",
																	"value": "string",
																	"description": "Comment"
																},
																{
																	"key": "digest",
																	"value": "string",
																	"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
																},
																{
																	"key": "disable",
																	"value": "0",
																	"description": "Disable this matcher"
																},
																{
																	"key": "invert-match",
																	"value": "true",
																	"description": "Invert match of the whole matcher"
																},
																{
																	"key": "mode",
																	"value": "all",
																	"description": "Choose between 'all' and 'any' for when multiple properties are specified"
																}
															],
															"variable": [
																{
																	"key": "name"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "null"
												}
											]
										}
									]
								},
								{
									"name": "Returns a list of all matchers",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/cluster/notifications/matchers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cluster",
												"notifications",
												"matchers"
											]
										},
										"description": "Returns a list of all matchers"
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/notifications/matchers",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"notifications",
														"matchers"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"comment\": \"string\",\n    \"disable\": 0,\n    \"invert-match\": false,\n    \"match-calendar\": [\n      \"string\",\n      \"string\"\n    ],\n    \"match-field\": [\n      \"string\",\n      \"string\"\n    ],\n    \"match-severity\": [\n      \"string\",\n      \"string\"\n    ],\n    \"mode\": \"all\",\n    \"name\": \"string\",\n    \"origin\": \"user-created\",\n    \"target\": [\n      \"string\",\n      \"string\"\n    ]\n  },\n  {\n    \"comment\": \"string\",\n    \"disable\": 0,\n    \"invert-match\": false,\n    \"match-calendar\": [\n      \"string\",\n      \"string\"\n    ],\n    \"match-field\": [\n      \"string\",\n      \"string\"\n    ],\n    \"match-severity\": [\n      \"string\",\n      \"string\"\n    ],\n    \"mode\": \"all\",\n    \"name\": \"string\",\n    \"origin\": \"builtin\",\n    \"target\": [\n      \"string\",\n      \"string\"\n    ]\n  }\n]"
										}
									]
								},
								{
									"name": "Create a new matcher",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/cluster/notifications/matchers?comment=string&disable=0&invert-match=true&mode=all&name=string",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cluster",
												"notifications",
												"matchers"
											],
											"query": [
												{
													"key": "comment",
													"value": "string",
													"description": "Comment"
												},
												{
													"key": "disable",
													"value": "0",
													"description": "Disable this matcher"
												},
												{
													"key": "invert-match",
													"value": "true",
													"description": "Invert match of the whole matcher"
												},
												{
													"key": "mode",
													"value": "all",
													"description": "Choose between 'all' and 'any' for when multiple properties are specified"
												},
												{
													"key": "name",
													"value": "string",
													"description": "(Required) Name of the matcher."
												}
											]
										},
										"description": "Create a new matcher"
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/notifications/matchers?comment=string&disable=0&invert-match=true&mode=all&name=string",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"notifications",
														"matchers"
													],
													"query": [
														{
															"key": "comment",
															"value": "string",
															"description": "Comment"
														},
														{
															"key": "disable",
															"value": "0",
															"description": "Disable this matcher"
														},
														{
															"key": "invert-match",
															"value": "true",
															"description": "Invert match of the whole matcher"
														},
														{
															"key": "mode",
															"value": "all",
															"description": "Choose between 'all' and 'any' for when multiple properties are specified"
														},
														{
															"key": "name",
															"value": "string",
															"description": "(Required) Name of the matcher."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "null"
										}
									]
								}
							]
						},
						{
							"name": "Index for notification-related API endpoints.",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/cluster/notifications",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"cluster",
										"notifications"
									]
								},
								"description": "Index for notification-related API endpoints."
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/cluster/notifications",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cluster",
												"notifications"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[]"
								}
							]
						}
					]
				},
				{
					"name": "config",
					"item": [
						{
							"name": "apiversion",
							"item": [
								{
									"name": "Return the version of the cluster join API available on this node.",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/cluster/config/apiversion",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cluster",
												"config",
												"apiversion"
											]
										},
										"description": "Return the version of the cluster join API available on this node."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/config/apiversion",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"config",
														"apiversion"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "7130"
										}
									]
								}
							]
						},
						{
							"name": "nodes",
							"item": [
								{
									"name": "{node}",
									"item": [
										{
											"name": "Removes a node from the cluster configuration.",
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/config/nodes/:node",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"config",
														"nodes",
														":node"
													],
													"variable": [
														{
															"key": "node",
															"value": "string",
															"description": "(Required) The cluster node name."
														}
													]
												},
												"description": "Removes a node from the cluster configuration."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/cluster/config/nodes/:node",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"cluster",
																"config",
																"nodes",
																":node"
															],
															"variable": [
																{
																	"key": "node"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "null"
												}
											]
										},
										{
											"name": "Adds a node to the cluster configuration. This call is for internal use.",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/config/nodes/:node?apiversion=5752&force=true&link[n]=string&new_node_ip=string&nodeid=5741&votes=8248",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"config",
														"nodes",
														":node"
													],
													"query": [
														{
															"key": "apiversion",
															"value": "5752",
															"description": "The JOIN_API_VERSION of the new node."
														},
														{
															"key": "force",
															"value": "true",
															"description": "Do not throw error if node already exists."
														},
														{
															"key": "link[n]",
															"value": "string",
															"description": "Address and priority information of a single corosync link. (up to 8 links supported; link0..link7)"
														},
														{
															"key": "new_node_ip",
															"value": "string",
															"description": "IP Address of node to add. Used as fallback if no links are given."
														},
														{
															"key": "nodeid",
															"value": "5741",
															"description": "Node id for this node."
														},
														{
															"key": "votes",
															"value": "8248",
															"description": "Number of votes for this node"
														}
													],
													"variable": [
														{
															"key": "node",
															"value": "string",
															"description": "(Required) The cluster node name."
														}
													]
												},
												"description": "Adds a node to the cluster configuration. This call is for internal use."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/cluster/config/nodes/:node?apiversion=5752&force=true&link[n]=string&new_node_ip=string&nodeid=5741&votes=8248",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"cluster",
																"config",
																"nodes",
																":node"
															],
															"query": [
																{
																	"key": "apiversion",
																	"value": "5752",
																	"description": "The JOIN_API_VERSION of the new node."
																},
																{
																	"key": "force",
																	"value": "true",
																	"description": "Do not throw error if node already exists."
																},
																{
																	"key": "link[n]",
																	"value": "string",
																	"description": "Address and priority information of a single corosync link. (up to 8 links supported; link0..link7)"
																},
																{
																	"key": "new_node_ip",
																	"value": "string",
																	"description": "IP Address of node to add. Used as fallback if no links are given."
																},
																{
																	"key": "nodeid",
																	"value": "5741",
																	"description": "Node id for this node."
																},
																{
																	"key": "votes",
																	"value": "8248",
																	"description": "Number of votes for this node"
																}
															],
															"variable": [
																{
																	"key": "node"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"corosync_authkey\": \"string\",\n  \"corosync_conf\": \"string\",\n  \"warnings\": [\n    \"string\",\n    \"string\"\n  ]\n}"
												}
											]
										}
									]
								},
								{
									"name": "Corosync node list.",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/cluster/config/nodes",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cluster",
												"config",
												"nodes"
											]
										},
										"description": "Corosync node list."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/config/nodes",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"config",
														"nodes"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"node\": \"string\"\n  },\n  {\n    \"node\": \"string\"\n  }\n]"
										}
									]
								}
							]
						},
						{
							"name": "join",
							"item": [
								{
									"name": "Get information needed to join this cluster over the connected node.",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/cluster/config/join?node=current connected node",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cluster",
												"config",
												"join"
											],
											"query": [
												{
													"key": "node",
													"value": "current connected node",
													"description": "The node for which the joinee gets the nodeinfo. "
												}
											]
										},
										"description": "Get information needed to join this cluster over the connected node."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/config/join?node=current connected node",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"config",
														"join"
													],
													"query": [
														{
															"key": "node",
															"value": "current connected node",
															"description": "The node for which the joinee gets the nodeinfo. "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"config_digest\": \"string\",\n  \"nodelist\": [\n    {\n      \"name\": \"string\",\n      \"nodeid\": 741,\n      \"pve_addr\": \"string\",\n      \"pve_fp\": \"00:F3:83:F9:ab:52:37:32:81:0c:5d:C2:C2:Bb:13:45:8d:C0:82:eb:ca:6B:aD:c3:5a:bd:af:5c:16:Ed:6e:e1\",\n      \"quorum_votes\": 4402,\n      \"ring0_addr\": \"string\"\n    },\n    {\n      \"name\": \"string\",\n      \"nodeid\": 823,\n      \"pve_addr\": \"string\",\n      \"pve_fp\": \"48:Cb:Ea:A8:DF:52:cA:94:90:ae:Bd:c5:9C:Dd:fA:D8:fe:cC:DD:9A:fF:A1:9D:BB:34:dC:44:eb:Fa:Da:23:Ac\",\n      \"quorum_votes\": 7817,\n      \"ring0_addr\": \"string\",\n      \"key_0\": 1,\n      \"key_1\": 1,\n      \"key_2\": 1\n    }\n  ],\n  \"preferred_node\": \"string\",\n  \"totem\": {}\n}"
										}
									]
								},
								{
									"name": "Joins this node into an existing cluster. If no links are given, default to IP resolved by node's hostname on single link (fallback fails for clusters with multiple links).",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/cluster/config/join?fingerprint=2b:C6:53:bd:7c:42:0f:B0:19:Cc:76:26:41:2D:4D:68:a7:8b:9a:Dd:CE:FC:1d:cb:A3:B4:49:7d:8C:eA:3F:d9&force=true&hostname=string&link[n]=string&nodeid=5741&password=string&votes=8248",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cluster",
												"config",
												"join"
											],
											"query": [
												{
													"key": "fingerprint",
													"value": "2b:C6:53:bd:7c:42:0f:B0:19:Cc:76:26:41:2D:4D:68:a7:8b:9a:Dd:CE:FC:1d:cb:A3:B4:49:7d:8C:eA:3F:d9",
													"description": "(Required) Certificate SHA 256 fingerprint."
												},
												{
													"key": "force",
													"value": "true",
													"description": "Do not throw error if node already exists."
												},
												{
													"key": "hostname",
													"value": "string",
													"description": "(Required) Hostname (or IP) of an existing cluster member."
												},
												{
													"key": "link[n]",
													"value": "string",
													"description": "Address and priority information of a single corosync link. (up to 8 links supported; link0..link7)"
												},
												{
													"key": "nodeid",
													"value": "5741",
													"description": "Node id for this node."
												},
												{
													"key": "password",
													"value": "string",
													"description": "(Required) Superuser (root) password of peer node."
												},
												{
													"key": "votes",
													"value": "8248",
													"description": "Number of votes for this node"
												}
											]
										},
										"description": "Joins this node into an existing cluster. If no links are given, default to IP resolved by node's hostname on single link (fallback fails for clusters with multiple links)."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/config/join?fingerprint=2b:C6:53:bd:7c:42:0f:B0:19:Cc:76:26:41:2D:4D:68:a7:8b:9a:Dd:CE:FC:1d:cb:A3:B4:49:7d:8C:eA:3F:d9&force=true&hostname=string&link[n]=string&nodeid=5741&password=string&votes=8248",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"config",
														"join"
													],
													"query": [
														{
															"key": "fingerprint",
															"value": "2b:C6:53:bd:7c:42:0f:B0:19:Cc:76:26:41:2D:4D:68:a7:8b:9a:Dd:CE:FC:1d:cb:A3:B4:49:7d:8C:eA:3F:d9",
															"description": "(Required) Certificate SHA 256 fingerprint."
														},
														{
															"key": "force",
															"value": "true",
															"description": "Do not throw error if node already exists."
														},
														{
															"key": "hostname",
															"value": "string",
															"description": "(Required) Hostname (or IP) of an existing cluster member."
														},
														{
															"key": "link[n]",
															"value": "string",
															"description": "Address and priority information of a single corosync link. (up to 8 links supported; link0..link7)"
														},
														{
															"key": "nodeid",
															"value": "5741",
															"description": "Node id for this node."
														},
														{
															"key": "password",
															"value": "string",
															"description": "(Required) Superuser (root) password of peer node."
														},
														{
															"key": "votes",
															"value": "8248",
															"description": "Number of votes for this node"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "string"
										}
									]
								}
							]
						},
						{
							"name": "totem",
							"item": [
								{
									"name": "Get corosync totem protocol settings.",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/cluster/config/totem",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cluster",
												"config",
												"totem"
											]
										},
										"description": "Get corosync totem protocol settings."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/config/totem",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"config",
														"totem"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{}"
										}
									]
								}
							]
						},
						{
							"name": "qdevice",
							"item": [
								{
									"name": "Get QDevice status",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/cluster/config/qdevice",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cluster",
												"config",
												"qdevice"
											]
										},
										"description": "Get QDevice status"
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/config/qdevice",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"config",
														"qdevice"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{}"
										}
									]
								}
							]
						},
						{
							"name": "Directory index.",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/cluster/config",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"cluster",
										"config"
									]
								},
								"description": "Directory index."
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/cluster/config",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cluster",
												"config"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[]"
								}
							]
						},
						{
							"name": "Generate new cluster configuration. If no links given, default to local IP address as link0.",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/cluster/config?clustername=string&link[n]=string&nodeid=5741&votes=5741",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"cluster",
										"config"
									],
									"query": [
										{
											"key": "clustername",
											"value": "string",
											"description": "(Required) The name of the cluster."
										},
										{
											"key": "link[n]",
											"value": "string",
											"description": "Address and priority information of a single corosync link. (up to 8 links supported; link0..link7)"
										},
										{
											"key": "nodeid",
											"value": "5741",
											"description": "Node id for this node."
										},
										{
											"key": "votes",
											"value": "5741",
											"description": "Number of votes for this node."
										}
									]
								},
								"description": "Generate new cluster configuration. If no links given, default to local IP address as link0."
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/cluster/config?clustername=string&link[n]=string&nodeid=5741&votes=5741",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cluster",
												"config"
											],
											"query": [
												{
													"key": "clustername",
													"value": "string",
													"description": "(Required) The name of the cluster."
												},
												{
													"key": "link[n]",
													"value": "string",
													"description": "Address and priority information of a single corosync link. (up to 8 links supported; link0..link7)"
												},
												{
													"key": "nodeid",
													"value": "5741",
													"description": "Node id for this node."
												},
												{
													"key": "votes",
													"value": "5741",
													"description": "Number of votes for this node."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "string"
								}
							]
						}
					]
				},
				{
					"name": "firewall",
					"item": [
						{
							"name": "groups",
							"item": [
								{
									"name": "{group}",
									"item": [
										{
											"name": "{pos}",
											"item": [
												{
													"name": "Delete rule.",
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/cluster/firewall/groups/:group/:pos?digest=string",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"cluster",
																"firewall",
																"groups",
																":group",
																":pos"
															],
															"query": [
																{
																	"key": "digest",
																	"value": "string",
																	"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
																}
															],
															"variable": [
																{
																	"key": "group",
																	"value": "OgaobzvCjaGM",
																	"description": "(Required) Security Group name."
																},
																{
																	"key": "pos",
																	"value": "8248",
																	"description": "Update rule at position <pos>."
																}
															]
														},
														"description": "Delete rule."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/cluster/firewall/groups/:group/:pos?digest=string",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"cluster",
																		"firewall",
																		"groups",
																		":group",
																		":pos"
																	],
																	"query": [
																		{
																			"key": "digest",
																			"value": "string",
																			"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
																		}
																	],
																	"variable": [
																		{
																			"key": "group"
																		},
																		{
																			"key": "pos"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "null"
														}
													]
												},
												{
													"name": "Get single rule data.",
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/cluster/firewall/groups/:group/:pos",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"cluster",
																"firewall",
																"groups",
																":group",
																":pos"
															],
															"variable": [
																{
																	"key": "group",
																	"value": "OgaobzvCjaGM",
																	"description": "(Required) Security Group name."
																},
																{
																	"key": "pos",
																	"value": "8248",
																	"description": "Update rule at position <pos>."
																}
															]
														},
														"description": "Get single rule data."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/cluster/firewall/groups/:group/:pos",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"cluster",
																		"firewall",
																		"groups",
																		":group",
																		":pos"
																	],
																	"variable": [
																		{
																			"key": "group"
																		},
																		{
																			"key": "pos"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"action\": \"string\",\n  \"comment\": \"string\",\n  \"dest\": \"string\",\n  \"dport\": \"string\",\n  \"enable\": 7351,\n  \"icmp-type\": \"string\",\n  \"iface\": \"string\",\n  \"ipversion\": 3130,\n  \"log\": \"debug\",\n  \"macro\": \"string\",\n  \"pos\": 4146,\n  \"proto\": \"string\",\n  \"source\": \"string\",\n  \"sport\": \"string\",\n  \"type\": \"string\"\n}"
														}
													]
												},
												{
													"name": "Modify rule data.",
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/cluster/firewall/groups/:group/:pos?action=wrF&comment=string&delete=string&dest=string&digest=string&dport=string&enable=8248&icmp-type=string&iface=string&log=crit&macro=string&moveto=8248&proto=string&source=string&sport=string&type=forward",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"cluster",
																"firewall",
																"groups",
																":group",
																":pos"
															],
															"query": [
																{
																	"key": "action",
																	"value": "wrF",
																	"description": "Rule action ('ACCEPT', 'DROP', 'REJECT') or security group name."
																},
																{
																	"key": "comment",
																	"value": "string",
																	"description": "Descriptive comment."
																},
																{
																	"key": "delete",
																	"value": "string",
																	"description": "A list of settings you want to delete."
																},
																{
																	"key": "dest",
																	"value": "string",
																	"description": "Restrict packet destination address. This can refer to a single IP address, an IP set ('+ipsetname') or an IP alias definition. You can also specify an address range like '20.34.101.207-201.3.9.99', or a list of IP addresses and networks (entries are separated by comma). Please do not mix IPv4 and IPv6 addresses inside such lists."
																},
																{
																	"key": "digest",
																	"value": "string",
																	"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
																},
																{
																	"key": "dport",
																	"value": "string",
																	"description": "Restrict TCP/UDP destination port. You can use service names or simple numbers (0-65535), as defined in '/etc/services'. Port ranges can be specified with '\\d+:\\d+', for example '80:85', and you can use comma separated list to match several ports or ranges."
																},
																{
																	"key": "enable",
																	"value": "8248",
																	"description": "Flag to enable/disable a rule."
																},
																{
																	"key": "icmp-type",
																	"value": "string",
																	"description": "Specify icmp-type. Only valid if proto equals 'icmp' or 'icmpv6'/'ipv6-icmp'."
																},
																{
																	"key": "iface",
																	"value": "string",
																	"description": "Network interface name. You have to use network configuration key names for VMs and containers ('net\\d+'). Host related rules can use arbitrary strings."
																},
																{
																	"key": "log",
																	"value": "crit",
																	"description": "Log level for firewall rule."
																},
																{
																	"key": "macro",
																	"value": "string",
																	"description": "Use predefined standard macro."
																},
																{
																	"key": "moveto",
																	"value": "8248",
																	"description": "Move rule to new position <moveto>. Other arguments are ignored."
																},
																{
																	"key": "proto",
																	"value": "string",
																	"description": "IP protocol. You can use protocol names ('tcp'/'udp') or simple numbers, as defined in '/etc/protocols'."
																},
																{
																	"key": "source",
																	"value": "string",
																	"description": "Restrict packet source address. This can refer to a single IP address, an IP set ('+ipsetname') or an IP alias definition. You can also specify an address range like '20.34.101.207-201.3.9.99', or a list of IP addresses and networks (entries are separated by comma). Please do not mix IPv4 and IPv6 addresses inside such lists."
																},
																{
																	"key": "sport",
																	"value": "string",
																	"description": "Restrict TCP/UDP source port. You can use service names or simple numbers (0-65535), as defined in '/etc/services'. Port ranges can be specified with '\\d+:\\d+', for example '80:85', and you can use comma separated list to match several ports or ranges."
																},
																{
																	"key": "type",
																	"value": "forward",
																	"description": "Rule type."
																}
															],
															"variable": [
																{
																	"key": "group",
																	"value": "OgaobzvCjaGM",
																	"description": "(Required) Security Group name."
																},
																{
																	"key": "pos",
																	"value": "8248",
																	"description": "Update rule at position <pos>."
																}
															]
														},
														"description": "Modify rule data."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/cluster/firewall/groups/:group/:pos?action=wrF&comment=string&delete=string&dest=string&digest=string&dport=string&enable=8248&icmp-type=string&iface=string&log=crit&macro=string&moveto=8248&proto=string&source=string&sport=string&type=forward",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"cluster",
																		"firewall",
																		"groups",
																		":group",
																		":pos"
																	],
																	"query": [
																		{
																			"key": "action",
																			"value": "wrF",
																			"description": "Rule action ('ACCEPT', 'DROP', 'REJECT') or security group name."
																		},
																		{
																			"key": "comment",
																			"value": "string",
																			"description": "Descriptive comment."
																		},
																		{
																			"key": "delete",
																			"value": "string",
																			"description": "A list of settings you want to delete."
																		},
																		{
																			"key": "dest",
																			"value": "string",
																			"description": "Restrict packet destination address. This can refer to a single IP address, an IP set ('+ipsetname') or an IP alias definition. You can also specify an address range like '20.34.101.207-201.3.9.99', or a list of IP addresses and networks (entries are separated by comma). Please do not mix IPv4 and IPv6 addresses inside such lists."
																		},
																		{
																			"key": "digest",
																			"value": "string",
																			"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
																		},
																		{
																			"key": "dport",
																			"value": "string",
																			"description": "Restrict TCP/UDP destination port. You can use service names or simple numbers (0-65535), as defined in '/etc/services'. Port ranges can be specified with '\\d+:\\d+', for example '80:85', and you can use comma separated list to match several ports or ranges."
																		},
																		{
																			"key": "enable",
																			"value": "8248",
																			"description": "Flag to enable/disable a rule."
																		},
																		{
																			"key": "icmp-type",
																			"value": "string",
																			"description": "Specify icmp-type. Only valid if proto equals 'icmp' or 'icmpv6'/'ipv6-icmp'."
																		},
																		{
																			"key": "iface",
																			"value": "string",
																			"description": "Network interface name. You have to use network configuration key names for VMs and containers ('net\\d+'). Host related rules can use arbitrary strings."
																		},
																		{
																			"key": "log",
																			"value": "crit",
																			"description": "Log level for firewall rule."
																		},
																		{
																			"key": "macro",
																			"value": "string",
																			"description": "Use predefined standard macro."
																		},
																		{
																			"key": "moveto",
																			"value": "8248",
																			"description": "Move rule to new position <moveto>. Other arguments are ignored."
																		},
																		{
																			"key": "proto",
																			"value": "string",
																			"description": "IP protocol. You can use protocol names ('tcp'/'udp') or simple numbers, as defined in '/etc/protocols'."
																		},
																		{
																			"key": "source",
																			"value": "string",
																			"description": "Restrict packet source address. This can refer to a single IP address, an IP set ('+ipsetname') or an IP alias definition. You can also specify an address range like '20.34.101.207-201.3.9.99', or a list of IP addresses and networks (entries are separated by comma). Please do not mix IPv4 and IPv6 addresses inside such lists."
																		},
																		{
																			"key": "sport",
																			"value": "string",
																			"description": "Restrict TCP/UDP source port. You can use service names or simple numbers (0-65535), as defined in '/etc/services'. Port ranges can be specified with '\\d+:\\d+', for example '80:85', and you can use comma separated list to match several ports or ranges."
																		},
																		{
																			"key": "type",
																			"value": "forward",
																			"description": "Rule type."
																		}
																	],
																	"variable": [
																		{
																			"key": "group"
																		},
																		{
																			"key": "pos"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "null"
														}
													]
												}
											]
										},
										{
											"name": "Delete security group.",
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/firewall/groups/:group",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"firewall",
														"groups",
														":group"
													],
													"variable": [
														{
															"key": "group",
															"value": "OgaobzvCjaGM",
															"description": "(Required) Security Group name."
														}
													]
												},
												"description": "Delete security group."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/cluster/firewall/groups/:group",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"cluster",
																"firewall",
																"groups",
																":group"
															],
															"variable": [
																{
																	"key": "group"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "null"
												}
											]
										},
										{
											"name": "List rules.",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/firewall/groups/:group",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"firewall",
														"groups",
														":group"
													],
													"variable": [
														{
															"key": "group",
															"value": "OgaobzvCjaGM",
															"description": "(Required) Security Group name."
														}
													]
												},
												"description": "List rules."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/cluster/firewall/groups/:group",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"cluster",
																"firewall",
																"groups",
																":group"
															],
															"variable": [
																{
																	"key": "group"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "[\n  {\n    \"pos\": 2798\n  },\n  {\n    \"pos\": 6715\n  }\n]"
												}
											]
										},
										{
											"name": "Create new rule.",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/firewall/groups/:group?action=wrF&comment=string&dest=string&digest=string&dport=string&enable=8248&icmp-type=string&iface=string&log=crit&macro=string&pos=8248&proto=string&source=string&sport=string&type=forward",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"firewall",
														"groups",
														":group"
													],
													"query": [
														{
															"key": "action",
															"value": "wrF",
															"description": "(Required) Rule action ('ACCEPT', 'DROP', 'REJECT') or security group name."
														},
														{
															"key": "comment",
															"value": "string",
															"description": "Descriptive comment."
														},
														{
															"key": "dest",
															"value": "string",
															"description": "Restrict packet destination address. This can refer to a single IP address, an IP set ('+ipsetname') or an IP alias definition. You can also specify an address range like '20.34.101.207-201.3.9.99', or a list of IP addresses and networks (entries are separated by comma). Please do not mix IPv4 and IPv6 addresses inside such lists."
														},
														{
															"key": "digest",
															"value": "string",
															"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
														},
														{
															"key": "dport",
															"value": "string",
															"description": "Restrict TCP/UDP destination port. You can use service names or simple numbers (0-65535), as defined in '/etc/services'. Port ranges can be specified with '\\d+:\\d+', for example '80:85', and you can use comma separated list to match several ports or ranges."
														},
														{
															"key": "enable",
															"value": "8248",
															"description": "Flag to enable/disable a rule."
														},
														{
															"key": "icmp-type",
															"value": "string",
															"description": "Specify icmp-type. Only valid if proto equals 'icmp' or 'icmpv6'/'ipv6-icmp'."
														},
														{
															"key": "iface",
															"value": "string",
															"description": "Network interface name. You have to use network configuration key names for VMs and containers ('net\\d+'). Host related rules can use arbitrary strings."
														},
														{
															"key": "log",
															"value": "crit",
															"description": "Log level for firewall rule."
														},
														{
															"key": "macro",
															"value": "string",
															"description": "Use predefined standard macro."
														},
														{
															"key": "pos",
															"value": "8248",
															"description": "Update rule at position <pos>."
														},
														{
															"key": "proto",
															"value": "string",
															"description": "IP protocol. You can use protocol names ('tcp'/'udp') or simple numbers, as defined in '/etc/protocols'."
														},
														{
															"key": "source",
															"value": "string",
															"description": "Restrict packet source address. This can refer to a single IP address, an IP set ('+ipsetname') or an IP alias definition. You can also specify an address range like '20.34.101.207-201.3.9.99', or a list of IP addresses and networks (entries are separated by comma). Please do not mix IPv4 and IPv6 addresses inside such lists."
														},
														{
															"key": "sport",
															"value": "string",
															"description": "Restrict TCP/UDP source port. You can use service names or simple numbers (0-65535), as defined in '/etc/services'. Port ranges can be specified with '\\d+:\\d+', for example '80:85', and you can use comma separated list to match several ports or ranges."
														},
														{
															"key": "type",
															"value": "forward",
															"description": "(Required) Rule type."
														}
													],
													"variable": [
														{
															"key": "group",
															"value": "OgaobzvCjaGM",
															"description": "(Required) Security Group name."
														}
													]
												},
												"description": "Create new rule."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/cluster/firewall/groups/:group?action=wrF&comment=string&dest=string&digest=string&dport=string&enable=8248&icmp-type=string&iface=string&log=crit&macro=string&pos=8248&proto=string&source=string&sport=string&type=forward",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"cluster",
																"firewall",
																"groups",
																":group"
															],
															"query": [
																{
																	"key": "action",
																	"value": "wrF",
																	"description": "(Required) Rule action ('ACCEPT', 'DROP', 'REJECT') or security group name."
																},
																{
																	"key": "comment",
																	"value": "string",
																	"description": "Descriptive comment."
																},
																{
																	"key": "dest",
																	"value": "string",
																	"description": "Restrict packet destination address. This can refer to a single IP address, an IP set ('+ipsetname') or an IP alias definition. You can also specify an address range like '20.34.101.207-201.3.9.99', or a list of IP addresses and networks (entries are separated by comma). Please do not mix IPv4 and IPv6 addresses inside such lists."
																},
																{
																	"key": "digest",
																	"value": "string",
																	"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
																},
																{
																	"key": "dport",
																	"value": "string",
																	"description": "Restrict TCP/UDP destination port. You can use service names or simple numbers (0-65535), as defined in '/etc/services'. Port ranges can be specified with '\\d+:\\d+', for example '80:85', and you can use comma separated list to match several ports or ranges."
																},
																{
																	"key": "enable",
																	"value": "8248",
																	"description": "Flag to enable/disable a rule."
																},
																{
																	"key": "icmp-type",
																	"value": "string",
																	"description": "Specify icmp-type. Only valid if proto equals 'icmp' or 'icmpv6'/'ipv6-icmp'."
																},
																{
																	"key": "iface",
																	"value": "string",
																	"description": "Network interface name. You have to use network configuration key names for VMs and containers ('net\\d+'). Host related rules can use arbitrary strings."
																},
																{
																	"key": "log",
																	"value": "crit",
																	"description": "Log level for firewall rule."
																},
																{
																	"key": "macro",
																	"value": "string",
																	"description": "Use predefined standard macro."
																},
																{
																	"key": "pos",
																	"value": "8248",
																	"description": "Update rule at position <pos>."
																},
																{
																	"key": "proto",
																	"value": "string",
																	"description": "IP protocol. You can use protocol names ('tcp'/'udp') or simple numbers, as defined in '/etc/protocols'."
																},
																{
																	"key": "source",
																	"value": "string",
																	"description": "Restrict packet source address. This can refer to a single IP address, an IP set ('+ipsetname') or an IP alias definition. You can also specify an address range like '20.34.101.207-201.3.9.99', or a list of IP addresses and networks (entries are separated by comma). Please do not mix IPv4 and IPv6 addresses inside such lists."
																},
																{
																	"key": "sport",
																	"value": "string",
																	"description": "Restrict TCP/UDP source port. You can use service names or simple numbers (0-65535), as defined in '/etc/services'. Port ranges can be specified with '\\d+:\\d+', for example '80:85', and you can use comma separated list to match several ports or ranges."
																},
																{
																	"key": "type",
																	"value": "forward",
																	"description": "(Required) Rule type."
																}
															],
															"variable": [
																{
																	"key": "group"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "null"
												}
											]
										}
									]
								},
								{
									"name": "List security groups.",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/cluster/firewall/groups",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cluster",
												"firewall",
												"groups"
											]
										},
										"description": "List security groups."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/firewall/groups",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"firewall",
														"groups"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"comment\": \"string\",\n    \"digest\": \"string\",\n    \"group\": \"cqq\"\n  },\n  {\n    \"comment\": \"string\",\n    \"digest\": \"string\",\n    \"group\": \"ttJAp5\"\n  }\n]"
										}
									]
								},
								{
									"name": "Create new security group.",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/cluster/firewall/groups?comment=string&digest=string&group=OgaobzvCjaGM&rename=OgaobzvCjaGM",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cluster",
												"firewall",
												"groups"
											],
											"query": [
												{
													"key": "comment",
													"value": "string"
												},
												{
													"key": "digest",
													"value": "string",
													"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
												},
												{
													"key": "group",
													"value": "OgaobzvCjaGM",
													"description": "(Required) Security Group name."
												},
												{
													"key": "rename",
													"value": "OgaobzvCjaGM",
													"description": "Rename/update an existing security group. You can set 'rename' to the same value as 'name' to update the 'comment' of an existing group."
												}
											]
										},
										"description": "Create new security group."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/firewall/groups?comment=string&digest=string&group=OgaobzvCjaGM&rename=OgaobzvCjaGM",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"firewall",
														"groups"
													],
													"query": [
														{
															"key": "comment",
															"value": "string"
														},
														{
															"key": "digest",
															"value": "string",
															"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
														},
														{
															"key": "group",
															"value": "OgaobzvCjaGM",
															"description": "(Required) Security Group name."
														},
														{
															"key": "rename",
															"value": "OgaobzvCjaGM",
															"description": "Rename/update an existing security group. You can set 'rename' to the same value as 'name' to update the 'comment' of an existing group."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "null"
										}
									]
								}
							]
						},
						{
							"name": "rules",
							"item": [
								{
									"name": "{pos}",
									"item": [
										{
											"name": "Delete rule.",
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/firewall/rules/:pos?digest=string",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"firewall",
														"rules",
														":pos"
													],
													"query": [
														{
															"key": "digest",
															"value": "string",
															"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
														}
													],
													"variable": [
														{
															"key": "pos",
															"value": "8248",
															"description": "Update rule at position <pos>."
														}
													]
												},
												"description": "Delete rule."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/cluster/firewall/rules/:pos?digest=string",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"cluster",
																"firewall",
																"rules",
																":pos"
															],
															"query": [
																{
																	"key": "digest",
																	"value": "string",
																	"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
																}
															],
															"variable": [
																{
																	"key": "pos"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "null"
												}
											]
										},
										{
											"name": "Get single rule data.",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/firewall/rules/:pos",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"firewall",
														"rules",
														":pos"
													],
													"variable": [
														{
															"key": "pos",
															"value": "8248",
															"description": "Update rule at position <pos>."
														}
													]
												},
												"description": "Get single rule data."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/cluster/firewall/rules/:pos",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"cluster",
																"firewall",
																"rules",
																":pos"
															],
															"variable": [
																{
																	"key": "pos"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"action\": \"string\",\n  \"comment\": \"string\",\n  \"dest\": \"string\",\n  \"dport\": \"string\",\n  \"enable\": 7351,\n  \"icmp-type\": \"string\",\n  \"iface\": \"string\",\n  \"ipversion\": 3130,\n  \"log\": \"debug\",\n  \"macro\": \"string\",\n  \"pos\": 4146,\n  \"proto\": \"string\",\n  \"source\": \"string\",\n  \"sport\": \"string\",\n  \"type\": \"string\"\n}"
												}
											]
										},
										{
											"name": "Modify rule data.",
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/firewall/rules/:pos?action=wrF&comment=string&delete=string&dest=string&digest=string&dport=string&enable=8248&icmp-type=string&iface=string&log=crit&macro=string&moveto=8248&proto=string&source=string&sport=string&type=forward",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"firewall",
														"rules",
														":pos"
													],
													"query": [
														{
															"key": "action",
															"value": "wrF",
															"description": "Rule action ('ACCEPT', 'DROP', 'REJECT') or security group name."
														},
														{
															"key": "comment",
															"value": "string",
															"description": "Descriptive comment."
														},
														{
															"key": "delete",
															"value": "string",
															"description": "A list of settings you want to delete."
														},
														{
															"key": "dest",
															"value": "string",
															"description": "Restrict packet destination address. This can refer to a single IP address, an IP set ('+ipsetname') or an IP alias definition. You can also specify an address range like '20.34.101.207-201.3.9.99', or a list of IP addresses and networks (entries are separated by comma). Please do not mix IPv4 and IPv6 addresses inside such lists."
														},
														{
															"key": "digest",
															"value": "string",
															"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
														},
														{
															"key": "dport",
															"value": "string",
															"description": "Restrict TCP/UDP destination port. You can use service names or simple numbers (0-65535), as defined in '/etc/services'. Port ranges can be specified with '\\d+:\\d+', for example '80:85', and you can use comma separated list to match several ports or ranges."
														},
														{
															"key": "enable",
															"value": "8248",
															"description": "Flag to enable/disable a rule."
														},
														{
															"key": "icmp-type",
															"value": "string",
															"description": "Specify icmp-type. Only valid if proto equals 'icmp' or 'icmpv6'/'ipv6-icmp'."
														},
														{
															"key": "iface",
															"value": "string",
															"description": "Network interface name. You have to use network configuration key names for VMs and containers ('net\\d+'). Host related rules can use arbitrary strings."
														},
														{
															"key": "log",
															"value": "crit",
															"description": "Log level for firewall rule."
														},
														{
															"key": "macro",
															"value": "string",
															"description": "Use predefined standard macro."
														},
														{
															"key": "moveto",
															"value": "8248",
															"description": "Move rule to new position <moveto>. Other arguments are ignored."
														},
														{
															"key": "proto",
															"value": "string",
															"description": "IP protocol. You can use protocol names ('tcp'/'udp') or simple numbers, as defined in '/etc/protocols'."
														},
														{
															"key": "source",
															"value": "string",
															"description": "Restrict packet source address. This can refer to a single IP address, an IP set ('+ipsetname') or an IP alias definition. You can also specify an address range like '20.34.101.207-201.3.9.99', or a list of IP addresses and networks (entries are separated by comma). Please do not mix IPv4 and IPv6 addresses inside such lists."
														},
														{
															"key": "sport",
															"value": "string",
															"description": "Restrict TCP/UDP source port. You can use service names or simple numbers (0-65535), as defined in '/etc/services'. Port ranges can be specified with '\\d+:\\d+', for example '80:85', and you can use comma separated list to match several ports or ranges."
														},
														{
															"key": "type",
															"value": "forward",
															"description": "Rule type."
														}
													],
													"variable": [
														{
															"key": "pos",
															"value": "8248",
															"description": "Update rule at position <pos>."
														}
													]
												},
												"description": "Modify rule data."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/cluster/firewall/rules/:pos?action=wrF&comment=string&delete=string&dest=string&digest=string&dport=string&enable=8248&icmp-type=string&iface=string&log=crit&macro=string&moveto=8248&proto=string&source=string&sport=string&type=forward",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"cluster",
																"firewall",
																"rules",
																":pos"
															],
															"query": [
																{
																	"key": "action",
																	"value": "wrF",
																	"description": "Rule action ('ACCEPT', 'DROP', 'REJECT') or security group name."
																},
																{
																	"key": "comment",
																	"value": "string",
																	"description": "Descriptive comment."
																},
																{
																	"key": "delete",
																	"value": "string",
																	"description": "A list of settings you want to delete."
																},
																{
																	"key": "dest",
																	"value": "string",
																	"description": "Restrict packet destination address. This can refer to a single IP address, an IP set ('+ipsetname') or an IP alias definition. You can also specify an address range like '20.34.101.207-201.3.9.99', or a list of IP addresses and networks (entries are separated by comma). Please do not mix IPv4 and IPv6 addresses inside such lists."
																},
																{
																	"key": "digest",
																	"value": "string",
																	"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
																},
																{
																	"key": "dport",
																	"value": "string",
																	"description": "Restrict TCP/UDP destination port. You can use service names or simple numbers (0-65535), as defined in '/etc/services'. Port ranges can be specified with '\\d+:\\d+', for example '80:85', and you can use comma separated list to match several ports or ranges."
																},
																{
																	"key": "enable",
																	"value": "8248",
																	"description": "Flag to enable/disable a rule."
																},
																{
																	"key": "icmp-type",
																	"value": "string",
																	"description": "Specify icmp-type. Only valid if proto equals 'icmp' or 'icmpv6'/'ipv6-icmp'."
																},
																{
																	"key": "iface",
																	"value": "string",
																	"description": "Network interface name. You have to use network configuration key names for VMs and containers ('net\\d+'). Host related rules can use arbitrary strings."
																},
																{
																	"key": "log",
																	"value": "crit",
																	"description": "Log level for firewall rule."
																},
																{
																	"key": "macro",
																	"value": "string",
																	"description": "Use predefined standard macro."
																},
																{
																	"key": "moveto",
																	"value": "8248",
																	"description": "Move rule to new position <moveto>. Other arguments are ignored."
																},
																{
																	"key": "proto",
																	"value": "string",
																	"description": "IP protocol. You can use protocol names ('tcp'/'udp') or simple numbers, as defined in '/etc/protocols'."
																},
																{
																	"key": "source",
																	"value": "string",
																	"description": "Restrict packet source address. This can refer to a single IP address, an IP set ('+ipsetname') or an IP alias definition. You can also specify an address range like '20.34.101.207-201.3.9.99', or a list of IP addresses and networks (entries are separated by comma). Please do not mix IPv4 and IPv6 addresses inside such lists."
																},
																{
																	"key": "sport",
																	"value": "string",
																	"description": "Restrict TCP/UDP source port. You can use service names or simple numbers (0-65535), as defined in '/etc/services'. Port ranges can be specified with '\\d+:\\d+', for example '80:85', and you can use comma separated list to match several ports or ranges."
																},
																{
																	"key": "type",
																	"value": "forward",
																	"description": "Rule type."
																}
															],
															"variable": [
																{
																	"key": "pos"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "null"
												}
											]
										}
									]
								},
								{
									"name": "List rules.",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/cluster/firewall/rules",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cluster",
												"firewall",
												"rules"
											]
										},
										"description": "List rules."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/firewall/rules",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"firewall",
														"rules"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"pos\": 2798\n  },\n  {\n    \"pos\": 6715\n  }\n]"
										}
									]
								},
								{
									"name": "Create new rule.",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/cluster/firewall/rules?action=wrF&comment=string&dest=string&digest=string&dport=string&enable=8248&icmp-type=string&iface=string&log=crit&macro=string&pos=8248&proto=string&source=string&sport=string&type=forward",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cluster",
												"firewall",
												"rules"
											],
											"query": [
												{
													"key": "action",
													"value": "wrF",
													"description": "(Required) Rule action ('ACCEPT', 'DROP', 'REJECT') or security group name."
												},
												{
													"key": "comment",
													"value": "string",
													"description": "Descriptive comment."
												},
												{
													"key": "dest",
													"value": "string",
													"description": "Restrict packet destination address. This can refer to a single IP address, an IP set ('+ipsetname') or an IP alias definition. You can also specify an address range like '20.34.101.207-201.3.9.99', or a list of IP addresses and networks (entries are separated by comma). Please do not mix IPv4 and IPv6 addresses inside such lists."
												},
												{
													"key": "digest",
													"value": "string",
													"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
												},
												{
													"key": "dport",
													"value": "string",
													"description": "Restrict TCP/UDP destination port. You can use service names or simple numbers (0-65535), as defined in '/etc/services'. Port ranges can be specified with '\\d+:\\d+', for example '80:85', and you can use comma separated list to match several ports or ranges."
												},
												{
													"key": "enable",
													"value": "8248",
													"description": "Flag to enable/disable a rule."
												},
												{
													"key": "icmp-type",
													"value": "string",
													"description": "Specify icmp-type. Only valid if proto equals 'icmp' or 'icmpv6'/'ipv6-icmp'."
												},
												{
													"key": "iface",
													"value": "string",
													"description": "Network interface name. You have to use network configuration key names for VMs and containers ('net\\d+'). Host related rules can use arbitrary strings."
												},
												{
													"key": "log",
													"value": "crit",
													"description": "Log level for firewall rule."
												},
												{
													"key": "macro",
													"value": "string",
													"description": "Use predefined standard macro."
												},
												{
													"key": "pos",
													"value": "8248",
													"description": "Update rule at position <pos>."
												},
												{
													"key": "proto",
													"value": "string",
													"description": "IP protocol. You can use protocol names ('tcp'/'udp') or simple numbers, as defined in '/etc/protocols'."
												},
												{
													"key": "source",
													"value": "string",
													"description": "Restrict packet source address. This can refer to a single IP address, an IP set ('+ipsetname') or an IP alias definition. You can also specify an address range like '20.34.101.207-201.3.9.99', or a list of IP addresses and networks (entries are separated by comma). Please do not mix IPv4 and IPv6 addresses inside such lists."
												},
												{
													"key": "sport",
													"value": "string",
													"description": "Restrict TCP/UDP source port. You can use service names or simple numbers (0-65535), as defined in '/etc/services'. Port ranges can be specified with '\\d+:\\d+', for example '80:85', and you can use comma separated list to match several ports or ranges."
												},
												{
													"key": "type",
													"value": "forward",
													"description": "(Required) Rule type."
												}
											]
										},
										"description": "Create new rule."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/firewall/rules?action=wrF&comment=string&dest=string&digest=string&dport=string&enable=8248&icmp-type=string&iface=string&log=crit&macro=string&pos=8248&proto=string&source=string&sport=string&type=forward",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"firewall",
														"rules"
													],
													"query": [
														{
															"key": "action",
															"value": "wrF",
															"description": "(Required) Rule action ('ACCEPT', 'DROP', 'REJECT') or security group name."
														},
														{
															"key": "comment",
															"value": "string",
															"description": "Descriptive comment."
														},
														{
															"key": "dest",
															"value": "string",
															"description": "Restrict packet destination address. This can refer to a single IP address, an IP set ('+ipsetname') or an IP alias definition. You can also specify an address range like '20.34.101.207-201.3.9.99', or a list of IP addresses and networks (entries are separated by comma). Please do not mix IPv4 and IPv6 addresses inside such lists."
														},
														{
															"key": "digest",
															"value": "string",
															"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
														},
														{
															"key": "dport",
															"value": "string",
															"description": "Restrict TCP/UDP destination port. You can use service names or simple numbers (0-65535), as defined in '/etc/services'. Port ranges can be specified with '\\d+:\\d+', for example '80:85', and you can use comma separated list to match several ports or ranges."
														},
														{
															"key": "enable",
															"value": "8248",
															"description": "Flag to enable/disable a rule."
														},
														{
															"key": "icmp-type",
															"value": "string",
															"description": "Specify icmp-type. Only valid if proto equals 'icmp' or 'icmpv6'/'ipv6-icmp'."
														},
														{
															"key": "iface",
															"value": "string",
															"description": "Network interface name. You have to use network configuration key names for VMs and containers ('net\\d+'). Host related rules can use arbitrary strings."
														},
														{
															"key": "log",
															"value": "crit",
															"description": "Log level for firewall rule."
														},
														{
															"key": "macro",
															"value": "string",
															"description": "Use predefined standard macro."
														},
														{
															"key": "pos",
															"value": "8248",
															"description": "Update rule at position <pos>."
														},
														{
															"key": "proto",
															"value": "string",
															"description": "IP protocol. You can use protocol names ('tcp'/'udp') or simple numbers, as defined in '/etc/protocols'."
														},
														{
															"key": "source",
															"value": "string",
															"description": "Restrict packet source address. This can refer to a single IP address, an IP set ('+ipsetname') or an IP alias definition. You can also specify an address range like '20.34.101.207-201.3.9.99', or a list of IP addresses and networks (entries are separated by comma). Please do not mix IPv4 and IPv6 addresses inside such lists."
														},
														{
															"key": "sport",
															"value": "string",
															"description": "Restrict TCP/UDP source port. You can use service names or simple numbers (0-65535), as defined in '/etc/services'. Port ranges can be specified with '\\d+:\\d+', for example '80:85', and you can use comma separated list to match several ports or ranges."
														},
														{
															"key": "type",
															"value": "forward",
															"description": "(Required) Rule type."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "null"
										}
									]
								}
							]
						},
						{
							"name": "ipset",
							"item": [
								{
									"name": "{name}",
									"item": [
										{
											"name": "{cidr}",
											"item": [
												{
													"name": "Remove IP or Network from IPSet.",
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/cluster/firewall/ipset/:name/:cidr?digest=string",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"cluster",
																"firewall",
																"ipset",
																":name",
																":cidr"
															],
															"query": [
																{
																	"key": "digest",
																	"value": "string",
																	"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
																}
															],
															"variable": [
																{
																	"key": "name",
																	"value": "AcFp",
																	"description": "(Required) IP set name."
																},
																{
																	"key": "cidr",
																	"value": "string",
																	"description": "(Required) Network/IP specification in CIDR format."
																}
															]
														},
														"description": "Remove IP or Network from IPSet."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/cluster/firewall/ipset/:name/:cidr?digest=string",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"cluster",
																		"firewall",
																		"ipset",
																		":name",
																		":cidr"
																	],
																	"query": [
																		{
																			"key": "digest",
																			"value": "string",
																			"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
																		}
																	],
																	"variable": [
																		{
																			"key": "name"
																		},
																		{
																			"key": "cidr"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "null"
														}
													]
												},
												{
													"name": "Read IP or Network settings from IPSet.",
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/cluster/firewall/ipset/:name/:cidr",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"cluster",
																"firewall",
																"ipset",
																":name",
																":cidr"
															],
															"variable": [
																{
																	"key": "name",
																	"value": "AcFp",
																	"description": "(Required) IP set name."
																},
																{
																	"key": "cidr",
																	"value": "string",
																	"description": "(Required) Network/IP specification in CIDR format."
																}
															]
														},
														"description": "Read IP or Network settings from IPSet."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/cluster/firewall/ipset/:name/:cidr",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"cluster",
																		"firewall",
																		"ipset",
																		":name",
																		":cidr"
																	],
																	"variable": [
																		{
																			"key": "name"
																		},
																		{
																			"key": "cidr"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{}"
														}
													]
												},
												{
													"name": "Update IP or Network settings",
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/cluster/firewall/ipset/:name/:cidr?comment=string&digest=string&nomatch=true",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"cluster",
																"firewall",
																"ipset",
																":name",
																":cidr"
															],
															"query": [
																{
																	"key": "comment",
																	"value": "string"
																},
																{
																	"key": "digest",
																	"value": "string",
																	"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
																},
																{
																	"key": "nomatch",
																	"value": "true"
																}
															],
															"variable": [
																{
																	"key": "name",
																	"value": "AcFp",
																	"description": "(Required) IP set name."
																},
																{
																	"key": "cidr",
																	"value": "string",
																	"description": "(Required) Network/IP specification in CIDR format."
																}
															]
														},
														"description": "Update IP or Network settings"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/cluster/firewall/ipset/:name/:cidr?comment=string&digest=string&nomatch=true",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"cluster",
																		"firewall",
																		"ipset",
																		":name",
																		":cidr"
																	],
																	"query": [
																		{
																			"key": "comment",
																			"value": "string"
																		},
																		{
																			"key": "digest",
																			"value": "string",
																			"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
																		},
																		{
																			"key": "nomatch",
																			"value": "true"
																		}
																	],
																	"variable": [
																		{
																			"key": "name"
																		},
																		{
																			"key": "cidr"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "null"
														}
													]
												}
											]
										},
										{
											"name": "Delete IPSet",
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/firewall/ipset/:name?force=true",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"firewall",
														"ipset",
														":name"
													],
													"query": [
														{
															"key": "force",
															"value": "true",
															"description": "Delete all members of the IPSet, if there are any."
														}
													],
													"variable": [
														{
															"key": "name",
															"value": "AcFp",
															"description": "(Required) IP set name."
														}
													]
												},
												"description": "Delete IPSet"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/cluster/firewall/ipset/:name?force=true",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"cluster",
																"firewall",
																"ipset",
																":name"
															],
															"query": [
																{
																	"key": "force",
																	"value": "true",
																	"description": "Delete all members of the IPSet, if there are any."
																}
															],
															"variable": [
																{
																	"key": "name"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "null"
												}
											]
										},
										{
											"name": "List IPSet content",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/firewall/ipset/:name",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"firewall",
														"ipset",
														":name"
													],
													"variable": [
														{
															"key": "name",
															"value": "AcFp",
															"description": "(Required) IP set name."
														}
													]
												},
												"description": "List IPSet content"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/cluster/firewall/ipset/:name",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"cluster",
																"firewall",
																"ipset",
																":name"
															],
															"variable": [
																{
																	"key": "name"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "[\n  {\n    \"cidr\": \"string\",\n    \"comment\": \"string\",\n    \"digest\": \"string\",\n    \"nomatch\": true\n  },\n  {\n    \"cidr\": \"string\",\n    \"comment\": \"string\",\n    \"digest\": \"string\",\n    \"nomatch\": true\n  }\n]"
												}
											]
										},
										{
											"name": "Add IP or Network to IPSet.",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/firewall/ipset/:name?cidr=string&comment=string&nomatch=true",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"firewall",
														"ipset",
														":name"
													],
													"query": [
														{
															"key": "cidr",
															"value": "string",
															"description": "(Required) Network/IP specification in CIDR format."
														},
														{
															"key": "comment",
															"value": "string"
														},
														{
															"key": "nomatch",
															"value": "true"
														}
													],
													"variable": [
														{
															"key": "name",
															"value": "AcFp",
															"description": "(Required) IP set name."
														}
													]
												},
												"description": "Add IP or Network to IPSet."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/cluster/firewall/ipset/:name?cidr=string&comment=string&nomatch=true",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"cluster",
																"firewall",
																"ipset",
																":name"
															],
															"query": [
																{
																	"key": "cidr",
																	"value": "string",
																	"description": "(Required) Network/IP specification in CIDR format."
																},
																{
																	"key": "comment",
																	"value": "string"
																},
																{
																	"key": "nomatch",
																	"value": "true"
																}
															],
															"variable": [
																{
																	"key": "name"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "null"
												}
											]
										}
									]
								},
								{
									"name": "List IPSets",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/cluster/firewall/ipset",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cluster",
												"firewall",
												"ipset"
											]
										},
										"description": "List IPSets"
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/firewall/ipset",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"firewall",
														"ipset"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"comment\": \"string\",\n    \"digest\": \"string\",\n    \"name\": \"l2MB_\"\n  },\n  {\n    \"comment\": \"string\",\n    \"digest\": \"string\",\n    \"name\": \"qM63zam-u8BC\"\n  }\n]"
										}
									]
								},
								{
									"name": "Create new IPSet",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/cluster/firewall/ipset?comment=string&digest=string&name=AcFp&rename=AcFp",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cluster",
												"firewall",
												"ipset"
											],
											"query": [
												{
													"key": "comment",
													"value": "string"
												},
												{
													"key": "digest",
													"value": "string",
													"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
												},
												{
													"key": "name",
													"value": "AcFp",
													"description": "(Required) IP set name."
												},
												{
													"key": "rename",
													"value": "AcFp",
													"description": "Rename an existing IPSet. You can set 'rename' to the same value as 'name' to update the 'comment' of an existing IPSet."
												}
											]
										},
										"description": "Create new IPSet"
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/firewall/ipset?comment=string&digest=string&name=AcFp&rename=AcFp",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"firewall",
														"ipset"
													],
													"query": [
														{
															"key": "comment",
															"value": "string"
														},
														{
															"key": "digest",
															"value": "string",
															"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
														},
														{
															"key": "name",
															"value": "AcFp",
															"description": "(Required) IP set name."
														},
														{
															"key": "rename",
															"value": "AcFp",
															"description": "Rename an existing IPSet. You can set 'rename' to the same value as 'name' to update the 'comment' of an existing IPSet."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "null"
										}
									]
								}
							]
						},
						{
							"name": "aliases",
							"item": [
								{
									"name": "{name}",
									"item": [
										{
											"name": "Remove IP or Network alias.",
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/firewall/aliases/:name?digest=string",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"firewall",
														"aliases",
														":name"
													],
													"query": [
														{
															"key": "digest",
															"value": "string",
															"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
														}
													],
													"variable": [
														{
															"key": "name",
															"value": "AcFp",
															"description": "(Required) Alias name."
														}
													]
												},
												"description": "Remove IP or Network alias."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/cluster/firewall/aliases/:name?digest=string",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"cluster",
																"firewall",
																"aliases",
																":name"
															],
															"query": [
																{
																	"key": "digest",
																	"value": "string",
																	"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
																}
															],
															"variable": [
																{
																	"key": "name"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "null"
												}
											]
										},
										{
											"name": "Read alias.",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/firewall/aliases/:name",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"firewall",
														"aliases",
														":name"
													],
													"variable": [
														{
															"key": "name",
															"value": "AcFp",
															"description": "(Required) Alias name."
														}
													]
												},
												"description": "Read alias."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/cluster/firewall/aliases/:name",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"cluster",
																"firewall",
																"aliases",
																":name"
															],
															"variable": [
																{
																	"key": "name"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{}"
												}
											]
										},
										{
											"name": "Update IP or Network alias.",
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/firewall/aliases/:name?cidr=string&comment=string&digest=string&rename=AcFp",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"firewall",
														"aliases",
														":name"
													],
													"query": [
														{
															"key": "cidr",
															"value": "string",
															"description": "(Required) Network/IP specification in CIDR format."
														},
														{
															"key": "comment",
															"value": "string"
														},
														{
															"key": "digest",
															"value": "string",
															"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
														},
														{
															"key": "rename",
															"value": "AcFp",
															"description": "Rename an existing alias."
														}
													],
													"variable": [
														{
															"key": "name",
															"value": "AcFp",
															"description": "(Required) Alias name."
														}
													]
												},
												"description": "Update IP or Network alias."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/cluster/firewall/aliases/:name?cidr=string&comment=string&digest=string&rename=AcFp",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"cluster",
																"firewall",
																"aliases",
																":name"
															],
															"query": [
																{
																	"key": "cidr",
																	"value": "string",
																	"description": "(Required) Network/IP specification in CIDR format."
																},
																{
																	"key": "comment",
																	"value": "string"
																},
																{
																	"key": "digest",
																	"value": "string",
																	"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
																},
																{
																	"key": "rename",
																	"value": "AcFp",
																	"description": "Rename an existing alias."
																}
															],
															"variable": [
																{
																	"key": "name"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "null"
												}
											]
										}
									]
								},
								{
									"name": "List aliases",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/cluster/firewall/aliases",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cluster",
												"firewall",
												"aliases"
											]
										},
										"description": "List aliases"
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/firewall/aliases",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"firewall",
														"aliases"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"cidr\": \"string\",\n    \"comment\": \"string\",\n    \"digest\": \"string\",\n    \"name\": \"string\"\n  },\n  {\n    \"cidr\": \"string\",\n    \"comment\": \"string\",\n    \"digest\": \"string\",\n    \"name\": \"string\"\n  }\n]"
										}
									]
								},
								{
									"name": "Create IP or Network Alias.",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/cluster/firewall/aliases?cidr=string&comment=string&name=AcFp",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cluster",
												"firewall",
												"aliases"
											],
											"query": [
												{
													"key": "cidr",
													"value": "string",
													"description": "(Required) Network/IP specification in CIDR format."
												},
												{
													"key": "comment",
													"value": "string"
												},
												{
													"key": "name",
													"value": "AcFp",
													"description": "(Required) Alias name."
												}
											]
										},
										"description": "Create IP or Network Alias."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/firewall/aliases?cidr=string&comment=string&name=AcFp",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"firewall",
														"aliases"
													],
													"query": [
														{
															"key": "cidr",
															"value": "string",
															"description": "(Required) Network/IP specification in CIDR format."
														},
														{
															"key": "comment",
															"value": "string"
														},
														{
															"key": "name",
															"value": "AcFp",
															"description": "(Required) Alias name."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "null"
										}
									]
								}
							]
						},
						{
							"name": "options",
							"item": [
								{
									"name": "Get Firewall options.",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/cluster/firewall/options",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cluster",
												"firewall",
												"options"
											]
										},
										"description": "Get Firewall options."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/firewall/options",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"firewall",
														"options"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"ebtables\": 1,\n  \"enable\": 2717,\n  \"log_ratelimit\": \"string\",\n  \"policy_forward\": \"DROP\",\n  \"policy_in\": \"REJECT\",\n  \"policy_out\": \"REJECT\"\n}"
										}
									]
								},
								{
									"name": "Set Firewall options.",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/cluster/firewall/options?delete=string&digest=string&ebtables=1&enable=8248&log_ratelimit=string&policy_forward=DROP&policy_in=DROP&policy_out=DROP",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cluster",
												"firewall",
												"options"
											],
											"query": [
												{
													"key": "delete",
													"value": "string",
													"description": "A list of settings you want to delete."
												},
												{
													"key": "digest",
													"value": "string",
													"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
												},
												{
													"key": "ebtables",
													"value": "1",
													"description": "Enable ebtables rules cluster wide."
												},
												{
													"key": "enable",
													"value": "8248",
													"description": "Enable or disable the firewall cluster wide."
												},
												{
													"key": "log_ratelimit",
													"value": "string",
													"description": "Log ratelimiting settings"
												},
												{
													"key": "policy_forward",
													"value": "DROP",
													"description": "Forward policy."
												},
												{
													"key": "policy_in",
													"value": "DROP",
													"description": "Input policy."
												},
												{
													"key": "policy_out",
													"value": "DROP",
													"description": "Output policy."
												}
											]
										},
										"description": "Set Firewall options."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/firewall/options?delete=string&digest=string&ebtables=1&enable=8248&log_ratelimit=string&policy_forward=DROP&policy_in=DROP&policy_out=DROP",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"firewall",
														"options"
													],
													"query": [
														{
															"key": "delete",
															"value": "string",
															"description": "A list of settings you want to delete."
														},
														{
															"key": "digest",
															"value": "string",
															"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
														},
														{
															"key": "ebtables",
															"value": "1",
															"description": "Enable ebtables rules cluster wide."
														},
														{
															"key": "enable",
															"value": "8248",
															"description": "Enable or disable the firewall cluster wide."
														},
														{
															"key": "log_ratelimit",
															"value": "string",
															"description": "Log ratelimiting settings"
														},
														{
															"key": "policy_forward",
															"value": "DROP",
															"description": "Forward policy."
														},
														{
															"key": "policy_in",
															"value": "DROP",
															"description": "Input policy."
														},
														{
															"key": "policy_out",
															"value": "DROP",
															"description": "Output policy."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "null"
										}
									]
								}
							]
						},
						{
							"name": "macros",
							"item": [
								{
									"name": "List available macros",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/cluster/firewall/macros",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cluster",
												"firewall",
												"macros"
											]
										},
										"description": "List available macros"
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/firewall/macros",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"firewall",
														"macros"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"descr\": \"string\",\n    \"macro\": \"string\"\n  },\n  {\n    \"descr\": \"string\",\n    \"macro\": \"string\"\n  }\n]"
										}
									]
								}
							]
						},
						{
							"name": "refs",
							"item": [
								{
									"name": "Lists possible IPSet/Alias reference which are allowed in source/dest properties.",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/cluster/firewall/refs?type=alias",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cluster",
												"firewall",
												"refs"
											],
											"query": [
												{
													"key": "type",
													"value": "alias",
													"description": "Only list references of specified type."
												}
											]
										},
										"description": "Lists possible IPSet/Alias reference which are allowed in source/dest properties."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/firewall/refs?type=alias",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"firewall",
														"refs"
													],
													"query": [
														{
															"key": "type",
															"value": "alias",
															"description": "Only list references of specified type."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"comment\": \"string\",\n    \"name\": \"string\",\n    \"ref\": \"string\",\n    \"scope\": \"string\",\n    \"type\": \"alias\"\n  },\n  {\n    \"comment\": \"string\",\n    \"name\": \"string\",\n    \"ref\": \"string\",\n    \"scope\": \"string\",\n    \"type\": \"ipset\"\n  }\n]"
										}
									]
								}
							]
						},
						{
							"name": "Directory index.",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/cluster/firewall",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"cluster",
										"firewall"
									]
								},
								"description": "Directory index."
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/cluster/firewall",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cluster",
												"firewall"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[]"
								}
							]
						}
					]
				},
				{
					"name": "backup",
					"item": [
						{
							"name": "{id}",
							"item": [
								{
									"name": "included_volumes",
									"item": [
										{
											"name": "Returns included guests and the backup status of their disks. Optimized to be used in ExtJS tree views.",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/backup/:id/included_volumes",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"backup",
														":id",
														"included_volumes"
													],
													"variable": [
														{
															"key": "id",
															"value": "HSrnRu+",
															"description": "(Required) The job ID."
														}
													]
												},
												"description": "Returns included guests and the backup status of their disks. Optimized to be used in ExtJS tree views."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/cluster/backup/:id/included_volumes",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"cluster",
																"backup",
																":id",
																"included_volumes"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"children\": [\n    {\n      \"children\": [\n        {\n          \"id\": \"string\",\n          \"included\": false,\n          \"name\": \"string\",\n          \"reason\": \"string\"\n        },\n        {\n          \"id\": \"string\",\n          \"included\": true,\n          \"name\": \"string\",\n          \"reason\": \"string\"\n        }\n      ],\n      \"id\": 6841,\n      \"name\": \"string\",\n      \"type\": \"unknown\"\n    },\n    {\n      \"children\": [\n        {\n          \"id\": \"string\",\n          \"included\": false,\n          \"name\": \"string\",\n          \"reason\": \"string\"\n        },\n        {\n          \"id\": \"string\",\n          \"included\": false,\n          \"name\": \"string\",\n          \"reason\": \"string\"\n        }\n      ],\n      \"id\": 9895,\n      \"name\": \"string\",\n      \"type\": \"unknown\"\n    }\n  ]\n}"
												}
											]
										}
									]
								},
								{
									"name": "Delete vzdump backup job definition.",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/cluster/backup/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cluster",
												"backup",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "HSrnRu+",
													"description": "(Required) The job ID."
												}
											]
										},
										"description": "Delete vzdump backup job definition."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/backup/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"backup",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "null"
										}
									]
								},
								{
									"name": "Read vzdump backup job definition.",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/cluster/backup/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cluster",
												"backup",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "HSrnRu+",
													"description": "(Required) The job ID."
												}
											]
										},
										"description": "Read vzdump backup job definition."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/backup/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"backup",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{}"
										}
									]
								},
								{
									"name": "Update vzdump backup job definition.",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/cluster/backup/:id?all=0&bwlimit=0&comment=string&compress=0&delete=string&dow=string&dumpdir=string&enabled=1&exclude=string&fleecing=string&ionice=7&lockwait=180&mailnotification=always&mailto=string&maxfiles=5741&mode=snapshot&node=string&notes-template=string&notification-mode=auto&pbs-change-detection-mode=legacy&performance=string&pigz=0&pool=string&protected=true&prune-backups=keep-all=1&quiet=0&remove=1&repeat-missed=0&schedule=string&script=string&starttime=81:7&stdexcludes=1&stop=0&stopwait=10&storage=string&tmpdir=string&vmid=string&zstd=1",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cluster",
												"backup",
												":id"
											],
											"query": [
												{
													"key": "all",
													"value": "0",
													"description": "Backup all known guest systems on this host."
												},
												{
													"key": "bwlimit",
													"value": "0",
													"description": "Limit I/O bandwidth (in KiB/s)."
												},
												{
													"key": "comment",
													"value": "string",
													"description": "Description for the Job."
												},
												{
													"key": "compress",
													"value": "0",
													"description": "Compress dump file."
												},
												{
													"key": "delete",
													"value": "string",
													"description": "A list of settings you want to delete."
												},
												{
													"key": "dow",
													"value": "string",
													"description": "Day of week selection."
												},
												{
													"key": "dumpdir",
													"value": "string",
													"description": "Store resulting files to specified directory."
												},
												{
													"key": "enabled",
													"value": "1",
													"description": "Enable or disable the job."
												},
												{
													"key": "exclude",
													"value": "string",
													"description": "Exclude specified guest systems (assumes --all)"
												},
												{
													"key": "fleecing",
													"value": "string",
													"description": "Options for backup fleecing (VM only)."
												},
												{
													"key": "ionice",
													"value": "7",
													"description": "Set IO priority when using the BFQ scheduler. For snapshot and suspend mode backups of VMs, this only affects the compressor. A value of 8 means the idle priority is used, otherwise the best-effort priority is used with the specified value."
												},
												{
													"key": "lockwait",
													"value": "180",
													"description": "Maximal time to wait for the global lock (minutes)."
												},
												{
													"key": "mailnotification",
													"value": "always",
													"description": "Deprecated: use notification targets/matchers instead. Specify when to send a notification mail"
												},
												{
													"key": "mailto",
													"value": "string",
													"description": "Deprecated: Use notification targets/matchers instead. Comma-separated list of email addresses or users that should receive email notifications."
												},
												{
													"key": "maxfiles",
													"value": "5741",
													"description": "Deprecated: use 'prune-backups' instead. Maximal number of backup files per guest system."
												},
												{
													"key": "mode",
													"value": "snapshot",
													"description": "Backup mode."
												},
												{
													"key": "node",
													"value": "string",
													"description": "Only run if executed on this node."
												},
												{
													"key": "notes-template",
													"value": "string",
													"description": "Template string for generating notes for the backup(s). It can contain variables which will be replaced by their values. Currently supported are {{cluster}}, {{guestname}}, {{node}}, and {{vmid}}, but more might be added in the future. Needs to be a single line, newline and backslash need to be escaped as '\\n' and '\\\\' respectively."
												},
												{
													"key": "notification-mode",
													"value": "auto",
													"description": "Determine which notification system to use. If set to 'legacy-sendmail', vzdump will consider the mailto/mailnotification parameters and send emails to the specified address(es) via the 'sendmail' command. If set to 'notification-system', a notification will be sent via PVE's notification system, and the mailto and mailnotification will be ignored. If set to 'auto' (default setting), an email will be sent if mailto is set, and the notification system will be used if not."
												},
												{
													"key": "pbs-change-detection-mode",
													"value": "legacy",
													"description": "PBS mode used to detect file changes and switch encoding format for container backups."
												},
												{
													"key": "performance",
													"value": "string",
													"description": "Other performance-related settings."
												},
												{
													"key": "pigz",
													"value": "0",
													"description": "Use pigz instead of gzip when N>0. N=1 uses half of cores, N>1 uses N as thread count."
												},
												{
													"key": "pool",
													"value": "string",
													"description": "Backup all known guest systems included in the specified pool."
												},
												{
													"key": "protected",
													"value": "true",
													"description": "If true, mark backup(s) as protected."
												},
												{
													"key": "prune-backups",
													"value": "keep-all=1",
													"description": "Use these retention options instead of those from the storage configuration."
												},
												{
													"key": "quiet",
													"value": "0",
													"description": "Be quiet."
												},
												{
													"key": "remove",
													"value": "1",
													"description": "Prune older backups according to 'prune-backups'."
												},
												{
													"key": "repeat-missed",
													"value": "0",
													"description": "If true, the job will be run as soon as possible if it was missed while the scheduler was not running."
												},
												{
													"key": "schedule",
													"value": "string",
													"description": "Backup schedule. The format is a subset of `systemd` calendar events."
												},
												{
													"key": "script",
													"value": "string",
													"description": "Use specified hook script."
												},
												{
													"key": "starttime",
													"value": "81:7",
													"description": "Job Start time."
												},
												{
													"key": "stdexcludes",
													"value": "1",
													"description": "Exclude temporary files and logs."
												},
												{
													"key": "stop",
													"value": "0",
													"description": "Stop running backup jobs on this host."
												},
												{
													"key": "stopwait",
													"value": "10",
													"description": "Maximal time to wait until a guest system is stopped (minutes)."
												},
												{
													"key": "storage",
													"value": "string",
													"description": "Store resulting file to this storage."
												},
												{
													"key": "tmpdir",
													"value": "string",
													"description": "Store temporary files to specified directory."
												},
												{
													"key": "vmid",
													"value": "string",
													"description": "The ID of the guest system you want to backup."
												},
												{
													"key": "zstd",
													"value": "1",
													"description": "Zstd threads. N=0 uses half of the available cores, if N is set to a value bigger than 0, N is used as thread count."
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "HSrnRu+",
													"description": "(Required) The job ID."
												}
											]
										},
										"description": "Update vzdump backup job definition."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/backup/:id?all=0&bwlimit=0&comment=string&compress=0&delete=string&dow=string&dumpdir=string&enabled=1&exclude=string&fleecing=string&ionice=7&lockwait=180&mailnotification=always&mailto=string&maxfiles=5741&mode=snapshot&node=string&notes-template=string&notification-mode=auto&pbs-change-detection-mode=legacy&performance=string&pigz=0&pool=string&protected=true&prune-backups=keep-all=1&quiet=0&remove=1&repeat-missed=0&schedule=string&script=string&starttime=81:7&stdexcludes=1&stop=0&stopwait=10&storage=string&tmpdir=string&vmid=string&zstd=1",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"backup",
														":id"
													],
													"query": [
														{
															"key": "all",
															"value": "0",
															"description": "Backup all known guest systems on this host."
														},
														{
															"key": "bwlimit",
															"value": "0",
															"description": "Limit I/O bandwidth (in KiB/s)."
														},
														{
															"key": "comment",
															"value": "string",
															"description": "Description for the Job."
														},
														{
															"key": "compress",
															"value": "0",
															"description": "Compress dump file."
														},
														{
															"key": "delete",
															"value": "string",
															"description": "A list of settings you want to delete."
														},
														{
															"key": "dow",
															"value": "string",
															"description": "Day of week selection."
														},
														{
															"key": "dumpdir",
															"value": "string",
															"description": "Store resulting files to specified directory."
														},
														{
															"key": "enabled",
															"value": "1",
															"description": "Enable or disable the job."
														},
														{
															"key": "exclude",
															"value": "string",
															"description": "Exclude specified guest systems (assumes --all)"
														},
														{
															"key": "fleecing",
															"value": "string",
															"description": "Options for backup fleecing (VM only)."
														},
														{
															"key": "ionice",
															"value": "7",
															"description": "Set IO priority when using the BFQ scheduler. For snapshot and suspend mode backups of VMs, this only affects the compressor. A value of 8 means the idle priority is used, otherwise the best-effort priority is used with the specified value."
														},
														{
															"key": "lockwait",
															"value": "180",
															"description": "Maximal time to wait for the global lock (minutes)."
														},
														{
															"key": "mailnotification",
															"value": "always",
															"description": "Deprecated: use notification targets/matchers instead. Specify when to send a notification mail"
														},
														{
															"key": "mailto",
															"value": "string",
															"description": "Deprecated: Use notification targets/matchers instead. Comma-separated list of email addresses or users that should receive email notifications."
														},
														{
															"key": "maxfiles",
															"value": "5741",
															"description": "Deprecated: use 'prune-backups' instead. Maximal number of backup files per guest system."
														},
														{
															"key": "mode",
															"value": "snapshot",
															"description": "Backup mode."
														},
														{
															"key": "node",
															"value": "string",
															"description": "Only run if executed on this node."
														},
														{
															"key": "notes-template",
															"value": "string",
															"description": "Template string for generating notes for the backup(s). It can contain variables which will be replaced by their values. Currently supported are {{cluster}}, {{guestname}}, {{node}}, and {{vmid}}, but more might be added in the future. Needs to be a single line, newline and backslash need to be escaped as '\\n' and '\\\\' respectively."
														},
														{
															"key": "notification-mode",
															"value": "auto",
															"description": "Determine which notification system to use. If set to 'legacy-sendmail', vzdump will consider the mailto/mailnotification parameters and send emails to the specified address(es) via the 'sendmail' command. If set to 'notification-system', a notification will be sent via PVE's notification system, and the mailto and mailnotification will be ignored. If set to 'auto' (default setting), an email will be sent if mailto is set, and the notification system will be used if not."
														},
														{
															"key": "pbs-change-detection-mode",
															"value": "legacy",
															"description": "PBS mode used to detect file changes and switch encoding format for container backups."
														},
														{
															"key": "performance",
															"value": "string",
															"description": "Other performance-related settings."
														},
														{
															"key": "pigz",
															"value": "0",
															"description": "Use pigz instead of gzip when N>0. N=1 uses half of cores, N>1 uses N as thread count."
														},
														{
															"key": "pool",
															"value": "string",
															"description": "Backup all known guest systems included in the specified pool."
														},
														{
															"key": "protected",
															"value": "true",
															"description": "If true, mark backup(s) as protected."
														},
														{
															"key": "prune-backups",
															"value": "keep-all=1",
															"description": "Use these retention options instead of those from the storage configuration."
														},
														{
															"key": "quiet",
															"value": "0",
															"description": "Be quiet."
														},
														{
															"key": "remove",
															"value": "1",
															"description": "Prune older backups according to 'prune-backups'."
														},
														{
															"key": "repeat-missed",
															"value": "0",
															"description": "If true, the job will be run as soon as possible if it was missed while the scheduler was not running."
														},
														{
															"key": "schedule",
															"value": "string",
															"description": "Backup schedule. The format is a subset of `systemd` calendar events."
														},
														{
															"key": "script",
															"value": "string",
															"description": "Use specified hook script."
														},
														{
															"key": "starttime",
															"value": "81:7",
															"description": "Job Start time."
														},
														{
															"key": "stdexcludes",
															"value": "1",
															"description": "Exclude temporary files and logs."
														},
														{
															"key": "stop",
															"value": "0",
															"description": "Stop running backup jobs on this host."
														},
														{
															"key": "stopwait",
															"value": "10",
															"description": "Maximal time to wait until a guest system is stopped (minutes)."
														},
														{
															"key": "storage",
															"value": "string",
															"description": "Store resulting file to this storage."
														},
														{
															"key": "tmpdir",
															"value": "string",
															"description": "Store temporary files to specified directory."
														},
														{
															"key": "vmid",
															"value": "string",
															"description": "The ID of the guest system you want to backup."
														},
														{
															"key": "zstd",
															"value": "1",
															"description": "Zstd threads. N=0 uses half of the available cores, if N is set to a value bigger than 0, N is used as thread count."
														}
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "null"
										}
									]
								}
							]
						},
						{
							"name": "List vzdump backup schedule.",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/cluster/backup",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"cluster",
										"backup"
									]
								},
								"description": "List vzdump backup schedule."
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/cluster/backup",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cluster",
												"backup"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"id\": \"HFi!lX>9aP\"\n  },\n  {\n    \"id\": \"]\\\">\"\n  }\n]"
								}
							]
						},
						{
							"name": "Create new vzdump backup job.",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/cluster/backup?all=0&bwlimit=0&comment=string&compress=0&dow=mon,tue,wed,thu,fri,sat,sun&dumpdir=string&enabled=1&exclude=string&fleecing=string&id=string&ionice=7&lockwait=180&mailnotification=always&mailto=string&maxfiles=5741&mode=snapshot&node=string&notes-template=string&notification-mode=auto&pbs-change-detection-mode=legacy&performance=string&pigz=0&pool=string&protected=true&prune-backups=keep-all=1&quiet=0&remove=1&repeat-missed=0&schedule=string&script=string&starttime=81:7&stdexcludes=1&stop=0&stopwait=10&storage=string&tmpdir=string&vmid=string&zstd=1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"cluster",
										"backup"
									],
									"query": [
										{
											"key": "all",
											"value": "0",
											"description": "Backup all known guest systems on this host."
										},
										{
											"key": "bwlimit",
											"value": "0",
											"description": "Limit I/O bandwidth (in KiB/s)."
										},
										{
											"key": "comment",
											"value": "string",
											"description": "Description for the Job."
										},
										{
											"key": "compress",
											"value": "0",
											"description": "Compress dump file."
										},
										{
											"key": "dow",
											"value": "mon,tue,wed,thu,fri,sat,sun",
											"description": "Day of week selection."
										},
										{
											"key": "dumpdir",
											"value": "string",
											"description": "Store resulting files to specified directory."
										},
										{
											"key": "enabled",
											"value": "1",
											"description": "Enable or disable the job."
										},
										{
											"key": "exclude",
											"value": "string",
											"description": "Exclude specified guest systems (assumes --all)"
										},
										{
											"key": "fleecing",
											"value": "string",
											"description": "Options for backup fleecing (VM only)."
										},
										{
											"key": "id",
											"value": "string",
											"description": "Job ID (will be autogenerated)."
										},
										{
											"key": "ionice",
											"value": "7",
											"description": "Set IO priority when using the BFQ scheduler. For snapshot and suspend mode backups of VMs, this only affects the compressor. A value of 8 means the idle priority is used, otherwise the best-effort priority is used with the specified value."
										},
										{
											"key": "lockwait",
											"value": "180",
											"description": "Maximal time to wait for the global lock (minutes)."
										},
										{
											"key": "mailnotification",
											"value": "always",
											"description": "Deprecated: use notification targets/matchers instead. Specify when to send a notification mail"
										},
										{
											"key": "mailto",
											"value": "string",
											"description": "Deprecated: Use notification targets/matchers instead. Comma-separated list of email addresses or users that should receive email notifications."
										},
										{
											"key": "maxfiles",
											"value": "5741",
											"description": "Deprecated: use 'prune-backups' instead. Maximal number of backup files per guest system."
										},
										{
											"key": "mode",
											"value": "snapshot",
											"description": "Backup mode."
										},
										{
											"key": "node",
											"value": "string",
											"description": "Only run if executed on this node."
										},
										{
											"key": "notes-template",
											"value": "string",
											"description": "Template string for generating notes for the backup(s). It can contain variables which will be replaced by their values. Currently supported are {{cluster}}, {{guestname}}, {{node}}, and {{vmid}}, but more might be added in the future. Needs to be a single line, newline and backslash need to be escaped as '\\n' and '\\\\' respectively."
										},
										{
											"key": "notification-mode",
											"value": "auto",
											"description": "Determine which notification system to use. If set to 'legacy-sendmail', vzdump will consider the mailto/mailnotification parameters and send emails to the specified address(es) via the 'sendmail' command. If set to 'notification-system', a notification will be sent via PVE's notification system, and the mailto and mailnotification will be ignored. If set to 'auto' (default setting), an email will be sent if mailto is set, and the notification system will be used if not."
										},
										{
											"key": "pbs-change-detection-mode",
											"value": "legacy",
											"description": "PBS mode used to detect file changes and switch encoding format for container backups."
										},
										{
											"key": "performance",
											"value": "string",
											"description": "Other performance-related settings."
										},
										{
											"key": "pigz",
											"value": "0",
											"description": "Use pigz instead of gzip when N>0. N=1 uses half of cores, N>1 uses N as thread count."
										},
										{
											"key": "pool",
											"value": "string",
											"description": "Backup all known guest systems included in the specified pool."
										},
										{
											"key": "protected",
											"value": "true",
											"description": "If true, mark backup(s) as protected."
										},
										{
											"key": "prune-backups",
											"value": "keep-all=1",
											"description": "Use these retention options instead of those from the storage configuration."
										},
										{
											"key": "quiet",
											"value": "0",
											"description": "Be quiet."
										},
										{
											"key": "remove",
											"value": "1",
											"description": "Prune older backups according to 'prune-backups'."
										},
										{
											"key": "repeat-missed",
											"value": "0",
											"description": "If true, the job will be run as soon as possible if it was missed while the scheduler was not running."
										},
										{
											"key": "schedule",
											"value": "string",
											"description": "Backup schedule. The format is a subset of `systemd` calendar events."
										},
										{
											"key": "script",
											"value": "string",
											"description": "Use specified hook script."
										},
										{
											"key": "starttime",
											"value": "81:7",
											"description": "Job Start time."
										},
										{
											"key": "stdexcludes",
											"value": "1",
											"description": "Exclude temporary files and logs."
										},
										{
											"key": "stop",
											"value": "0",
											"description": "Stop running backup jobs on this host."
										},
										{
											"key": "stopwait",
											"value": "10",
											"description": "Maximal time to wait until a guest system is stopped (minutes)."
										},
										{
											"key": "storage",
											"value": "string",
											"description": "Store resulting file to this storage."
										},
										{
											"key": "tmpdir",
											"value": "string",
											"description": "Store temporary files to specified directory."
										},
										{
											"key": "vmid",
											"value": "string",
											"description": "The ID of the guest system you want to backup."
										},
										{
											"key": "zstd",
											"value": "1",
											"description": "Zstd threads. N=0 uses half of the available cores, if N is set to a value bigger than 0, N is used as thread count."
										}
									]
								},
								"description": "Create new vzdump backup job."
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/cluster/backup?all=0&bwlimit=0&comment=string&compress=0&dow=mon,tue,wed,thu,fri,sat,sun&dumpdir=string&enabled=1&exclude=string&fleecing=string&id=string&ionice=7&lockwait=180&mailnotification=always&mailto=string&maxfiles=5741&mode=snapshot&node=string&notes-template=string&notification-mode=auto&pbs-change-detection-mode=legacy&performance=string&pigz=0&pool=string&protected=true&prune-backups=keep-all=1&quiet=0&remove=1&repeat-missed=0&schedule=string&script=string&starttime=81:7&stdexcludes=1&stop=0&stopwait=10&storage=string&tmpdir=string&vmid=string&zstd=1",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cluster",
												"backup"
											],
											"query": [
												{
													"key": "all",
													"value": "0",
													"description": "Backup all known guest systems on this host."
												},
												{
													"key": "bwlimit",
													"value": "0",
													"description": "Limit I/O bandwidth (in KiB/s)."
												},
												{
													"key": "comment",
													"value": "string",
													"description": "Description for the Job."
												},
												{
													"key": "compress",
													"value": "0",
													"description": "Compress dump file."
												},
												{
													"key": "dow",
													"value": "mon,tue,wed,thu,fri,sat,sun",
													"description": "Day of week selection."
												},
												{
													"key": "dumpdir",
													"value": "string",
													"description": "Store resulting files to specified directory."
												},
												{
													"key": "enabled",
													"value": "1",
													"description": "Enable or disable the job."
												},
												{
													"key": "exclude",
													"value": "string",
													"description": "Exclude specified guest systems (assumes --all)"
												},
												{
													"key": "fleecing",
													"value": "string",
													"description": "Options for backup fleecing (VM only)."
												},
												{
													"key": "id",
													"value": "string",
													"description": "Job ID (will be autogenerated)."
												},
												{
													"key": "ionice",
													"value": "7",
													"description": "Set IO priority when using the BFQ scheduler. For snapshot and suspend mode backups of VMs, this only affects the compressor. A value of 8 means the idle priority is used, otherwise the best-effort priority is used with the specified value."
												},
												{
													"key": "lockwait",
													"value": "180",
													"description": "Maximal time to wait for the global lock (minutes)."
												},
												{
													"key": "mailnotification",
													"value": "always",
													"description": "Deprecated: use notification targets/matchers instead. Specify when to send a notification mail"
												},
												{
													"key": "mailto",
													"value": "string",
													"description": "Deprecated: Use notification targets/matchers instead. Comma-separated list of email addresses or users that should receive email notifications."
												},
												{
													"key": "maxfiles",
													"value": "5741",
													"description": "Deprecated: use 'prune-backups' instead. Maximal number of backup files per guest system."
												},
												{
													"key": "mode",
													"value": "snapshot",
													"description": "Backup mode."
												},
												{
													"key": "node",
													"value": "string",
													"description": "Only run if executed on this node."
												},
												{
													"key": "notes-template",
													"value": "string",
													"description": "Template string for generating notes for the backup(s). It can contain variables which will be replaced by their values. Currently supported are {{cluster}}, {{guestname}}, {{node}}, and {{vmid}}, but more might be added in the future. Needs to be a single line, newline and backslash need to be escaped as '\\n' and '\\\\' respectively."
												},
												{
													"key": "notification-mode",
													"value": "auto",
													"description": "Determine which notification system to use. If set to 'legacy-sendmail', vzdump will consider the mailto/mailnotification parameters and send emails to the specified address(es) via the 'sendmail' command. If set to 'notification-system', a notification will be sent via PVE's notification system, and the mailto and mailnotification will be ignored. If set to 'auto' (default setting), an email will be sent if mailto is set, and the notification system will be used if not."
												},
												{
													"key": "pbs-change-detection-mode",
													"value": "legacy",
													"description": "PBS mode used to detect file changes and switch encoding format for container backups."
												},
												{
													"key": "performance",
													"value": "string",
													"description": "Other performance-related settings."
												},
												{
													"key": "pigz",
													"value": "0",
													"description": "Use pigz instead of gzip when N>0. N=1 uses half of cores, N>1 uses N as thread count."
												},
												{
													"key": "pool",
													"value": "string",
													"description": "Backup all known guest systems included in the specified pool."
												},
												{
													"key": "protected",
													"value": "true",
													"description": "If true, mark backup(s) as protected."
												},
												{
													"key": "prune-backups",
													"value": "keep-all=1",
													"description": "Use these retention options instead of those from the storage configuration."
												},
												{
													"key": "quiet",
													"value": "0",
													"description": "Be quiet."
												},
												{
													"key": "remove",
													"value": "1",
													"description": "Prune older backups according to 'prune-backups'."
												},
												{
													"key": "repeat-missed",
													"value": "0",
													"description": "If true, the job will be run as soon as possible if it was missed while the scheduler was not running."
												},
												{
													"key": "schedule",
													"value": "string",
													"description": "Backup schedule. The format is a subset of `systemd` calendar events."
												},
												{
													"key": "script",
													"value": "string",
													"description": "Use specified hook script."
												},
												{
													"key": "starttime",
													"value": "81:7",
													"description": "Job Start time."
												},
												{
													"key": "stdexcludes",
													"value": "1",
													"description": "Exclude temporary files and logs."
												},
												{
													"key": "stop",
													"value": "0",
													"description": "Stop running backup jobs on this host."
												},
												{
													"key": "stopwait",
													"value": "10",
													"description": "Maximal time to wait until a guest system is stopped (minutes)."
												},
												{
													"key": "storage",
													"value": "string",
													"description": "Store resulting file to this storage."
												},
												{
													"key": "tmpdir",
													"value": "string",
													"description": "Store temporary files to specified directory."
												},
												{
													"key": "vmid",
													"value": "string",
													"description": "The ID of the guest system you want to backup."
												},
												{
													"key": "zstd",
													"value": "1",
													"description": "Zstd threads. N=0 uses half of the available cores, if N is set to a value bigger than 0, N is used as thread count."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "null"
								}
							]
						}
					]
				},
				{
					"name": "backup-info",
					"item": [
						{
							"name": "not-backed-up",
							"item": [
								{
									"name": "Shows all guests which are not covered by any backup job.",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/cluster/backup-info/not-backed-up",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cluster",
												"backup-info",
												"not-backed-up"
											]
										},
										"description": "Shows all guests which are not covered by any backup job."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/backup-info/not-backed-up",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"backup-info",
														"not-backed-up"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"name\": \"string\",\n    \"type\": \"qemu\",\n    \"vmid\": 8631\n  },\n  {\n    \"name\": \"string\",\n    \"type\": \"qemu\",\n    \"vmid\": 2346\n  }\n]"
										}
									]
								}
							]
						},
						{
							"name": "Index for backup info related endpoints",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/cluster/backup-info",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"cluster",
										"backup-info"
									]
								},
								"description": "Index for backup info related endpoints"
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/cluster/backup-info",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cluster",
												"backup-info"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"subdir\": \"string\"\n  },\n  {\n    \"subdir\": \"string\"\n  }\n]"
								}
							]
						}
					]
				},
				{
					"name": "ha",
					"item": [
						{
							"name": "resources",
							"item": [
								{
									"name": "{sid}",
									"item": [
										{
											"name": "migrate",
											"item": [
												{
													"name": "Request resource migration (online) to another node.",
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/cluster/ha/resources/:sid/migrate?node=string",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"cluster",
																"ha",
																"resources",
																":sid",
																"migrate"
															],
															"query": [
																{
																	"key": "node",
																	"value": "string",
																	"description": "(Required) Target node."
																}
															],
															"variable": [
																{
																	"key": "sid",
																	"value": "string",
																	"description": "(Required) HA resource ID. This consists of a resource type followed by a resource specific name, separated with colon (example: vm:100 / ct:100). For virtual machines and containers, you can simply use the VM or CT id as a shortcut (example: 100)."
																}
															]
														},
														"description": "Request resource migration (online) to another node."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/cluster/ha/resources/:sid/migrate?node=string",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"cluster",
																		"ha",
																		"resources",
																		":sid",
																		"migrate"
																	],
																	"query": [
																		{
																			"key": "node",
																			"value": "string",
																			"description": "(Required) Target node."
																		}
																	],
																	"variable": [
																		{
																			"key": "sid"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"blocking-resources\": [\n    {\n      \"cause\": \"resource-affinity\",\n      \"sid\": \"string\"\n    },\n    {\n      \"cause\": \"resource-affinity\",\n      \"sid\": \"string\"\n    }\n  ],\n  \"requested-node\": \"string\",\n  \"sid\": \"string\"\n}"
														}
													]
												}
											]
										},
										{
											"name": "relocate",
											"item": [
												{
													"name": "Request resource relocatzion to another node. This stops the service on the old node, and restarts it on the target node.",
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/cluster/ha/resources/:sid/relocate?node=string",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"cluster",
																"ha",
																"resources",
																":sid",
																"relocate"
															],
															"query": [
																{
																	"key": "node",
																	"value": "string",
																	"description": "(Required) Target node."
																}
															],
															"variable": [
																{
																	"key": "sid",
																	"value": "string",
																	"description": "(Required) HA resource ID. This consists of a resource type followed by a resource specific name, separated with colon (example: vm:100 / ct:100). For virtual machines and containers, you can simply use the VM or CT id as a shortcut (example: 100)."
																}
															]
														},
														"description": "Request resource relocatzion to another node. This stops the service on the old node, and restarts it on the target node."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/cluster/ha/resources/:sid/relocate?node=string",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"cluster",
																		"ha",
																		"resources",
																		":sid",
																		"relocate"
																	],
																	"query": [
																		{
																			"key": "node",
																			"value": "string",
																			"description": "(Required) Target node."
																		}
																	],
																	"variable": [
																		{
																			"key": "sid"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"blocking-resources\": [\n    {\n      \"cause\": \"resource-affinity\",\n      \"sid\": \"string\"\n    },\n    {\n      \"cause\": \"resource-affinity\",\n      \"sid\": \"string\"\n    }\n  ],\n  \"comigrated-resources\": [\n    \"string\",\n    \"string\"\n  ],\n  \"requested-node\": \"string\",\n  \"sid\": \"string\"\n}"
														}
													]
												}
											]
										},
										{
											"name": "Delete resource configuration.",
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/ha/resources/:sid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"ha",
														"resources",
														":sid"
													],
													"variable": [
														{
															"key": "sid",
															"value": "string",
															"description": "(Required) HA resource ID. This consists of a resource type followed by a resource specific name, separated with colon (example: vm:100 / ct:100). For virtual machines and containers, you can simply use the VM or CT id as a shortcut (example: 100)."
														}
													]
												},
												"description": "Delete resource configuration."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/cluster/ha/resources/:sid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"cluster",
																"ha",
																"resources",
																":sid"
															],
															"variable": [
																{
																	"key": "sid"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "null"
												}
											]
										},
										{
											"name": "Read resource configuration.",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/ha/resources/:sid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"ha",
														"resources",
														":sid"
													],
													"variable": [
														{
															"key": "sid",
															"value": "string",
															"description": "(Required) HA resource ID. This consists of a resource type followed by a resource specific name, separated with colon (example: vm:100 / ct:100). For virtual machines and containers, you can simply use the VM or CT id as a shortcut (example: 100)."
														}
													]
												},
												"description": "Read resource configuration."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/cluster/ha/resources/:sid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"cluster",
																"ha",
																"resources",
																":sid"
															],
															"variable": [
																{
																	"key": "sid"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"comment\": \"string\",\n  \"digest\": \"string\",\n  \"failback\": 1,\n  \"group\": \"string\",\n  \"max_relocate\": 9430,\n  \"max_restart\": 6872,\n  \"sid\": \"string\",\n  \"state\": \"disabled\",\n  \"type\": \"string\"\n}"
												}
											]
										},
										{
											"name": "Update resource configuration.",
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/ha/resources/:sid?comment=string&delete=string&digest=string&failback=1&group=string&max_relocate=1&max_restart=1&state=started",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"ha",
														"resources",
														":sid"
													],
													"query": [
														{
															"key": "comment",
															"value": "string",
															"description": "Description."
														},
														{
															"key": "delete",
															"value": "string",
															"description": "A list of settings you want to delete."
														},
														{
															"key": "digest",
															"value": "string",
															"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
														},
														{
															"key": "failback",
															"value": "1",
															"description": "Automatically migrate HA resource to the node with the highest priority according to their node affinity  rules, if a node with a higher priority than the current node comes online."
														},
														{
															"key": "group",
															"value": "string",
															"description": "The HA group identifier."
														},
														{
															"key": "max_relocate",
															"value": "1",
															"description": "Maximal number of service relocate tries when a service failes to start."
														},
														{
															"key": "max_restart",
															"value": "1",
															"description": "Maximal number of tries to restart the service on a node after its start failed."
														},
														{
															"key": "state",
															"value": "started",
															"description": "Requested resource state."
														}
													],
													"variable": [
														{
															"key": "sid",
															"value": "string",
															"description": "(Required) HA resource ID. This consists of a resource type followed by a resource specific name, separated with colon (example: vm:100 / ct:100). For virtual machines and containers, you can simply use the VM or CT id as a shortcut (example: 100)."
														}
													]
												},
												"description": "Update resource configuration."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/cluster/ha/resources/:sid?comment=string&delete=string&digest=string&failback=1&group=string&max_relocate=1&max_restart=1&state=started",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"cluster",
																"ha",
																"resources",
																":sid"
															],
															"query": [
																{
																	"key": "comment",
																	"value": "string",
																	"description": "Description."
																},
																{
																	"key": "delete",
																	"value": "string",
																	"description": "A list of settings you want to delete."
																},
																{
																	"key": "digest",
																	"value": "string",
																	"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
																},
																{
																	"key": "failback",
																	"value": "1",
																	"description": "Automatically migrate HA resource to the node with the highest priority according to their node affinity  rules, if a node with a higher priority than the current node comes online."
																},
																{
																	"key": "group",
																	"value": "string",
																	"description": "The HA group identifier."
																},
																{
																	"key": "max_relocate",
																	"value": "1",
																	"description": "Maximal number of service relocate tries when a service failes to start."
																},
																{
																	"key": "max_restart",
																	"value": "1",
																	"description": "Maximal number of tries to restart the service on a node after its start failed."
																},
																{
																	"key": "state",
																	"value": "started",
																	"description": "Requested resource state."
																}
															],
															"variable": [
																{
																	"key": "sid"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "null"
												}
											]
										}
									]
								},
								{
									"name": "List HA resources.",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/cluster/ha/resources?type=vm",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cluster",
												"ha",
												"resources"
											],
											"query": [
												{
													"key": "type",
													"value": "vm",
													"description": "Only list resources of specific type"
												}
											]
										},
										"description": "List HA resources."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/ha/resources?type=vm",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"ha",
														"resources"
													],
													"query": [
														{
															"key": "type",
															"value": "vm",
															"description": "Only list resources of specific type"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"sid\": \"string\"\n  },\n  {\n    \"sid\": \"string\"\n  }\n]"
										}
									]
								},
								{
									"name": "Create a new HA resource.",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/cluster/ha/resources?comment=string&failback=1&group=string&max_relocate=1&max_restart=1&sid=string&state=started&type=vm",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cluster",
												"ha",
												"resources"
											],
											"query": [
												{
													"key": "comment",
													"value": "string",
													"description": "Description."
												},
												{
													"key": "failback",
													"value": "1",
													"description": "Automatically migrate HA resource to the node with the highest priority according to their node affinity  rules, if a node with a higher priority than the current node comes online."
												},
												{
													"key": "group",
													"value": "string",
													"description": "The HA group identifier."
												},
												{
													"key": "max_relocate",
													"value": "1",
													"description": "Maximal number of service relocate tries when a service failes to start."
												},
												{
													"key": "max_restart",
													"value": "1",
													"description": "Maximal number of tries to restart the service on a node after its start failed."
												},
												{
													"key": "sid",
													"value": "string",
													"description": "(Required) HA resource ID. This consists of a resource type followed by a resource specific name, separated with colon (example: vm:100 / ct:100). For virtual machines and containers, you can simply use the VM or CT id as a shortcut (example: 100)."
												},
												{
													"key": "state",
													"value": "started",
													"description": "Requested resource state."
												},
												{
													"key": "type",
													"value": "vm",
													"description": "Resource type."
												}
											]
										},
										"description": "Create a new HA resource."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/ha/resources?comment=string&failback=1&group=string&max_relocate=1&max_restart=1&sid=string&state=started&type=vm",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"ha",
														"resources"
													],
													"query": [
														{
															"key": "comment",
															"value": "string",
															"description": "Description."
														},
														{
															"key": "failback",
															"value": "1",
															"description": "Automatically migrate HA resource to the node with the highest priority according to their node affinity  rules, if a node with a higher priority than the current node comes online."
														},
														{
															"key": "group",
															"value": "string",
															"description": "The HA group identifier."
														},
														{
															"key": "max_relocate",
															"value": "1",
															"description": "Maximal number of service relocate tries when a service failes to start."
														},
														{
															"key": "max_restart",
															"value": "1",
															"description": "Maximal number of tries to restart the service on a node after its start failed."
														},
														{
															"key": "sid",
															"value": "string",
															"description": "(Required) HA resource ID. This consists of a resource type followed by a resource specific name, separated with colon (example: vm:100 / ct:100). For virtual machines and containers, you can simply use the VM or CT id as a shortcut (example: 100)."
														},
														{
															"key": "state",
															"value": "started",
															"description": "Requested resource state."
														},
														{
															"key": "type",
															"value": "vm",
															"description": "Resource type."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "null"
										}
									]
								}
							]
						},
						{
							"name": "groups",
							"item": [
								{
									"name": "{group}",
									"item": [
										{
											"name": "Delete ha group configuration. (deprecated in favor of HA rules)",
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/ha/groups/:group",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"ha",
														"groups",
														":group"
													],
													"variable": [
														{
															"key": "group",
															"value": "string",
															"description": "(Required) The HA group identifier."
														}
													]
												},
												"description": "Delete ha group configuration. (deprecated in favor of HA rules)"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/cluster/ha/groups/:group",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"cluster",
																"ha",
																"groups",
																":group"
															],
															"variable": [
																{
																	"key": "group"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "null"
												}
											]
										},
										{
											"name": "Read ha group configuration. (deprecated in favor of HA rules)",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/ha/groups/:group",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"ha",
														"groups",
														":group"
													],
													"variable": [
														{
															"key": "group",
															"value": "string",
															"description": "(Required) The HA group identifier."
														}
													]
												},
												"description": "Read ha group configuration. (deprecated in favor of HA rules)"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/cluster/ha/groups/:group",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"cluster",
																"ha",
																"groups",
																":group"
															],
															"variable": [
																{
																	"key": "group"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{}"
												}
											]
										},
										{
											"name": "Update ha group configuration. (deprecated in favor of HA rules)",
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/ha/groups/:group?comment=string&delete=string&digest=string&nodes=string&nofailback=0&restricted=0",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"ha",
														"groups",
														":group"
													],
													"query": [
														{
															"key": "comment",
															"value": "string",
															"description": "Description."
														},
														{
															"key": "delete",
															"value": "string",
															"description": "A list of settings you want to delete."
														},
														{
															"key": "digest",
															"value": "string",
															"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
														},
														{
															"key": "nodes",
															"value": "string",
															"description": "List of cluster node names with optional priority."
														},
														{
															"key": "nofailback",
															"value": "0",
															"description": "The CRM tries to run services on the node with the highest priority. If a node with higher priority comes online, the CRM migrates the service to that node. Enabling nofailback prevents that behavior."
														},
														{
															"key": "restricted",
															"value": "0",
															"description": "Resources bound to restricted groups may only run on nodes defined by the group."
														}
													],
													"variable": [
														{
															"key": "group",
															"value": "string",
															"description": "(Required) The HA group identifier."
														}
													]
												},
												"description": "Update ha group configuration. (deprecated in favor of HA rules)"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/cluster/ha/groups/:group?comment=string&delete=string&digest=string&nodes=string&nofailback=0&restricted=0",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"cluster",
																"ha",
																"groups",
																":group"
															],
															"query": [
																{
																	"key": "comment",
																	"value": "string",
																	"description": "Description."
																},
																{
																	"key": "delete",
																	"value": "string",
																	"description": "A list of settings you want to delete."
																},
																{
																	"key": "digest",
																	"value": "string",
																	"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
																},
																{
																	"key": "nodes",
																	"value": "string",
																	"description": "List of cluster node names with optional priority."
																},
																{
																	"key": "nofailback",
																	"value": "0",
																	"description": "The CRM tries to run services on the node with the highest priority. If a node with higher priority comes online, the CRM migrates the service to that node. Enabling nofailback prevents that behavior."
																},
																{
																	"key": "restricted",
																	"value": "0",
																	"description": "Resources bound to restricted groups may only run on nodes defined by the group."
																}
															],
															"variable": [
																{
																	"key": "group"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "null"
												}
											]
										}
									]
								},
								{
									"name": "Get HA groups. (deprecated in favor of HA rules)",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/cluster/ha/groups",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cluster",
												"ha",
												"groups"
											]
										},
										"description": "Get HA groups. (deprecated in favor of HA rules)"
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/ha/groups",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"ha",
														"groups"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"group\": \"string\"\n  },\n  {\n    \"group\": \"string\"\n  }\n]"
										}
									]
								},
								{
									"name": "Create a new HA group. (deprecated in favor of HA rules)",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/cluster/ha/groups?comment=string&group=string&nodes=string&nofailback=0&restricted=0&type=group",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cluster",
												"ha",
												"groups"
											],
											"query": [
												{
													"key": "comment",
													"value": "string",
													"description": "Description."
												},
												{
													"key": "group",
													"value": "string",
													"description": "(Required) The HA group identifier."
												},
												{
													"key": "nodes",
													"value": "string",
													"description": "(Required) List of cluster node names with optional priority."
												},
												{
													"key": "nofailback",
													"value": "0",
													"description": "The CRM tries to run services on the node with the highest priority. If a node with higher priority comes online, the CRM migrates the service to that node. Enabling nofailback prevents that behavior."
												},
												{
													"key": "restricted",
													"value": "0",
													"description": "Resources bound to restricted groups may only run on nodes defined by the group."
												},
												{
													"key": "type",
													"value": "group",
													"description": "Group type."
												}
											]
										},
										"description": "Create a new HA group. (deprecated in favor of HA rules)"
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/ha/groups?comment=string&group=string&nodes=string&nofailback=0&restricted=0&type=group",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"ha",
														"groups"
													],
													"query": [
														{
															"key": "comment",
															"value": "string",
															"description": "Description."
														},
														{
															"key": "group",
															"value": "string",
															"description": "(Required) The HA group identifier."
														},
														{
															"key": "nodes",
															"value": "string",
															"description": "(Required) List of cluster node names with optional priority."
														},
														{
															"key": "nofailback",
															"value": "0",
															"description": "The CRM tries to run services on the node with the highest priority. If a node with higher priority comes online, the CRM migrates the service to that node. Enabling nofailback prevents that behavior."
														},
														{
															"key": "restricted",
															"value": "0",
															"description": "Resources bound to restricted groups may only run on nodes defined by the group."
														},
														{
															"key": "type",
															"value": "group",
															"description": "Group type."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "null"
										}
									]
								}
							]
						},
						{
							"name": "rules",
							"item": [
								{
									"name": "{rule}",
									"item": [
										{
											"name": "Delete HA rule.",
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/ha/rules/:rule",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"ha",
														"rules",
														":rule"
													],
													"variable": [
														{
															"key": "rule",
															"value": "string",
															"description": "(Required) HA rule identifier."
														}
													]
												},
												"description": "Delete HA rule."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/cluster/ha/rules/:rule",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"cluster",
																"ha",
																"rules",
																":rule"
															],
															"variable": [
																{
																	"key": "rule"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "null"
												}
											]
										},
										{
											"name": "Read HA rule.",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/ha/rules/:rule",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"ha",
														"rules",
														":rule"
													],
													"variable": [
														{
															"key": "rule",
															"value": "string",
															"description": "(Required) HA rule identifier."
														}
													]
												},
												"description": "Read HA rule."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/cluster/ha/rules/:rule",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"cluster",
																"ha",
																"rules",
																":rule"
															],
															"variable": [
																{
																	"key": "rule"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"rule\": \"string\",\n  \"type\": \"node-affinity\"\n}"
												}
											]
										},
										{
											"name": "Update HA rule.",
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/ha/rules/:rule?affinity=positive&comment=string&delete=string&digest=string&disable=true&nodes=string&resources=string&strict=0&type=resource-affinity",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"ha",
														"rules",
														":rule"
													],
													"query": [
														{
															"key": "affinity",
															"value": "positive",
															"description": "Describes whether the HA resources are supposed to be kept on the same node ('positive'), or are supposed to be kept on separate nodes ('negative')."
														},
														{
															"key": "comment",
															"value": "string",
															"description": "HA rule description."
														},
														{
															"key": "delete",
															"value": "string",
															"description": "A list of settings you want to delete."
														},
														{
															"key": "digest",
															"value": "string",
															"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
														},
														{
															"key": "disable",
															"value": "true",
															"description": "Whether the HA rule is disabled."
														},
														{
															"key": "nodes",
															"value": "string",
															"description": "List of cluster node names with optional priority."
														},
														{
															"key": "resources",
															"value": "string",
															"description": "List of HA resource IDs. This consists of a list of resource types followed by a resource specific name separated with a colon (example: vm:100,ct:101)."
														},
														{
															"key": "strict",
															"value": "0",
															"description": "Describes whether the node affinity rule is strict or non-strict."
														},
														{
															"key": "type",
															"value": "resource-affinity",
															"description": "(Required) HA rule type."
														}
													],
													"variable": [
														{
															"key": "rule",
															"value": "string",
															"description": "(Required) HA rule identifier."
														}
													]
												},
												"description": "Update HA rule."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/cluster/ha/rules/:rule?affinity=positive&comment=string&delete=string&digest=string&disable=true&nodes=string&resources=string&strict=0&type=resource-affinity",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"cluster",
																"ha",
																"rules",
																":rule"
															],
															"query": [
																{
																	"key": "affinity",
																	"value": "positive",
																	"description": "Describes whether the HA resources are supposed to be kept on the same node ('positive'), or are supposed to be kept on separate nodes ('negative')."
																},
																{
																	"key": "comment",
																	"value": "string",
																	"description": "HA rule description."
																},
																{
																	"key": "delete",
																	"value": "string",
																	"description": "A list of settings you want to delete."
																},
																{
																	"key": "digest",
																	"value": "string",
																	"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
																},
																{
																	"key": "disable",
																	"value": "true",
																	"description": "Whether the HA rule is disabled."
																},
																{
																	"key": "nodes",
																	"value": "string",
																	"description": "List of cluster node names with optional priority."
																},
																{
																	"key": "resources",
																	"value": "string",
																	"description": "List of HA resource IDs. This consists of a list of resource types followed by a resource specific name separated with a colon (example: vm:100,ct:101)."
																},
																{
																	"key": "strict",
																	"value": "0",
																	"description": "Describes whether the node affinity rule is strict or non-strict."
																},
																{
																	"key": "type",
																	"value": "resource-affinity",
																	"description": "(Required) HA rule type."
																}
															],
															"variable": [
																{
																	"key": "rule"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "null"
												}
											]
										}
									]
								},
								{
									"name": "Get HA rules.",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/cluster/ha/rules?resource=string&type=resource-affinity",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cluster",
												"ha",
												"rules"
											],
											"query": [
												{
													"key": "resource",
													"value": "string",
													"description": "Limit the returned list to rules affecting the specified resource."
												},
												{
													"key": "type",
													"value": "resource-affinity",
													"description": "Limit the returned list to the specified rule type."
												}
											]
										},
										"description": "Get HA rules."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/ha/rules?resource=string&type=resource-affinity",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"ha",
														"rules"
													],
													"query": [
														{
															"key": "resource",
															"value": "string",
															"description": "Limit the returned list to rules affecting the specified resource."
														},
														{
															"key": "type",
															"value": "resource-affinity",
															"description": "Limit the returned list to the specified rule type."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"rule\": \"string\"\n  },\n  {\n    \"rule\": \"string\"\n  }\n]"
										}
									]
								},
								{
									"name": "Create HA rule.",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/cluster/ha/rules?affinity=positive&comment=string&disable=true&nodes=string&resources=string&rule=string&strict=0&type=resource-affinity",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cluster",
												"ha",
												"rules"
											],
											"query": [
												{
													"key": "affinity",
													"value": "positive",
													"description": "Describes whether the HA resources are supposed to be kept on the same node ('positive'), or are supposed to be kept on separate nodes ('negative')."
												},
												{
													"key": "comment",
													"value": "string",
													"description": "HA rule description."
												},
												{
													"key": "disable",
													"value": "true",
													"description": "Whether the HA rule is disabled."
												},
												{
													"key": "nodes",
													"value": "string",
													"description": "List of cluster node names with optional priority."
												},
												{
													"key": "resources",
													"value": "string",
													"description": "(Required) List of HA resource IDs. This consists of a list of resource types followed by a resource specific name separated with a colon (example: vm:100,ct:101)."
												},
												{
													"key": "rule",
													"value": "string",
													"description": "(Required) HA rule identifier."
												},
												{
													"key": "strict",
													"value": "0",
													"description": "Describes whether the node affinity rule is strict or non-strict."
												},
												{
													"key": "type",
													"value": "resource-affinity",
													"description": "(Required) HA rule type."
												}
											]
										},
										"description": "Create HA rule."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/ha/rules?affinity=positive&comment=string&disable=true&nodes=string&resources=string&rule=string&strict=0&type=resource-affinity",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"ha",
														"rules"
													],
													"query": [
														{
															"key": "affinity",
															"value": "positive",
															"description": "Describes whether the HA resources are supposed to be kept on the same node ('positive'), or are supposed to be kept on separate nodes ('negative')."
														},
														{
															"key": "comment",
															"value": "string",
															"description": "HA rule description."
														},
														{
															"key": "disable",
															"value": "true",
															"description": "Whether the HA rule is disabled."
														},
														{
															"key": "nodes",
															"value": "string",
															"description": "List of cluster node names with optional priority."
														},
														{
															"key": "resources",
															"value": "string",
															"description": "(Required) List of HA resource IDs. This consists of a list of resource types followed by a resource specific name separated with a colon (example: vm:100,ct:101)."
														},
														{
															"key": "rule",
															"value": "string",
															"description": "(Required) HA rule identifier."
														},
														{
															"key": "strict",
															"value": "0",
															"description": "Describes whether the node affinity rule is strict or non-strict."
														},
														{
															"key": "type",
															"value": "resource-affinity",
															"description": "(Required) HA rule type."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "null"
										}
									]
								}
							]
						},
						{
							"name": "status",
							"item": [
								{
									"name": "current",
									"item": [
										{
											"name": "Get HA manger status.",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/ha/status/current",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"ha",
														"status",
														"current"
													]
												},
												"description": "Get HA manger status."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/cluster/ha/status/current",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"cluster",
																"ha",
																"status",
																"current"
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "[\n  {\n    \"crm_state\": \"string\",\n    \"failback\": 1,\n    \"id\": \"string\",\n    \"max_relocate\": 1936,\n    \"max_restart\": 9853,\n    \"node\": \"string\",\n    \"quorate\": true,\n    \"request_state\": \"string\",\n    \"sid\": \"string\",\n    \"state\": \"string\",\n    \"status\": \"string\",\n    \"timestamp\": 9960,\n    \"type\": \"master\"\n  },\n  {\n    \"crm_state\": \"string\",\n    \"failback\": 1,\n    \"id\": \"string\",\n    \"max_relocate\": 138,\n    \"max_restart\": 5165,\n    \"node\": \"string\",\n    \"quorate\": true,\n    \"request_state\": \"string\",\n    \"sid\": \"string\",\n    \"state\": \"string\",\n    \"status\": \"string\",\n    \"timestamp\": 7180,\n    \"type\": \"master\"\n  }\n]"
												}
											]
										}
									]
								},
								{
									"name": "manager_status",
									"item": [
										{
											"name": "Get full HA manger status, including LRM status.",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/ha/status/manager_status",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"ha",
														"status",
														"manager_status"
													]
												},
												"description": "Get full HA manger status, including LRM status."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/cluster/ha/status/manager_status",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"cluster",
																"ha",
																"status",
																"manager_status"
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{}"
												}
											]
										}
									]
								},
								{
									"name": "Directory index.",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/cluster/ha/status",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cluster",
												"ha",
												"status"
											]
										},
										"description": "Directory index."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/ha/status",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"ha",
														"status"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[]"
										}
									]
								}
							]
						},
						{
							"name": "Directory index.",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/cluster/ha",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"cluster",
										"ha"
									]
								},
								"description": "Directory index."
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/cluster/ha",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cluster",
												"ha"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"id\": \"string\"\n  },\n  {\n    \"id\": \"string\"\n  }\n]"
								}
							]
						}
					]
				},
				{
					"name": "acme",
					"item": [
						{
							"name": "plugins",
							"item": [
								{
									"name": "{id}",
									"item": [
										{
											"name": "Delete ACME plugin configuration.",
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/acme/plugins/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"acme",
														"plugins",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "string",
															"description": "(Required) Unique identifier for ACME plugin instance."
														}
													]
												},
												"description": "Delete ACME plugin configuration."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/cluster/acme/plugins/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"cluster",
																"acme",
																"plugins",
																":id"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "null"
												}
											]
										},
										{
											"name": "Get ACME plugin configuration.",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/acme/plugins/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"acme",
														"plugins",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "string",
															"description": "(Required) Unique identifier for ACME plugin instance."
														}
													]
												},
												"description": "Get ACME plugin configuration."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/cluster/acme/plugins/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"cluster",
																"acme",
																"plugins",
																":id"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{}"
												}
											]
										},
										{
											"name": "Update ACME plugin configuration.",
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/acme/plugins/:id?api=unoeuro&data=string&delete=string&digest=string&disable=true&nodes=string&validation-delay=30",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"acme",
														"plugins",
														":id"
													],
													"query": [
														{
															"key": "api",
															"value": "unoeuro",
															"description": "API plugin name"
														},
														{
															"key": "data",
															"value": "string",
															"description": "DNS plugin data. (base64 encoded)"
														},
														{
															"key": "delete",
															"value": "string",
															"description": "A list of settings you want to delete."
														},
														{
															"key": "digest",
															"value": "string",
															"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
														},
														{
															"key": "disable",
															"value": "true",
															"description": "Flag to disable the config."
														},
														{
															"key": "nodes",
															"value": "string",
															"description": "List of cluster node names."
														},
														{
															"key": "validation-delay",
															"value": "30",
															"description": "Extra delay in seconds to wait before requesting validation. Allows to cope with a long TTL of DNS records."
														}
													],
													"variable": [
														{
															"key": "id",
															"value": "string",
															"description": "(Required) ACME Plugin ID name"
														}
													]
												},
												"description": "Update ACME plugin configuration."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/cluster/acme/plugins/:id?api=unoeuro&data=string&delete=string&digest=string&disable=true&nodes=string&validation-delay=30",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"cluster",
																"acme",
																"plugins",
																":id"
															],
															"query": [
																{
																	"key": "api",
																	"value": "unoeuro",
																	"description": "API plugin name"
																},
																{
																	"key": "data",
																	"value": "string",
																	"description": "DNS plugin data. (base64 encoded)"
																},
																{
																	"key": "delete",
																	"value": "string",
																	"description": "A list of settings you want to delete."
																},
																{
																	"key": "digest",
																	"value": "string",
																	"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
																},
																{
																	"key": "disable",
																	"value": "true",
																	"description": "Flag to disable the config."
																},
																{
																	"key": "nodes",
																	"value": "string",
																	"description": "List of cluster node names."
																},
																{
																	"key": "validation-delay",
																	"value": "30",
																	"description": "Extra delay in seconds to wait before requesting validation. Allows to cope with a long TTL of DNS records."
																}
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "null"
												}
											]
										}
									]
								},
								{
									"name": "ACME plugin index.",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/cluster/acme/plugins?type=dns",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cluster",
												"acme",
												"plugins"
											],
											"query": [
												{
													"key": "type",
													"value": "dns",
													"description": "Only list ACME plugins of a specific type"
												}
											]
										},
										"description": "ACME plugin index."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/acme/plugins?type=dns",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"acme",
														"plugins"
													],
													"query": [
														{
															"key": "type",
															"value": "dns",
															"description": "Only list ACME plugins of a specific type"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"plugin\": \"string\"\n  },\n  {\n    \"plugin\": \"string\"\n  }\n]"
										}
									]
								},
								{
									"name": "Add ACME plugin configuration.",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/cluster/acme/plugins?api=unoeuro&data=string&disable=true&id=string&nodes=string&type=dns&validation-delay=30",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cluster",
												"acme",
												"plugins"
											],
											"query": [
												{
													"key": "api",
													"value": "unoeuro",
													"description": "API plugin name"
												},
												{
													"key": "data",
													"value": "string",
													"description": "DNS plugin data. (base64 encoded)"
												},
												{
													"key": "disable",
													"value": "true",
													"description": "Flag to disable the config."
												},
												{
													"key": "id",
													"value": "string",
													"description": "(Required) ACME Plugin ID name"
												},
												{
													"key": "nodes",
													"value": "string",
													"description": "List of cluster node names."
												},
												{
													"key": "type",
													"value": "dns",
													"description": "(Required) ACME challenge type."
												},
												{
													"key": "validation-delay",
													"value": "30",
													"description": "Extra delay in seconds to wait before requesting validation. Allows to cope with a long TTL of DNS records."
												}
											]
										},
										"description": "Add ACME plugin configuration."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/acme/plugins?api=unoeuro&data=string&disable=true&id=string&nodes=string&type=dns&validation-delay=30",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"acme",
														"plugins"
													],
													"query": [
														{
															"key": "api",
															"value": "unoeuro",
															"description": "API plugin name"
														},
														{
															"key": "data",
															"value": "string",
															"description": "DNS plugin data. (base64 encoded)"
														},
														{
															"key": "disable",
															"value": "true",
															"description": "Flag to disable the config."
														},
														{
															"key": "id",
															"value": "string",
															"description": "(Required) ACME Plugin ID name"
														},
														{
															"key": "nodes",
															"value": "string",
															"description": "List of cluster node names."
														},
														{
															"key": "type",
															"value": "dns",
															"description": "(Required) ACME challenge type."
														},
														{
															"key": "validation-delay",
															"value": "30",
															"description": "Extra delay in seconds to wait before requesting validation. Allows to cope with a long TTL of DNS records."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "null"
										}
									]
								}
							]
						},
						{
							"name": "account",
							"item": [
								{
									"name": "{name}",
									"item": [
										{
											"name": "Deactivate existing ACME account at CA.",
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/acme/account/:name",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"acme",
														"account",
														":name"
													],
													"variable": [
														{
															"key": "name",
															"value": "default",
															"description": "ACME account config file name."
														}
													]
												},
												"description": "Deactivate existing ACME account at CA."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/cluster/acme/account/:name",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"cluster",
																"acme",
																"account",
																":name"
															],
															"variable": [
																{
																	"key": "name"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "string"
												}
											]
										},
										{
											"name": "Return existing ACME account information.",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/acme/account/:name",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"acme",
														"account",
														":name"
													],
													"variable": [
														{
															"key": "name",
															"value": "default",
															"description": "ACME account config file name."
														}
													]
												},
												"description": "Return existing ACME account information."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/cluster/acme/account/:name",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"cluster",
																"acme",
																"account",
																":name"
															],
															"variable": [
																{
																	"key": "name"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"account\": {},\n  \"directory\": \"https://0gCx\",\n  \"location\": \"string\",\n  \"tos\": \"string\"\n}"
												}
											]
										},
										{
											"name": "Update existing ACME account information with CA. Note: not specifying any new account information triggers a refresh.",
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/acme/account/:name?contact=string",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"acme",
														"account",
														":name"
													],
													"query": [
														{
															"key": "contact",
															"value": "string",
															"description": "Contact email addresses."
														}
													],
													"variable": [
														{
															"key": "name",
															"value": "default",
															"description": "ACME account config file name."
														}
													]
												},
												"description": "Update existing ACME account information with CA. Note: not specifying any new account information triggers a refresh."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/cluster/acme/account/:name?contact=string",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"cluster",
																"acme",
																"account",
																":name"
															],
															"query": [
																{
																	"key": "contact",
																	"value": "string",
																	"description": "Contact email addresses."
																}
															],
															"variable": [
																{
																	"key": "name"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "string"
												}
											]
										}
									]
								},
								{
									"name": "ACMEAccount index.",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/cluster/acme/account",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cluster",
												"acme",
												"account"
											]
										},
										"description": "ACMEAccount index."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/acme/account",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"acme",
														"account"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[]"
										}
									]
								},
								{
									"name": "Register a new ACME account with CA.",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/cluster/acme/account?contact=string&directory=https://acme-v02.api.letsencrypt.org/directory&eab-hmac-key=string&eab-kid=string&name=default&tos_url=string",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cluster",
												"acme",
												"account"
											],
											"query": [
												{
													"key": "contact",
													"value": "string",
													"description": "(Required) Contact email addresses."
												},
												{
													"key": "directory",
													"value": "https://acme-v02.api.letsencrypt.org/directory",
													"description": "URL of ACME CA directory endpoint."
												},
												{
													"key": "eab-hmac-key",
													"value": "string",
													"description": "HMAC key for External Account Binding."
												},
												{
													"key": "eab-kid",
													"value": "string",
													"description": "Key Identifier for External Account Binding."
												},
												{
													"key": "name",
													"value": "default",
													"description": "ACME account config file name."
												},
												{
													"key": "tos_url",
													"value": "string",
													"description": "URL of CA TermsOfService - setting this indicates agreement."
												}
											]
										},
										"description": "Register a new ACME account with CA."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/acme/account?contact=string&directory=https://acme-v02.api.letsencrypt.org/directory&eab-hmac-key=string&eab-kid=string&name=default&tos_url=string",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"acme",
														"account"
													],
													"query": [
														{
															"key": "contact",
															"value": "string",
															"description": "(Required) Contact email addresses."
														},
														{
															"key": "directory",
															"value": "https://acme-v02.api.letsencrypt.org/directory",
															"description": "URL of ACME CA directory endpoint."
														},
														{
															"key": "eab-hmac-key",
															"value": "string",
															"description": "HMAC key for External Account Binding."
														},
														{
															"key": "eab-kid",
															"value": "string",
															"description": "Key Identifier for External Account Binding."
														},
														{
															"key": "name",
															"value": "default",
															"description": "ACME account config file name."
														},
														{
															"key": "tos_url",
															"value": "string",
															"description": "URL of CA TermsOfService - setting this indicates agreement."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "string"
										}
									]
								}
							]
						},
						{
							"name": "tos",
							"item": [
								{
									"name": "Retrieve ACME TermsOfService URL from CA. Deprecated, please use /cluster/acme/meta.",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/cluster/acme/tos?directory=https://acme-v02.api.letsencrypt.org/directory",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cluster",
												"acme",
												"tos"
											],
											"query": [
												{
													"key": "directory",
													"value": "https://acme-v02.api.letsencrypt.org/directory",
													"description": "URL of ACME CA directory endpoint."
												}
											]
										},
										"description": "Retrieve ACME TermsOfService URL from CA. Deprecated, please use /cluster/acme/meta."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/acme/tos?directory=https://acme-v02.api.letsencrypt.org/directory",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"acme",
														"tos"
													],
													"query": [
														{
															"key": "directory",
															"value": "https://acme-v02.api.letsencrypt.org/directory",
															"description": "URL of ACME CA directory endpoint."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "string"
										}
									]
								}
							]
						},
						{
							"name": "meta",
							"item": [
								{
									"name": "Retrieve ACME Directory Meta Information",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/cluster/acme/meta?directory=https://acme-v02.api.letsencrypt.org/directory",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cluster",
												"acme",
												"meta"
											],
											"query": [
												{
													"key": "directory",
													"value": "https://acme-v02.api.letsencrypt.org/directory",
													"description": "URL of ACME CA directory endpoint."
												}
											]
										},
										"description": "Retrieve ACME Directory Meta Information"
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/acme/meta?directory=https://acme-v02.api.letsencrypt.org/directory",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"acme",
														"meta"
													],
													"query": [
														{
															"key": "directory",
															"value": "https://acme-v02.api.letsencrypt.org/directory",
															"description": "URL of ACME CA directory endpoint."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"caaIdentities\": [\n    \"string\",\n    \"string\"\n  ],\n  \"externalAccountRequired\": false,\n  \"termsOfService\": \"string\",\n  \"website\": \"string\"\n}"
										}
									]
								}
							]
						},
						{
							"name": "directories",
							"item": [
								{
									"name": "Get named known ACME directory endpoints.",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/cluster/acme/directories",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cluster",
												"acme",
												"directories"
											]
										},
										"description": "Get named known ACME directory endpoints."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/acme/directories",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"acme",
														"directories"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"name\": \"string\",\n    \"url\": \"https://Me(7\"\n  },\n  {\n    \"name\": \"string\",\n    \"url\": \"https://T8<![ysJ\"\n  }\n]"
										}
									]
								}
							]
						},
						{
							"name": "challenge-schema",
							"item": [
								{
									"name": "Get schema of ACME challenge types.",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/cluster/acme/challenge-schema",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cluster",
												"acme",
												"challenge-schema"
											]
										},
										"description": "Get schema of ACME challenge types."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/acme/challenge-schema",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"acme",
														"challenge-schema"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"id\": \"string\",\n    \"name\": \"string\",\n    \"schema\": {},\n    \"type\": \"string\"\n  },\n  {\n    \"id\": \"string\",\n    \"name\": \"string\",\n    \"schema\": {},\n    \"type\": \"string\"\n  }\n]"
										}
									]
								}
							]
						},
						{
							"name": "ACMEAccount index.",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/cluster/acme",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"cluster",
										"acme"
									]
								},
								"description": "ACMEAccount index."
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/cluster/acme",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cluster",
												"acme"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[]"
								}
							]
						}
					]
				},
				{
					"name": "ceph",
					"item": [
						{
							"name": "metadata",
							"item": [
								{
									"name": "Get ceph metadata.",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/cluster/ceph/metadata?scope=all",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cluster",
												"ceph",
												"metadata"
											],
											"query": [
												{
													"key": "scope",
													"value": "all"
												}
											]
										},
										"description": "Get ceph metadata."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/ceph/metadata?scope=all",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"ceph",
														"metadata"
													],
													"query": [
														{
															"key": "scope",
															"value": "all"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"mds\": {\n    \"{id}\": {\n      \"addr\": \"string\",\n      \"ceph_release\": \"string\",\n      \"ceph_version\": \"string\",\n      \"ceph_version_short\": \"string\",\n      \"hostname\": \"string\",\n      \"mem_swap_kb\": 2980,\n      \"mem_total_kb\": 4311,\n      \"name\": \"string\"\n    }\n  },\n  \"mgr\": {\n    \"{id}\": {\n      \"addr\": \"string\",\n      \"ceph_release\": \"string\",\n      \"ceph_version\": \"string\",\n      \"ceph_version_short\": \"string\",\n      \"hostname\": \"string\",\n      \"mem_swap_kb\": 6066,\n      \"mem_total_kb\": 798,\n      \"name\": \"string\"\n    }\n  },\n  \"mon\": {\n    \"{id}\": {\n      \"addrs\": \"string\",\n      \"ceph_release\": \"string\",\n      \"ceph_version\": \"string\",\n      \"ceph_version_short\": \"string\",\n      \"hostname\": \"string\",\n      \"mem_swap_kb\": 4723,\n      \"mem_total_kb\": 1058,\n      \"name\": \"string\"\n    }\n  },\n  \"node\": {\n    \"{node}\": {\n      \"buildcommit\": \"string\",\n      \"version\": {\n        \"str\": \"string\"\n      }\n    }\n  }\n}"
										}
									]
								}
							]
						},
						{
							"name": "status",
							"item": [
								{
									"name": "Get ceph status.",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/cluster/ceph/status",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cluster",
												"ceph",
												"status"
											]
										},
										"description": "Get ceph status."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/ceph/status",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"ceph",
														"status"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{}"
										}
									]
								}
							]
						},
						{
							"name": "flags",
							"item": [
								{
									"name": "{flag}",
									"item": [
										{
											"name": "Get the status of a specific ceph flag.",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/ceph/flags/:flag",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"ceph",
														"flags",
														":flag"
													],
													"variable": [
														{
															"key": "flag",
															"value": "noup",
															"description": "(Required) The name of the flag name to get."
														}
													]
												},
												"description": "Get the status of a specific ceph flag."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/cluster/ceph/flags/:flag",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"cluster",
																"ceph",
																"flags",
																":flag"
															],
															"variable": [
																{
																	"key": "flag"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "true"
												}
											]
										},
										{
											"name": "Set or clear (unset) a specific ceph flag",
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/ceph/flags/:flag?value=true",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"ceph",
														"flags",
														":flag"
													],
													"query": [
														{
															"key": "value",
															"value": "true",
															"description": "(Required) The new value of the flag"
														}
													],
													"variable": [
														{
															"key": "flag",
															"value": "noup",
															"description": "(Required) The ceph flag to update"
														}
													]
												},
												"description": "Set or clear (unset) a specific ceph flag"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/cluster/ceph/flags/:flag?value=true",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"cluster",
																"ceph",
																"flags",
																":flag"
															],
															"query": [
																{
																	"key": "value",
																	"value": "true",
																	"description": "(Required) The new value of the flag"
																}
															],
															"variable": [
																{
																	"key": "flag"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "null"
												}
											]
										}
									]
								},
								{
									"name": "get the status of all ceph flags",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/cluster/ceph/flags",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cluster",
												"ceph",
												"flags"
											]
										},
										"description": "get the status of all ceph flags"
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/ceph/flags",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"ceph",
														"flags"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"description\": \"string\",\n    \"name\": \"nobackfill\",\n    \"value\": true,\n    \"key_0\": 1,\n    \"key_1\": 1,\n    \"key_2\": 1\n  },\n  {\n    \"description\": \"string\",\n    \"name\": \"norecover\",\n    \"value\": true\n  }\n]"
										}
									]
								},
								{
									"name": "Set/Unset multiple ceph flags at once.",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/cluster/ceph/flags?nobackfill=true&nodeep-scrub=true&nodown=true&noin=true&noout=true&norebalance=true&norecover=true&noscrub=true&notieragent=true&noup=true&pause=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cluster",
												"ceph",
												"flags"
											],
											"query": [
												{
													"key": "nobackfill",
													"value": "true",
													"description": "Backfilling of PGs is suspended."
												},
												{
													"key": "nodeep-scrub",
													"value": "true",
													"description": "Deep Scrubbing is disabled."
												},
												{
													"key": "nodown",
													"value": "true",
													"description": "OSD failure reports are being ignored, such that the monitors will not mark OSDs down."
												},
												{
													"key": "noin",
													"value": "true",
													"description": "OSDs that were previously marked out will not be marked back in when they start."
												},
												{
													"key": "noout",
													"value": "true",
													"description": "OSDs will not automatically be marked out after the configured interval."
												},
												{
													"key": "norebalance",
													"value": "true",
													"description": "Rebalancing of PGs is suspended."
												},
												{
													"key": "norecover",
													"value": "true",
													"description": "Recovery of PGs is suspended."
												},
												{
													"key": "noscrub",
													"value": "true",
													"description": "Scrubbing is disabled."
												},
												{
													"key": "notieragent",
													"value": "true",
													"description": "Cache tiering activity is suspended."
												},
												{
													"key": "noup",
													"value": "true",
													"description": "OSDs are not allowed to start."
												},
												{
													"key": "pause",
													"value": "true",
													"description": "Pauses read and writes."
												}
											]
										},
										"description": "Set/Unset multiple ceph flags at once."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/ceph/flags?nobackfill=true&nodeep-scrub=true&nodown=true&noin=true&noout=true&norebalance=true&norecover=true&noscrub=true&notieragent=true&noup=true&pause=true",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"ceph",
														"flags"
													],
													"query": [
														{
															"key": "nobackfill",
															"value": "true",
															"description": "Backfilling of PGs is suspended."
														},
														{
															"key": "nodeep-scrub",
															"value": "true",
															"description": "Deep Scrubbing is disabled."
														},
														{
															"key": "nodown",
															"value": "true",
															"description": "OSD failure reports are being ignored, such that the monitors will not mark OSDs down."
														},
														{
															"key": "noin",
															"value": "true",
															"description": "OSDs that were previously marked out will not be marked back in when they start."
														},
														{
															"key": "noout",
															"value": "true",
															"description": "OSDs will not automatically be marked out after the configured interval."
														},
														{
															"key": "norebalance",
															"value": "true",
															"description": "Rebalancing of PGs is suspended."
														},
														{
															"key": "norecover",
															"value": "true",
															"description": "Recovery of PGs is suspended."
														},
														{
															"key": "noscrub",
															"value": "true",
															"description": "Scrubbing is disabled."
														},
														{
															"key": "notieragent",
															"value": "true",
															"description": "Cache tiering activity is suspended."
														},
														{
															"key": "noup",
															"value": "true",
															"description": "OSDs are not allowed to start."
														},
														{
															"key": "pause",
															"value": "true",
															"description": "Pauses read and writes."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "string"
										}
									]
								}
							]
						},
						{
							"name": "Cluster ceph index.",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/cluster/ceph",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"cluster",
										"ceph"
									]
								},
								"description": "Cluster ceph index."
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/cluster/ceph",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cluster",
												"ceph"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[]"
								}
							]
						}
					]
				},
				{
					"name": "jobs",
					"item": [
						{
							"name": "realm-sync",
							"item": [
								{
									"name": "{id}",
									"item": [
										{
											"name": "Delete realm-sync job definition.",
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/jobs/realm-sync/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"jobs",
														"realm-sync",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "string",
															"description": "(Required) "
														}
													]
												},
												"description": "Delete realm-sync job definition."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/cluster/jobs/realm-sync/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"cluster",
																"jobs",
																"realm-sync",
																":id"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "null"
												}
											]
										},
										{
											"name": "Read realm-sync job definition.",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/jobs/realm-sync/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"jobs",
														"realm-sync",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "string",
															"description": "(Required) "
														}
													]
												},
												"description": "Read realm-sync job definition."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/cluster/jobs/realm-sync/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"cluster",
																"jobs",
																"realm-sync",
																":id"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{}"
												}
											]
										},
										{
											"name": "Create new realm-sync job.",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/jobs/realm-sync/:id?comment=string&enable-new=1&enabled=1&realm=string&remove-vanished=none&schedule=string&scope=both",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"jobs",
														"realm-sync",
														":id"
													],
													"query": [
														{
															"key": "comment",
															"value": "string",
															"description": "Description for the Job."
														},
														{
															"key": "enable-new",
															"value": "1",
															"description": "Enable newly synced users immediately."
														},
														{
															"key": "enabled",
															"value": "1",
															"description": "Determines if the job is enabled."
														},
														{
															"key": "realm",
															"value": "string",
															"description": "Authentication domain ID"
														},
														{
															"key": "remove-vanished",
															"value": "none",
															"description": "A semicolon-separated list of things to remove when they or the user vanishes during a sync. The following values are possible: 'entry' removes the user/group when not returned from the sync. 'properties' removes the set properties on existing user/group that do not appear in the source (even custom ones). 'acl' removes acls when the user/group is not returned from the sync. Instead of a list it also can be 'none' (the default)."
														},
														{
															"key": "schedule",
															"value": "string",
															"description": "(Required) Backup schedule. The format is a subset of `systemd` calendar events."
														},
														{
															"key": "scope",
															"value": "both",
															"description": "Select what to sync."
														}
													],
													"variable": [
														{
															"key": "id",
															"value": "string",
															"description": "(Required) The ID of the job."
														}
													]
												},
												"description": "Create new realm-sync job."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/cluster/jobs/realm-sync/:id?comment=string&enable-new=1&enabled=1&realm=string&remove-vanished=none&schedule=string&scope=both",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"cluster",
																"jobs",
																"realm-sync",
																":id"
															],
															"query": [
																{
																	"key": "comment",
																	"value": "string",
																	"description": "Description for the Job."
																},
																{
																	"key": "enable-new",
																	"value": "1",
																	"description": "Enable newly synced users immediately."
																},
																{
																	"key": "enabled",
																	"value": "1",
																	"description": "Determines if the job is enabled."
																},
																{
																	"key": "realm",
																	"value": "string",
																	"description": "Authentication domain ID"
																},
																{
																	"key": "remove-vanished",
																	"value": "none",
																	"description": "A semicolon-separated list of things to remove when they or the user vanishes during a sync. The following values are possible: 'entry' removes the user/group when not returned from the sync. 'properties' removes the set properties on existing user/group that do not appear in the source (even custom ones). 'acl' removes acls when the user/group is not returned from the sync. Instead of a list it also can be 'none' (the default)."
																},
																{
																	"key": "schedule",
																	"value": "string",
																	"description": "(Required) Backup schedule. The format is a subset of `systemd` calendar events."
																},
																{
																	"key": "scope",
																	"value": "both",
																	"description": "Select what to sync."
																}
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "null"
												}
											]
										},
										{
											"name": "Update realm-sync job definition.",
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/jobs/realm-sync/:id?comment=string&delete=string&enable-new=1&enabled=1&remove-vanished=none&schedule=string&scope=both",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"jobs",
														"realm-sync",
														":id"
													],
													"query": [
														{
															"key": "comment",
															"value": "string",
															"description": "Description for the Job."
														},
														{
															"key": "delete",
															"value": "string",
															"description": "A list of settings you want to delete."
														},
														{
															"key": "enable-new",
															"value": "1",
															"description": "Enable newly synced users immediately."
														},
														{
															"key": "enabled",
															"value": "1",
															"description": "Determines if the job is enabled."
														},
														{
															"key": "remove-vanished",
															"value": "none",
															"description": "A semicolon-separated list of things to remove when they or the user vanishes during a sync. The following values are possible: 'entry' removes the user/group when not returned from the sync. 'properties' removes the set properties on existing user/group that do not appear in the source (even custom ones). 'acl' removes acls when the user/group is not returned from the sync. Instead of a list it also can be 'none' (the default)."
														},
														{
															"key": "schedule",
															"value": "string",
															"description": "(Required) Backup schedule. The format is a subset of `systemd` calendar events."
														},
														{
															"key": "scope",
															"value": "both",
															"description": "Select what to sync."
														}
													],
													"variable": [
														{
															"key": "id",
															"value": "string",
															"description": "(Required) The ID of the job."
														}
													]
												},
												"description": "Update realm-sync job definition."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/cluster/jobs/realm-sync/:id?comment=string&delete=string&enable-new=1&enabled=1&remove-vanished=none&schedule=string&scope=both",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"cluster",
																"jobs",
																"realm-sync",
																":id"
															],
															"query": [
																{
																	"key": "comment",
																	"value": "string",
																	"description": "Description for the Job."
																},
																{
																	"key": "delete",
																	"value": "string",
																	"description": "A list of settings you want to delete."
																},
																{
																	"key": "enable-new",
																	"value": "1",
																	"description": "Enable newly synced users immediately."
																},
																{
																	"key": "enabled",
																	"value": "1",
																	"description": "Determines if the job is enabled."
																},
																{
																	"key": "remove-vanished",
																	"value": "none",
																	"description": "A semicolon-separated list of things to remove when they or the user vanishes during a sync. The following values are possible: 'entry' removes the user/group when not returned from the sync. 'properties' removes the set properties on existing user/group that do not appear in the source (even custom ones). 'acl' removes acls when the user/group is not returned from the sync. Instead of a list it also can be 'none' (the default)."
																},
																{
																	"key": "schedule",
																	"value": "string",
																	"description": "(Required) Backup schedule. The format is a subset of `systemd` calendar events."
																},
																{
																	"key": "scope",
																	"value": "both",
																	"description": "Select what to sync."
																}
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "null"
												}
											]
										}
									]
								},
								{
									"name": "List configured realm-sync-jobs.",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/cluster/jobs/realm-sync",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cluster",
												"jobs",
												"realm-sync"
											]
										},
										"description": "List configured realm-sync-jobs."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/jobs/realm-sync",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"jobs",
														"realm-sync"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"comment\": \"string\",\n    \"enabled\": true,\n    \"id\": \"string\",\n    \"last-run\": 6158,\n    \"next-run\": 8921,\n    \"realm\": \"string\",\n    \"remove-vanished\": \"none\",\n    \"schedule\": \"string\",\n    \"scope\": \"groups\"\n  },\n  {\n    \"comment\": \"string\",\n    \"enabled\": true,\n    \"id\": \"string\",\n    \"last-run\": 2970,\n    \"next-run\": 9177,\n    \"realm\": \"string\",\n    \"remove-vanished\": \"none\",\n    \"schedule\": \"string\",\n    \"scope\": \"users\"\n  }\n]"
										}
									]
								}
							]
						},
						{
							"name": "schedule-analyze",
							"item": [
								{
									"name": "Returns a list of future schedule runtimes.",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/cluster/jobs/schedule-analyze?iterations=10&schedule=string&starttime=5752",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cluster",
												"jobs",
												"schedule-analyze"
											],
											"query": [
												{
													"key": "iterations",
													"value": "10",
													"description": "Number of event-iteration to simulate and return."
												},
												{
													"key": "schedule",
													"value": "string",
													"description": "(Required) Job schedule. The format is a subset of `systemd` calendar events."
												},
												{
													"key": "starttime",
													"value": "5752",
													"description": "UNIX timestamp to start the calculation from. Defaults to the current time."
												}
											]
										},
										"description": "Returns a list of future schedule runtimes."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/jobs/schedule-analyze?iterations=10&schedule=string&starttime=5752",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"jobs",
														"schedule-analyze"
													],
													"query": [
														{
															"key": "iterations",
															"value": "10",
															"description": "Number of event-iteration to simulate and return."
														},
														{
															"key": "schedule",
															"value": "string",
															"description": "(Required) Job schedule. The format is a subset of `systemd` calendar events."
														},
														{
															"key": "starttime",
															"value": "5752",
															"description": "UNIX timestamp to start the calculation from. Defaults to the current time."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"timestamp\": 3256,\n    \"utc\": \"string\"\n  },\n  {\n    \"timestamp\": 8984,\n    \"utc\": \"string\"\n  }\n]"
										}
									]
								}
							]
						},
						{
							"name": "Index for jobs related endpoints.",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/cluster/jobs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"cluster",
										"jobs"
									]
								},
								"description": "Index for jobs related endpoints."
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/cluster/jobs",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cluster",
												"jobs"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"subdir\": \"string\"\n  },\n  {\n    \"subdir\": \"string\"\n  }\n]"
								}
							]
						}
					]
				},
				{
					"name": "mapping",
					"item": [
						{
							"name": "dir",
							"item": [
								{
									"name": "{id}",
									"item": [
										{
											"name": "Remove directory mapping.",
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/mapping/dir/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"mapping",
														"dir",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "string",
															"description": "(Required) "
														}
													]
												},
												"description": "Remove directory mapping."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/cluster/mapping/dir/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"cluster",
																"mapping",
																"dir",
																":id"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "null"
												}
											]
										},
										{
											"name": "Get directory mapping.",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/mapping/dir/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"mapping",
														"dir",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "string",
															"description": "(Required) "
														}
													]
												},
												"description": "Get directory mapping."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/cluster/mapping/dir/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"cluster",
																"mapping",
																"dir",
																":id"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{}"
												}
											]
										},
										{
											"name": "Update a directory mapping.",
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/mapping/dir/:id?delete=string&description=string&digest=string",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"mapping",
														"dir",
														":id"
													],
													"query": [
														{
															"key": "delete",
															"value": "string",
															"description": "A list of settings you want to delete."
														},
														{
															"key": "description",
															"value": "string",
															"description": "Description of the directory mapping"
														},
														{
															"key": "digest",
															"value": "string",
															"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
														}
													],
													"variable": [
														{
															"key": "id",
															"value": "string",
															"description": "(Required) The ID of the directory mapping"
														}
													]
												},
												"description": "Update a directory mapping."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/cluster/mapping/dir/:id?delete=string&description=string&digest=string",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"cluster",
																"mapping",
																"dir",
																":id"
															],
															"query": [
																{
																	"key": "delete",
																	"value": "string",
																	"description": "A list of settings you want to delete."
																},
																{
																	"key": "description",
																	"value": "string",
																	"description": "Description of the directory mapping"
																},
																{
																	"key": "digest",
																	"value": "string",
																	"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
																}
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "null"
												}
											]
										}
									]
								},
								{
									"name": "List directory mapping",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/cluster/mapping/dir?check-node=string",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cluster",
												"mapping",
												"dir"
											],
											"query": [
												{
													"key": "check-node",
													"value": "string",
													"description": "If given, checks the configurations on the given node for correctness, and adds relevant diagnostics for the directory to the response."
												}
											]
										},
										"description": "List directory mapping"
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/mapping/dir?check-node=string",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"mapping",
														"dir"
													],
													"query": [
														{
															"key": "check-node",
															"value": "string",
															"description": "If given, checks the configurations on the given node for correctness, and adds relevant diagnostics for the directory to the response."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"checks\": [\n      {\n        \"message\": \"string\",\n        \"severity\": \"warning\"\n      },\n      {\n        \"message\": \"string\",\n        \"severity\": \"warning\"\n      }\n    ],\n    \"description\": \"string\",\n    \"id\": \"string\",\n    \"map\": [\n      \"string\",\n      \"string\"\n    ]\n  },\n  {\n    \"checks\": [\n      {\n        \"message\": \"string\",\n        \"severity\": \"error\"\n      },\n      {\n        \"message\": \"string\",\n        \"severity\": \"warning\"\n      }\n    ],\n    \"description\": \"string\",\n    \"id\": \"string\",\n    \"map\": [\n      \"string\",\n      \"string\"\n    ]\n  }\n]"
										}
									]
								},
								{
									"name": "Create a new directory mapping.",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/cluster/mapping/dir?description=string&id=string",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cluster",
												"mapping",
												"dir"
											],
											"query": [
												{
													"key": "description",
													"value": "string",
													"description": "Description of the directory mapping"
												},
												{
													"key": "id",
													"value": "string",
													"description": "(Required) The ID of the directory mapping"
												}
											]
										},
										"description": "Create a new directory mapping."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/mapping/dir?description=string&id=string",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"mapping",
														"dir"
													],
													"query": [
														{
															"key": "description",
															"value": "string",
															"description": "Description of the directory mapping"
														},
														{
															"key": "id",
															"value": "string",
															"description": "(Required) The ID of the directory mapping"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "null"
										}
									]
								}
							]
						},
						{
							"name": "pci",
							"item": [
								{
									"name": "{id}",
									"item": [
										{
											"name": "Remove Hardware Mapping.",
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/mapping/pci/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"mapping",
														"pci",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "string",
															"description": "(Required) "
														}
													]
												},
												"description": "Remove Hardware Mapping."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/cluster/mapping/pci/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"cluster",
																"mapping",
																"pci",
																":id"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "null"
												}
											]
										},
										{
											"name": "Get PCI Mapping.",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/mapping/pci/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"mapping",
														"pci",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "string",
															"description": "(Required) "
														}
													]
												},
												"description": "Get PCI Mapping."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/cluster/mapping/pci/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"cluster",
																"mapping",
																"pci",
																":id"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{}"
												}
											]
										},
										{
											"name": "Update a hardware mapping.",
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/mapping/pci/:id?delete=string&description=string&digest=string&live-migration-capable=0&mdev=0",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"mapping",
														"pci",
														":id"
													],
													"query": [
														{
															"key": "delete",
															"value": "string",
															"description": "A list of settings you want to delete."
														},
														{
															"key": "description",
															"value": "string",
															"description": "Description of the logical PCI device."
														},
														{
															"key": "digest",
															"value": "string",
															"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
														},
														{
															"key": "live-migration-capable",
															"value": "0",
															"description": "Marks the device(s) as being able to be live-migrated (Experimental). This needs hardware and driver support to work."
														},
														{
															"key": "mdev",
															"value": "0",
															"description": "Marks the device(s) as being capable of providing mediated devices."
														}
													],
													"variable": [
														{
															"key": "id",
															"value": "string",
															"description": "(Required) The ID of the logical PCI mapping."
														}
													]
												},
												"description": "Update a hardware mapping."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/cluster/mapping/pci/:id?delete=string&description=string&digest=string&live-migration-capable=0&mdev=0",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"cluster",
																"mapping",
																"pci",
																":id"
															],
															"query": [
																{
																	"key": "delete",
																	"value": "string",
																	"description": "A list of settings you want to delete."
																},
																{
																	"key": "description",
																	"value": "string",
																	"description": "Description of the logical PCI device."
																},
																{
																	"key": "digest",
																	"value": "string",
																	"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
																},
																{
																	"key": "live-migration-capable",
																	"value": "0",
																	"description": "Marks the device(s) as being able to be live-migrated (Experimental). This needs hardware and driver support to work."
																},
																{
																	"key": "mdev",
																	"value": "0",
																	"description": "Marks the device(s) as being capable of providing mediated devices."
																}
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "null"
												}
											]
										}
									]
								},
								{
									"name": "List PCI Hardware Mapping",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/cluster/mapping/pci?check-node=string",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cluster",
												"mapping",
												"pci"
											],
											"query": [
												{
													"key": "check-node",
													"value": "string",
													"description": "If given, checks the configurations on the given node for correctness, and adds relevant diagnostics for the devices to the response."
												}
											]
										},
										"description": "List PCI Hardware Mapping"
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/mapping/pci?check-node=string",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"mapping",
														"pci"
													],
													"query": [
														{
															"key": "check-node",
															"value": "string",
															"description": "If given, checks the configurations on the given node for correctness, and adds relevant diagnostics for the devices to the response."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"checks\": [\n      {\n        \"message\": \"string\",\n        \"severity\": \"error\"\n      },\n      {\n        \"message\": \"string\",\n        \"severity\": \"warning\"\n      }\n    ],\n    \"description\": \"string\",\n    \"id\": \"string\",\n    \"map\": [\n      \"string\",\n      \"string\"\n    ]\n  },\n  {\n    \"checks\": [\n      {\n        \"message\": \"string\",\n        \"severity\": \"error\"\n      },\n      {\n        \"message\": \"string\",\n        \"severity\": \"warning\"\n      }\n    ],\n    \"description\": \"string\",\n    \"id\": \"string\",\n    \"map\": [\n      \"string\",\n      \"string\"\n    ]\n  }\n]"
										}
									]
								},
								{
									"name": "Create a new hardware mapping.",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/cluster/mapping/pci?description=string&id=string&live-migration-capable=0&mdev=0",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cluster",
												"mapping",
												"pci"
											],
											"query": [
												{
													"key": "description",
													"value": "string",
													"description": "Description of the logical PCI device."
												},
												{
													"key": "id",
													"value": "string",
													"description": "(Required) The ID of the logical PCI mapping."
												},
												{
													"key": "live-migration-capable",
													"value": "0",
													"description": "Marks the device(s) as being able to be live-migrated (Experimental). This needs hardware and driver support to work."
												},
												{
													"key": "mdev",
													"value": "0",
													"description": "Marks the device(s) as being capable of providing mediated devices."
												}
											]
										},
										"description": "Create a new hardware mapping."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/mapping/pci?description=string&id=string&live-migration-capable=0&mdev=0",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"mapping",
														"pci"
													],
													"query": [
														{
															"key": "description",
															"value": "string",
															"description": "Description of the logical PCI device."
														},
														{
															"key": "id",
															"value": "string",
															"description": "(Required) The ID of the logical PCI mapping."
														},
														{
															"key": "live-migration-capable",
															"value": "0",
															"description": "Marks the device(s) as being able to be live-migrated (Experimental). This needs hardware and driver support to work."
														},
														{
															"key": "mdev",
															"value": "0",
															"description": "Marks the device(s) as being capable of providing mediated devices."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "null"
										}
									]
								}
							]
						},
						{
							"name": "usb",
							"item": [
								{
									"name": "{id}",
									"item": [
										{
											"name": "Remove Hardware Mapping.",
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/mapping/usb/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"mapping",
														"usb",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "string",
															"description": "(Required) "
														}
													]
												},
												"description": "Remove Hardware Mapping."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/cluster/mapping/usb/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"cluster",
																"mapping",
																"usb",
																":id"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "null"
												}
											]
										},
										{
											"name": "Get USB Mapping.",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/mapping/usb/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"mapping",
														"usb",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "string",
															"description": "(Required) "
														}
													]
												},
												"description": "Get USB Mapping."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/cluster/mapping/usb/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"cluster",
																"mapping",
																"usb",
																":id"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{}"
												}
											]
										},
										{
											"name": "Update a hardware mapping.",
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/mapping/usb/:id?delete=string&description=string&digest=string",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"mapping",
														"usb",
														":id"
													],
													"query": [
														{
															"key": "delete",
															"value": "string",
															"description": "A list of settings you want to delete."
														},
														{
															"key": "description",
															"value": "string",
															"description": "Description of the logical USB device."
														},
														{
															"key": "digest",
															"value": "string",
															"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
														}
													],
													"variable": [
														{
															"key": "id",
															"value": "string",
															"description": "(Required) The ID of the logical USB mapping."
														}
													]
												},
												"description": "Update a hardware mapping."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/cluster/mapping/usb/:id?delete=string&description=string&digest=string",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"cluster",
																"mapping",
																"usb",
																":id"
															],
															"query": [
																{
																	"key": "delete",
																	"value": "string",
																	"description": "A list of settings you want to delete."
																},
																{
																	"key": "description",
																	"value": "string",
																	"description": "Description of the logical USB device."
																},
																{
																	"key": "digest",
																	"value": "string",
																	"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
																}
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "null"
												}
											]
										}
									]
								},
								{
									"name": "List USB Hardware Mappings",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/cluster/mapping/usb?check-node=string",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cluster",
												"mapping",
												"usb"
											],
											"query": [
												{
													"key": "check-node",
													"value": "string",
													"description": "If given, checks the configurations on the given node for correctness, and adds relevant errors to the devices."
												}
											]
										},
										"description": "List USB Hardware Mappings"
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/mapping/usb?check-node=string",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"mapping",
														"usb"
													],
													"query": [
														{
															"key": "check-node",
															"value": "string",
															"description": "If given, checks the configurations on the given node for correctness, and adds relevant errors to the devices."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"description\": \"string\",\n    \"error\": [\n      {\n        \"message\": \"string\",\n        \"severity\": \"string\"\n      },\n      {\n        \"message\": \"string\",\n        \"severity\": \"string\"\n      }\n    ],\n    \"id\": \"string\",\n    \"map\": [\n      \"string\",\n      \"string\"\n    ]\n  },\n  {\n    \"description\": \"string\",\n    \"error\": [\n      {\n        \"message\": \"string\",\n        \"severity\": \"string\"\n      },\n      {\n        \"message\": \"string\",\n        \"severity\": \"string\"\n      }\n    ],\n    \"id\": \"string\",\n    \"map\": [\n      \"string\",\n      \"string\"\n    ]\n  }\n]"
										}
									]
								},
								{
									"name": "Create a new hardware mapping.",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/cluster/mapping/usb?description=string&id=string",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cluster",
												"mapping",
												"usb"
											],
											"query": [
												{
													"key": "description",
													"value": "string",
													"description": "Description of the logical USB device."
												},
												{
													"key": "id",
													"value": "string",
													"description": "(Required) The ID of the logical USB mapping."
												}
											]
										},
										"description": "Create a new hardware mapping."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/mapping/usb?description=string&id=string",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"mapping",
														"usb"
													],
													"query": [
														{
															"key": "description",
															"value": "string",
															"description": "Description of the logical USB device."
														},
														{
															"key": "id",
															"value": "string",
															"description": "(Required) The ID of the logical USB mapping."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "null"
										}
									]
								}
							]
						},
						{
							"name": "List resource types.",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/cluster/mapping",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"cluster",
										"mapping"
									]
								},
								"description": "List resource types."
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/cluster/mapping",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cluster",
												"mapping"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[]"
								}
							]
						}
					]
				},
				{
					"name": "sdn",
					"item": [
						{
							"name": "vnets",
							"item": [
								{
									"name": "{vnet}",
									"item": [
										{
											"name": "firewall",
											"item": [
												{
													"name": "rules",
													"item": [
														{
															"name": "{pos}",
															"item": [
																{
																	"name": "Delete rule.",
																	"request": {
																		"method": "DELETE",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/cluster/sdn/vnets/:vnet/firewall/rules/:pos?digest=string",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"cluster",
																				"sdn",
																				"vnets",
																				":vnet",
																				"firewall",
																				"rules",
																				":pos"
																			],
																			"query": [
																				{
																					"key": "digest",
																					"value": "string",
																					"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
																				}
																			],
																			"variable": [
																				{
																					"key": "vnet",
																					"value": "string",
																					"description": "(Required) The SDN vnet object identifier."
																				},
																				{
																					"key": "pos",
																					"value": "8248",
																					"description": "Update rule at position <pos>."
																				}
																			]
																		},
																		"description": "Delete rule."
																	},
																	"response": [
																		{
																			"name": "successful operation",
																			"originalRequest": {
																				"method": "DELETE",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/cluster/sdn/vnets/:vnet/firewall/rules/:pos?digest=string",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"cluster",
																						"sdn",
																						"vnets",
																						":vnet",
																						"firewall",
																						"rules",
																						":pos"
																					],
																					"query": [
																						{
																							"key": "digest",
																							"value": "string",
																							"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
																						}
																					],
																					"variable": [
																						{
																							"key": "vnet"
																						},
																						{
																							"key": "pos"
																						}
																					]
																				}
																			},
																			"status": "OK",
																			"code": 200,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "null"
																		}
																	]
																},
																{
																	"name": "Get single rule data.",
																	"request": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/cluster/sdn/vnets/:vnet/firewall/rules/:pos",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"cluster",
																				"sdn",
																				"vnets",
																				":vnet",
																				"firewall",
																				"rules",
																				":pos"
																			],
																			"variable": [
																				{
																					"key": "vnet",
																					"value": "string",
																					"description": "(Required) The SDN vnet object identifier."
																				},
																				{
																					"key": "pos",
																					"value": "8248",
																					"description": "Update rule at position <pos>."
																				}
																			]
																		},
																		"description": "Get single rule data."
																	},
																	"response": [
																		{
																			"name": "successful operation",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/cluster/sdn/vnets/:vnet/firewall/rules/:pos",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"cluster",
																						"sdn",
																						"vnets",
																						":vnet",
																						"firewall",
																						"rules",
																						":pos"
																					],
																					"variable": [
																						{
																							"key": "vnet"
																						},
																						{
																							"key": "pos"
																						}
																					]
																				}
																			},
																			"status": "OK",
																			"code": 200,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"action\": \"string\",\n  \"comment\": \"string\",\n  \"dest\": \"string\",\n  \"dport\": \"string\",\n  \"enable\": 7351,\n  \"icmp-type\": \"string\",\n  \"iface\": \"string\",\n  \"ipversion\": 3130,\n  \"log\": \"debug\",\n  \"macro\": \"string\",\n  \"pos\": 4146,\n  \"proto\": \"string\",\n  \"source\": \"string\",\n  \"sport\": \"string\",\n  \"type\": \"string\"\n}"
																		}
																	]
																},
																{
																	"name": "Modify rule data.",
																	"request": {
																		"method": "PUT",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/cluster/sdn/vnets/:vnet/firewall/rules/:pos?action=wrF&comment=string&delete=string&dest=string&digest=string&dport=string&enable=8248&icmp-type=string&iface=string&log=crit&macro=string&moveto=8248&proto=string&source=string&sport=string&type=forward",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"cluster",
																				"sdn",
																				"vnets",
																				":vnet",
																				"firewall",
																				"rules",
																				":pos"
																			],
																			"query": [
																				{
																					"key": "action",
																					"value": "wrF",
																					"description": "Rule action ('ACCEPT', 'DROP', 'REJECT') or security group name."
																				},
																				{
																					"key": "comment",
																					"value": "string",
																					"description": "Descriptive comment."
																				},
																				{
																					"key": "delete",
																					"value": "string",
																					"description": "A list of settings you want to delete."
																				},
																				{
																					"key": "dest",
																					"value": "string",
																					"description": "Restrict packet destination address. This can refer to a single IP address, an IP set ('+ipsetname') or an IP alias definition. You can also specify an address range like '20.34.101.207-201.3.9.99', or a list of IP addresses and networks (entries are separated by comma). Please do not mix IPv4 and IPv6 addresses inside such lists."
																				},
																				{
																					"key": "digest",
																					"value": "string",
																					"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
																				},
																				{
																					"key": "dport",
																					"value": "string",
																					"description": "Restrict TCP/UDP destination port. You can use service names or simple numbers (0-65535), as defined in '/etc/services'. Port ranges can be specified with '\\d+:\\d+', for example '80:85', and you can use comma separated list to match several ports or ranges."
																				},
																				{
																					"key": "enable",
																					"value": "8248",
																					"description": "Flag to enable/disable a rule."
																				},
																				{
																					"key": "icmp-type",
																					"value": "string",
																					"description": "Specify icmp-type. Only valid if proto equals 'icmp' or 'icmpv6'/'ipv6-icmp'."
																				},
																				{
																					"key": "iface",
																					"value": "string",
																					"description": "Network interface name. You have to use network configuration key names for VMs and containers ('net\\d+'). Host related rules can use arbitrary strings."
																				},
																				{
																					"key": "log",
																					"value": "crit",
																					"description": "Log level for firewall rule."
																				},
																				{
																					"key": "macro",
																					"value": "string",
																					"description": "Use predefined standard macro."
																				},
																				{
																					"key": "moveto",
																					"value": "8248",
																					"description": "Move rule to new position <moveto>. Other arguments are ignored."
																				},
																				{
																					"key": "proto",
																					"value": "string",
																					"description": "IP protocol. You can use protocol names ('tcp'/'udp') or simple numbers, as defined in '/etc/protocols'."
																				},
																				{
																					"key": "source",
																					"value": "string",
																					"description": "Restrict packet source address. This can refer to a single IP address, an IP set ('+ipsetname') or an IP alias definition. You can also specify an address range like '20.34.101.207-201.3.9.99', or a list of IP addresses and networks (entries are separated by comma). Please do not mix IPv4 and IPv6 addresses inside such lists."
																				},
																				{
																					"key": "sport",
																					"value": "string",
																					"description": "Restrict TCP/UDP source port. You can use service names or simple numbers (0-65535), as defined in '/etc/services'. Port ranges can be specified with '\\d+:\\d+', for example '80:85', and you can use comma separated list to match several ports or ranges."
																				},
																				{
																					"key": "type",
																					"value": "forward",
																					"description": "Rule type."
																				}
																			],
																			"variable": [
																				{
																					"key": "vnet",
																					"value": "string",
																					"description": "(Required) The SDN vnet object identifier."
																				},
																				{
																					"key": "pos",
																					"value": "8248",
																					"description": "Update rule at position <pos>."
																				}
																			]
																		},
																		"description": "Modify rule data."
																	},
																	"response": [
																		{
																			"name": "successful operation",
																			"originalRequest": {
																				"method": "PUT",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/cluster/sdn/vnets/:vnet/firewall/rules/:pos?action=wrF&comment=string&delete=string&dest=string&digest=string&dport=string&enable=8248&icmp-type=string&iface=string&log=crit&macro=string&moveto=8248&proto=string&source=string&sport=string&type=forward",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"cluster",
																						"sdn",
																						"vnets",
																						":vnet",
																						"firewall",
																						"rules",
																						":pos"
																					],
																					"query": [
																						{
																							"key": "action",
																							"value": "wrF",
																							"description": "Rule action ('ACCEPT', 'DROP', 'REJECT') or security group name."
																						},
																						{
																							"key": "comment",
																							"value": "string",
																							"description": "Descriptive comment."
																						},
																						{
																							"key": "delete",
																							"value": "string",
																							"description": "A list of settings you want to delete."
																						},
																						{
																							"key": "dest",
																							"value": "string",
																							"description": "Restrict packet destination address. This can refer to a single IP address, an IP set ('+ipsetname') or an IP alias definition. You can also specify an address range like '20.34.101.207-201.3.9.99', or a list of IP addresses and networks (entries are separated by comma). Please do not mix IPv4 and IPv6 addresses inside such lists."
																						},
																						{
																							"key": "digest",
																							"value": "string",
																							"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
																						},
																						{
																							"key": "dport",
																							"value": "string",
																							"description": "Restrict TCP/UDP destination port. You can use service names or simple numbers (0-65535), as defined in '/etc/services'. Port ranges can be specified with '\\d+:\\d+', for example '80:85', and you can use comma separated list to match several ports or ranges."
																						},
																						{
																							"key": "enable",
																							"value": "8248",
																							"description": "Flag to enable/disable a rule."
																						},
																						{
																							"key": "icmp-type",
																							"value": "string",
																							"description": "Specify icmp-type. Only valid if proto equals 'icmp' or 'icmpv6'/'ipv6-icmp'."
																						},
																						{
																							"key": "iface",
																							"value": "string",
																							"description": "Network interface name. You have to use network configuration key names for VMs and containers ('net\\d+'). Host related rules can use arbitrary strings."
																						},
																						{
																							"key": "log",
																							"value": "crit",
																							"description": "Log level for firewall rule."
																						},
																						{
																							"key": "macro",
																							"value": "string",
																							"description": "Use predefined standard macro."
																						},
																						{
																							"key": "moveto",
																							"value": "8248",
																							"description": "Move rule to new position <moveto>. Other arguments are ignored."
																						},
																						{
																							"key": "proto",
																							"value": "string",
																							"description": "IP protocol. You can use protocol names ('tcp'/'udp') or simple numbers, as defined in '/etc/protocols'."
																						},
																						{
																							"key": "source",
																							"value": "string",
																							"description": "Restrict packet source address. This can refer to a single IP address, an IP set ('+ipsetname') or an IP alias definition. You can also specify an address range like '20.34.101.207-201.3.9.99', or a list of IP addresses and networks (entries are separated by comma). Please do not mix IPv4 and IPv6 addresses inside such lists."
																						},
																						{
																							"key": "sport",
																							"value": "string",
																							"description": "Restrict TCP/UDP source port. You can use service names or simple numbers (0-65535), as defined in '/etc/services'. Port ranges can be specified with '\\d+:\\d+', for example '80:85', and you can use comma separated list to match several ports or ranges."
																						},
																						{
																							"key": "type",
																							"value": "forward",
																							"description": "Rule type."
																						}
																					],
																					"variable": [
																						{
																							"key": "vnet"
																						},
																						{
																							"key": "pos"
																						}
																					]
																				}
																			},
																			"status": "OK",
																			"code": 200,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "null"
																		}
																	]
																}
															]
														},
														{
															"name": "List rules.",
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/cluster/sdn/vnets/:vnet/firewall/rules",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"cluster",
																		"sdn",
																		"vnets",
																		":vnet",
																		"firewall",
																		"rules"
																	],
																	"variable": [
																		{
																			"key": "vnet",
																			"value": "string",
																			"description": "(Required) The SDN vnet object identifier."
																		}
																	]
																},
																"description": "List rules."
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/cluster/sdn/vnets/:vnet/firewall/rules",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"cluster",
																				"sdn",
																				"vnets",
																				":vnet",
																				"firewall",
																				"rules"
																			],
																			"variable": [
																				{
																					"key": "vnet"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "[\n  {\n    \"pos\": 2798\n  },\n  {\n    \"pos\": 6715\n  }\n]"
																}
															]
														},
														{
															"name": "Create new rule.",
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/cluster/sdn/vnets/:vnet/firewall/rules?action=wrF&comment=string&dest=string&digest=string&dport=string&enable=8248&icmp-type=string&iface=string&log=crit&macro=string&pos=8248&proto=string&source=string&sport=string&type=forward",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"cluster",
																		"sdn",
																		"vnets",
																		":vnet",
																		"firewall",
																		"rules"
																	],
																	"query": [
																		{
																			"key": "action",
																			"value": "wrF",
																			"description": "(Required) Rule action ('ACCEPT', 'DROP', 'REJECT') or security group name."
																		},
																		{
																			"key": "comment",
																			"value": "string",
																			"description": "Descriptive comment."
																		},
																		{
																			"key": "dest",
																			"value": "string",
																			"description": "Restrict packet destination address. This can refer to a single IP address, an IP set ('+ipsetname') or an IP alias definition. You can also specify an address range like '20.34.101.207-201.3.9.99', or a list of IP addresses and networks (entries are separated by comma). Please do not mix IPv4 and IPv6 addresses inside such lists."
																		},
																		{
																			"key": "digest",
																			"value": "string",
																			"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
																		},
																		{
																			"key": "dport",
																			"value": "string",
																			"description": "Restrict TCP/UDP destination port. You can use service names or simple numbers (0-65535), as defined in '/etc/services'. Port ranges can be specified with '\\d+:\\d+', for example '80:85', and you can use comma separated list to match several ports or ranges."
																		},
																		{
																			"key": "enable",
																			"value": "8248",
																			"description": "Flag to enable/disable a rule."
																		},
																		{
																			"key": "icmp-type",
																			"value": "string",
																			"description": "Specify icmp-type. Only valid if proto equals 'icmp' or 'icmpv6'/'ipv6-icmp'."
																		},
																		{
																			"key": "iface",
																			"value": "string",
																			"description": "Network interface name. You have to use network configuration key names for VMs and containers ('net\\d+'). Host related rules can use arbitrary strings."
																		},
																		{
																			"key": "log",
																			"value": "crit",
																			"description": "Log level for firewall rule."
																		},
																		{
																			"key": "macro",
																			"value": "string",
																			"description": "Use predefined standard macro."
																		},
																		{
																			"key": "pos",
																			"value": "8248",
																			"description": "Update rule at position <pos>."
																		},
																		{
																			"key": "proto",
																			"value": "string",
																			"description": "IP protocol. You can use protocol names ('tcp'/'udp') or simple numbers, as defined in '/etc/protocols'."
																		},
																		{
																			"key": "source",
																			"value": "string",
																			"description": "Restrict packet source address. This can refer to a single IP address, an IP set ('+ipsetname') or an IP alias definition. You can also specify an address range like '20.34.101.207-201.3.9.99', or a list of IP addresses and networks (entries are separated by comma). Please do not mix IPv4 and IPv6 addresses inside such lists."
																		},
																		{
																			"key": "sport",
																			"value": "string",
																			"description": "Restrict TCP/UDP source port. You can use service names or simple numbers (0-65535), as defined in '/etc/services'. Port ranges can be specified with '\\d+:\\d+', for example '80:85', and you can use comma separated list to match several ports or ranges."
																		},
																		{
																			"key": "type",
																			"value": "forward",
																			"description": "(Required) Rule type."
																		}
																	],
																	"variable": [
																		{
																			"key": "vnet",
																			"value": "string",
																			"description": "(Required) The SDN vnet object identifier."
																		}
																	]
																},
																"description": "Create new rule."
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/cluster/sdn/vnets/:vnet/firewall/rules?action=wrF&comment=string&dest=string&digest=string&dport=string&enable=8248&icmp-type=string&iface=string&log=crit&macro=string&pos=8248&proto=string&source=string&sport=string&type=forward",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"cluster",
																				"sdn",
																				"vnets",
																				":vnet",
																				"firewall",
																				"rules"
																			],
																			"query": [
																				{
																					"key": "action",
																					"value": "wrF",
																					"description": "(Required) Rule action ('ACCEPT', 'DROP', 'REJECT') or security group name."
																				},
																				{
																					"key": "comment",
																					"value": "string",
																					"description": "Descriptive comment."
																				},
																				{
																					"key": "dest",
																					"value": "string",
																					"description": "Restrict packet destination address. This can refer to a single IP address, an IP set ('+ipsetname') or an IP alias definition. You can also specify an address range like '20.34.101.207-201.3.9.99', or a list of IP addresses and networks (entries are separated by comma). Please do not mix IPv4 and IPv6 addresses inside such lists."
																				},
																				{
																					"key": "digest",
																					"value": "string",
																					"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
																				},
																				{
																					"key": "dport",
																					"value": "string",
																					"description": "Restrict TCP/UDP destination port. You can use service names or simple numbers (0-65535), as defined in '/etc/services'. Port ranges can be specified with '\\d+:\\d+', for example '80:85', and you can use comma separated list to match several ports or ranges."
																				},
																				{
																					"key": "enable",
																					"value": "8248",
																					"description": "Flag to enable/disable a rule."
																				},
																				{
																					"key": "icmp-type",
																					"value": "string",
																					"description": "Specify icmp-type. Only valid if proto equals 'icmp' or 'icmpv6'/'ipv6-icmp'."
																				},
																				{
																					"key": "iface",
																					"value": "string",
																					"description": "Network interface name. You have to use network configuration key names for VMs and containers ('net\\d+'). Host related rules can use arbitrary strings."
																				},
																				{
																					"key": "log",
																					"value": "crit",
																					"description": "Log level for firewall rule."
																				},
																				{
																					"key": "macro",
																					"value": "string",
																					"description": "Use predefined standard macro."
																				},
																				{
																					"key": "pos",
																					"value": "8248",
																					"description": "Update rule at position <pos>."
																				},
																				{
																					"key": "proto",
																					"value": "string",
																					"description": "IP protocol. You can use protocol names ('tcp'/'udp') or simple numbers, as defined in '/etc/protocols'."
																				},
																				{
																					"key": "source",
																					"value": "string",
																					"description": "Restrict packet source address. This can refer to a single IP address, an IP set ('+ipsetname') or an IP alias definition. You can also specify an address range like '20.34.101.207-201.3.9.99', or a list of IP addresses and networks (entries are separated by comma). Please do not mix IPv4 and IPv6 addresses inside such lists."
																				},
																				{
																					"key": "sport",
																					"value": "string",
																					"description": "Restrict TCP/UDP source port. You can use service names or simple numbers (0-65535), as defined in '/etc/services'. Port ranges can be specified with '\\d+:\\d+', for example '80:85', and you can use comma separated list to match several ports or ranges."
																				},
																				{
																					"key": "type",
																					"value": "forward",
																					"description": "(Required) Rule type."
																				}
																			],
																			"variable": [
																				{
																					"key": "vnet"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "null"
																}
															]
														}
													]
												},
												{
													"name": "options",
													"item": [
														{
															"name": "Get vnet firewall options.",
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/cluster/sdn/vnets/:vnet/firewall/options",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"cluster",
																		"sdn",
																		"vnets",
																		":vnet",
																		"firewall",
																		"options"
																	],
																	"variable": [
																		{
																			"key": "vnet",
																			"value": "string",
																			"description": "(Required) The SDN vnet object identifier."
																		}
																	]
																},
																"description": "Get vnet firewall options."
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/cluster/sdn/vnets/:vnet/firewall/options",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"cluster",
																				"sdn",
																				"vnets",
																				":vnet",
																				"firewall",
																				"options"
																			],
																			"variable": [
																				{
																					"key": "vnet"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"enable\": 0,\n  \"log_level_forward\": \"crit\",\n  \"policy_forward\": \"ACCEPT\"\n}"
																}
															]
														},
														{
															"name": "Set Firewall options.",
															"request": {
																"method": "PUT",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/cluster/sdn/vnets/:vnet/firewall/options?delete=string&digest=string&enable=0&log_level_forward=crit&policy_forward=DROP",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"cluster",
																		"sdn",
																		"vnets",
																		":vnet",
																		"firewall",
																		"options"
																	],
																	"query": [
																		{
																			"key": "delete",
																			"value": "string",
																			"description": "A list of settings you want to delete."
																		},
																		{
																			"key": "digest",
																			"value": "string",
																			"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
																		},
																		{
																			"key": "enable",
																			"value": "0",
																			"description": "Enable/disable firewall rules."
																		},
																		{
																			"key": "log_level_forward",
																			"value": "crit",
																			"description": "Log level for forwarded traffic."
																		},
																		{
																			"key": "policy_forward",
																			"value": "DROP",
																			"description": "Forward policy."
																		}
																	],
																	"variable": [
																		{
																			"key": "vnet",
																			"value": "string",
																			"description": "(Required) The SDN vnet object identifier."
																		}
																	]
																},
																"description": "Set Firewall options."
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "PUT",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/cluster/sdn/vnets/:vnet/firewall/options?delete=string&digest=string&enable=0&log_level_forward=crit&policy_forward=DROP",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"cluster",
																				"sdn",
																				"vnets",
																				":vnet",
																				"firewall",
																				"options"
																			],
																			"query": [
																				{
																					"key": "delete",
																					"value": "string",
																					"description": "A list of settings you want to delete."
																				},
																				{
																					"key": "digest",
																					"value": "string",
																					"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
																				},
																				{
																					"key": "enable",
																					"value": "0",
																					"description": "Enable/disable firewall rules."
																				},
																				{
																					"key": "log_level_forward",
																					"value": "crit",
																					"description": "Log level for forwarded traffic."
																				},
																				{
																					"key": "policy_forward",
																					"value": "DROP",
																					"description": "Forward policy."
																				}
																			],
																			"variable": [
																				{
																					"key": "vnet"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "null"
																}
															]
														}
													]
												},
												{
													"name": "Directory index.",
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/cluster/sdn/vnets/:vnet/firewall",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"cluster",
																"sdn",
																"vnets",
																":vnet",
																"firewall"
															],
															"variable": [
																{
																	"key": "vnet",
																	"value": "string",
																	"description": "(Required) The SDN vnet object identifier."
																}
															]
														},
														"description": "Directory index."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/cluster/sdn/vnets/:vnet/firewall",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"cluster",
																		"sdn",
																		"vnets",
																		":vnet",
																		"firewall"
																	],
																	"variable": [
																		{
																			"key": "vnet"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "[]"
														}
													]
												}
											]
										},
										{
											"name": "subnets",
											"item": [
												{
													"name": "{subnet}",
													"item": [
														{
															"name": "Delete sdn subnet object configuration.",
															"request": {
																"method": "DELETE",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/cluster/sdn/vnets/:vnet/subnets/:subnet?lock-token=string",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"cluster",
																		"sdn",
																		"vnets",
																		":vnet",
																		"subnets",
																		":subnet"
																	],
																	"query": [
																		{
																			"key": "lock-token",
																			"value": "string",
																			"description": "the token for unlocking the global SDN configuration"
																		}
																	],
																	"variable": [
																		{
																			"key": "vnet",
																			"value": "string",
																			"description": "(Required) The SDN vnet object identifier."
																		},
																		{
																			"key": "subnet",
																			"value": "string",
																			"description": "(Required) The SDN subnet object identifier."
																		}
																	]
																},
																"description": "Delete sdn subnet object configuration."
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "DELETE",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/cluster/sdn/vnets/:vnet/subnets/:subnet?lock-token=string",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"cluster",
																				"sdn",
																				"vnets",
																				":vnet",
																				"subnets",
																				":subnet"
																			],
																			"query": [
																				{
																					"key": "lock-token",
																					"value": "string",
																					"description": "the token for unlocking the global SDN configuration"
																				}
																			],
																			"variable": [
																				{
																					"key": "vnet"
																				},
																				{
																					"key": "subnet"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "null"
																}
															]
														},
														{
															"name": "Read sdn subnet configuration.",
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/cluster/sdn/vnets/:vnet/subnets/:subnet?pending=true&running=true",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"cluster",
																		"sdn",
																		"vnets",
																		":vnet",
																		"subnets",
																		":subnet"
																	],
																	"query": [
																		{
																			"key": "pending",
																			"value": "true",
																			"description": "Display pending config."
																		},
																		{
																			"key": "running",
																			"value": "true",
																			"description": "Display running config."
																		}
																	],
																	"variable": [
																		{
																			"key": "vnet",
																			"value": "string",
																			"description": "(Required) The SDN vnet object identifier."
																		},
																		{
																			"key": "subnet",
																			"value": "string",
																			"description": "(Required) The SDN subnet object identifier."
																		}
																	]
																},
																"description": "Read sdn subnet configuration."
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/cluster/sdn/vnets/:vnet/subnets/:subnet?pending=true&running=true",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"cluster",
																				"sdn",
																				"vnets",
																				":vnet",
																				"subnets",
																				":subnet"
																			],
																			"query": [
																				{
																					"key": "pending",
																					"value": "true",
																					"description": "Display pending config."
																				},
																				{
																					"key": "running",
																					"value": "true",
																					"description": "Display running config."
																				}
																			],
																			"variable": [
																				{
																					"key": "vnet"
																				},
																				{
																					"key": "subnet"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{}"
																}
															]
														},
														{
															"name": "Update sdn subnet object configuration.",
															"request": {
																"method": "PUT",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/cluster/sdn/vnets/:vnet/subnets/:subnet?delete=string&dhcp-dns-server=string&digest=string&dnszoneprefix=string&gateway=string&lock-token=string&snat=true",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"cluster",
																		"sdn",
																		"vnets",
																		":vnet",
																		"subnets",
																		":subnet"
																	],
																	"query": [
																		{
																			"key": "delete",
																			"value": "string",
																			"description": "A list of settings you want to delete."
																		},
																		{
																			"key": "dhcp-dns-server",
																			"value": "string",
																			"description": "IP address for the DNS server"
																		},
																		{
																			"key": "digest",
																			"value": "string",
																			"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
																		},
																		{
																			"key": "dnszoneprefix",
																			"value": "string",
																			"description": "dns domain zone prefix  ex: 'adm' -> <hostname>.adm.mydomain.com"
																		},
																		{
																			"key": "gateway",
																			"value": "string",
																			"description": "Subnet Gateway: Will be assign on vnet for layer3 zones"
																		},
																		{
																			"key": "lock-token",
																			"value": "string",
																			"description": "the token for unlocking the global SDN configuration"
																		},
																		{
																			"key": "snat",
																			"value": "true",
																			"description": "enable masquerade for this subnet if pve-firewall"
																		}
																	],
																	"variable": [
																		{
																			"key": "vnet",
																			"value": "string",
																			"description": "associated vnet"
																		},
																		{
																			"key": "subnet",
																			"value": "string",
																			"description": "(Required) The SDN subnet object identifier."
																		}
																	]
																},
																"description": "Update sdn subnet object configuration."
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "PUT",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/cluster/sdn/vnets/:vnet/subnets/:subnet?delete=string&dhcp-dns-server=string&digest=string&dnszoneprefix=string&gateway=string&lock-token=string&snat=true",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"cluster",
																				"sdn",
																				"vnets",
																				":vnet",
																				"subnets",
																				":subnet"
																			],
																			"query": [
																				{
																					"key": "delete",
																					"value": "string",
																					"description": "A list of settings you want to delete."
																				},
																				{
																					"key": "dhcp-dns-server",
																					"value": "string",
																					"description": "IP address for the DNS server"
																				},
																				{
																					"key": "digest",
																					"value": "string",
																					"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
																				},
																				{
																					"key": "dnszoneprefix",
																					"value": "string",
																					"description": "dns domain zone prefix  ex: 'adm' -> <hostname>.adm.mydomain.com"
																				},
																				{
																					"key": "gateway",
																					"value": "string",
																					"description": "Subnet Gateway: Will be assign on vnet for layer3 zones"
																				},
																				{
																					"key": "lock-token",
																					"value": "string",
																					"description": "the token for unlocking the global SDN configuration"
																				},
																				{
																					"key": "snat",
																					"value": "true",
																					"description": "enable masquerade for this subnet if pve-firewall"
																				}
																			],
																			"variable": [
																				{
																					"key": "vnet"
																				},
																				{
																					"key": "subnet"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "null"
																}
															]
														}
													]
												},
												{
													"name": "SDN subnets index.",
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/cluster/sdn/vnets/:vnet/subnets?pending=true&running=true",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"cluster",
																"sdn",
																"vnets",
																":vnet",
																"subnets"
															],
															"query": [
																{
																	"key": "pending",
																	"value": "true",
																	"description": "Display pending config."
																},
																{
																	"key": "running",
																	"value": "true",
																	"description": "Display running config."
																}
															],
															"variable": [
																{
																	"key": "vnet",
																	"value": "string",
																	"description": "(Required) The SDN vnet object identifier."
																}
															]
														},
														"description": "SDN subnets index."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/cluster/sdn/vnets/:vnet/subnets?pending=true&running=true",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"cluster",
																		"sdn",
																		"vnets",
																		":vnet",
																		"subnets"
																	],
																	"query": [
																		{
																			"key": "pending",
																			"value": "true",
																			"description": "Display pending config."
																		},
																		{
																			"key": "running",
																			"value": "true",
																			"description": "Display running config."
																		}
																	],
																	"variable": [
																		{
																			"key": "vnet"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "[]"
														}
													]
												},
												{
													"name": "Create a new sdn subnet object.",
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/cluster/sdn/vnets/:vnet/subnets?dhcp-dns-server=string&dnszoneprefix=string&gateway=string&lock-token=string&snat=true&subnet=string&type=subnet",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"cluster",
																"sdn",
																"vnets",
																":vnet",
																"subnets"
															],
															"query": [
																{
																	"key": "dhcp-dns-server",
																	"value": "string",
																	"description": "IP address for the DNS server"
																},
																{
																	"key": "dnszoneprefix",
																	"value": "string",
																	"description": "dns domain zone prefix  ex: 'adm' -> <hostname>.adm.mydomain.com"
																},
																{
																	"key": "gateway",
																	"value": "string",
																	"description": "Subnet Gateway: Will be assign on vnet for layer3 zones"
																},
																{
																	"key": "lock-token",
																	"value": "string",
																	"description": "the token for unlocking the global SDN configuration"
																},
																{
																	"key": "snat",
																	"value": "true",
																	"description": "enable masquerade for this subnet if pve-firewall"
																},
																{
																	"key": "subnet",
																	"value": "string",
																	"description": "(Required) The SDN subnet object identifier."
																},
																{
																	"key": "type",
																	"value": "subnet",
																	"description": "(Required) "
																}
															],
															"variable": [
																{
																	"key": "vnet",
																	"value": "string",
																	"description": "(Required) associated vnet"
																}
															]
														},
														"description": "Create a new sdn subnet object."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/cluster/sdn/vnets/:vnet/subnets?dhcp-dns-server=string&dnszoneprefix=string&gateway=string&lock-token=string&snat=true&subnet=string&type=subnet",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"cluster",
																		"sdn",
																		"vnets",
																		":vnet",
																		"subnets"
																	],
																	"query": [
																		{
																			"key": "dhcp-dns-server",
																			"value": "string",
																			"description": "IP address for the DNS server"
																		},
																		{
																			"key": "dnszoneprefix",
																			"value": "string",
																			"description": "dns domain zone prefix  ex: 'adm' -> <hostname>.adm.mydomain.com"
																		},
																		{
																			"key": "gateway",
																			"value": "string",
																			"description": "Subnet Gateway: Will be assign on vnet for layer3 zones"
																		},
																		{
																			"key": "lock-token",
																			"value": "string",
																			"description": "the token for unlocking the global SDN configuration"
																		},
																		{
																			"key": "snat",
																			"value": "true",
																			"description": "enable masquerade for this subnet if pve-firewall"
																		},
																		{
																			"key": "subnet",
																			"value": "string",
																			"description": "(Required) The SDN subnet object identifier."
																		},
																		{
																			"key": "type",
																			"value": "subnet",
																			"description": "(Required) "
																		}
																	],
																	"variable": [
																		{
																			"key": "vnet"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "null"
														}
													]
												}
											]
										},
										{
											"name": "ips",
											"item": [
												{
													"name": "Delete IP Mappings in a VNet",
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/cluster/sdn/vnets/:vnet/ips?ip=string&mac=string&zone=string",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"cluster",
																"sdn",
																"vnets",
																":vnet",
																"ips"
															],
															"query": [
																{
																	"key": "ip",
																	"value": "string",
																	"description": "(Required) The IP address to delete"
																},
																{
																	"key": "mac",
																	"value": "string",
																	"description": "Unicast MAC address."
																},
																{
																	"key": "zone",
																	"value": "string",
																	"description": "(Required) The SDN zone object identifier."
																}
															],
															"variable": [
																{
																	"key": "vnet",
																	"value": "string",
																	"description": "(Required) The SDN vnet object identifier."
																}
															]
														},
														"description": "Delete IP Mappings in a VNet"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/cluster/sdn/vnets/:vnet/ips?ip=string&mac=string&zone=string",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"cluster",
																		"sdn",
																		"vnets",
																		":vnet",
																		"ips"
																	],
																	"query": [
																		{
																			"key": "ip",
																			"value": "string",
																			"description": "(Required) The IP address to delete"
																		},
																		{
																			"key": "mac",
																			"value": "string",
																			"description": "Unicast MAC address."
																		},
																		{
																			"key": "zone",
																			"value": "string",
																			"description": "(Required) The SDN zone object identifier."
																		}
																	],
																	"variable": [
																		{
																			"key": "vnet"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "null"
														}
													]
												},
												{
													"name": "Create IP Mapping in a VNet",
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/cluster/sdn/vnets/:vnet/ips?ip=string&mac=string&zone=string",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"cluster",
																"sdn",
																"vnets",
																":vnet",
																"ips"
															],
															"query": [
																{
																	"key": "ip",
																	"value": "string",
																	"description": "(Required) The IP address to associate with the given MAC address"
																},
																{
																	"key": "mac",
																	"value": "string",
																	"description": "Unicast MAC address."
																},
																{
																	"key": "zone",
																	"value": "string",
																	"description": "(Required) The SDN zone object identifier."
																}
															],
															"variable": [
																{
																	"key": "vnet",
																	"value": "string",
																	"description": "(Required) The SDN vnet object identifier."
																}
															]
														},
														"description": "Create IP Mapping in a VNet"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/cluster/sdn/vnets/:vnet/ips?ip=string&mac=string&zone=string",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"cluster",
																		"sdn",
																		"vnets",
																		":vnet",
																		"ips"
																	],
																	"query": [
																		{
																			"key": "ip",
																			"value": "string",
																			"description": "(Required) The IP address to associate with the given MAC address"
																		},
																		{
																			"key": "mac",
																			"value": "string",
																			"description": "Unicast MAC address."
																		},
																		{
																			"key": "zone",
																			"value": "string",
																			"description": "(Required) The SDN zone object identifier."
																		}
																	],
																	"variable": [
																		{
																			"key": "vnet"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "null"
														}
													]
												},
												{
													"name": "Update IP Mapping in a VNet",
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/cluster/sdn/vnets/:vnet/ips?ip=string&mac=string&vmid=358786328&zone=string",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"cluster",
																"sdn",
																"vnets",
																":vnet",
																"ips"
															],
															"query": [
																{
																	"key": "ip",
																	"value": "string",
																	"description": "(Required) The IP address to associate with the given MAC address"
																},
																{
																	"key": "mac",
																	"value": "string",
																	"description": "Unicast MAC address."
																},
																{
																	"key": "vmid",
																	"value": "358786328",
																	"description": "The (unique) ID of the VM."
																},
																{
																	"key": "zone",
																	"value": "string",
																	"description": "(Required) The SDN zone object identifier."
																}
															],
															"variable": [
																{
																	"key": "vnet",
																	"value": "string",
																	"description": "(Required) The SDN vnet object identifier."
																}
															]
														},
														"description": "Update IP Mapping in a VNet"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/cluster/sdn/vnets/:vnet/ips?ip=string&mac=string&vmid=358786328&zone=string",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"cluster",
																		"sdn",
																		"vnets",
																		":vnet",
																		"ips"
																	],
																	"query": [
																		{
																			"key": "ip",
																			"value": "string",
																			"description": "(Required) The IP address to associate with the given MAC address"
																		},
																		{
																			"key": "mac",
																			"value": "string",
																			"description": "Unicast MAC address."
																		},
																		{
																			"key": "vmid",
																			"value": "358786328",
																			"description": "The (unique) ID of the VM."
																		},
																		{
																			"key": "zone",
																			"value": "string",
																			"description": "(Required) The SDN zone object identifier."
																		}
																	],
																	"variable": [
																		{
																			"key": "vnet"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "null"
														}
													]
												}
											]
										},
										{
											"name": "Delete sdn vnet object configuration.",
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/sdn/vnets/:vnet?lock-token=string",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"sdn",
														"vnets",
														":vnet"
													],
													"query": [
														{
															"key": "lock-token",
															"value": "string",
															"description": "the token for unlocking the global SDN configuration"
														}
													],
													"variable": [
														{
															"key": "vnet",
															"value": "string",
															"description": "(Required) The SDN vnet object identifier."
														}
													]
												},
												"description": "Delete sdn vnet object configuration."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/cluster/sdn/vnets/:vnet?lock-token=string",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"cluster",
																"sdn",
																"vnets",
																":vnet"
															],
															"query": [
																{
																	"key": "lock-token",
																	"value": "string",
																	"description": "the token for unlocking the global SDN configuration"
																}
															],
															"variable": [
																{
																	"key": "vnet"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "null"
												}
											]
										},
										{
											"name": "Read sdn vnet configuration.",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/sdn/vnets/:vnet?pending=true&running=true",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"sdn",
														"vnets",
														":vnet"
													],
													"query": [
														{
															"key": "pending",
															"value": "true",
															"description": "Display pending config."
														},
														{
															"key": "running",
															"value": "true",
															"description": "Display running config."
														}
													],
													"variable": [
														{
															"key": "vnet",
															"value": "string",
															"description": "(Required) The SDN vnet object identifier."
														}
													]
												},
												"description": "Read sdn vnet configuration."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/cluster/sdn/vnets/:vnet?pending=true&running=true",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"cluster",
																"sdn",
																"vnets",
																":vnet"
															],
															"query": [
																{
																	"key": "pending",
																	"value": "true",
																	"description": "Display pending config."
																},
																{
																	"key": "running",
																	"value": "true",
																	"description": "Display running config."
																}
															],
															"variable": [
																{
																	"key": "vnet"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "null"
												}
											]
										},
										{
											"name": "Update sdn vnet object configuration.",
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/sdn/vnets/:vnet?alias=&delete=string&digest=string&isolate-ports=true&lock-token=string&tag=3214745&vlanaware=true&zone=string",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"sdn",
														"vnets",
														":vnet"
													],
													"query": [
														{
															"key": "alias",
															"value": "",
															"description": "Alias name of the VNet."
														},
														{
															"key": "delete",
															"value": "string",
															"description": "A list of settings you want to delete."
														},
														{
															"key": "digest",
															"value": "string",
															"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
														},
														{
															"key": "isolate-ports",
															"value": "true",
															"description": "If true, sets the isolated property for all interfaces on the bridge of this VNet."
														},
														{
															"key": "lock-token",
															"value": "string",
															"description": "the token for unlocking the global SDN configuration"
														},
														{
															"key": "tag",
															"value": "3214745",
															"description": "VLAN Tag (for VLAN or QinQ zones) or VXLAN VNI (for VXLAN or EVPN zones)."
														},
														{
															"key": "vlanaware",
															"value": "true",
															"description": "Allow VLANs to pass through this vnet."
														},
														{
															"key": "zone",
															"value": "string",
															"description": "Name of the zone this VNet belongs to."
														}
													],
													"variable": [
														{
															"key": "vnet",
															"value": "string",
															"description": "(Required) The SDN vnet object identifier."
														}
													]
												},
												"description": "Update sdn vnet object configuration."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/cluster/sdn/vnets/:vnet?alias=&delete=string&digest=string&isolate-ports=true&lock-token=string&tag=3214745&vlanaware=true&zone=string",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"cluster",
																"sdn",
																"vnets",
																":vnet"
															],
															"query": [
																{
																	"key": "alias",
																	"value": "",
																	"description": "Alias name of the VNet."
																},
																{
																	"key": "delete",
																	"value": "string",
																	"description": "A list of settings you want to delete."
																},
																{
																	"key": "digest",
																	"value": "string",
																	"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
																},
																{
																	"key": "isolate-ports",
																	"value": "true",
																	"description": "If true, sets the isolated property for all interfaces on the bridge of this VNet."
																},
																{
																	"key": "lock-token",
																	"value": "string",
																	"description": "the token for unlocking the global SDN configuration"
																},
																{
																	"key": "tag",
																	"value": "3214745",
																	"description": "VLAN Tag (for VLAN or QinQ zones) or VXLAN VNI (for VXLAN or EVPN zones)."
																},
																{
																	"key": "vlanaware",
																	"value": "true",
																	"description": "Allow VLANs to pass through this vnet."
																},
																{
																	"key": "zone",
																	"value": "string",
																	"description": "Name of the zone this VNet belongs to."
																}
															],
															"variable": [
																{
																	"key": "vnet"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "null"
												}
											]
										}
									]
								},
								{
									"name": "SDN vnets index.",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/cluster/sdn/vnets?pending=true&running=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cluster",
												"sdn",
												"vnets"
											],
											"query": [
												{
													"key": "pending",
													"value": "true",
													"description": "Display pending config."
												},
												{
													"key": "running",
													"value": "true",
													"description": "Display running config."
												}
											]
										},
										"description": "SDN vnets index."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/sdn/vnets?pending=true&running=true",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"sdn",
														"vnets"
													],
													"query": [
														{
															"key": "pending",
															"value": "true",
															"description": "Display pending config."
														},
														{
															"key": "running",
															"value": "true",
															"description": "Display running config."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "null"
										}
									]
								},
								{
									"name": "Create a new sdn vnet object.",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/cluster/sdn/vnets?alias=&isolate-ports=true&lock-token=string&tag=3214745&type=vnet&vlanaware=true&vnet=string&zone=string",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cluster",
												"sdn",
												"vnets"
											],
											"query": [
												{
													"key": "alias",
													"value": "",
													"description": "Alias name of the VNet."
												},
												{
													"key": "isolate-ports",
													"value": "true",
													"description": "If true, sets the isolated property for all interfaces on the bridge of this VNet."
												},
												{
													"key": "lock-token",
													"value": "string",
													"description": "the token for unlocking the global SDN configuration"
												},
												{
													"key": "tag",
													"value": "3214745",
													"description": "VLAN Tag (for VLAN or QinQ zones) or VXLAN VNI (for VXLAN or EVPN zones)."
												},
												{
													"key": "type",
													"value": "vnet",
													"description": "Type of the VNet."
												},
												{
													"key": "vlanaware",
													"value": "true",
													"description": "Allow VLANs to pass through this vnet."
												},
												{
													"key": "vnet",
													"value": "string",
													"description": "(Required) The SDN vnet object identifier."
												},
												{
													"key": "zone",
													"value": "string",
													"description": "(Required) Name of the zone this VNet belongs to."
												}
											]
										},
										"description": "Create a new sdn vnet object."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/sdn/vnets?alias=&isolate-ports=true&lock-token=string&tag=3214745&type=vnet&vlanaware=true&vnet=string&zone=string",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"sdn",
														"vnets"
													],
													"query": [
														{
															"key": "alias",
															"value": "",
															"description": "Alias name of the VNet."
														},
														{
															"key": "isolate-ports",
															"value": "true",
															"description": "If true, sets the isolated property for all interfaces on the bridge of this VNet."
														},
														{
															"key": "lock-token",
															"value": "string",
															"description": "the token for unlocking the global SDN configuration"
														},
														{
															"key": "tag",
															"value": "3214745",
															"description": "VLAN Tag (for VLAN or QinQ zones) or VXLAN VNI (for VXLAN or EVPN zones)."
														},
														{
															"key": "type",
															"value": "vnet",
															"description": "Type of the VNet."
														},
														{
															"key": "vlanaware",
															"value": "true",
															"description": "Allow VLANs to pass through this vnet."
														},
														{
															"key": "vnet",
															"value": "string",
															"description": "(Required) The SDN vnet object identifier."
														},
														{
															"key": "zone",
															"value": "string",
															"description": "(Required) Name of the zone this VNet belongs to."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "null"
										}
									]
								}
							]
						},
						{
							"name": "zones",
							"item": [
								{
									"name": "{zone}",
									"item": [
										{
											"name": "Delete sdn zone object configuration.",
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/sdn/zones/:zone?lock-token=string",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"sdn",
														"zones",
														":zone"
													],
													"query": [
														{
															"key": "lock-token",
															"value": "string",
															"description": "the token for unlocking the global SDN configuration"
														}
													],
													"variable": [
														{
															"key": "zone",
															"value": "string",
															"description": "(Required) The SDN zone object identifier."
														}
													]
												},
												"description": "Delete sdn zone object configuration."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/cluster/sdn/zones/:zone?lock-token=string",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"cluster",
																"sdn",
																"zones",
																":zone"
															],
															"query": [
																{
																	"key": "lock-token",
																	"value": "string",
																	"description": "the token for unlocking the global SDN configuration"
																}
															],
															"variable": [
																{
																	"key": "zone"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "null"
												}
											]
										},
										{
											"name": "Read sdn zone configuration.",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/sdn/zones/:zone?pending=true&running=true",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"sdn",
														"zones",
														":zone"
													],
													"query": [
														{
															"key": "pending",
															"value": "true",
															"description": "Display pending config."
														},
														{
															"key": "running",
															"value": "true",
															"description": "Display running config."
														}
													],
													"variable": [
														{
															"key": "zone",
															"value": "string",
															"description": "(Required) The SDN zone object identifier."
														}
													]
												},
												"description": "Read sdn zone configuration."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/cluster/sdn/zones/:zone?pending=true&running=true",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"cluster",
																"sdn",
																"zones",
																":zone"
															],
															"query": [
																{
																	"key": "pending",
																	"value": "true",
																	"description": "Display pending config."
																},
																{
																	"key": "running",
																	"value": "true",
																	"description": "Display running config."
																}
															],
															"variable": [
																{
																	"key": "zone"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"advertise-subnets\": true,\n  \"bridge\": \"string\",\n  \"bridge-disable-mac-learning\": true,\n  \"controller\": \"string\",\n  \"dhcp\": \"dnsmasq\",\n  \"digest\": \"string\",\n  \"disable-arp-nd-suppression\": true,\n  \"dns\": \"string\",\n  \"dnszone\": \"string\",\n  \"exitnodes\": \"string\",\n  \"exitnodes-local-routing\": false,\n  \"exitnodes-primary\": \"string\",\n  \"ipam\": \"string\",\n  \"mac\": \"string\",\n  \"mtu\": 7298,\n  \"nodes\": \"string\",\n  \"peers\": \"string\",\n  \"pending\": {\n    \"advertise-subnets\": true,\n    \"bridge\": \"string\",\n    \"bridge-disable-mac-learning\": false,\n    \"controller\": \"string\",\n    \"dhcp\": \"dnsmasq\",\n    \"disable-arp-nd-suppression\": true,\n    \"dns\": \"string\",\n    \"dnszone\": \"string\",\n    \"exitnodes\": \"string\",\n    \"exitnodes-local-routing\": true,\n    \"exitnodes-primary\": \"string\",\n    \"ipam\": \"string\",\n    \"mac\": \"string\",\n    \"mtu\": 3080,\n    \"nodes\": \"string\",\n    \"peers\": \"string\",\n    \"reversedns\": \"string\",\n    \"rt-import\": \"string\",\n    \"tag\": 5323,\n    \"vlan-protocol\": \"802.1q\",\n    \"vrf-vxlan\": 8064414,\n    \"vxlan-port\": 4789\n  },\n  \"reversedns\": \"string\",\n  \"rt-import\": \"string\",\n  \"state\": \"new\",\n  \"tag\": 5635,\n  \"type\": \"qinq\",\n  \"vlan-protocol\": \"802.1q\",\n  \"vrf-vxlan\": 2774028,\n  \"vxlan-port\": 4789,\n  \"zone\": \"string\"\n}"
												}
											]
										},
										{
											"name": "Update sdn zone object configuration.",
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/sdn/zones/:zone?advertise-subnets=true&bridge=string&bridge-disable-mac-learning=true&controller=string&delete=string&dhcp=dnsmasq&digest=string&disable-arp-nd-suppression=true&dns=string&dnszone=string&dp-id=5752&exitnodes=string&exitnodes-local-routing=true&exitnodes-primary=string&fabric=string&ipam=string&lock-token=string&mac=string&mtu=5752&nodes=string&peers=string&reversedns=string&rt-import=string&tag=8248&vlan-protocol=802.1q&vrf-vxlan=3214745&vxlan-port=4789",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"sdn",
														"zones",
														":zone"
													],
													"query": [
														{
															"key": "advertise-subnets",
															"value": "true",
															"description": "Advertise IP prefixes (Type-5 routes) instead of MAC/IP pairs (Type-2 routes)."
														},
														{
															"key": "bridge",
															"value": "string",
															"description": "The bridge for which VLANs should be managed."
														},
														{
															"key": "bridge-disable-mac-learning",
															"value": "true",
															"description": "Disable auto mac learning."
														},
														{
															"key": "controller",
															"value": "string",
															"description": "Controller for this zone."
														},
														{
															"key": "delete",
															"value": "string",
															"description": "A list of settings you want to delete."
														},
														{
															"key": "dhcp",
															"value": "dnsmasq",
															"description": "Type of the DHCP backend for this zone"
														},
														{
															"key": "digest",
															"value": "string",
															"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
														},
														{
															"key": "disable-arp-nd-suppression",
															"value": "true",
															"description": "Suppress IPv4 ARP && IPv6 Neighbour Discovery messages."
														},
														{
															"key": "dns",
															"value": "string",
															"description": "dns api server"
														},
														{
															"key": "dnszone",
															"value": "string",
															"description": "dns domain zone  ex: mydomain.com"
														},
														{
															"key": "dp-id",
															"value": "5752",
															"description": "Faucet dataplane id"
														},
														{
															"key": "exitnodes",
															"value": "string",
															"description": "List of cluster node names."
														},
														{
															"key": "exitnodes-local-routing",
															"value": "true",
															"description": "Allow exitnodes to connect to EVPN guests."
														},
														{
															"key": "exitnodes-primary",
															"value": "string",
															"description": "Force traffic through this exitnode first."
														},
														{
															"key": "fabric",
															"value": "string",
															"description": "SDN fabric to use as underlay for this VXLAN zone."
														},
														{
															"key": "ipam",
															"value": "string",
															"description": "use a specific ipam"
														},
														{
															"key": "lock-token",
															"value": "string",
															"description": "the token for unlocking the global SDN configuration"
														},
														{
															"key": "mac",
															"value": "string",
															"description": "Anycast logical router mac address."
														},
														{
															"key": "mtu",
															"value": "5752",
															"description": "MTU of the zone, will be used for the created VNet bridges."
														},
														{
															"key": "nodes",
															"value": "string",
															"description": "List of cluster node names."
														},
														{
															"key": "peers",
															"value": "string",
															"description": "Comma-separated list of peers, that are part of the VXLAN zone. Usually the IPs of the nodes."
														},
														{
															"key": "reversedns",
															"value": "string",
															"description": "reverse dns api server"
														},
														{
															"key": "rt-import",
															"value": "string",
															"description": "List of Route Targets that should be imported into the VRF of the zone."
														},
														{
															"key": "tag",
															"value": "8248",
															"description": "Service-VLAN Tag (outer VLAN)"
														},
														{
															"key": "vlan-protocol",
															"value": "802.1q",
															"description": "Which VLAN protocol should be used for the creation of the QinQ zone."
														},
														{
															"key": "vrf-vxlan",
															"value": "3214745",
															"description": "VNI for the zone VRF."
														},
														{
															"key": "vxlan-port",
															"value": "4789",
															"description": "UDP port that should be used for the VXLAN tunnel (default 4789)."
														}
													],
													"variable": [
														{
															"key": "zone",
															"value": "string",
															"description": "(Required) The SDN zone object identifier."
														}
													]
												},
												"description": "Update sdn zone object configuration."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/cluster/sdn/zones/:zone?advertise-subnets=true&bridge=string&bridge-disable-mac-learning=true&controller=string&delete=string&dhcp=dnsmasq&digest=string&disable-arp-nd-suppression=true&dns=string&dnszone=string&dp-id=5752&exitnodes=string&exitnodes-local-routing=true&exitnodes-primary=string&fabric=string&ipam=string&lock-token=string&mac=string&mtu=5752&nodes=string&peers=string&reversedns=string&rt-import=string&tag=8248&vlan-protocol=802.1q&vrf-vxlan=3214745&vxlan-port=4789",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"cluster",
																"sdn",
																"zones",
																":zone"
															],
															"query": [
																{
																	"key": "advertise-subnets",
																	"value": "true",
																	"description": "Advertise IP prefixes (Type-5 routes) instead of MAC/IP pairs (Type-2 routes)."
																},
																{
																	"key": "bridge",
																	"value": "string",
																	"description": "The bridge for which VLANs should be managed."
																},
																{
																	"key": "bridge-disable-mac-learning",
																	"value": "true",
																	"description": "Disable auto mac learning."
																},
																{
																	"key": "controller",
																	"value": "string",
																	"description": "Controller for this zone."
																},
																{
																	"key": "delete",
																	"value": "string",
																	"description": "A list of settings you want to delete."
																},
																{
																	"key": "dhcp",
																	"value": "dnsmasq",
																	"description": "Type of the DHCP backend for this zone"
																},
																{
																	"key": "digest",
																	"value": "string",
																	"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
																},
																{
																	"key": "disable-arp-nd-suppression",
																	"value": "true",
																	"description": "Suppress IPv4 ARP && IPv6 Neighbour Discovery messages."
																},
																{
																	"key": "dns",
																	"value": "string",
																	"description": "dns api server"
																},
																{
																	"key": "dnszone",
																	"value": "string",
																	"description": "dns domain zone  ex: mydomain.com"
																},
																{
																	"key": "dp-id",
																	"value": "5752",
																	"description": "Faucet dataplane id"
																},
																{
																	"key": "exitnodes",
																	"value": "string",
																	"description": "List of cluster node names."
																},
																{
																	"key": "exitnodes-local-routing",
																	"value": "true",
																	"description": "Allow exitnodes to connect to EVPN guests."
																},
																{
																	"key": "exitnodes-primary",
																	"value": "string",
																	"description": "Force traffic through this exitnode first."
																},
																{
																	"key": "fabric",
																	"value": "string",
																	"description": "SDN fabric to use as underlay for this VXLAN zone."
																},
																{
																	"key": "ipam",
																	"value": "string",
																	"description": "use a specific ipam"
																},
																{
																	"key": "lock-token",
																	"value": "string",
																	"description": "the token for unlocking the global SDN configuration"
																},
																{
																	"key": "mac",
																	"value": "string",
																	"description": "Anycast logical router mac address."
																},
																{
																	"key": "mtu",
																	"value": "5752",
																	"description": "MTU of the zone, will be used for the created VNet bridges."
																},
																{
																	"key": "nodes",
																	"value": "string",
																	"description": "List of cluster node names."
																},
																{
																	"key": "peers",
																	"value": "string",
																	"description": "Comma-separated list of peers, that are part of the VXLAN zone. Usually the IPs of the nodes."
																},
																{
																	"key": "reversedns",
																	"value": "string",
																	"description": "reverse dns api server"
																},
																{
																	"key": "rt-import",
																	"value": "string",
																	"description": "List of Route Targets that should be imported into the VRF of the zone."
																},
																{
																	"key": "tag",
																	"value": "8248",
																	"description": "Service-VLAN Tag (outer VLAN)"
																},
																{
																	"key": "vlan-protocol",
																	"value": "802.1q",
																	"description": "Which VLAN protocol should be used for the creation of the QinQ zone."
																},
																{
																	"key": "vrf-vxlan",
																	"value": "3214745",
																	"description": "VNI for the zone VRF."
																},
																{
																	"key": "vxlan-port",
																	"value": "4789",
																	"description": "UDP port that should be used for the VXLAN tunnel (default 4789)."
																}
															],
															"variable": [
																{
																	"key": "zone"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "null"
												}
											]
										}
									]
								},
								{
									"name": "SDN zones index.",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/cluster/sdn/zones?pending=true&running=true&type=qinq",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cluster",
												"sdn",
												"zones"
											],
											"query": [
												{
													"key": "pending",
													"value": "true",
													"description": "Display pending config."
												},
												{
													"key": "running",
													"value": "true",
													"description": "Display running config."
												},
												{
													"key": "type",
													"value": "qinq",
													"description": "Only list SDN zones of specific type"
												}
											]
										},
										"description": "SDN zones index."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/sdn/zones?pending=true&running=true&type=qinq",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"sdn",
														"zones"
													],
													"query": [
														{
															"key": "pending",
															"value": "true",
															"description": "Display pending config."
														},
														{
															"key": "running",
															"value": "true",
															"description": "Display running config."
														},
														{
															"key": "type",
															"value": "qinq",
															"description": "Only list SDN zones of specific type"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"advertise-subnets\": false,\n    \"bridge\": \"string\",\n    \"bridge-disable-mac-learning\": false,\n    \"controller\": \"string\",\n    \"dhcp\": \"dnsmasq\",\n    \"digest\": \"string\",\n    \"disable-arp-nd-suppression\": false,\n    \"dns\": \"string\",\n    \"dnszone\": \"string\",\n    \"exitnodes\": \"string\",\n    \"exitnodes-local-routing\": false,\n    \"exitnodes-primary\": \"string\",\n    \"ipam\": \"string\",\n    \"mac\": \"string\",\n    \"mtu\": 8057,\n    \"nodes\": \"string\",\n    \"peers\": \"string\",\n    \"pending\": {\n      \"advertise-subnets\": true,\n      \"bridge\": \"string\",\n      \"bridge-disable-mac-learning\": false,\n      \"controller\": \"string\",\n      \"dhcp\": \"dnsmasq\",\n      \"disable-arp-nd-suppression\": false,\n      \"dns\": \"string\",\n      \"dnszone\": \"string\",\n      \"exitnodes\": \"string\",\n      \"exitnodes-local-routing\": false,\n      \"exitnodes-primary\": \"string\",\n      \"ipam\": \"string\",\n      \"mac\": \"string\",\n      \"mtu\": 3109,\n      \"nodes\": \"string\",\n      \"peers\": \"string\",\n      \"reversedns\": \"string\",\n      \"rt-import\": \"string\",\n      \"tag\": 410,\n      \"vlan-protocol\": \"802.1q\",\n      \"vrf-vxlan\": 14459213,\n      \"vxlan-port\": 4789\n    },\n    \"reversedns\": \"string\",\n    \"rt-import\": \"string\",\n    \"state\": \"changed\",\n    \"tag\": 1282,\n    \"type\": \"vxlan\",\n    \"vlan-protocol\": \"802.1q\",\n    \"vrf-vxlan\": 12912304,\n    \"vxlan-port\": 4789,\n    \"zone\": \"string\"\n  },\n  {\n    \"advertise-subnets\": true,\n    \"bridge\": \"string\",\n    \"bridge-disable-mac-learning\": false,\n    \"controller\": \"string\",\n    \"dhcp\": \"dnsmasq\",\n    \"digest\": \"string\",\n    \"disable-arp-nd-suppression\": true,\n    \"dns\": \"string\",\n    \"dnszone\": \"string\",\n    \"exitnodes\": \"string\",\n    \"exitnodes-local-routing\": true,\n    \"exitnodes-primary\": \"string\",\n    \"ipam\": \"string\",\n    \"mac\": \"string\",\n    \"mtu\": 3056,\n    \"nodes\": \"string\",\n    \"peers\": \"string\",\n    \"pending\": {\n      \"advertise-subnets\": true,\n      \"bridge\": \"string\",\n      \"bridge-disable-mac-learning\": true,\n      \"controller\": \"string\",\n      \"dhcp\": \"dnsmasq\",\n      \"disable-arp-nd-suppression\": false,\n      \"dns\": \"string\",\n      \"dnszone\": \"string\",\n      \"exitnodes\": \"string\",\n      \"exitnodes-local-routing\": true,\n      \"exitnodes-primary\": \"string\",\n      \"ipam\": \"string\",\n      \"mac\": \"string\",\n      \"mtu\": 1733,\n      \"nodes\": \"string\",\n      \"peers\": \"string\",\n      \"reversedns\": \"string\",\n      \"rt-import\": \"string\",\n      \"tag\": 7733,\n      \"vlan-protocol\": \"802.1q\",\n      \"vrf-vxlan\": 3428955,\n      \"vxlan-port\": 4789\n    },\n    \"reversedns\": \"string\",\n    \"rt-import\": \"string\",\n    \"state\": \"deleted\",\n    \"tag\": 2573,\n    \"type\": \"faucet\",\n    \"vlan-protocol\": \"802.1q\",\n    \"vrf-vxlan\": 14922754,\n    \"vxlan-port\": 4789,\n    \"zone\": \"string\"\n  }\n]"
										}
									]
								},
								{
									"name": "Create a new sdn zone object.",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/cluster/sdn/zones?advertise-subnets=true&bridge=string&bridge-disable-mac-learning=true&controller=string&dhcp=dnsmasq&disable-arp-nd-suppression=true&dns=string&dnszone=string&dp-id=5752&exitnodes=string&exitnodes-local-routing=true&exitnodes-primary=string&fabric=string&ipam=string&lock-token=string&mac=string&mtu=5752&nodes=string&peers=string&reversedns=string&rt-import=string&tag=8248&type=qinq&vlan-protocol=802.1q&vrf-vxlan=3214745&vxlan-port=4789&zone=string",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cluster",
												"sdn",
												"zones"
											],
											"query": [
												{
													"key": "advertise-subnets",
													"value": "true",
													"description": "Advertise IP prefixes (Type-5 routes) instead of MAC/IP pairs (Type-2 routes)."
												},
												{
													"key": "bridge",
													"value": "string",
													"description": "The bridge for which VLANs should be managed."
												},
												{
													"key": "bridge-disable-mac-learning",
													"value": "true",
													"description": "Disable auto mac learning."
												},
												{
													"key": "controller",
													"value": "string",
													"description": "Controller for this zone."
												},
												{
													"key": "dhcp",
													"value": "dnsmasq",
													"description": "Type of the DHCP backend for this zone"
												},
												{
													"key": "disable-arp-nd-suppression",
													"value": "true",
													"description": "Suppress IPv4 ARP && IPv6 Neighbour Discovery messages."
												},
												{
													"key": "dns",
													"value": "string",
													"description": "dns api server"
												},
												{
													"key": "dnszone",
													"value": "string",
													"description": "dns domain zone  ex: mydomain.com"
												},
												{
													"key": "dp-id",
													"value": "5752",
													"description": "Faucet dataplane id"
												},
												{
													"key": "exitnodes",
													"value": "string",
													"description": "List of cluster node names."
												},
												{
													"key": "exitnodes-local-routing",
													"value": "true",
													"description": "Allow exitnodes to connect to EVPN guests."
												},
												{
													"key": "exitnodes-primary",
													"value": "string",
													"description": "Force traffic through this exitnode first."
												},
												{
													"key": "fabric",
													"value": "string",
													"description": "SDN fabric to use as underlay for this VXLAN zone."
												},
												{
													"key": "ipam",
													"value": "string",
													"description": "use a specific ipam"
												},
												{
													"key": "lock-token",
													"value": "string",
													"description": "the token for unlocking the global SDN configuration"
												},
												{
													"key": "mac",
													"value": "string",
													"description": "Anycast logical router mac address."
												},
												{
													"key": "mtu",
													"value": "5752",
													"description": "MTU of the zone, will be used for the created VNet bridges."
												},
												{
													"key": "nodes",
													"value": "string",
													"description": "List of cluster node names."
												},
												{
													"key": "peers",
													"value": "string",
													"description": "Comma-separated list of peers, that are part of the VXLAN zone. Usually the IPs of the nodes."
												},
												{
													"key": "reversedns",
													"value": "string",
													"description": "reverse dns api server"
												},
												{
													"key": "rt-import",
													"value": "string",
													"description": "List of Route Targets that should be imported into the VRF of the zone."
												},
												{
													"key": "tag",
													"value": "8248",
													"description": "Service-VLAN Tag (outer VLAN)"
												},
												{
													"key": "type",
													"value": "qinq",
													"description": "(Required) Plugin type."
												},
												{
													"key": "vlan-protocol",
													"value": "802.1q",
													"description": "Which VLAN protocol should be used for the creation of the QinQ zone."
												},
												{
													"key": "vrf-vxlan",
													"value": "3214745",
													"description": "VNI for the zone VRF."
												},
												{
													"key": "vxlan-port",
													"value": "4789",
													"description": "UDP port that should be used for the VXLAN tunnel (default 4789)."
												},
												{
													"key": "zone",
													"value": "string",
													"description": "(Required) The SDN zone object identifier."
												}
											]
										},
										"description": "Create a new sdn zone object."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/sdn/zones?advertise-subnets=true&bridge=string&bridge-disable-mac-learning=true&controller=string&dhcp=dnsmasq&disable-arp-nd-suppression=true&dns=string&dnszone=string&dp-id=5752&exitnodes=string&exitnodes-local-routing=true&exitnodes-primary=string&fabric=string&ipam=string&lock-token=string&mac=string&mtu=5752&nodes=string&peers=string&reversedns=string&rt-import=string&tag=8248&type=qinq&vlan-protocol=802.1q&vrf-vxlan=3214745&vxlan-port=4789&zone=string",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"sdn",
														"zones"
													],
													"query": [
														{
															"key": "advertise-subnets",
															"value": "true",
															"description": "Advertise IP prefixes (Type-5 routes) instead of MAC/IP pairs (Type-2 routes)."
														},
														{
															"key": "bridge",
															"value": "string",
															"description": "The bridge for which VLANs should be managed."
														},
														{
															"key": "bridge-disable-mac-learning",
															"value": "true",
															"description": "Disable auto mac learning."
														},
														{
															"key": "controller",
															"value": "string",
															"description": "Controller for this zone."
														},
														{
															"key": "dhcp",
															"value": "dnsmasq",
															"description": "Type of the DHCP backend for this zone"
														},
														{
															"key": "disable-arp-nd-suppression",
															"value": "true",
															"description": "Suppress IPv4 ARP && IPv6 Neighbour Discovery messages."
														},
														{
															"key": "dns",
															"value": "string",
															"description": "dns api server"
														},
														{
															"key": "dnszone",
															"value": "string",
															"description": "dns domain zone  ex: mydomain.com"
														},
														{
															"key": "dp-id",
															"value": "5752",
															"description": "Faucet dataplane id"
														},
														{
															"key": "exitnodes",
															"value": "string",
															"description": "List of cluster node names."
														},
														{
															"key": "exitnodes-local-routing",
															"value": "true",
															"description": "Allow exitnodes to connect to EVPN guests."
														},
														{
															"key": "exitnodes-primary",
															"value": "string",
															"description": "Force traffic through this exitnode first."
														},
														{
															"key": "fabric",
															"value": "string",
															"description": "SDN fabric to use as underlay for this VXLAN zone."
														},
														{
															"key": "ipam",
															"value": "string",
															"description": "use a specific ipam"
														},
														{
															"key": "lock-token",
															"value": "string",
															"description": "the token for unlocking the global SDN configuration"
														},
														{
															"key": "mac",
															"value": "string",
															"description": "Anycast logical router mac address."
														},
														{
															"key": "mtu",
															"value": "5752",
															"description": "MTU of the zone, will be used for the created VNet bridges."
														},
														{
															"key": "nodes",
															"value": "string",
															"description": "List of cluster node names."
														},
														{
															"key": "peers",
															"value": "string",
															"description": "Comma-separated list of peers, that are part of the VXLAN zone. Usually the IPs of the nodes."
														},
														{
															"key": "reversedns",
															"value": "string",
															"description": "reverse dns api server"
														},
														{
															"key": "rt-import",
															"value": "string",
															"description": "List of Route Targets that should be imported into the VRF of the zone."
														},
														{
															"key": "tag",
															"value": "8248",
															"description": "Service-VLAN Tag (outer VLAN)"
														},
														{
															"key": "type",
															"value": "qinq",
															"description": "(Required) Plugin type."
														},
														{
															"key": "vlan-protocol",
															"value": "802.1q",
															"description": "Which VLAN protocol should be used for the creation of the QinQ zone."
														},
														{
															"key": "vrf-vxlan",
															"value": "3214745",
															"description": "VNI for the zone VRF."
														},
														{
															"key": "vxlan-port",
															"value": "4789",
															"description": "UDP port that should be used for the VXLAN tunnel (default 4789)."
														},
														{
															"key": "zone",
															"value": "string",
															"description": "(Required) The SDN zone object identifier."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "null"
										}
									]
								}
							]
						},
						{
							"name": "controllers",
							"item": [
								{
									"name": "{controller}",
									"item": [
										{
											"name": "Delete sdn controller object configuration.",
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/sdn/controllers/:controller?lock-token=string",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"sdn",
														"controllers",
														":controller"
													],
													"query": [
														{
															"key": "lock-token",
															"value": "string",
															"description": "the token for unlocking the global SDN configuration"
														}
													],
													"variable": [
														{
															"key": "controller",
															"value": "string",
															"description": "(Required) The SDN controller object identifier."
														}
													]
												},
												"description": "Delete sdn controller object configuration."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/cluster/sdn/controllers/:controller?lock-token=string",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"cluster",
																"sdn",
																"controllers",
																":controller"
															],
															"query": [
																{
																	"key": "lock-token",
																	"value": "string",
																	"description": "the token for unlocking the global SDN configuration"
																}
															],
															"variable": [
																{
																	"key": "controller"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "null"
												}
											]
										},
										{
											"name": "Read sdn controller configuration.",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/sdn/controllers/:controller?pending=true&running=true",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"sdn",
														"controllers",
														":controller"
													],
													"query": [
														{
															"key": "pending",
															"value": "true",
															"description": "Display pending config."
														},
														{
															"key": "running",
															"value": "true",
															"description": "Display running config."
														}
													],
													"variable": [
														{
															"key": "controller",
															"value": "string",
															"description": "(Required) The SDN controller object identifier."
														}
													]
												},
												"description": "Read sdn controller configuration."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/cluster/sdn/controllers/:controller?pending=true&running=true",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"cluster",
																"sdn",
																"controllers",
																":controller"
															],
															"query": [
																{
																	"key": "pending",
																	"value": "true",
																	"description": "Display pending config."
																},
																{
																	"key": "running",
																	"value": "true",
																	"description": "Display running config."
																}
															],
															"variable": [
																{
																	"key": "controller"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"asn\": 3545915191,\n  \"bgp-multipath-as-relax\": false,\n  \"controller\": \"string\",\n  \"digest\": \"string\",\n  \"ebgp\": true,\n  \"ebgp-multihop\": 7705,\n  \"isis-domain\": \"string\",\n  \"isis-ifaces\": \"string\",\n  \"isis-net\": \"string\",\n  \"loopback\": \"string\",\n  \"node\": \"string\",\n  \"peers\": \"string\",\n  \"pending\": {\n    \"asn\": 1365342574,\n    \"bgp-multipath-as-relax\": false,\n    \"ebgp\": false,\n    \"ebgp-multihop\": 291,\n    \"isis-domain\": \"string\",\n    \"isis-ifaces\": \"string\",\n    \"isis-net\": \"string\",\n    \"loopback\": \"string\",\n    \"node\": \"string\",\n    \"peers\": \"string\"\n  },\n  \"state\": \"new\",\n  \"type\": \"bgp\"\n}"
												}
											]
										},
										{
											"name": "Update sdn controller object configuration.",
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/sdn/controllers/:controller?asn=4285463521&bgp-multipath-as-path-relax=true&delete=string&digest=string&ebgp=true&ebgp-multihop=5752&fabric=string&isis-domain=string&isis-ifaces=string&isis-net=string&lock-token=string&loopback=string&node=string&peers=string",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"sdn",
														"controllers",
														":controller"
													],
													"query": [
														{
															"key": "asn",
															"value": "4285463521",
															"description": "autonomous system number"
														},
														{
															"key": "bgp-multipath-as-path-relax",
															"value": "true",
															"description": "Consider different AS paths of equal length for multipath computation."
														},
														{
															"key": "delete",
															"value": "string",
															"description": "A list of settings you want to delete."
														},
														{
															"key": "digest",
															"value": "string",
															"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
														},
														{
															"key": "ebgp",
															"value": "true",
															"description": "Enable eBGP (remote-as external)."
														},
														{
															"key": "ebgp-multihop",
															"value": "5752",
															"description": "Set maximum amount of hops for eBGP peers."
														},
														{
															"key": "fabric",
															"value": "string",
															"description": "SDN fabric to use as underlay for this EVPN controller."
														},
														{
															"key": "isis-domain",
															"value": "string",
															"description": "Name of the IS-IS domain."
														},
														{
															"key": "isis-ifaces",
															"value": "string",
															"description": "Comma-separated list of interfaces where IS-IS should be active."
														},
														{
															"key": "isis-net",
															"value": "string",
															"description": "Network Entity title for this node in the IS-IS network."
														},
														{
															"key": "lock-token",
															"value": "string",
															"description": "the token for unlocking the global SDN configuration"
														},
														{
															"key": "loopback",
															"value": "string",
															"description": "Name of the loopback/dummy interface that provides the Router-IP."
														},
														{
															"key": "node",
															"value": "string",
															"description": "The cluster node name."
														},
														{
															"key": "peers",
															"value": "string",
															"description": "peers address list."
														}
													],
													"variable": [
														{
															"key": "controller",
															"value": "string",
															"description": "(Required) The SDN controller object identifier."
														}
													]
												},
												"description": "Update sdn controller object configuration."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/cluster/sdn/controllers/:controller?asn=4285463521&bgp-multipath-as-path-relax=true&delete=string&digest=string&ebgp=true&ebgp-multihop=5752&fabric=string&isis-domain=string&isis-ifaces=string&isis-net=string&lock-token=string&loopback=string&node=string&peers=string",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"cluster",
																"sdn",
																"controllers",
																":controller"
															],
															"query": [
																{
																	"key": "asn",
																	"value": "4285463521",
																	"description": "autonomous system number"
																},
																{
																	"key": "bgp-multipath-as-path-relax",
																	"value": "true",
																	"description": "Consider different AS paths of equal length for multipath computation."
																},
																{
																	"key": "delete",
																	"value": "string",
																	"description": "A list of settings you want to delete."
																},
																{
																	"key": "digest",
																	"value": "string",
																	"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
																},
																{
																	"key": "ebgp",
																	"value": "true",
																	"description": "Enable eBGP (remote-as external)."
																},
																{
																	"key": "ebgp-multihop",
																	"value": "5752",
																	"description": "Set maximum amount of hops for eBGP peers."
																},
																{
																	"key": "fabric",
																	"value": "string",
																	"description": "SDN fabric to use as underlay for this EVPN controller."
																},
																{
																	"key": "isis-domain",
																	"value": "string",
																	"description": "Name of the IS-IS domain."
																},
																{
																	"key": "isis-ifaces",
																	"value": "string",
																	"description": "Comma-separated list of interfaces where IS-IS should be active."
																},
																{
																	"key": "isis-net",
																	"value": "string",
																	"description": "Network Entity title for this node in the IS-IS network."
																},
																{
																	"key": "lock-token",
																	"value": "string",
																	"description": "the token for unlocking the global SDN configuration"
																},
																{
																	"key": "loopback",
																	"value": "string",
																	"description": "Name of the loopback/dummy interface that provides the Router-IP."
																},
																{
																	"key": "node",
																	"value": "string",
																	"description": "The cluster node name."
																},
																{
																	"key": "peers",
																	"value": "string",
																	"description": "peers address list."
																}
															],
															"variable": [
																{
																	"key": "controller"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "null"
												}
											]
										}
									]
								},
								{
									"name": "SDN controllers index.",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/cluster/sdn/controllers?pending=true&running=true&type=evpn",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cluster",
												"sdn",
												"controllers"
											],
											"query": [
												{
													"key": "pending",
													"value": "true",
													"description": "Display pending config."
												},
												{
													"key": "running",
													"value": "true",
													"description": "Display running config."
												},
												{
													"key": "type",
													"value": "evpn",
													"description": "Only list sdn controllers of specific type"
												}
											]
										},
										"description": "SDN controllers index."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/sdn/controllers?pending=true&running=true&type=evpn",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"sdn",
														"controllers"
													],
													"query": [
														{
															"key": "pending",
															"value": "true",
															"description": "Display pending config."
														},
														{
															"key": "running",
															"value": "true",
															"description": "Display running config."
														},
														{
															"key": "type",
															"value": "evpn",
															"description": "Only list sdn controllers of specific type"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"asn\": 17233208,\n    \"bgp-multipath-as-relax\": false,\n    \"controller\": \"string\",\n    \"digest\": \"string\",\n    \"ebgp\": true,\n    \"ebgp-multihop\": 5678,\n    \"isis-domain\": \"string\",\n    \"isis-ifaces\": \"string\",\n    \"isis-net\": \"string\",\n    \"loopback\": \"string\",\n    \"node\": \"string\",\n    \"peers\": \"string\",\n    \"pending\": {\n      \"asn\": 2918997532,\n      \"bgp-multipath-as-relax\": false,\n      \"ebgp\": true,\n      \"ebgp-multihop\": 6445,\n      \"isis-domain\": \"string\",\n      \"isis-ifaces\": \"string\",\n      \"isis-net\": \"string\",\n      \"loopback\": \"string\",\n      \"node\": \"string\",\n      \"peers\": \"string\"\n    },\n    \"state\": \"new\",\n    \"type\": \"bgp\"\n  },\n  {\n    \"asn\": 3015201556,\n    \"bgp-multipath-as-relax\": true,\n    \"controller\": \"string\",\n    \"digest\": \"string\",\n    \"ebgp\": true,\n    \"ebgp-multihop\": 3518,\n    \"isis-domain\": \"string\",\n    \"isis-ifaces\": \"string\",\n    \"isis-net\": \"string\",\n    \"loopback\": \"string\",\n    \"node\": \"string\",\n    \"peers\": \"string\",\n    \"pending\": {\n      \"asn\": 703006014,\n      \"bgp-multipath-as-relax\": false,\n      \"ebgp\": true,\n      \"ebgp-multihop\": 865,\n      \"isis-domain\": \"string\",\n      \"isis-ifaces\": \"string\",\n      \"isis-net\": \"string\",\n      \"loopback\": \"string\",\n      \"node\": \"string\",\n      \"peers\": \"string\"\n    },\n    \"state\": \"new\",\n    \"type\": \"faucet\"\n  }\n]"
										}
									]
								},
								{
									"name": "Create a new sdn controller object.",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/cluster/sdn/controllers?asn=4285463521&bgp-multipath-as-path-relax=true&controller=string&ebgp=true&ebgp-multihop=5752&fabric=string&isis-domain=string&isis-ifaces=string&isis-net=string&lock-token=string&loopback=string&node=string&peers=string&type=evpn",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cluster",
												"sdn",
												"controllers"
											],
											"query": [
												{
													"key": "asn",
													"value": "4285463521",
													"description": "autonomous system number"
												},
												{
													"key": "bgp-multipath-as-path-relax",
													"value": "true",
													"description": "Consider different AS paths of equal length for multipath computation."
												},
												{
													"key": "controller",
													"value": "string",
													"description": "(Required) The SDN controller object identifier."
												},
												{
													"key": "ebgp",
													"value": "true",
													"description": "Enable eBGP (remote-as external)."
												},
												{
													"key": "ebgp-multihop",
													"value": "5752",
													"description": "Set maximum amount of hops for eBGP peers."
												},
												{
													"key": "fabric",
													"value": "string",
													"description": "SDN fabric to use as underlay for this EVPN controller."
												},
												{
													"key": "isis-domain",
													"value": "string",
													"description": "Name of the IS-IS domain."
												},
												{
													"key": "isis-ifaces",
													"value": "string",
													"description": "Comma-separated list of interfaces where IS-IS should be active."
												},
												{
													"key": "isis-net",
													"value": "string",
													"description": "Network Entity title for this node in the IS-IS network."
												},
												{
													"key": "lock-token",
													"value": "string",
													"description": "the token for unlocking the global SDN configuration"
												},
												{
													"key": "loopback",
													"value": "string",
													"description": "Name of the loopback/dummy interface that provides the Router-IP."
												},
												{
													"key": "node",
													"value": "string",
													"description": "The cluster node name."
												},
												{
													"key": "peers",
													"value": "string",
													"description": "peers address list."
												},
												{
													"key": "type",
													"value": "evpn",
													"description": "(Required) Plugin type."
												}
											]
										},
										"description": "Create a new sdn controller object."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/sdn/controllers?asn=4285463521&bgp-multipath-as-path-relax=true&controller=string&ebgp=true&ebgp-multihop=5752&fabric=string&isis-domain=string&isis-ifaces=string&isis-net=string&lock-token=string&loopback=string&node=string&peers=string&type=evpn",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"sdn",
														"controllers"
													],
													"query": [
														{
															"key": "asn",
															"value": "4285463521",
															"description": "autonomous system number"
														},
														{
															"key": "bgp-multipath-as-path-relax",
															"value": "true",
															"description": "Consider different AS paths of equal length for multipath computation."
														},
														{
															"key": "controller",
															"value": "string",
															"description": "(Required) The SDN controller object identifier."
														},
														{
															"key": "ebgp",
															"value": "true",
															"description": "Enable eBGP (remote-as external)."
														},
														{
															"key": "ebgp-multihop",
															"value": "5752",
															"description": "Set maximum amount of hops for eBGP peers."
														},
														{
															"key": "fabric",
															"value": "string",
															"description": "SDN fabric to use as underlay for this EVPN controller."
														},
														{
															"key": "isis-domain",
															"value": "string",
															"description": "Name of the IS-IS domain."
														},
														{
															"key": "isis-ifaces",
															"value": "string",
															"description": "Comma-separated list of interfaces where IS-IS should be active."
														},
														{
															"key": "isis-net",
															"value": "string",
															"description": "Network Entity title for this node in the IS-IS network."
														},
														{
															"key": "lock-token",
															"value": "string",
															"description": "the token for unlocking the global SDN configuration"
														},
														{
															"key": "loopback",
															"value": "string",
															"description": "Name of the loopback/dummy interface that provides the Router-IP."
														},
														{
															"key": "node",
															"value": "string",
															"description": "The cluster node name."
														},
														{
															"key": "peers",
															"value": "string",
															"description": "peers address list."
														},
														{
															"key": "type",
															"value": "evpn",
															"description": "(Required) Plugin type."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "null"
										}
									]
								}
							]
						},
						{
							"name": "ipams",
							"item": [
								{
									"name": "{ipam}",
									"item": [
										{
											"name": "status",
											"item": [
												{
													"name": "List PVE IPAM Entries",
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/cluster/sdn/ipams/:ipam/status",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"cluster",
																"sdn",
																"ipams",
																":ipam",
																"status"
															],
															"variable": [
																{
																	"key": "ipam",
																	"value": "string",
																	"description": "(Required) The SDN ipam object identifier."
																}
															]
														},
														"description": "List PVE IPAM Entries"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/cluster/sdn/ipams/:ipam/status",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"cluster",
																		"sdn",
																		"ipams",
																		":ipam",
																		"status"
																	],
																	"variable": [
																		{
																			"key": "ipam"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "[]"
														}
													]
												}
											]
										},
										{
											"name": "Delete sdn ipam object configuration.",
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/sdn/ipams/:ipam?lock-token=string",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"sdn",
														"ipams",
														":ipam"
													],
													"query": [
														{
															"key": "lock-token",
															"value": "string",
															"description": "the token for unlocking the global SDN configuration"
														}
													],
													"variable": [
														{
															"key": "ipam",
															"value": "string",
															"description": "(Required) The SDN ipam object identifier."
														}
													]
												},
												"description": "Delete sdn ipam object configuration."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/cluster/sdn/ipams/:ipam?lock-token=string",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"cluster",
																"sdn",
																"ipams",
																":ipam"
															],
															"query": [
																{
																	"key": "lock-token",
																	"value": "string",
																	"description": "the token for unlocking the global SDN configuration"
																}
															],
															"variable": [
																{
																	"key": "ipam"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "null"
												}
											]
										},
										{
											"name": "Read sdn ipam configuration.",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/sdn/ipams/:ipam",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"sdn",
														"ipams",
														":ipam"
													],
													"variable": [
														{
															"key": "ipam",
															"value": "string",
															"description": "(Required) The SDN ipam object identifier."
														}
													]
												},
												"description": "Read sdn ipam configuration."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/cluster/sdn/ipams/:ipam",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"cluster",
																"sdn",
																"ipams",
																":ipam"
															],
															"variable": [
																{
																	"key": "ipam"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{}"
												}
											]
										},
										{
											"name": "Update sdn ipam object configuration.",
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/sdn/ipams/:ipam?delete=string&digest=string&fingerprint=2b:C6:53:bd:7c:42:0f:B0:19:Cc:76:26:41:2D:4D:68:a7:8b:9a:Dd:CE:FC:1d:cb:A3:B4:49:7d:8C:eA:3F:d9&lock-token=string&section=5752&token=string&url=string",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"sdn",
														"ipams",
														":ipam"
													],
													"query": [
														{
															"key": "delete",
															"value": "string",
															"description": "A list of settings you want to delete."
														},
														{
															"key": "digest",
															"value": "string",
															"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
														},
														{
															"key": "fingerprint",
															"value": "2b:C6:53:bd:7c:42:0f:B0:19:Cc:76:26:41:2D:4D:68:a7:8b:9a:Dd:CE:FC:1d:cb:A3:B4:49:7d:8C:eA:3F:d9",
															"description": "Certificate SHA 256 fingerprint."
														},
														{
															"key": "lock-token",
															"value": "string",
															"description": "the token for unlocking the global SDN configuration"
														},
														{
															"key": "section",
															"value": "5752"
														},
														{
															"key": "token",
															"value": "string"
														},
														{
															"key": "url",
															"value": "string"
														}
													],
													"variable": [
														{
															"key": "ipam",
															"value": "string",
															"description": "(Required) The SDN ipam object identifier."
														}
													]
												},
												"description": "Update sdn ipam object configuration."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/cluster/sdn/ipams/:ipam?delete=string&digest=string&fingerprint=2b:C6:53:bd:7c:42:0f:B0:19:Cc:76:26:41:2D:4D:68:a7:8b:9a:Dd:CE:FC:1d:cb:A3:B4:49:7d:8C:eA:3F:d9&lock-token=string&section=5752&token=string&url=string",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"cluster",
																"sdn",
																"ipams",
																":ipam"
															],
															"query": [
																{
																	"key": "delete",
																	"value": "string",
																	"description": "A list of settings you want to delete."
																},
																{
																	"key": "digest",
																	"value": "string",
																	"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
																},
																{
																	"key": "fingerprint",
																	"value": "2b:C6:53:bd:7c:42:0f:B0:19:Cc:76:26:41:2D:4D:68:a7:8b:9a:Dd:CE:FC:1d:cb:A3:B4:49:7d:8C:eA:3F:d9",
																	"description": "Certificate SHA 256 fingerprint."
																},
																{
																	"key": "lock-token",
																	"value": "string",
																	"description": "the token for unlocking the global SDN configuration"
																},
																{
																	"key": "section",
																	"value": "5752"
																},
																{
																	"key": "token",
																	"value": "string"
																},
																{
																	"key": "url",
																	"value": "string"
																}
															],
															"variable": [
																{
																	"key": "ipam"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "null"
												}
											]
										}
									]
								},
								{
									"name": "SDN ipams index.",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/cluster/sdn/ipams?type=phpipam",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cluster",
												"sdn",
												"ipams"
											],
											"query": [
												{
													"key": "type",
													"value": "phpipam",
													"description": "Only list sdn ipams of specific type"
												}
											]
										},
										"description": "SDN ipams index."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/sdn/ipams?type=phpipam",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"sdn",
														"ipams"
													],
													"query": [
														{
															"key": "type",
															"value": "phpipam",
															"description": "Only list sdn ipams of specific type"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"ipam\": \"string\",\n    \"type\": \"string\"\n  },\n  {\n    \"ipam\": \"string\",\n    \"type\": \"string\"\n  }\n]"
										}
									]
								},
								{
									"name": "Create a new sdn ipam object.",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/cluster/sdn/ipams?fingerprint=2b:C6:53:bd:7c:42:0f:B0:19:Cc:76:26:41:2D:4D:68:a7:8b:9a:Dd:CE:FC:1d:cb:A3:B4:49:7d:8C:eA:3F:d9&ipam=string&lock-token=string&section=5752&token=string&type=phpipam&url=string",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cluster",
												"sdn",
												"ipams"
											],
											"query": [
												{
													"key": "fingerprint",
													"value": "2b:C6:53:bd:7c:42:0f:B0:19:Cc:76:26:41:2D:4D:68:a7:8b:9a:Dd:CE:FC:1d:cb:A3:B4:49:7d:8C:eA:3F:d9",
													"description": "Certificate SHA 256 fingerprint."
												},
												{
													"key": "ipam",
													"value": "string",
													"description": "(Required) The SDN ipam object identifier."
												},
												{
													"key": "lock-token",
													"value": "string",
													"description": "the token for unlocking the global SDN configuration"
												},
												{
													"key": "section",
													"value": "5752"
												},
												{
													"key": "token",
													"value": "string"
												},
												{
													"key": "type",
													"value": "phpipam",
													"description": "(Required) Plugin type."
												},
												{
													"key": "url",
													"value": "string"
												}
											]
										},
										"description": "Create a new sdn ipam object."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/sdn/ipams?fingerprint=2b:C6:53:bd:7c:42:0f:B0:19:Cc:76:26:41:2D:4D:68:a7:8b:9a:Dd:CE:FC:1d:cb:A3:B4:49:7d:8C:eA:3F:d9&ipam=string&lock-token=string&section=5752&token=string&type=phpipam&url=string",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"sdn",
														"ipams"
													],
													"query": [
														{
															"key": "fingerprint",
															"value": "2b:C6:53:bd:7c:42:0f:B0:19:Cc:76:26:41:2D:4D:68:a7:8b:9a:Dd:CE:FC:1d:cb:A3:B4:49:7d:8C:eA:3F:d9",
															"description": "Certificate SHA 256 fingerprint."
														},
														{
															"key": "ipam",
															"value": "string",
															"description": "(Required) The SDN ipam object identifier."
														},
														{
															"key": "lock-token",
															"value": "string",
															"description": "the token for unlocking the global SDN configuration"
														},
														{
															"key": "section",
															"value": "5752"
														},
														{
															"key": "token",
															"value": "string"
														},
														{
															"key": "type",
															"value": "phpipam",
															"description": "(Required) Plugin type."
														},
														{
															"key": "url",
															"value": "string"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "null"
										}
									]
								}
							]
						},
						{
							"name": "dns",
							"item": [
								{
									"name": "{dns}",
									"item": [
										{
											"name": "Delete sdn dns object configuration.",
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/sdn/dns/:dns?lock-token=string",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"sdn",
														"dns",
														":dns"
													],
													"query": [
														{
															"key": "lock-token",
															"value": "string",
															"description": "the token for unlocking the global SDN configuration"
														}
													],
													"variable": [
														{
															"key": "dns",
															"value": "string",
															"description": "(Required) The SDN dns object identifier."
														}
													]
												},
												"description": "Delete sdn dns object configuration."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/cluster/sdn/dns/:dns?lock-token=string",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"cluster",
																"sdn",
																"dns",
																":dns"
															],
															"query": [
																{
																	"key": "lock-token",
																	"value": "string",
																	"description": "the token for unlocking the global SDN configuration"
																}
															],
															"variable": [
																{
																	"key": "dns"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "null"
												}
											]
										},
										{
											"name": "Read sdn dns configuration.",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/sdn/dns/:dns",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"sdn",
														"dns",
														":dns"
													],
													"variable": [
														{
															"key": "dns",
															"value": "string",
															"description": "(Required) The SDN dns object identifier."
														}
													]
												},
												"description": "Read sdn dns configuration."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/cluster/sdn/dns/:dns",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"cluster",
																"sdn",
																"dns",
																":dns"
															],
															"variable": [
																{
																	"key": "dns"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{}"
												}
											]
										},
										{
											"name": "Update sdn dns object configuration.",
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/sdn/dns/:dns?delete=string&digest=string&fingerprint=2b:C6:53:bd:7c:42:0f:B0:19:Cc:76:26:41:2D:4D:68:a7:8b:9a:Dd:CE:FC:1d:cb:A3:B4:49:7d:8C:eA:3F:d9&key=string&lock-token=string&reversemaskv6=5752&ttl=5752&url=string",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"sdn",
														"dns",
														":dns"
													],
													"query": [
														{
															"key": "delete",
															"value": "string",
															"description": "A list of settings you want to delete."
														},
														{
															"key": "digest",
															"value": "string",
															"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
														},
														{
															"key": "fingerprint",
															"value": "2b:C6:53:bd:7c:42:0f:B0:19:Cc:76:26:41:2D:4D:68:a7:8b:9a:Dd:CE:FC:1d:cb:A3:B4:49:7d:8C:eA:3F:d9",
															"description": "Certificate SHA 256 fingerprint."
														},
														{
															"key": "key",
															"value": "string"
														},
														{
															"key": "lock-token",
															"value": "string",
															"description": "the token for unlocking the global SDN configuration"
														},
														{
															"key": "reversemaskv6",
															"value": "5752"
														},
														{
															"key": "ttl",
															"value": "5752"
														},
														{
															"key": "url",
															"value": "string"
														}
													],
													"variable": [
														{
															"key": "dns",
															"value": "string",
															"description": "(Required) The SDN dns object identifier."
														}
													]
												},
												"description": "Update sdn dns object configuration."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/cluster/sdn/dns/:dns?delete=string&digest=string&fingerprint=2b:C6:53:bd:7c:42:0f:B0:19:Cc:76:26:41:2D:4D:68:a7:8b:9a:Dd:CE:FC:1d:cb:A3:B4:49:7d:8C:eA:3F:d9&key=string&lock-token=string&reversemaskv6=5752&ttl=5752&url=string",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"cluster",
																"sdn",
																"dns",
																":dns"
															],
															"query": [
																{
																	"key": "delete",
																	"value": "string",
																	"description": "A list of settings you want to delete."
																},
																{
																	"key": "digest",
																	"value": "string",
																	"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
																},
																{
																	"key": "fingerprint",
																	"value": "2b:C6:53:bd:7c:42:0f:B0:19:Cc:76:26:41:2D:4D:68:a7:8b:9a:Dd:CE:FC:1d:cb:A3:B4:49:7d:8C:eA:3F:d9",
																	"description": "Certificate SHA 256 fingerprint."
																},
																{
																	"key": "key",
																	"value": "string"
																},
																{
																	"key": "lock-token",
																	"value": "string",
																	"description": "the token for unlocking the global SDN configuration"
																},
																{
																	"key": "reversemaskv6",
																	"value": "5752"
																},
																{
																	"key": "ttl",
																	"value": "5752"
																},
																{
																	"key": "url",
																	"value": "string"
																}
															],
															"variable": [
																{
																	"key": "dns"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "null"
												}
											]
										}
									]
								},
								{
									"name": "SDN dns index.",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/cluster/sdn/dns?type=powerdns",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cluster",
												"sdn",
												"dns"
											],
											"query": [
												{
													"key": "type",
													"value": "powerdns",
													"description": "Only list sdn dns of specific type"
												}
											]
										},
										"description": "SDN dns index."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/sdn/dns?type=powerdns",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"sdn",
														"dns"
													],
													"query": [
														{
															"key": "type",
															"value": "powerdns",
															"description": "Only list sdn dns of specific type"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"dns\": \"string\",\n    \"type\": \"string\"\n  },\n  {\n    \"dns\": \"string\",\n    \"type\": \"string\"\n  }\n]"
										}
									]
								},
								{
									"name": "Create a new sdn dns object.",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/cluster/sdn/dns?dns=string&fingerprint=2b:C6:53:bd:7c:42:0f:B0:19:Cc:76:26:41:2D:4D:68:a7:8b:9a:Dd:CE:FC:1d:cb:A3:B4:49:7d:8C:eA:3F:d9&key=string&lock-token=string&reversemaskv6=5752&reversev6mask=5752&ttl=5752&type=powerdns&url=string",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cluster",
												"sdn",
												"dns"
											],
											"query": [
												{
													"key": "dns",
													"value": "string",
													"description": "(Required) The SDN dns object identifier."
												},
												{
													"key": "fingerprint",
													"value": "2b:C6:53:bd:7c:42:0f:B0:19:Cc:76:26:41:2D:4D:68:a7:8b:9a:Dd:CE:FC:1d:cb:A3:B4:49:7d:8C:eA:3F:d9",
													"description": "Certificate SHA 256 fingerprint."
												},
												{
													"key": "key",
													"value": "string",
													"description": "(Required) "
												},
												{
													"key": "lock-token",
													"value": "string",
													"description": "the token for unlocking the global SDN configuration"
												},
												{
													"key": "reversemaskv6",
													"value": "5752"
												},
												{
													"key": "reversev6mask",
													"value": "5752"
												},
												{
													"key": "ttl",
													"value": "5752"
												},
												{
													"key": "type",
													"value": "powerdns",
													"description": "(Required) Plugin type."
												},
												{
													"key": "url",
													"value": "string",
													"description": "(Required) "
												}
											]
										},
										"description": "Create a new sdn dns object."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/sdn/dns?dns=string&fingerprint=2b:C6:53:bd:7c:42:0f:B0:19:Cc:76:26:41:2D:4D:68:a7:8b:9a:Dd:CE:FC:1d:cb:A3:B4:49:7d:8C:eA:3F:d9&key=string&lock-token=string&reversemaskv6=5752&reversev6mask=5752&ttl=5752&type=powerdns&url=string",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"sdn",
														"dns"
													],
													"query": [
														{
															"key": "dns",
															"value": "string",
															"description": "(Required) The SDN dns object identifier."
														},
														{
															"key": "fingerprint",
															"value": "2b:C6:53:bd:7c:42:0f:B0:19:Cc:76:26:41:2D:4D:68:a7:8b:9a:Dd:CE:FC:1d:cb:A3:B4:49:7d:8C:eA:3F:d9",
															"description": "Certificate SHA 256 fingerprint."
														},
														{
															"key": "key",
															"value": "string",
															"description": "(Required) "
														},
														{
															"key": "lock-token",
															"value": "string",
															"description": "the token for unlocking the global SDN configuration"
														},
														{
															"key": "reversemaskv6",
															"value": "5752"
														},
														{
															"key": "reversev6mask",
															"value": "5752"
														},
														{
															"key": "ttl",
															"value": "5752"
														},
														{
															"key": "type",
															"value": "powerdns",
															"description": "(Required) Plugin type."
														},
														{
															"key": "url",
															"value": "string",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "null"
										}
									]
								}
							]
						},
						{
							"name": "fabrics",
							"item": [
								{
									"name": "fabric",
									"item": [
										{
											"name": "{id}",
											"item": [
												{
													"name": "Add a fabric",
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/cluster/sdn/fabrics/fabric/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"cluster",
																"sdn",
																"fabrics",
																"fabric",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "string",
																	"description": "(Required) Identifier for SDN fabrics"
																}
															]
														},
														"description": "Add a fabric"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/cluster/sdn/fabrics/fabric/:id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"cluster",
																		"sdn",
																		"fabrics",
																		"fabric",
																		":id"
																	],
																	"variable": [
																		{
																			"key": "id"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "null"
														}
													]
												},
												{
													"name": "Update a fabric",
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/cluster/sdn/fabrics/fabric/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"cluster",
																"sdn",
																"fabrics",
																"fabric",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "string",
																	"description": "(Required) Identifier for SDN fabrics"
																}
															]
														},
														"description": "Update a fabric"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/cluster/sdn/fabrics/fabric/:id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"cluster",
																		"sdn",
																		"fabrics",
																		"fabric",
																		":id"
																	],
																	"variable": [
																		{
																			"key": "id"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"area\": \"string\",\n  \"csnp_interval\": 576.5169567268846,\n  \"digest\": \"string\",\n  \"hello_interval\": 593.1824898239158,\n  \"id\": \"string\",\n  \"ip6_prefix\": \"string\",\n  \"ip_prefix\": \"string\",\n  \"lock-token\": \"string\",\n  \"protocol\": \"openfabric\"\n}"
														}
													]
												},
												{
													"name": "Update a fabric",
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/cluster/sdn/fabrics/fabric/:id?area=string&csnp_interval=49.51705644421309&digest=string&hello_interval=49.51705644421309&ip6_prefix=string&ip_prefix=string&lock-token=string&protocol=openfabric",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"cluster",
																"sdn",
																"fabrics",
																"fabric",
																":id"
															],
															"query": [
																{
																	"key": "area",
																	"value": "string",
																	"description": "OSPF area. Either a IPv4 address or a 32-bit number. Gets validated in rust."
																},
																{
																	"key": "csnp_interval",
																	"value": "49.51705644421309",
																	"description": "The csnp_interval property for Openfabric"
																},
																{
																	"key": "digest",
																	"value": "string",
																	"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
																},
																{
																	"key": "hello_interval",
																	"value": "49.51705644421309",
																	"description": "The hello_interval property for Openfabric"
																},
																{
																	"key": "ip6_prefix",
																	"value": "string",
																	"description": "The IP prefix for Node IPs"
																},
																{
																	"key": "ip_prefix",
																	"value": "string",
																	"description": "The IP prefix for Node IPs"
																},
																{
																	"key": "lock-token",
																	"value": "string",
																	"description": "the token for unlocking the global SDN configuration"
																},
																{
																	"key": "protocol",
																	"value": "openfabric",
																	"description": "(Required) Type of configuration entry in an SDN Fabric section config"
																}
															],
															"variable": [
																{
																	"key": "id",
																	"value": "string",
																	"description": "(Required) Identifier for SDN fabrics"
																}
															]
														},
														"description": "Update a fabric"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/cluster/sdn/fabrics/fabric/:id?area=string&csnp_interval=49.51705644421309&digest=string&hello_interval=49.51705644421309&ip6_prefix=string&ip_prefix=string&lock-token=string&protocol=openfabric",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"cluster",
																		"sdn",
																		"fabrics",
																		"fabric",
																		":id"
																	],
																	"query": [
																		{
																			"key": "area",
																			"value": "string",
																			"description": "OSPF area. Either a IPv4 address or a 32-bit number. Gets validated in rust."
																		},
																		{
																			"key": "csnp_interval",
																			"value": "49.51705644421309",
																			"description": "The csnp_interval property for Openfabric"
																		},
																		{
																			"key": "digest",
																			"value": "string",
																			"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
																		},
																		{
																			"key": "hello_interval",
																			"value": "49.51705644421309",
																			"description": "The hello_interval property for Openfabric"
																		},
																		{
																			"key": "ip6_prefix",
																			"value": "string",
																			"description": "The IP prefix for Node IPs"
																		},
																		{
																			"key": "ip_prefix",
																			"value": "string",
																			"description": "The IP prefix for Node IPs"
																		},
																		{
																			"key": "lock-token",
																			"value": "string",
																			"description": "the token for unlocking the global SDN configuration"
																		},
																		{
																			"key": "protocol",
																			"value": "openfabric",
																			"description": "(Required) Type of configuration entry in an SDN Fabric section config"
																		}
																	],
																	"variable": [
																		{
																			"key": "id"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "null"
														}
													]
												}
											]
										},
										{
											"name": "SDN Fabrics Index",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/sdn/fabrics/fabric?pending=true&running=true",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"sdn",
														"fabrics",
														"fabric"
													],
													"query": [
														{
															"key": "pending",
															"value": "true",
															"description": "Display pending config."
														},
														{
															"key": "running",
															"value": "true",
															"description": "Display running config."
														}
													]
												},
												"description": "SDN Fabrics Index"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/cluster/sdn/fabrics/fabric?pending=true&running=true",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"cluster",
																"sdn",
																"fabrics",
																"fabric"
															],
															"query": [
																{
																	"key": "pending",
																	"value": "true",
																	"description": "Display pending config."
																},
																{
																	"key": "running",
																	"value": "true",
																	"description": "Display running config."
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "[\n  {\n    \"area\": \"string\",\n    \"csnp_interval\": 123.16233673218181,\n    \"digest\": \"string\",\n    \"hello_interval\": 192.980268707502,\n    \"id\": \"string\",\n    \"ip6_prefix\": \"string\",\n    \"ip_prefix\": \"string\",\n    \"lock-token\": \"string\",\n    \"protocol\": \"ospf\"\n  },\n  {\n    \"area\": \"string\",\n    \"csnp_interval\": 12.911886946645271,\n    \"digest\": \"string\",\n    \"hello_interval\": 148.60743618916527,\n    \"id\": \"string\",\n    \"ip6_prefix\": \"string\",\n    \"ip_prefix\": \"string\",\n    \"lock-token\": \"string\",\n    \"protocol\": \"ospf\"\n  }\n]"
												}
											]
										},
										{
											"name": "Add a fabric",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/sdn/fabrics/fabric?area=string&csnp_interval=49.51705644421309&digest=string&hello_interval=49.51705644421309&id=string&ip6_prefix=string&ip_prefix=string&lock-token=string&protocol=openfabric",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"sdn",
														"fabrics",
														"fabric"
													],
													"query": [
														{
															"key": "area",
															"value": "string",
															"description": "OSPF area. Either a IPv4 address or a 32-bit number. Gets validated in rust."
														},
														{
															"key": "csnp_interval",
															"value": "49.51705644421309",
															"description": "The csnp_interval property for Openfabric"
														},
														{
															"key": "digest",
															"value": "string",
															"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
														},
														{
															"key": "hello_interval",
															"value": "49.51705644421309",
															"description": "The hello_interval property for Openfabric"
														},
														{
															"key": "id",
															"value": "string",
															"description": "(Required) Identifier for SDN fabrics"
														},
														{
															"key": "ip6_prefix",
															"value": "string",
															"description": "The IP prefix for Node IPs"
														},
														{
															"key": "ip_prefix",
															"value": "string",
															"description": "The IP prefix for Node IPs"
														},
														{
															"key": "lock-token",
															"value": "string",
															"description": "the token for unlocking the global SDN configuration"
														},
														{
															"key": "protocol",
															"value": "openfabric",
															"description": "(Required) Type of configuration entry in an SDN Fabric section config"
														}
													]
												},
												"description": "Add a fabric"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/cluster/sdn/fabrics/fabric?area=string&csnp_interval=49.51705644421309&digest=string&hello_interval=49.51705644421309&id=string&ip6_prefix=string&ip_prefix=string&lock-token=string&protocol=openfabric",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"cluster",
																"sdn",
																"fabrics",
																"fabric"
															],
															"query": [
																{
																	"key": "area",
																	"value": "string",
																	"description": "OSPF area. Either a IPv4 address or a 32-bit number. Gets validated in rust."
																},
																{
																	"key": "csnp_interval",
																	"value": "49.51705644421309",
																	"description": "The csnp_interval property for Openfabric"
																},
																{
																	"key": "digest",
																	"value": "string",
																	"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
																},
																{
																	"key": "hello_interval",
																	"value": "49.51705644421309",
																	"description": "The hello_interval property for Openfabric"
																},
																{
																	"key": "id",
																	"value": "string",
																	"description": "(Required) Identifier for SDN fabrics"
																},
																{
																	"key": "ip6_prefix",
																	"value": "string",
																	"description": "The IP prefix for Node IPs"
																},
																{
																	"key": "ip_prefix",
																	"value": "string",
																	"description": "The IP prefix for Node IPs"
																},
																{
																	"key": "lock-token",
																	"value": "string",
																	"description": "the token for unlocking the global SDN configuration"
																},
																{
																	"key": "protocol",
																	"value": "openfabric",
																	"description": "(Required) Type of configuration entry in an SDN Fabric section config"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "null"
												}
											]
										}
									]
								},
								{
									"name": "node",
									"item": [
										{
											"name": "{fabric_id}",
											"item": [
												{
													"name": "{node_id}",
													"item": [
														{
															"name": "Add a node",
															"request": {
																"method": "DELETE",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/cluster/sdn/fabrics/node/:fabric_id/:node_id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"cluster",
																		"sdn",
																		"fabrics",
																		"node",
																		":fabric_id",
																		":node_id"
																	],
																	"variable": [
																		{
																			"key": "fabric_id",
																			"value": "string",
																			"description": "(Required) Identifier for SDN fabrics"
																		},
																		{
																			"key": "node_id",
																			"value": "string",
																			"description": "(Required) Identifier for nodes in an SDN fabric"
																		}
																	]
																},
																"description": "Add a node"
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "DELETE",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/cluster/sdn/fabrics/node/:fabric_id/:node_id",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"cluster",
																				"sdn",
																				"fabrics",
																				"node",
																				":fabric_id",
																				":node_id"
																			],
																			"variable": [
																				{
																					"key": "fabric_id"
																				},
																				{
																					"key": "node_id"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "null"
																}
															]
														},
														{
															"name": "Get a node",
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/cluster/sdn/fabrics/node/:fabric_id/:node_id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"cluster",
																		"sdn",
																		"fabrics",
																		"node",
																		":fabric_id",
																		":node_id"
																	],
																	"variable": [
																		{
																			"key": "fabric_id",
																			"value": "string",
																			"description": "(Required) Identifier for SDN fabrics"
																		},
																		{
																			"key": "node_id",
																			"value": "string",
																			"description": "(Required) Identifier for nodes in an SDN fabric"
																		}
																	]
																},
																"description": "Get a node"
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/cluster/sdn/fabrics/node/:fabric_id/:node_id",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"cluster",
																				"sdn",
																				"fabrics",
																				"node",
																				":fabric_id",
																				":node_id"
																			],
																			"variable": [
																				{
																					"key": "fabric_id"
																				},
																				{
																					"key": "node_id"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"digest\": \"string\",\n  \"fabric_id\": \"string\",\n  \"interfaces\": [\n    \"string\",\n    \"string\"\n  ],\n  \"ip\": \"116.236.236.27\",\n  \"ip6\": \"57b2:5cb0:373c:f853:7d50:dfa6:fb46:fec3\",\n  \"lock-token\": \"string\",\n  \"node_id\": \"string\",\n  \"protocol\": \"openfabric\"\n}"
																}
															]
														},
														{
															"name": "Update a node",
															"request": {
																"method": "PUT",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/cluster/sdn/fabrics/node/:fabric_id/:node_id?digest=string&ip=253.242.144.244&ip6=6732:fbfd:a093:658d:9caa:14f2:50ae:881e&lock-token=string&protocol=openfabric",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"cluster",
																		"sdn",
																		"fabrics",
																		"node",
																		":fabric_id",
																		":node_id"
																	],
																	"query": [
																		{
																			"key": "digest",
																			"value": "string",
																			"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
																		},
																		{
																			"key": "ip",
																			"value": "253.242.144.244",
																			"description": "IPv4 address for this node"
																		},
																		{
																			"key": "ip6",
																			"value": "6732:fbfd:a093:658d:9caa:14f2:50ae:881e",
																			"description": "IPv6 address for this node"
																		},
																		{
																			"key": "lock-token",
																			"value": "string",
																			"description": "the token for unlocking the global SDN configuration"
																		},
																		{
																			"key": "protocol",
																			"value": "openfabric",
																			"description": "(Required) Type of configuration entry in an SDN Fabric section config"
																		}
																	],
																	"variable": [
																		{
																			"key": "fabric_id",
																			"value": "string",
																			"description": "(Required) Identifier for SDN fabrics"
																		},
																		{
																			"key": "node_id",
																			"value": "string",
																			"description": "(Required) Identifier for nodes in an SDN fabric"
																		}
																	]
																},
																"description": "Update a node"
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "PUT",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/cluster/sdn/fabrics/node/:fabric_id/:node_id?digest=string&ip=253.242.144.244&ip6=6732:fbfd:a093:658d:9caa:14f2:50ae:881e&lock-token=string&protocol=openfabric",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"cluster",
																				"sdn",
																				"fabrics",
																				"node",
																				":fabric_id",
																				":node_id"
																			],
																			"query": [
																				{
																					"key": "digest",
																					"value": "string",
																					"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
																				},
																				{
																					"key": "ip",
																					"value": "253.242.144.244",
																					"description": "IPv4 address for this node"
																				},
																				{
																					"key": "ip6",
																					"value": "6732:fbfd:a093:658d:9caa:14f2:50ae:881e",
																					"description": "IPv6 address for this node"
																				},
																				{
																					"key": "lock-token",
																					"value": "string",
																					"description": "the token for unlocking the global SDN configuration"
																				},
																				{
																					"key": "protocol",
																					"value": "openfabric",
																					"description": "(Required) Type of configuration entry in an SDN Fabric section config"
																				}
																			],
																			"variable": [
																				{
																					"key": "fabric_id"
																				},
																				{
																					"key": "node_id"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "null"
																}
															]
														}
													]
												},
												{
													"name": "SDN Fabrics Index",
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/cluster/sdn/fabrics/node/:fabric_id?pending=true&running=true",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"cluster",
																"sdn",
																"fabrics",
																"node",
																":fabric_id"
															],
															"query": [
																{
																	"key": "pending",
																	"value": "true",
																	"description": "Display pending config."
																},
																{
																	"key": "running",
																	"value": "true",
																	"description": "Display running config."
																}
															],
															"variable": [
																{
																	"key": "fabric_id",
																	"value": "string",
																	"description": "(Required) Identifier for SDN fabrics"
																}
															]
														},
														"description": "SDN Fabrics Index"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/cluster/sdn/fabrics/node/:fabric_id?pending=true&running=true",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"cluster",
																		"sdn",
																		"fabrics",
																		"node",
																		":fabric_id"
																	],
																	"query": [
																		{
																			"key": "pending",
																			"value": "true",
																			"description": "Display pending config."
																		},
																		{
																			"key": "running",
																			"value": "true",
																			"description": "Display running config."
																		}
																	],
																	"variable": [
																		{
																			"key": "fabric_id"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "[\n  {\n    \"digest\": \"string\",\n    \"fabric_id\": \"string\",\n    \"interfaces\": [\n      \"string\",\n      \"string\"\n    ],\n    \"ip\": \"243.195.75.94\",\n    \"ip6\": \"1ca0:d001:ca5a:efc1:405e:b28f:bdc9:dc3b\",\n    \"lock-token\": \"string\",\n    \"node_id\": \"string\",\n    \"protocol\": \"openfabric\"\n  },\n  {\n    \"digest\": \"string\",\n    \"fabric_id\": \"string\",\n    \"interfaces\": [\n      \"string\",\n      \"string\"\n    ],\n    \"ip\": \"176.111.181.170\",\n    \"ip6\": \"9324:2063:71a7:f4cc:36b0:36ed:55f3:a668\",\n    \"lock-token\": \"string\",\n    \"node_id\": \"string\",\n    \"protocol\": \"ospf\"\n  }\n]"
														}
													]
												},
												{
													"name": "Add a node",
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/cluster/sdn/fabrics/node/:fabric_id?digest=string&ip=253.242.144.244&ip6=6732:fbfd:a093:658d:9caa:14f2:50ae:881e&lock-token=string&node_id=string&protocol=openfabric",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"cluster",
																"sdn",
																"fabrics",
																"node",
																":fabric_id"
															],
															"query": [
																{
																	"key": "digest",
																	"value": "string",
																	"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
																},
																{
																	"key": "ip",
																	"value": "253.242.144.244",
																	"description": "IPv4 address for this node"
																},
																{
																	"key": "ip6",
																	"value": "6732:fbfd:a093:658d:9caa:14f2:50ae:881e",
																	"description": "IPv6 address for this node"
																},
																{
																	"key": "lock-token",
																	"value": "string",
																	"description": "the token for unlocking the global SDN configuration"
																},
																{
																	"key": "node_id",
																	"value": "string",
																	"description": "(Required) Identifier for nodes in an SDN fabric"
																},
																{
																	"key": "protocol",
																	"value": "openfabric",
																	"description": "(Required) Type of configuration entry in an SDN Fabric section config"
																}
															],
															"variable": [
																{
																	"key": "fabric_id",
																	"value": "string",
																	"description": "(Required) Identifier for SDN fabrics"
																}
															]
														},
														"description": "Add a node"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/cluster/sdn/fabrics/node/:fabric_id?digest=string&ip=253.242.144.244&ip6=6732:fbfd:a093:658d:9caa:14f2:50ae:881e&lock-token=string&node_id=string&protocol=openfabric",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"cluster",
																		"sdn",
																		"fabrics",
																		"node",
																		":fabric_id"
																	],
																	"query": [
																		{
																			"key": "digest",
																			"value": "string",
																			"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
																		},
																		{
																			"key": "ip",
																			"value": "253.242.144.244",
																			"description": "IPv4 address for this node"
																		},
																		{
																			"key": "ip6",
																			"value": "6732:fbfd:a093:658d:9caa:14f2:50ae:881e",
																			"description": "IPv6 address for this node"
																		},
																		{
																			"key": "lock-token",
																			"value": "string",
																			"description": "the token for unlocking the global SDN configuration"
																		},
																		{
																			"key": "node_id",
																			"value": "string",
																			"description": "(Required) Identifier for nodes in an SDN fabric"
																		},
																		{
																			"key": "protocol",
																			"value": "openfabric",
																			"description": "(Required) Type of configuration entry in an SDN Fabric section config"
																		}
																	],
																	"variable": [
																		{
																			"key": "fabric_id"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "null"
														}
													]
												}
											]
										},
										{
											"name": "SDN Fabrics Index",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/sdn/fabrics/node?pending=true&running=true",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"sdn",
														"fabrics",
														"node"
													],
													"query": [
														{
															"key": "pending",
															"value": "true",
															"description": "Display pending config."
														},
														{
															"key": "running",
															"value": "true",
															"description": "Display running config."
														}
													]
												},
												"description": "SDN Fabrics Index"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/cluster/sdn/fabrics/node?pending=true&running=true",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"cluster",
																"sdn",
																"fabrics",
																"node"
															],
															"query": [
																{
																	"key": "pending",
																	"value": "true",
																	"description": "Display pending config."
																},
																{
																	"key": "running",
																	"value": "true",
																	"description": "Display running config."
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "[\n  {\n    \"digest\": \"string\",\n    \"fabric_id\": \"string\",\n    \"interfaces\": [\n      \"string\",\n      \"string\"\n    ],\n    \"ip\": \"239.88.217.2\",\n    \"ip6\": \"50eb:4f92:ce0b:d688:4b16:bcd8:612b:c9f2\",\n    \"lock-token\": \"string\",\n    \"node_id\": \"string\",\n    \"protocol\": \"openfabric\"\n  },\n  {\n    \"digest\": \"string\",\n    \"fabric_id\": \"string\",\n    \"interfaces\": [\n      \"string\",\n      \"string\"\n    ],\n    \"ip\": \"174.164.101.167\",\n    \"ip6\": \"9aac:d1cc:c363:6bd1:8573:15b9:438a:ca3c\",\n    \"lock-token\": \"string\",\n    \"node_id\": \"string\",\n    \"protocol\": \"openfabric\"\n  }\n]"
												}
											]
										}
									]
								},
								{
									"name": "all",
									"item": [
										{
											"name": "SDN Fabrics Index",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/sdn/fabrics/all?pending=true&running=true",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"sdn",
														"fabrics",
														"all"
													],
													"query": [
														{
															"key": "pending",
															"value": "true",
															"description": "Display pending config."
														},
														{
															"key": "running",
															"value": "true",
															"description": "Display running config."
														}
													]
												},
												"description": "SDN Fabrics Index"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/cluster/sdn/fabrics/all?pending=true&running=true",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"cluster",
																"sdn",
																"fabrics",
																"all"
															],
															"query": [
																{
																	"key": "pending",
																	"value": "true",
																	"description": "Display pending config."
																},
																{
																	"key": "running",
																	"value": "true",
																	"description": "Display running config."
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"fabrics\": [\n    {\n      \"area\": \"string\",\n      \"csnp_interval\": 363.69149527929926,\n      \"digest\": \"string\",\n      \"hello_interval\": 221.04244069939313,\n      \"id\": \"string\",\n      \"ip6_prefix\": \"string\",\n      \"ip_prefix\": \"string\",\n      \"lock-token\": \"string\",\n      \"protocol\": \"openfabric\"\n    },\n    {\n      \"area\": \"string\",\n      \"csnp_interval\": 399.41192429100107,\n      \"digest\": \"string\",\n      \"hello_interval\": 331.7817616916913,\n      \"id\": \"string\",\n      \"ip6_prefix\": \"string\",\n      \"ip_prefix\": \"string\",\n      \"lock-token\": \"string\",\n      \"protocol\": \"ospf\"\n    }\n  ],\n  \"nodes\": [\n    {\n      \"digest\": \"string\",\n      \"fabric_id\": \"string\",\n      \"interfaces\": [\n        \"string\",\n        \"string\"\n      ],\n      \"ip\": \"124.177.60.245\",\n      \"ip6\": \"343f:56f2:781a:d8cb:adb8:11e7:c615:6276\",\n      \"lock-token\": \"string\",\n      \"node_id\": \"string\",\n      \"protocol\": \"openfabric\"\n    },\n    {\n      \"digest\": \"string\",\n      \"fabric_id\": \"string\",\n      \"interfaces\": [\n        \"string\",\n        \"string\"\n      ],\n      \"ip\": \"172.89.147.233\",\n      \"ip6\": \"a9f3:d027:46ea:7481:7c7e:f201:1a77:e735\",\n      \"lock-token\": \"string\",\n      \"node_id\": \"string\",\n      \"protocol\": \"ospf\"\n    }\n  ]\n}"
												}
											]
										}
									]
								},
								{
									"name": "SDN Fabrics Index",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/cluster/sdn/fabrics",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cluster",
												"sdn",
												"fabrics"
											]
										},
										"description": "SDN Fabrics Index"
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/sdn/fabrics",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"sdn",
														"fabrics"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"subdir\": \"string\"\n  },\n  {\n    \"subdir\": \"string\"\n  }\n]"
										}
									]
								}
							]
						},
						{
							"name": "lock",
							"item": [
								{
									"name": "Release global lock for SDN configuration",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/cluster/sdn/lock?force=0&lock-token=string",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cluster",
												"sdn",
												"lock"
											],
											"query": [
												{
													"key": "force",
													"value": "0",
													"description": "if true, allow releasing lock without providing the token"
												},
												{
													"key": "lock-token",
													"value": "string",
													"description": "the token for unlocking the global SDN configuration"
												}
											]
										},
										"description": "Release global lock for SDN configuration"
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/sdn/lock?force=0&lock-token=string",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"sdn",
														"lock"
													],
													"query": [
														{
															"key": "force",
															"value": "0",
															"description": "if true, allow releasing lock without providing the token"
														},
														{
															"key": "lock-token",
															"value": "string",
															"description": "the token for unlocking the global SDN configuration"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "null"
										}
									]
								},
								{
									"name": "Acquire global lock for SDN configuration",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/cluster/sdn/lock?allow-pending=0",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cluster",
												"sdn",
												"lock"
											],
											"query": [
												{
													"key": "allow-pending",
													"value": "0",
													"description": "if true, allow acquiring lock even though there are pending changes"
												}
											]
										},
										"description": "Acquire global lock for SDN configuration"
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/sdn/lock?allow-pending=0",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"sdn",
														"lock"
													],
													"query": [
														{
															"key": "allow-pending",
															"value": "0",
															"description": "if true, allow acquiring lock even though there are pending changes"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "string"
										}
									]
								}
							]
						},
						{
							"name": "rollback",
							"item": [
								{
									"name": "Rollback pending changes to SDN configuration",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/cluster/sdn/rollback?lock-token=string&release-lock=1",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cluster",
												"sdn",
												"rollback"
											],
											"query": [
												{
													"key": "lock-token",
													"value": "string",
													"description": "the token for unlocking the global SDN configuration"
												},
												{
													"key": "release-lock",
													"value": "1",
													"description": "When lock-token has been provided and configuration successfully rollbacked, release the lock automatically afterwards"
												}
											]
										},
										"description": "Rollback pending changes to SDN configuration"
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/cluster/sdn/rollback?lock-token=string&release-lock=1",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"cluster",
														"sdn",
														"rollback"
													],
													"query": [
														{
															"key": "lock-token",
															"value": "string",
															"description": "the token for unlocking the global SDN configuration"
														},
														{
															"key": "release-lock",
															"value": "1",
															"description": "When lock-token has been provided and configuration successfully rollbacked, release the lock automatically afterwards"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "null"
										}
									]
								}
							]
						},
						{
							"name": "Directory index.",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/cluster/sdn",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"cluster",
										"sdn"
									]
								},
								"description": "Directory index."
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/cluster/sdn",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cluster",
												"sdn"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"id\": \"string\"\n  },\n  {\n    \"id\": \"string\"\n  }\n]"
								}
							]
						},
						{
							"name": "Apply sdn controller changes && reload.",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/cluster/sdn?lock-token=string&release-lock=1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"cluster",
										"sdn"
									],
									"query": [
										{
											"key": "lock-token",
											"value": "string",
											"description": "the token for unlocking the global SDN configuration"
										},
										{
											"key": "release-lock",
											"value": "1",
											"description": "When lock-token has been provided and configuration successfully commited, release the lock automatically afterwards"
										}
									]
								},
								"description": "Apply sdn controller changes && reload."
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/cluster/sdn?lock-token=string&release-lock=1",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cluster",
												"sdn"
											],
											"query": [
												{
													"key": "lock-token",
													"value": "string",
													"description": "the token for unlocking the global SDN configuration"
												},
												{
													"key": "release-lock",
													"value": "1",
													"description": "When lock-token has been provided and configuration successfully commited, release the lock automatically afterwards"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "string"
								}
							]
						}
					]
				},
				{
					"name": "log",
					"item": [
						{
							"name": "Read cluster log",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/cluster/log?max=5741",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"cluster",
										"log"
									],
									"query": [
										{
											"key": "max",
											"value": "5741",
											"description": "Maximum number of entries."
										}
									]
								},
								"description": "Read cluster log"
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/cluster/log?max=5741",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cluster",
												"log"
											],
											"query": [
												{
													"key": "max",
													"value": "5741",
													"description": "Maximum number of entries."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[]"
								}
							]
						}
					]
				},
				{
					"name": "resources",
					"item": [
						{
							"name": "Resources index (cluster wide).",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/cluster/resources?type=vm",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"cluster",
										"resources"
									],
									"query": [
										{
											"key": "type",
											"value": "vm",
											"description": "Resource type."
										}
									]
								},
								"description": "Resources index (cluster wide)."
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/cluster/resources?type=vm",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cluster",
												"resources"
											],
											"query": [
												{
													"key": "type",
													"value": "vm",
													"description": "Resource type."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"cgroup-mode\": 8320,\n    \"content\": \"string\",\n    \"cpu\": 6055.733889806618,\n    \"disk\": 4144,\n    \"diskread\": 968,\n    \"diskwrite\": 925,\n    \"hastate\": \"string\",\n    \"id\": \"string\",\n    \"level\": \"string\",\n    \"lock\": \"string\",\n    \"maxcpu\": 2994.7639610503306,\n    \"maxdisk\": 921,\n    \"maxmem\": 693,\n    \"mem\": 937,\n    \"memhost\": 1833,\n    \"name\": \"string\",\n    \"netin\": 2256,\n    \"netout\": 8447,\n    \"node\": \"string\",\n    \"plugintype\": \"string\",\n    \"pool\": \"string\",\n    \"status\": \"string\",\n    \"storage\": \"string\",\n    \"tags\": \"string\",\n    \"template\": 0,\n    \"type\": \"qemu\",\n    \"uptime\": 2426,\n    \"vmid\": 737354286\n  },\n  {\n    \"cgroup-mode\": 4251,\n    \"content\": \"string\",\n    \"cpu\": 3355.5824509884637,\n    \"disk\": 4001,\n    \"diskread\": 4524,\n    \"diskwrite\": 7863,\n    \"hastate\": \"string\",\n    \"id\": \"string\",\n    \"level\": \"string\",\n    \"lock\": \"string\",\n    \"maxcpu\": 7016.259663010785,\n    \"maxdisk\": 6618,\n    \"maxmem\": 4846,\n    \"mem\": 5803,\n    \"memhost\": 9153,\n    \"name\": \"string\",\n    \"netin\": 1013,\n    \"netout\": 4847,\n    \"node\": \"string\",\n    \"plugintype\": \"string\",\n    \"pool\": \"string\",\n    \"status\": \"string\",\n    \"storage\": \"string\",\n    \"tags\": \"string\",\n    \"template\": 0,\n    \"type\": \"storage\",\n    \"uptime\": 8624,\n    \"vmid\": 690972471\n  }\n]"
								}
							]
						}
					]
				},
				{
					"name": "tasks",
					"item": [
						{
							"name": "List recent tasks (cluster wide).",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/cluster/tasks",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"cluster",
										"tasks"
									]
								},
								"description": "List recent tasks (cluster wide)."
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/cluster/tasks",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cluster",
												"tasks"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"upid\": \"string\"\n  },\n  {\n    \"upid\": \"string\"\n  }\n]"
								}
							]
						}
					]
				},
				{
					"name": "options",
					"item": [
						{
							"name": "Get datacenter options. Without 'Sys.Audit' on '/' not all options are returned.",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/cluster/options",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"cluster",
										"options"
									]
								},
								"description": "Get datacenter options. Without 'Sys.Audit' on '/' not all options are returned."
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/cluster/options",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cluster",
												"options"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{}"
								}
							]
						},
						{
							"name": "Set datacenter options.",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/cluster/options?bwlimit=string&consent-text=string&console=vv&crs=string&delete=string&description=string&email_from=string&fencing=watchdog&ha=string&http_proxy=http://Mc38y^X5>&keyboard=no&language=hr&mac_prefix=BC:24:11&max_workers=5741&migration=string&migration_unsecure=true&next-id=string&notify=string&registered-tags=&replication=string&tag-style=string&u2f=string&user-tag-access=string&webauthn=string",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"cluster",
										"options"
									],
									"query": [
										{
											"key": "bwlimit",
											"value": "string",
											"description": "Set I/O bandwidth limit for various operations (in KiB/s)."
										},
										{
											"key": "consent-text",
											"value": "string",
											"description": "Consent text that is displayed before logging in."
										},
										{
											"key": "console",
											"value": "vv",
											"description": "Select the default Console viewer. You can either use the builtin java applet (VNC; deprecated and maps to html5), an external virt-viewer comtatible application (SPICE), an HTML5 based vnc viewer (noVNC), or an HTML5 based console client (xtermjs). If the selected viewer is not available (e.g. SPICE not activated for the VM), the fallback is noVNC."
										},
										{
											"key": "crs",
											"value": "string",
											"description": "Cluster resource scheduling settings."
										},
										{
											"key": "delete",
											"value": "string",
											"description": "A list of settings you want to delete."
										},
										{
											"key": "description",
											"value": "string",
											"description": "Datacenter description. Shown in the web-interface datacenter notes panel. This is saved as comment inside the configuration file."
										},
										{
											"key": "email_from",
											"value": "string",
											"description": "Specify email address to send notification from (default is root@$hostname)"
										},
										{
											"key": "fencing",
											"value": "watchdog",
											"description": "Set the fencing mode of the HA cluster. Hardware mode needs a valid configuration of fence devices in /etc/pve/ha/fence.cfg. With both all two modes are used.\n\nWARNING: 'hardware' and 'both' are EXPERIMENTAL & WIP"
										},
										{
											"key": "ha",
											"value": "string",
											"description": "Cluster wide HA settings."
										},
										{
											"key": "http_proxy",
											"value": "http://Mc38y^X5>",
											"description": "Specify external http proxy which is used for downloads (example: 'http://username:password@host:port/')"
										},
										{
											"key": "keyboard",
											"value": "no",
											"description": "Default keybord layout for vnc server."
										},
										{
											"key": "language",
											"value": "hr",
											"description": "Default GUI language."
										},
										{
											"key": "mac_prefix",
											"value": "BC:24:11",
											"description": "Prefix for the auto-generated MAC addresses of virtual guests. The default 'BC:24:11' is the OUI assigned by the IEEE to Proxmox Server Solutions GmbH for a 24-bit large MAC block. You're allowed to use this in local networks, i.e., those not directly reachable by the public (e.g., in a LAN or behind NAT)."
										},
										{
											"key": "max_workers",
											"value": "5741",
											"description": "Defines how many workers (per node) are maximal started  on actions like 'stopall VMs' or task from the ha-manager."
										},
										{
											"key": "migration",
											"value": "string",
											"description": "For cluster wide migration settings."
										},
										{
											"key": "migration_unsecure",
											"value": "true",
											"description": "Migration is secure using SSH tunnel by default. For secure private networks you can disable it to speed up migration. Deprecated, use the 'migration' property instead!"
										},
										{
											"key": "next-id",
											"value": "string",
											"description": "Control the range for the free VMID auto-selection pool."
										},
										{
											"key": "notify",
											"value": "string",
											"description": "Cluster-wide notification settings."
										},
										{
											"key": "registered-tags",
											"value": "",
											"description": "A list of tags that require a `Sys.Modify` on '/' to set and delete. Tags set here that are also in 'user-tag-access' also require `Sys.Modify`."
										},
										{
											"key": "replication",
											"value": "string",
											"description": "For cluster wide replication settings."
										},
										{
											"key": "tag-style",
											"value": "string",
											"description": "Tag style options."
										},
										{
											"key": "u2f",
											"value": "string",
											"description": "u2f"
										},
										{
											"key": "user-tag-access",
											"value": "string",
											"description": "Privilege options for user-settable tags"
										},
										{
											"key": "webauthn",
											"value": "string",
											"description": "webauthn configuration"
										}
									]
								},
								"description": "Set datacenter options."
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/cluster/options?bwlimit=string&consent-text=string&console=vv&crs=string&delete=string&description=string&email_from=string&fencing=watchdog&ha=string&http_proxy=http://Mc38y^X5>&keyboard=no&language=hr&mac_prefix=BC:24:11&max_workers=5741&migration=string&migration_unsecure=true&next-id=string&notify=string&registered-tags=&replication=string&tag-style=string&u2f=string&user-tag-access=string&webauthn=string",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cluster",
												"options"
											],
											"query": [
												{
													"key": "bwlimit",
													"value": "string",
													"description": "Set I/O bandwidth limit for various operations (in KiB/s)."
												},
												{
													"key": "consent-text",
													"value": "string",
													"description": "Consent text that is displayed before logging in."
												},
												{
													"key": "console",
													"value": "vv",
													"description": "Select the default Console viewer. You can either use the builtin java applet (VNC; deprecated and maps to html5), an external virt-viewer comtatible application (SPICE), an HTML5 based vnc viewer (noVNC), or an HTML5 based console client (xtermjs). If the selected viewer is not available (e.g. SPICE not activated for the VM), the fallback is noVNC."
												},
												{
													"key": "crs",
													"value": "string",
													"description": "Cluster resource scheduling settings."
												},
												{
													"key": "delete",
													"value": "string",
													"description": "A list of settings you want to delete."
												},
												{
													"key": "description",
													"value": "string",
													"description": "Datacenter description. Shown in the web-interface datacenter notes panel. This is saved as comment inside the configuration file."
												},
												{
													"key": "email_from",
													"value": "string",
													"description": "Specify email address to send notification from (default is root@$hostname)"
												},
												{
													"key": "fencing",
													"value": "watchdog",
													"description": "Set the fencing mode of the HA cluster. Hardware mode needs a valid configuration of fence devices in /etc/pve/ha/fence.cfg. With both all two modes are used.\n\nWARNING: 'hardware' and 'both' are EXPERIMENTAL & WIP"
												},
												{
													"key": "ha",
													"value": "string",
													"description": "Cluster wide HA settings."
												},
												{
													"key": "http_proxy",
													"value": "http://Mc38y^X5>",
													"description": "Specify external http proxy which is used for downloads (example: 'http://username:password@host:port/')"
												},
												{
													"key": "keyboard",
													"value": "no",
													"description": "Default keybord layout for vnc server."
												},
												{
													"key": "language",
													"value": "hr",
													"description": "Default GUI language."
												},
												{
													"key": "mac_prefix",
													"value": "BC:24:11",
													"description": "Prefix for the auto-generated MAC addresses of virtual guests. The default 'BC:24:11' is the OUI assigned by the IEEE to Proxmox Server Solutions GmbH for a 24-bit large MAC block. You're allowed to use this in local networks, i.e., those not directly reachable by the public (e.g., in a LAN or behind NAT)."
												},
												{
													"key": "max_workers",
													"value": "5741",
													"description": "Defines how many workers (per node) are maximal started  on actions like 'stopall VMs' or task from the ha-manager."
												},
												{
													"key": "migration",
													"value": "string",
													"description": "For cluster wide migration settings."
												},
												{
													"key": "migration_unsecure",
													"value": "true",
													"description": "Migration is secure using SSH tunnel by default. For secure private networks you can disable it to speed up migration. Deprecated, use the 'migration' property instead!"
												},
												{
													"key": "next-id",
													"value": "string",
													"description": "Control the range for the free VMID auto-selection pool."
												},
												{
													"key": "notify",
													"value": "string",
													"description": "Cluster-wide notification settings."
												},
												{
													"key": "registered-tags",
													"value": "",
													"description": "A list of tags that require a `Sys.Modify` on '/' to set and delete. Tags set here that are also in 'user-tag-access' also require `Sys.Modify`."
												},
												{
													"key": "replication",
													"value": "string",
													"description": "For cluster wide replication settings."
												},
												{
													"key": "tag-style",
													"value": "string",
													"description": "Tag style options."
												},
												{
													"key": "u2f",
													"value": "string",
													"description": "u2f"
												},
												{
													"key": "user-tag-access",
													"value": "string",
													"description": "Privilege options for user-settable tags"
												},
												{
													"key": "webauthn",
													"value": "string",
													"description": "webauthn configuration"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "null"
								}
							]
						}
					]
				},
				{
					"name": "status",
					"item": [
						{
							"name": "Get cluster status information.",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/cluster/status",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"cluster",
										"status"
									]
								},
								"description": "Get cluster status information."
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/cluster/status",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cluster",
												"status"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"id\": \"string\",\n    \"ip\": \"string\",\n    \"level\": \"string\",\n    \"local\": false,\n    \"name\": \"string\",\n    \"nodeid\": 4523,\n    \"nodes\": 5,\n    \"online\": false,\n    \"quorate\": true,\n    \"type\": \"node\",\n    \"version\": 3236\n  },\n  {\n    \"id\": \"string\",\n    \"ip\": \"string\",\n    \"level\": \"string\",\n    \"local\": true,\n    \"name\": \"string\",\n    \"nodeid\": 3067,\n    \"nodes\": 2427,\n    \"online\": false,\n    \"quorate\": false,\n    \"type\": \"node\",\n    \"version\": 2345\n  }\n]"
								}
							]
						}
					]
				},
				{
					"name": "nextid",
					"item": [
						{
							"name": "Get next free VMID. Pass a VMID to assert that its free (at time of check).",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/cluster/nextid?vmid=358786328",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"cluster",
										"nextid"
									],
									"query": [
										{
											"key": "vmid",
											"value": "358786328",
											"description": "The (unique) ID of the VM."
										}
									]
								},
								"description": "Get next free VMID. Pass a VMID to assert that its free (at time of check)."
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/cluster/nextid?vmid=358786328",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"cluster",
												"nextid"
											],
											"query": [
												{
													"key": "vmid",
													"value": "358786328",
													"description": "The (unique) ID of the VM."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "5923"
								}
							]
						}
					]
				},
				{
					"name": "Cluster index.",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/cluster",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"cluster"
							]
						},
						"description": "Cluster index."
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/cluster",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"cluster"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[]"
						}
					]
				}
			]
		},
		{
			"name": "nodes",
			"item": [
				{
					"name": "{node}",
					"item": [
						{
							"name": "qemu",
							"item": [
								{
									"name": "{vmid}",
									"item": [
										{
											"name": "firewall",
											"item": [
												{
													"name": "rules",
													"item": [
														{
															"name": "{pos}",
															"item": [
																{
																	"name": "Delete rule.",
																	"request": {
																		"method": "DELETE",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/firewall/rules/:pos?digest=string",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"nodes",
																				":node",
																				"qemu",
																				":vmid",
																				"firewall",
																				"rules",
																				":pos"
																			],
																			"query": [
																				{
																					"key": "digest",
																					"value": "string",
																					"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
																				}
																			],
																			"variable": [
																				{
																					"key": "node",
																					"value": "string",
																					"description": "(Required) The cluster node name."
																				},
																				{
																					"key": "vmid",
																					"value": "358786328",
																					"description": "(Required) The (unique) ID of the VM."
																				},
																				{
																					"key": "pos",
																					"value": "8248",
																					"description": "Update rule at position <pos>."
																				}
																			]
																		},
																		"description": "Delete rule."
																	},
																	"response": [
																		{
																			"name": "successful operation",
																			"originalRequest": {
																				"method": "DELETE",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/firewall/rules/:pos?digest=string",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"nodes",
																						":node",
																						"qemu",
																						":vmid",
																						"firewall",
																						"rules",
																						":pos"
																					],
																					"query": [
																						{
																							"key": "digest",
																							"value": "string",
																							"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
																						}
																					],
																					"variable": [
																						{
																							"key": "node"
																						},
																						{
																							"key": "vmid"
																						},
																						{
																							"key": "pos"
																						}
																					]
																				}
																			},
																			"status": "OK",
																			"code": 200,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "null"
																		}
																	]
																},
																{
																	"name": "Get single rule data.",
																	"request": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/firewall/rules/:pos",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"nodes",
																				":node",
																				"qemu",
																				":vmid",
																				"firewall",
																				"rules",
																				":pos"
																			],
																			"variable": [
																				{
																					"key": "node",
																					"value": "string",
																					"description": "(Required) The cluster node name."
																				},
																				{
																					"key": "vmid",
																					"value": "358786328",
																					"description": "(Required) The (unique) ID of the VM."
																				},
																				{
																					"key": "pos",
																					"value": "8248",
																					"description": "Update rule at position <pos>."
																				}
																			]
																		},
																		"description": "Get single rule data."
																	},
																	"response": [
																		{
																			"name": "successful operation",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/firewall/rules/:pos",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"nodes",
																						":node",
																						"qemu",
																						":vmid",
																						"firewall",
																						"rules",
																						":pos"
																					],
																					"variable": [
																						{
																							"key": "node"
																						},
																						{
																							"key": "vmid"
																						},
																						{
																							"key": "pos"
																						}
																					]
																				}
																			},
																			"status": "OK",
																			"code": 200,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"action\": \"string\",\n  \"comment\": \"string\",\n  \"dest\": \"string\",\n  \"dport\": \"string\",\n  \"enable\": 7351,\n  \"icmp-type\": \"string\",\n  \"iface\": \"string\",\n  \"ipversion\": 3130,\n  \"log\": \"debug\",\n  \"macro\": \"string\",\n  \"pos\": 4146,\n  \"proto\": \"string\",\n  \"source\": \"string\",\n  \"sport\": \"string\",\n  \"type\": \"string\"\n}"
																		}
																	]
																},
																{
																	"name": "Modify rule data.",
																	"request": {
																		"method": "PUT",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/firewall/rules/:pos?action=wrF&comment=string&delete=string&dest=string&digest=string&dport=string&enable=8248&icmp-type=string&iface=string&log=crit&macro=string&moveto=8248&proto=string&source=string&sport=string&type=forward",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"nodes",
																				":node",
																				"qemu",
																				":vmid",
																				"firewall",
																				"rules",
																				":pos"
																			],
																			"query": [
																				{
																					"key": "action",
																					"value": "wrF",
																					"description": "Rule action ('ACCEPT', 'DROP', 'REJECT') or security group name."
																				},
																				{
																					"key": "comment",
																					"value": "string",
																					"description": "Descriptive comment."
																				},
																				{
																					"key": "delete",
																					"value": "string",
																					"description": "A list of settings you want to delete."
																				},
																				{
																					"key": "dest",
																					"value": "string",
																					"description": "Restrict packet destination address. This can refer to a single IP address, an IP set ('+ipsetname') or an IP alias definition. You can also specify an address range like '20.34.101.207-201.3.9.99', or a list of IP addresses and networks (entries are separated by comma). Please do not mix IPv4 and IPv6 addresses inside such lists."
																				},
																				{
																					"key": "digest",
																					"value": "string",
																					"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
																				},
																				{
																					"key": "dport",
																					"value": "string",
																					"description": "Restrict TCP/UDP destination port. You can use service names or simple numbers (0-65535), as defined in '/etc/services'. Port ranges can be specified with '\\d+:\\d+', for example '80:85', and you can use comma separated list to match several ports or ranges."
																				},
																				{
																					"key": "enable",
																					"value": "8248",
																					"description": "Flag to enable/disable a rule."
																				},
																				{
																					"key": "icmp-type",
																					"value": "string",
																					"description": "Specify icmp-type. Only valid if proto equals 'icmp' or 'icmpv6'/'ipv6-icmp'."
																				},
																				{
																					"key": "iface",
																					"value": "string",
																					"description": "Network interface name. You have to use network configuration key names for VMs and containers ('net\\d+'). Host related rules can use arbitrary strings."
																				},
																				{
																					"key": "log",
																					"value": "crit",
																					"description": "Log level for firewall rule."
																				},
																				{
																					"key": "macro",
																					"value": "string",
																					"description": "Use predefined standard macro."
																				},
																				{
																					"key": "moveto",
																					"value": "8248",
																					"description": "Move rule to new position <moveto>. Other arguments are ignored."
																				},
																				{
																					"key": "proto",
																					"value": "string",
																					"description": "IP protocol. You can use protocol names ('tcp'/'udp') or simple numbers, as defined in '/etc/protocols'."
																				},
																				{
																					"key": "source",
																					"value": "string",
																					"description": "Restrict packet source address. This can refer to a single IP address, an IP set ('+ipsetname') or an IP alias definition. You can also specify an address range like '20.34.101.207-201.3.9.99', or a list of IP addresses and networks (entries are separated by comma). Please do not mix IPv4 and IPv6 addresses inside such lists."
																				},
																				{
																					"key": "sport",
																					"value": "string",
																					"description": "Restrict TCP/UDP source port. You can use service names or simple numbers (0-65535), as defined in '/etc/services'. Port ranges can be specified with '\\d+:\\d+', for example '80:85', and you can use comma separated list to match several ports or ranges."
																				},
																				{
																					"key": "type",
																					"value": "forward",
																					"description": "Rule type."
																				}
																			],
																			"variable": [
																				{
																					"key": "node",
																					"value": "string",
																					"description": "(Required) The cluster node name."
																				},
																				{
																					"key": "vmid",
																					"value": "358786328",
																					"description": "(Required) The (unique) ID of the VM."
																				},
																				{
																					"key": "pos",
																					"value": "8248",
																					"description": "Update rule at position <pos>."
																				}
																			]
																		},
																		"description": "Modify rule data."
																	},
																	"response": [
																		{
																			"name": "successful operation",
																			"originalRequest": {
																				"method": "PUT",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/firewall/rules/:pos?action=wrF&comment=string&delete=string&dest=string&digest=string&dport=string&enable=8248&icmp-type=string&iface=string&log=crit&macro=string&moveto=8248&proto=string&source=string&sport=string&type=forward",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"nodes",
																						":node",
																						"qemu",
																						":vmid",
																						"firewall",
																						"rules",
																						":pos"
																					],
																					"query": [
																						{
																							"key": "action",
																							"value": "wrF",
																							"description": "Rule action ('ACCEPT', 'DROP', 'REJECT') or security group name."
																						},
																						{
																							"key": "comment",
																							"value": "string",
																							"description": "Descriptive comment."
																						},
																						{
																							"key": "delete",
																							"value": "string",
																							"description": "A list of settings you want to delete."
																						},
																						{
																							"key": "dest",
																							"value": "string",
																							"description": "Restrict packet destination address. This can refer to a single IP address, an IP set ('+ipsetname') or an IP alias definition. You can also specify an address range like '20.34.101.207-201.3.9.99', or a list of IP addresses and networks (entries are separated by comma). Please do not mix IPv4 and IPv6 addresses inside such lists."
																						},
																						{
																							"key": "digest",
																							"value": "string",
																							"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
																						},
																						{
																							"key": "dport",
																							"value": "string",
																							"description": "Restrict TCP/UDP destination port. You can use service names or simple numbers (0-65535), as defined in '/etc/services'. Port ranges can be specified with '\\d+:\\d+', for example '80:85', and you can use comma separated list to match several ports or ranges."
																						},
																						{
																							"key": "enable",
																							"value": "8248",
																							"description": "Flag to enable/disable a rule."
																						},
																						{
																							"key": "icmp-type",
																							"value": "string",
																							"description": "Specify icmp-type. Only valid if proto equals 'icmp' or 'icmpv6'/'ipv6-icmp'."
																						},
																						{
																							"key": "iface",
																							"value": "string",
																							"description": "Network interface name. You have to use network configuration key names for VMs and containers ('net\\d+'). Host related rules can use arbitrary strings."
																						},
																						{
																							"key": "log",
																							"value": "crit",
																							"description": "Log level for firewall rule."
																						},
																						{
																							"key": "macro",
																							"value": "string",
																							"description": "Use predefined standard macro."
																						},
																						{
																							"key": "moveto",
																							"value": "8248",
																							"description": "Move rule to new position <moveto>. Other arguments are ignored."
																						},
																						{
																							"key": "proto",
																							"value": "string",
																							"description": "IP protocol. You can use protocol names ('tcp'/'udp') or simple numbers, as defined in '/etc/protocols'."
																						},
																						{
																							"key": "source",
																							"value": "string",
																							"description": "Restrict packet source address. This can refer to a single IP address, an IP set ('+ipsetname') or an IP alias definition. You can also specify an address range like '20.34.101.207-201.3.9.99', or a list of IP addresses and networks (entries are separated by comma). Please do not mix IPv4 and IPv6 addresses inside such lists."
																						},
																						{
																							"key": "sport",
																							"value": "string",
																							"description": "Restrict TCP/UDP source port. You can use service names or simple numbers (0-65535), as defined in '/etc/services'. Port ranges can be specified with '\\d+:\\d+', for example '80:85', and you can use comma separated list to match several ports or ranges."
																						},
																						{
																							"key": "type",
																							"value": "forward",
																							"description": "Rule type."
																						}
																					],
																					"variable": [
																						{
																							"key": "node"
																						},
																						{
																							"key": "vmid"
																						},
																						{
																							"key": "pos"
																						}
																					]
																				}
																			},
																			"status": "OK",
																			"code": 200,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "null"
																		}
																	]
																}
															]
														},
														{
															"name": "List rules.",
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/firewall/rules",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"qemu",
																		":vmid",
																		"firewall",
																		"rules"
																	],
																	"variable": [
																		{
																			"key": "node",
																			"value": "string",
																			"description": "(Required) The cluster node name."
																		},
																		{
																			"key": "vmid",
																			"value": "358786328",
																			"description": "(Required) The (unique) ID of the VM."
																		}
																	]
																},
																"description": "List rules."
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/firewall/rules",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"nodes",
																				":node",
																				"qemu",
																				":vmid",
																				"firewall",
																				"rules"
																			],
																			"variable": [
																				{
																					"key": "node"
																				},
																				{
																					"key": "vmid"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "[\n  {\n    \"pos\": 2798\n  },\n  {\n    \"pos\": 6715\n  }\n]"
																}
															]
														},
														{
															"name": "Create new rule.",
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/firewall/rules?action=wrF&comment=string&dest=string&digest=string&dport=string&enable=8248&icmp-type=string&iface=string&log=crit&macro=string&pos=8248&proto=string&source=string&sport=string&type=forward",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"qemu",
																		":vmid",
																		"firewall",
																		"rules"
																	],
																	"query": [
																		{
																			"key": "action",
																			"value": "wrF",
																			"description": "(Required) Rule action ('ACCEPT', 'DROP', 'REJECT') or security group name."
																		},
																		{
																			"key": "comment",
																			"value": "string",
																			"description": "Descriptive comment."
																		},
																		{
																			"key": "dest",
																			"value": "string",
																			"description": "Restrict packet destination address. This can refer to a single IP address, an IP set ('+ipsetname') or an IP alias definition. You can also specify an address range like '20.34.101.207-201.3.9.99', or a list of IP addresses and networks (entries are separated by comma). Please do not mix IPv4 and IPv6 addresses inside such lists."
																		},
																		{
																			"key": "digest",
																			"value": "string",
																			"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
																		},
																		{
																			"key": "dport",
																			"value": "string",
																			"description": "Restrict TCP/UDP destination port. You can use service names or simple numbers (0-65535), as defined in '/etc/services'. Port ranges can be specified with '\\d+:\\d+', for example '80:85', and you can use comma separated list to match several ports or ranges."
																		},
																		{
																			"key": "enable",
																			"value": "8248",
																			"description": "Flag to enable/disable a rule."
																		},
																		{
																			"key": "icmp-type",
																			"value": "string",
																			"description": "Specify icmp-type. Only valid if proto equals 'icmp' or 'icmpv6'/'ipv6-icmp'."
																		},
																		{
																			"key": "iface",
																			"value": "string",
																			"description": "Network interface name. You have to use network configuration key names for VMs and containers ('net\\d+'). Host related rules can use arbitrary strings."
																		},
																		{
																			"key": "log",
																			"value": "crit",
																			"description": "Log level for firewall rule."
																		},
																		{
																			"key": "macro",
																			"value": "string",
																			"description": "Use predefined standard macro."
																		},
																		{
																			"key": "pos",
																			"value": "8248",
																			"description": "Update rule at position <pos>."
																		},
																		{
																			"key": "proto",
																			"value": "string",
																			"description": "IP protocol. You can use protocol names ('tcp'/'udp') or simple numbers, as defined in '/etc/protocols'."
																		},
																		{
																			"key": "source",
																			"value": "string",
																			"description": "Restrict packet source address. This can refer to a single IP address, an IP set ('+ipsetname') or an IP alias definition. You can also specify an address range like '20.34.101.207-201.3.9.99', or a list of IP addresses and networks (entries are separated by comma). Please do not mix IPv4 and IPv6 addresses inside such lists."
																		},
																		{
																			"key": "sport",
																			"value": "string",
																			"description": "Restrict TCP/UDP source port. You can use service names or simple numbers (0-65535), as defined in '/etc/services'. Port ranges can be specified with '\\d+:\\d+', for example '80:85', and you can use comma separated list to match several ports or ranges."
																		},
																		{
																			"key": "type",
																			"value": "forward",
																			"description": "(Required) Rule type."
																		}
																	],
																	"variable": [
																		{
																			"key": "node",
																			"value": "string",
																			"description": "(Required) The cluster node name."
																		},
																		{
																			"key": "vmid",
																			"value": "358786328",
																			"description": "(Required) The (unique) ID of the VM."
																		}
																	]
																},
																"description": "Create new rule."
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/firewall/rules?action=wrF&comment=string&dest=string&digest=string&dport=string&enable=8248&icmp-type=string&iface=string&log=crit&macro=string&pos=8248&proto=string&source=string&sport=string&type=forward",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"nodes",
																				":node",
																				"qemu",
																				":vmid",
																				"firewall",
																				"rules"
																			],
																			"query": [
																				{
																					"key": "action",
																					"value": "wrF",
																					"description": "(Required) Rule action ('ACCEPT', 'DROP', 'REJECT') or security group name."
																				},
																				{
																					"key": "comment",
																					"value": "string",
																					"description": "Descriptive comment."
																				},
																				{
																					"key": "dest",
																					"value": "string",
																					"description": "Restrict packet destination address. This can refer to a single IP address, an IP set ('+ipsetname') or an IP alias definition. You can also specify an address range like '20.34.101.207-201.3.9.99', or a list of IP addresses and networks (entries are separated by comma). Please do not mix IPv4 and IPv6 addresses inside such lists."
																				},
																				{
																					"key": "digest",
																					"value": "string",
																					"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
																				},
																				{
																					"key": "dport",
																					"value": "string",
																					"description": "Restrict TCP/UDP destination port. You can use service names or simple numbers (0-65535), as defined in '/etc/services'. Port ranges can be specified with '\\d+:\\d+', for example '80:85', and you can use comma separated list to match several ports or ranges."
																				},
																				{
																					"key": "enable",
																					"value": "8248",
																					"description": "Flag to enable/disable a rule."
																				},
																				{
																					"key": "icmp-type",
																					"value": "string",
																					"description": "Specify icmp-type. Only valid if proto equals 'icmp' or 'icmpv6'/'ipv6-icmp'."
																				},
																				{
																					"key": "iface",
																					"value": "string",
																					"description": "Network interface name. You have to use network configuration key names for VMs and containers ('net\\d+'). Host related rules can use arbitrary strings."
																				},
																				{
																					"key": "log",
																					"value": "crit",
																					"description": "Log level for firewall rule."
																				},
																				{
																					"key": "macro",
																					"value": "string",
																					"description": "Use predefined standard macro."
																				},
																				{
																					"key": "pos",
																					"value": "8248",
																					"description": "Update rule at position <pos>."
																				},
																				{
																					"key": "proto",
																					"value": "string",
																					"description": "IP protocol. You can use protocol names ('tcp'/'udp') or simple numbers, as defined in '/etc/protocols'."
																				},
																				{
																					"key": "source",
																					"value": "string",
																					"description": "Restrict packet source address. This can refer to a single IP address, an IP set ('+ipsetname') or an IP alias definition. You can also specify an address range like '20.34.101.207-201.3.9.99', or a list of IP addresses and networks (entries are separated by comma). Please do not mix IPv4 and IPv6 addresses inside such lists."
																				},
																				{
																					"key": "sport",
																					"value": "string",
																					"description": "Restrict TCP/UDP source port. You can use service names or simple numbers (0-65535), as defined in '/etc/services'. Port ranges can be specified with '\\d+:\\d+', for example '80:85', and you can use comma separated list to match several ports or ranges."
																				},
																				{
																					"key": "type",
																					"value": "forward",
																					"description": "(Required) Rule type."
																				}
																			],
																			"variable": [
																				{
																					"key": "node"
																				},
																				{
																					"key": "vmid"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "null"
																}
															]
														}
													]
												},
												{
													"name": "aliases",
													"item": [
														{
															"name": "{name}",
															"item": [
																{
																	"name": "Remove IP or Network alias.",
																	"request": {
																		"method": "DELETE",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/firewall/aliases/:name?digest=string",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"nodes",
																				":node",
																				"qemu",
																				":vmid",
																				"firewall",
																				"aliases",
																				":name"
																			],
																			"query": [
																				{
																					"key": "digest",
																					"value": "string",
																					"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
																				}
																			],
																			"variable": [
																				{
																					"key": "node",
																					"value": "string",
																					"description": "(Required) The cluster node name."
																				},
																				{
																					"key": "vmid",
																					"value": "358786328",
																					"description": "(Required) The (unique) ID of the VM."
																				},
																				{
																					"key": "name",
																					"value": "AcFp",
																					"description": "(Required) Alias name."
																				}
																			]
																		},
																		"description": "Remove IP or Network alias."
																	},
																	"response": [
																		{
																			"name": "successful operation",
																			"originalRequest": {
																				"method": "DELETE",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/firewall/aliases/:name?digest=string",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"nodes",
																						":node",
																						"qemu",
																						":vmid",
																						"firewall",
																						"aliases",
																						":name"
																					],
																					"query": [
																						{
																							"key": "digest",
																							"value": "string",
																							"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
																						}
																					],
																					"variable": [
																						{
																							"key": "node"
																						},
																						{
																							"key": "vmid"
																						},
																						{
																							"key": "name"
																						}
																					]
																				}
																			},
																			"status": "OK",
																			"code": 200,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "null"
																		}
																	]
																},
																{
																	"name": "Read alias.",
																	"request": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/firewall/aliases/:name",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"nodes",
																				":node",
																				"qemu",
																				":vmid",
																				"firewall",
																				"aliases",
																				":name"
																			],
																			"variable": [
																				{
																					"key": "node",
																					"value": "string",
																					"description": "(Required) The cluster node name."
																				},
																				{
																					"key": "vmid",
																					"value": "358786328",
																					"description": "(Required) The (unique) ID of the VM."
																				},
																				{
																					"key": "name",
																					"value": "AcFp",
																					"description": "(Required) Alias name."
																				}
																			]
																		},
																		"description": "Read alias."
																	},
																	"response": [
																		{
																			"name": "successful operation",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/firewall/aliases/:name",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"nodes",
																						":node",
																						"qemu",
																						":vmid",
																						"firewall",
																						"aliases",
																						":name"
																					],
																					"variable": [
																						{
																							"key": "node"
																						},
																						{
																							"key": "vmid"
																						},
																						{
																							"key": "name"
																						}
																					]
																				}
																			},
																			"status": "OK",
																			"code": 200,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "{}"
																		}
																	]
																},
																{
																	"name": "Update IP or Network alias.",
																	"request": {
																		"method": "PUT",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/firewall/aliases/:name?cidr=string&comment=string&digest=string&rename=AcFp",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"nodes",
																				":node",
																				"qemu",
																				":vmid",
																				"firewall",
																				"aliases",
																				":name"
																			],
																			"query": [
																				{
																					"key": "cidr",
																					"value": "string",
																					"description": "(Required) Network/IP specification in CIDR format."
																				},
																				{
																					"key": "comment",
																					"value": "string"
																				},
																				{
																					"key": "digest",
																					"value": "string",
																					"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
																				},
																				{
																					"key": "rename",
																					"value": "AcFp",
																					"description": "Rename an existing alias."
																				}
																			],
																			"variable": [
																				{
																					"key": "node",
																					"value": "string",
																					"description": "(Required) The cluster node name."
																				},
																				{
																					"key": "vmid",
																					"value": "358786328",
																					"description": "(Required) The (unique) ID of the VM."
																				},
																				{
																					"key": "name",
																					"value": "AcFp",
																					"description": "(Required) Alias name."
																				}
																			]
																		},
																		"description": "Update IP or Network alias."
																	},
																	"response": [
																		{
																			"name": "successful operation",
																			"originalRequest": {
																				"method": "PUT",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/firewall/aliases/:name?cidr=string&comment=string&digest=string&rename=AcFp",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"nodes",
																						":node",
																						"qemu",
																						":vmid",
																						"firewall",
																						"aliases",
																						":name"
																					],
																					"query": [
																						{
																							"key": "cidr",
																							"value": "string",
																							"description": "(Required) Network/IP specification in CIDR format."
																						},
																						{
																							"key": "comment",
																							"value": "string"
																						},
																						{
																							"key": "digest",
																							"value": "string",
																							"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
																						},
																						{
																							"key": "rename",
																							"value": "AcFp",
																							"description": "Rename an existing alias."
																						}
																					],
																					"variable": [
																						{
																							"key": "node"
																						},
																						{
																							"key": "vmid"
																						},
																						{
																							"key": "name"
																						}
																					]
																				}
																			},
																			"status": "OK",
																			"code": 200,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "null"
																		}
																	]
																}
															]
														},
														{
															"name": "List aliases",
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/firewall/aliases",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"qemu",
																		":vmid",
																		"firewall",
																		"aliases"
																	],
																	"variable": [
																		{
																			"key": "node",
																			"value": "string",
																			"description": "(Required) The cluster node name."
																		},
																		{
																			"key": "vmid",
																			"value": "358786328",
																			"description": "(Required) The (unique) ID of the VM."
																		}
																	]
																},
																"description": "List aliases"
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/firewall/aliases",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"nodes",
																				":node",
																				"qemu",
																				":vmid",
																				"firewall",
																				"aliases"
																			],
																			"variable": [
																				{
																					"key": "node"
																				},
																				{
																					"key": "vmid"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "[\n  {\n    \"cidr\": \"string\",\n    \"comment\": \"string\",\n    \"digest\": \"string\",\n    \"name\": \"string\"\n  },\n  {\n    \"cidr\": \"string\",\n    \"comment\": \"string\",\n    \"digest\": \"string\",\n    \"name\": \"string\"\n  }\n]"
																}
															]
														},
														{
															"name": "Create IP or Network Alias.",
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/firewall/aliases?cidr=string&comment=string&name=AcFp",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"qemu",
																		":vmid",
																		"firewall",
																		"aliases"
																	],
																	"query": [
																		{
																			"key": "cidr",
																			"value": "string",
																			"description": "(Required) Network/IP specification in CIDR format."
																		},
																		{
																			"key": "comment",
																			"value": "string"
																		},
																		{
																			"key": "name",
																			"value": "AcFp",
																			"description": "(Required) Alias name."
																		}
																	],
																	"variable": [
																		{
																			"key": "node",
																			"value": "string",
																			"description": "(Required) The cluster node name."
																		},
																		{
																			"key": "vmid",
																			"value": "358786328",
																			"description": "(Required) The (unique) ID of the VM."
																		}
																	]
																},
																"description": "Create IP or Network Alias."
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/firewall/aliases?cidr=string&comment=string&name=AcFp",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"nodes",
																				":node",
																				"qemu",
																				":vmid",
																				"firewall",
																				"aliases"
																			],
																			"query": [
																				{
																					"key": "cidr",
																					"value": "string",
																					"description": "(Required) Network/IP specification in CIDR format."
																				},
																				{
																					"key": "comment",
																					"value": "string"
																				},
																				{
																					"key": "name",
																					"value": "AcFp",
																					"description": "(Required) Alias name."
																				}
																			],
																			"variable": [
																				{
																					"key": "node"
																				},
																				{
																					"key": "vmid"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "null"
																}
															]
														}
													]
												},
												{
													"name": "ipset",
													"item": [
														{
															"name": "{name}",
															"item": [
																{
																	"name": "{cidr}",
																	"item": [
																		{
																			"name": "Remove IP or Network from IPSet.",
																			"request": {
																				"method": "DELETE",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/firewall/ipset/:name/:cidr?digest=string",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"nodes",
																						":node",
																						"qemu",
																						":vmid",
																						"firewall",
																						"ipset",
																						":name",
																						":cidr"
																					],
																					"query": [
																						{
																							"key": "digest",
																							"value": "string",
																							"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
																						}
																					],
																					"variable": [
																						{
																							"key": "node",
																							"value": "string",
																							"description": "(Required) The cluster node name."
																						},
																						{
																							"key": "vmid",
																							"value": "358786328",
																							"description": "(Required) The (unique) ID of the VM."
																						},
																						{
																							"key": "name",
																							"value": "AcFp",
																							"description": "(Required) IP set name."
																						},
																						{
																							"key": "cidr",
																							"value": "string",
																							"description": "(Required) Network/IP specification in CIDR format."
																						}
																					]
																				},
																				"description": "Remove IP or Network from IPSet."
																			},
																			"response": [
																				{
																					"name": "successful operation",
																					"originalRequest": {
																						"method": "DELETE",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/firewall/ipset/:name/:cidr?digest=string",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"nodes",
																								":node",
																								"qemu",
																								":vmid",
																								"firewall",
																								"ipset",
																								":name",
																								":cidr"
																							],
																							"query": [
																								{
																									"key": "digest",
																									"value": "string",
																									"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
																								}
																							],
																							"variable": [
																								{
																									"key": "node"
																								},
																								{
																									"key": "vmid"
																								},
																								{
																									"key": "name"
																								},
																								{
																									"key": "cidr"
																								}
																							]
																						}
																					},
																					"status": "OK",
																					"code": 200,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "null"
																				}
																			]
																		},
																		{
																			"name": "Read IP or Network settings from IPSet.",
																			"request": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/firewall/ipset/:name/:cidr",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"nodes",
																						":node",
																						"qemu",
																						":vmid",
																						"firewall",
																						"ipset",
																						":name",
																						":cidr"
																					],
																					"variable": [
																						{
																							"key": "node",
																							"value": "string",
																							"description": "(Required) The cluster node name."
																						},
																						{
																							"key": "vmid",
																							"value": "358786328",
																							"description": "(Required) The (unique) ID of the VM."
																						},
																						{
																							"key": "name",
																							"value": "AcFp",
																							"description": "(Required) IP set name."
																						},
																						{
																							"key": "cidr",
																							"value": "string",
																							"description": "(Required) Network/IP specification in CIDR format."
																						}
																					]
																				},
																				"description": "Read IP or Network settings from IPSet."
																			},
																			"response": [
																				{
																					"name": "successful operation",
																					"originalRequest": {
																						"method": "GET",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/firewall/ipset/:name/:cidr",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"nodes",
																								":node",
																								"qemu",
																								":vmid",
																								"firewall",
																								"ipset",
																								":name",
																								":cidr"
																							],
																							"variable": [
																								{
																									"key": "node"
																								},
																								{
																									"key": "vmid"
																								},
																								{
																									"key": "name"
																								},
																								{
																									"key": "cidr"
																								}
																							]
																						}
																					},
																					"status": "OK",
																					"code": 200,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{}"
																				}
																			]
																		},
																		{
																			"name": "Update IP or Network settings",
																			"request": {
																				"method": "PUT",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/firewall/ipset/:name/:cidr?comment=string&digest=string&nomatch=true",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"nodes",
																						":node",
																						"qemu",
																						":vmid",
																						"firewall",
																						"ipset",
																						":name",
																						":cidr"
																					],
																					"query": [
																						{
																							"key": "comment",
																							"value": "string"
																						},
																						{
																							"key": "digest",
																							"value": "string",
																							"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
																						},
																						{
																							"key": "nomatch",
																							"value": "true"
																						}
																					],
																					"variable": [
																						{
																							"key": "node",
																							"value": "string",
																							"description": "(Required) The cluster node name."
																						},
																						{
																							"key": "vmid",
																							"value": "358786328",
																							"description": "(Required) The (unique) ID of the VM."
																						},
																						{
																							"key": "name",
																							"value": "AcFp",
																							"description": "(Required) IP set name."
																						},
																						{
																							"key": "cidr",
																							"value": "string",
																							"description": "(Required) Network/IP specification in CIDR format."
																						}
																					]
																				},
																				"description": "Update IP or Network settings"
																			},
																			"response": [
																				{
																					"name": "successful operation",
																					"originalRequest": {
																						"method": "PUT",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/firewall/ipset/:name/:cidr?comment=string&digest=string&nomatch=true",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"nodes",
																								":node",
																								"qemu",
																								":vmid",
																								"firewall",
																								"ipset",
																								":name",
																								":cidr"
																							],
																							"query": [
																								{
																									"key": "comment",
																									"value": "string"
																								},
																								{
																									"key": "digest",
																									"value": "string",
																									"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
																								},
																								{
																									"key": "nomatch",
																									"value": "true"
																								}
																							],
																							"variable": [
																								{
																									"key": "node"
																								},
																								{
																									"key": "vmid"
																								},
																								{
																									"key": "name"
																								},
																								{
																									"key": "cidr"
																								}
																							]
																						}
																					},
																					"status": "OK",
																					"code": 200,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "null"
																				}
																			]
																		}
																	]
																},
																{
																	"name": "Delete IPSet",
																	"request": {
																		"method": "DELETE",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/firewall/ipset/:name?force=true",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"nodes",
																				":node",
																				"qemu",
																				":vmid",
																				"firewall",
																				"ipset",
																				":name"
																			],
																			"query": [
																				{
																					"key": "force",
																					"value": "true",
																					"description": "Delete all members of the IPSet, if there are any."
																				}
																			],
																			"variable": [
																				{
																					"key": "node",
																					"value": "string",
																					"description": "(Required) The cluster node name."
																				},
																				{
																					"key": "vmid",
																					"value": "358786328",
																					"description": "(Required) The (unique) ID of the VM."
																				},
																				{
																					"key": "name",
																					"value": "AcFp",
																					"description": "(Required) IP set name."
																				}
																			]
																		},
																		"description": "Delete IPSet"
																	},
																	"response": [
																		{
																			"name": "successful operation",
																			"originalRequest": {
																				"method": "DELETE",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/firewall/ipset/:name?force=true",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"nodes",
																						":node",
																						"qemu",
																						":vmid",
																						"firewall",
																						"ipset",
																						":name"
																					],
																					"query": [
																						{
																							"key": "force",
																							"value": "true",
																							"description": "Delete all members of the IPSet, if there are any."
																						}
																					],
																					"variable": [
																						{
																							"key": "node"
																						},
																						{
																							"key": "vmid"
																						},
																						{
																							"key": "name"
																						}
																					]
																				}
																			},
																			"status": "OK",
																			"code": 200,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "null"
																		}
																	]
																},
																{
																	"name": "List IPSet content",
																	"request": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/firewall/ipset/:name",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"nodes",
																				":node",
																				"qemu",
																				":vmid",
																				"firewall",
																				"ipset",
																				":name"
																			],
																			"variable": [
																				{
																					"key": "node",
																					"value": "string",
																					"description": "(Required) The cluster node name."
																				},
																				{
																					"key": "vmid",
																					"value": "358786328",
																					"description": "(Required) The (unique) ID of the VM."
																				},
																				{
																					"key": "name",
																					"value": "AcFp",
																					"description": "(Required) IP set name."
																				}
																			]
																		},
																		"description": "List IPSet content"
																	},
																	"response": [
																		{
																			"name": "successful operation",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/firewall/ipset/:name",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"nodes",
																						":node",
																						"qemu",
																						":vmid",
																						"firewall",
																						"ipset",
																						":name"
																					],
																					"variable": [
																						{
																							"key": "node"
																						},
																						{
																							"key": "vmid"
																						},
																						{
																							"key": "name"
																						}
																					]
																				}
																			},
																			"status": "OK",
																			"code": 200,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "[\n  {\n    \"cidr\": \"string\",\n    \"comment\": \"string\",\n    \"digest\": \"string\",\n    \"nomatch\": true\n  },\n  {\n    \"cidr\": \"string\",\n    \"comment\": \"string\",\n    \"digest\": \"string\",\n    \"nomatch\": true\n  }\n]"
																		}
																	]
																},
																{
																	"name": "Add IP or Network to IPSet.",
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/firewall/ipset/:name?cidr=string&comment=string&nomatch=true",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"nodes",
																				":node",
																				"qemu",
																				":vmid",
																				"firewall",
																				"ipset",
																				":name"
																			],
																			"query": [
																				{
																					"key": "cidr",
																					"value": "string",
																					"description": "(Required) Network/IP specification in CIDR format."
																				},
																				{
																					"key": "comment",
																					"value": "string"
																				},
																				{
																					"key": "nomatch",
																					"value": "true"
																				}
																			],
																			"variable": [
																				{
																					"key": "node",
																					"value": "string",
																					"description": "(Required) The cluster node name."
																				},
																				{
																					"key": "vmid",
																					"value": "358786328",
																					"description": "(Required) The (unique) ID of the VM."
																				},
																				{
																					"key": "name",
																					"value": "AcFp",
																					"description": "(Required) IP set name."
																				}
																			]
																		},
																		"description": "Add IP or Network to IPSet."
																	},
																	"response": [
																		{
																			"name": "successful operation",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/firewall/ipset/:name?cidr=string&comment=string&nomatch=true",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"nodes",
																						":node",
																						"qemu",
																						":vmid",
																						"firewall",
																						"ipset",
																						":name"
																					],
																					"query": [
																						{
																							"key": "cidr",
																							"value": "string",
																							"description": "(Required) Network/IP specification in CIDR format."
																						},
																						{
																							"key": "comment",
																							"value": "string"
																						},
																						{
																							"key": "nomatch",
																							"value": "true"
																						}
																					],
																					"variable": [
																						{
																							"key": "node"
																						},
																						{
																							"key": "vmid"
																						},
																						{
																							"key": "name"
																						}
																					]
																				}
																			},
																			"status": "OK",
																			"code": 200,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "null"
																		}
																	]
																}
															]
														},
														{
															"name": "List IPSets",
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/firewall/ipset",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"qemu",
																		":vmid",
																		"firewall",
																		"ipset"
																	],
																	"variable": [
																		{
																			"key": "node",
																			"value": "string",
																			"description": "(Required) The cluster node name."
																		},
																		{
																			"key": "vmid",
																			"value": "358786328",
																			"description": "(Required) The (unique) ID of the VM."
																		}
																	]
																},
																"description": "List IPSets"
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/firewall/ipset",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"nodes",
																				":node",
																				"qemu",
																				":vmid",
																				"firewall",
																				"ipset"
																			],
																			"variable": [
																				{
																					"key": "node"
																				},
																				{
																					"key": "vmid"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "[\n  {\n    \"comment\": \"string\",\n    \"digest\": \"string\",\n    \"name\": \"l2MB_\"\n  },\n  {\n    \"comment\": \"string\",\n    \"digest\": \"string\",\n    \"name\": \"qM63zam-u8BC\"\n  }\n]"
																}
															]
														},
														{
															"name": "Create new IPSet",
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/firewall/ipset?comment=string&digest=string&name=AcFp&rename=AcFp",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"qemu",
																		":vmid",
																		"firewall",
																		"ipset"
																	],
																	"query": [
																		{
																			"key": "comment",
																			"value": "string"
																		},
																		{
																			"key": "digest",
																			"value": "string",
																			"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
																		},
																		{
																			"key": "name",
																			"value": "AcFp",
																			"description": "(Required) IP set name."
																		},
																		{
																			"key": "rename",
																			"value": "AcFp",
																			"description": "Rename an existing IPSet. You can set 'rename' to the same value as 'name' to update the 'comment' of an existing IPSet."
																		}
																	],
																	"variable": [
																		{
																			"key": "node",
																			"value": "string",
																			"description": "(Required) The cluster node name."
																		},
																		{
																			"key": "vmid",
																			"value": "358786328",
																			"description": "(Required) The (unique) ID of the VM."
																		}
																	]
																},
																"description": "Create new IPSet"
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/firewall/ipset?comment=string&digest=string&name=AcFp&rename=AcFp",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"nodes",
																				":node",
																				"qemu",
																				":vmid",
																				"firewall",
																				"ipset"
																			],
																			"query": [
																				{
																					"key": "comment",
																					"value": "string"
																				},
																				{
																					"key": "digest",
																					"value": "string",
																					"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
																				},
																				{
																					"key": "name",
																					"value": "AcFp",
																					"description": "(Required) IP set name."
																				},
																				{
																					"key": "rename",
																					"value": "AcFp",
																					"description": "Rename an existing IPSet. You can set 'rename' to the same value as 'name' to update the 'comment' of an existing IPSet."
																				}
																			],
																			"variable": [
																				{
																					"key": "node"
																				},
																				{
																					"key": "vmid"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "null"
																}
															]
														}
													]
												},
												{
													"name": "options",
													"item": [
														{
															"name": "Get VM firewall options.",
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/firewall/options",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"qemu",
																		":vmid",
																		"firewall",
																		"options"
																	],
																	"variable": [
																		{
																			"key": "node",
																			"value": "string",
																			"description": "(Required) The cluster node name."
																		},
																		{
																			"key": "vmid",
																			"value": "358786328",
																			"description": "(Required) The (unique) ID of the VM."
																		}
																	]
																},
																"description": "Get VM firewall options."
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/firewall/options",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"nodes",
																				":node",
																				"qemu",
																				":vmid",
																				"firewall",
																				"options"
																			],
																			"variable": [
																				{
																					"key": "node"
																				},
																				{
																					"key": "vmid"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"dhcp\": 0,\n  \"enable\": 0,\n  \"ipfilter\": false,\n  \"log_level_in\": \"nolog\",\n  \"log_level_out\": \"warning\",\n  \"macfilter\": 1,\n  \"ndp\": 0,\n  \"policy_in\": \"DROP\",\n  \"policy_out\": \"REJECT\",\n  \"radv\": false\n}"
																}
															]
														},
														{
															"name": "Set Firewall options.",
															"request": {
																"method": "PUT",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/firewall/options?delete=string&dhcp=0&digest=string&enable=0&ipfilter=true&log_level_in=crit&log_level_out=crit&macfilter=1&ndp=0&policy_in=DROP&policy_out=DROP&radv=true",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"qemu",
																		":vmid",
																		"firewall",
																		"options"
																	],
																	"query": [
																		{
																			"key": "delete",
																			"value": "string",
																			"description": "A list of settings you want to delete."
																		},
																		{
																			"key": "dhcp",
																			"value": "0",
																			"description": "Enable DHCP."
																		},
																		{
																			"key": "digest",
																			"value": "string",
																			"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
																		},
																		{
																			"key": "enable",
																			"value": "0",
																			"description": "Enable/disable firewall rules."
																		},
																		{
																			"key": "ipfilter",
																			"value": "true",
																			"description": "Enable default IP filters. This is equivalent to adding an empty ipfilter-net<id> ipset for every interface. Such ipsets implicitly contain sane default restrictions such as restricting IPv6 link local addresses to the one derived from the interface's MAC address. For containers the configured IP addresses will be implicitly added."
																		},
																		{
																			"key": "log_level_in",
																			"value": "crit",
																			"description": "Log level for incoming traffic."
																		},
																		{
																			"key": "log_level_out",
																			"value": "crit",
																			"description": "Log level for outgoing traffic."
																		},
																		{
																			"key": "macfilter",
																			"value": "1",
																			"description": "Enable/disable MAC address filter."
																		},
																		{
																			"key": "ndp",
																			"value": "0",
																			"description": "Enable NDP (Neighbor Discovery Protocol)."
																		},
																		{
																			"key": "policy_in",
																			"value": "DROP",
																			"description": "Input policy."
																		},
																		{
																			"key": "policy_out",
																			"value": "DROP",
																			"description": "Output policy."
																		},
																		{
																			"key": "radv",
																			"value": "true",
																			"description": "Allow sending Router Advertisement."
																		}
																	],
																	"variable": [
																		{
																			"key": "node",
																			"value": "string",
																			"description": "(Required) The cluster node name."
																		},
																		{
																			"key": "vmid",
																			"value": "358786328",
																			"description": "(Required) The (unique) ID of the VM."
																		}
																	]
																},
																"description": "Set Firewall options."
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "PUT",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/firewall/options?delete=string&dhcp=0&digest=string&enable=0&ipfilter=true&log_level_in=crit&log_level_out=crit&macfilter=1&ndp=0&policy_in=DROP&policy_out=DROP&radv=true",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"nodes",
																				":node",
																				"qemu",
																				":vmid",
																				"firewall",
																				"options"
																			],
																			"query": [
																				{
																					"key": "delete",
																					"value": "string",
																					"description": "A list of settings you want to delete."
																				},
																				{
																					"key": "dhcp",
																					"value": "0",
																					"description": "Enable DHCP."
																				},
																				{
																					"key": "digest",
																					"value": "string",
																					"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
																				},
																				{
																					"key": "enable",
																					"value": "0",
																					"description": "Enable/disable firewall rules."
																				},
																				{
																					"key": "ipfilter",
																					"value": "true",
																					"description": "Enable default IP filters. This is equivalent to adding an empty ipfilter-net<id> ipset for every interface. Such ipsets implicitly contain sane default restrictions such as restricting IPv6 link local addresses to the one derived from the interface's MAC address. For containers the configured IP addresses will be implicitly added."
																				},
																				{
																					"key": "log_level_in",
																					"value": "crit",
																					"description": "Log level for incoming traffic."
																				},
																				{
																					"key": "log_level_out",
																					"value": "crit",
																					"description": "Log level for outgoing traffic."
																				},
																				{
																					"key": "macfilter",
																					"value": "1",
																					"description": "Enable/disable MAC address filter."
																				},
																				{
																					"key": "ndp",
																					"value": "0",
																					"description": "Enable NDP (Neighbor Discovery Protocol)."
																				},
																				{
																					"key": "policy_in",
																					"value": "DROP",
																					"description": "Input policy."
																				},
																				{
																					"key": "policy_out",
																					"value": "DROP",
																					"description": "Output policy."
																				},
																				{
																					"key": "radv",
																					"value": "true",
																					"description": "Allow sending Router Advertisement."
																				}
																			],
																			"variable": [
																				{
																					"key": "node"
																				},
																				{
																					"key": "vmid"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "null"
																}
															]
														}
													]
												},
												{
													"name": "log",
													"item": [
														{
															"name": "Read firewall log",
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/firewall/log?limit=8248&since=8248&start=8248&until=8248",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"qemu",
																		":vmid",
																		"firewall",
																		"log"
																	],
																	"query": [
																		{
																			"key": "limit",
																			"value": "8248"
																		},
																		{
																			"key": "since",
																			"value": "8248",
																			"description": "Display log since this UNIX epoch."
																		},
																		{
																			"key": "start",
																			"value": "8248"
																		},
																		{
																			"key": "until",
																			"value": "8248",
																			"description": "Display log until this UNIX epoch."
																		}
																	],
																	"variable": [
																		{
																			"key": "node",
																			"value": "string",
																			"description": "(Required) The cluster node name."
																		},
																		{
																			"key": "vmid",
																			"value": "358786328",
																			"description": "(Required) The (unique) ID of the VM."
																		}
																	]
																},
																"description": "Read firewall log"
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/firewall/log?limit=8248&since=8248&start=8248&until=8248",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"nodes",
																				":node",
																				"qemu",
																				":vmid",
																				"firewall",
																				"log"
																			],
																			"query": [
																				{
																					"key": "limit",
																					"value": "8248"
																				},
																				{
																					"key": "since",
																					"value": "8248",
																					"description": "Display log since this UNIX epoch."
																				},
																				{
																					"key": "start",
																					"value": "8248"
																				},
																				{
																					"key": "until",
																					"value": "8248",
																					"description": "Display log until this UNIX epoch."
																				}
																			],
																			"variable": [
																				{
																					"key": "node"
																				},
																				{
																					"key": "vmid"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "[\n  {\n    \"n\": 6858,\n    \"t\": \"string\"\n  },\n  {\n    \"n\": 9106,\n    \"t\": \"string\"\n  }\n]"
																}
															]
														}
													]
												},
												{
													"name": "refs",
													"item": [
														{
															"name": "Lists possible IPSet/Alias reference which are allowed in source/dest properties.",
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/firewall/refs?type=alias",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"qemu",
																		":vmid",
																		"firewall",
																		"refs"
																	],
																	"query": [
																		{
																			"key": "type",
																			"value": "alias",
																			"description": "Only list references of specified type."
																		}
																	],
																	"variable": [
																		{
																			"key": "node",
																			"value": "string",
																			"description": "(Required) The cluster node name."
																		},
																		{
																			"key": "vmid",
																			"value": "358786328",
																			"description": "(Required) The (unique) ID of the VM."
																		}
																	]
																},
																"description": "Lists possible IPSet/Alias reference which are allowed in source/dest properties."
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/firewall/refs?type=alias",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"nodes",
																				":node",
																				"qemu",
																				":vmid",
																				"firewall",
																				"refs"
																			],
																			"query": [
																				{
																					"key": "type",
																					"value": "alias",
																					"description": "Only list references of specified type."
																				}
																			],
																			"variable": [
																				{
																					"key": "node"
																				},
																				{
																					"key": "vmid"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "[\n  {\n    \"comment\": \"string\",\n    \"name\": \"string\",\n    \"ref\": \"string\",\n    \"scope\": \"string\",\n    \"type\": \"alias\"\n  },\n  {\n    \"comment\": \"string\",\n    \"name\": \"string\",\n    \"ref\": \"string\",\n    \"scope\": \"string\",\n    \"type\": \"ipset\"\n  }\n]"
																}
															]
														}
													]
												},
												{
													"name": "Directory index.",
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/firewall",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"qemu",
																":vmid",
																"firewall"
															],
															"variable": [
																{
																	"key": "node",
																	"value": "string",
																	"description": "(Required) The cluster node name."
																},
																{
																	"key": "vmid",
																	"value": "358786328",
																	"description": "(Required) The (unique) ID of the VM."
																}
															]
														},
														"description": "Directory index."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/firewall",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"qemu",
																		":vmid",
																		"firewall"
																	],
																	"variable": [
																		{
																			"key": "node"
																		},
																		{
																			"key": "vmid"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "[]"
														}
													]
												}
											]
										},
										{
											"name": "agent",
											"item": [
												{
													"name": "fsfreeze-freeze",
													"item": [
														{
															"name": "Execute fsfreeze-freeze.",
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/agent/fsfreeze-freeze",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"qemu",
																		":vmid",
																		"agent",
																		"fsfreeze-freeze"
																	],
																	"variable": [
																		{
																			"key": "node",
																			"value": "string",
																			"description": "(Required) The cluster node name."
																		},
																		{
																			"key": "vmid",
																			"value": "358786328",
																			"description": "(Required) The (unique) ID of the VM."
																		}
																	]
																},
																"description": "Execute fsfreeze-freeze."
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/agent/fsfreeze-freeze",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"nodes",
																				":node",
																				"qemu",
																				":vmid",
																				"agent",
																				"fsfreeze-freeze"
																			],
																			"variable": [
																				{
																					"key": "node"
																				},
																				{
																					"key": "vmid"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{}"
																}
															]
														}
													]
												},
												{
													"name": "fsfreeze-status",
													"item": [
														{
															"name": "Execute fsfreeze-status.",
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/agent/fsfreeze-status",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"qemu",
																		":vmid",
																		"agent",
																		"fsfreeze-status"
																	],
																	"variable": [
																		{
																			"key": "node",
																			"value": "string",
																			"description": "(Required) The cluster node name."
																		},
																		{
																			"key": "vmid",
																			"value": "358786328",
																			"description": "(Required) The (unique) ID of the VM."
																		}
																	]
																},
																"description": "Execute fsfreeze-status."
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/agent/fsfreeze-status",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"nodes",
																				":node",
																				"qemu",
																				":vmid",
																				"agent",
																				"fsfreeze-status"
																			],
																			"variable": [
																				{
																					"key": "node"
																				},
																				{
																					"key": "vmid"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{}"
																}
															]
														}
													]
												},
												{
													"name": "fsfreeze-thaw",
													"item": [
														{
															"name": "Execute fsfreeze-thaw.",
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/agent/fsfreeze-thaw",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"qemu",
																		":vmid",
																		"agent",
																		"fsfreeze-thaw"
																	],
																	"variable": [
																		{
																			"key": "node",
																			"value": "string",
																			"description": "(Required) The cluster node name."
																		},
																		{
																			"key": "vmid",
																			"value": "358786328",
																			"description": "(Required) The (unique) ID of the VM."
																		}
																	]
																},
																"description": "Execute fsfreeze-thaw."
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/agent/fsfreeze-thaw",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"nodes",
																				":node",
																				"qemu",
																				":vmid",
																				"agent",
																				"fsfreeze-thaw"
																			],
																			"variable": [
																				{
																					"key": "node"
																				},
																				{
																					"key": "vmid"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{}"
																}
															]
														}
													]
												},
												{
													"name": "fstrim",
													"item": [
														{
															"name": "Execute fstrim.",
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/agent/fstrim",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"qemu",
																		":vmid",
																		"agent",
																		"fstrim"
																	],
																	"variable": [
																		{
																			"key": "node",
																			"value": "string",
																			"description": "(Required) The cluster node name."
																		},
																		{
																			"key": "vmid",
																			"value": "358786328",
																			"description": "(Required) The (unique) ID of the VM."
																		}
																	]
																},
																"description": "Execute fstrim."
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/agent/fstrim",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"nodes",
																				":node",
																				"qemu",
																				":vmid",
																				"agent",
																				"fstrim"
																			],
																			"variable": [
																				{
																					"key": "node"
																				},
																				{
																					"key": "vmid"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{}"
																}
															]
														}
													]
												},
												{
													"name": "get-fsinfo",
													"item": [
														{
															"name": "Execute get-fsinfo.",
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/agent/get-fsinfo",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"qemu",
																		":vmid",
																		"agent",
																		"get-fsinfo"
																	],
																	"variable": [
																		{
																			"key": "node",
																			"value": "string",
																			"description": "(Required) The cluster node name."
																		},
																		{
																			"key": "vmid",
																			"value": "358786328",
																			"description": "(Required) The (unique) ID of the VM."
																		}
																	]
																},
																"description": "Execute get-fsinfo."
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/agent/get-fsinfo",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"nodes",
																				":node",
																				"qemu",
																				":vmid",
																				"agent",
																				"get-fsinfo"
																			],
																			"variable": [
																				{
																					"key": "node"
																				},
																				{
																					"key": "vmid"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{}"
																}
															]
														}
													]
												},
												{
													"name": "get-host-name",
													"item": [
														{
															"name": "Execute get-host-name.",
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/agent/get-host-name",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"qemu",
																		":vmid",
																		"agent",
																		"get-host-name"
																	],
																	"variable": [
																		{
																			"key": "node",
																			"value": "string",
																			"description": "(Required) The cluster node name."
																		},
																		{
																			"key": "vmid",
																			"value": "358786328",
																			"description": "(Required) The (unique) ID of the VM."
																		}
																	]
																},
																"description": "Execute get-host-name."
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/agent/get-host-name",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"nodes",
																				":node",
																				"qemu",
																				":vmid",
																				"agent",
																				"get-host-name"
																			],
																			"variable": [
																				{
																					"key": "node"
																				},
																				{
																					"key": "vmid"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{}"
																}
															]
														}
													]
												},
												{
													"name": "get-memory-block-info",
													"item": [
														{
															"name": "Execute get-memory-block-info.",
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/agent/get-memory-block-info",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"qemu",
																		":vmid",
																		"agent",
																		"get-memory-block-info"
																	],
																	"variable": [
																		{
																			"key": "node",
																			"value": "string",
																			"description": "(Required) The cluster node name."
																		},
																		{
																			"key": "vmid",
																			"value": "358786328",
																			"description": "(Required) The (unique) ID of the VM."
																		}
																	]
																},
																"description": "Execute get-memory-block-info."
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/agent/get-memory-block-info",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"nodes",
																				":node",
																				"qemu",
																				":vmid",
																				"agent",
																				"get-memory-block-info"
																			],
																			"variable": [
																				{
																					"key": "node"
																				},
																				{
																					"key": "vmid"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{}"
																}
															]
														}
													]
												},
												{
													"name": "get-memory-blocks",
													"item": [
														{
															"name": "Execute get-memory-blocks.",
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/agent/get-memory-blocks",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"qemu",
																		":vmid",
																		"agent",
																		"get-memory-blocks"
																	],
																	"variable": [
																		{
																			"key": "node",
																			"value": "string",
																			"description": "(Required) The cluster node name."
																		},
																		{
																			"key": "vmid",
																			"value": "358786328",
																			"description": "(Required) The (unique) ID of the VM."
																		}
																	]
																},
																"description": "Execute get-memory-blocks."
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/agent/get-memory-blocks",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"nodes",
																				":node",
																				"qemu",
																				":vmid",
																				"agent",
																				"get-memory-blocks"
																			],
																			"variable": [
																				{
																					"key": "node"
																				},
																				{
																					"key": "vmid"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{}"
																}
															]
														}
													]
												},
												{
													"name": "get-osinfo",
													"item": [
														{
															"name": "Execute get-osinfo.",
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/agent/get-osinfo",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"qemu",
																		":vmid",
																		"agent",
																		"get-osinfo"
																	],
																	"variable": [
																		{
																			"key": "node",
																			"value": "string",
																			"description": "(Required) The cluster node name."
																		},
																		{
																			"key": "vmid",
																			"value": "358786328",
																			"description": "(Required) The (unique) ID of the VM."
																		}
																	]
																},
																"description": "Execute get-osinfo."
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/agent/get-osinfo",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"nodes",
																				":node",
																				"qemu",
																				":vmid",
																				"agent",
																				"get-osinfo"
																			],
																			"variable": [
																				{
																					"key": "node"
																				},
																				{
																					"key": "vmid"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{}"
																}
															]
														}
													]
												},
												{
													"name": "get-time",
													"item": [
														{
															"name": "Execute get-time.",
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/agent/get-time",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"qemu",
																		":vmid",
																		"agent",
																		"get-time"
																	],
																	"variable": [
																		{
																			"key": "node",
																			"value": "string",
																			"description": "(Required) The cluster node name."
																		},
																		{
																			"key": "vmid",
																			"value": "358786328",
																			"description": "(Required) The (unique) ID of the VM."
																		}
																	]
																},
																"description": "Execute get-time."
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/agent/get-time",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"nodes",
																				":node",
																				"qemu",
																				":vmid",
																				"agent",
																				"get-time"
																			],
																			"variable": [
																				{
																					"key": "node"
																				},
																				{
																					"key": "vmid"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{}"
																}
															]
														}
													]
												},
												{
													"name": "get-timezone",
													"item": [
														{
															"name": "Execute get-timezone.",
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/agent/get-timezone",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"qemu",
																		":vmid",
																		"agent",
																		"get-timezone"
																	],
																	"variable": [
																		{
																			"key": "node",
																			"value": "string",
																			"description": "(Required) The cluster node name."
																		},
																		{
																			"key": "vmid",
																			"value": "358786328",
																			"description": "(Required) The (unique) ID of the VM."
																		}
																	]
																},
																"description": "Execute get-timezone."
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/agent/get-timezone",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"nodes",
																				":node",
																				"qemu",
																				":vmid",
																				"agent",
																				"get-timezone"
																			],
																			"variable": [
																				{
																					"key": "node"
																				},
																				{
																					"key": "vmid"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{}"
																}
															]
														}
													]
												},
												{
													"name": "get-users",
													"item": [
														{
															"name": "Execute get-users.",
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/agent/get-users",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"qemu",
																		":vmid",
																		"agent",
																		"get-users"
																	],
																	"variable": [
																		{
																			"key": "node",
																			"value": "string",
																			"description": "(Required) The cluster node name."
																		},
																		{
																			"key": "vmid",
																			"value": "358786328",
																			"description": "(Required) The (unique) ID of the VM."
																		}
																	]
																},
																"description": "Execute get-users."
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/agent/get-users",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"nodes",
																				":node",
																				"qemu",
																				":vmid",
																				"agent",
																				"get-users"
																			],
																			"variable": [
																				{
																					"key": "node"
																				},
																				{
																					"key": "vmid"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{}"
																}
															]
														}
													]
												},
												{
													"name": "get-vcpus",
													"item": [
														{
															"name": "Execute get-vcpus.",
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/agent/get-vcpus",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"qemu",
																		":vmid",
																		"agent",
																		"get-vcpus"
																	],
																	"variable": [
																		{
																			"key": "node",
																			"value": "string",
																			"description": "(Required) The cluster node name."
																		},
																		{
																			"key": "vmid",
																			"value": "358786328",
																			"description": "(Required) The (unique) ID of the VM."
																		}
																	]
																},
																"description": "Execute get-vcpus."
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/agent/get-vcpus",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"nodes",
																				":node",
																				"qemu",
																				":vmid",
																				"agent",
																				"get-vcpus"
																			],
																			"variable": [
																				{
																					"key": "node"
																				},
																				{
																					"key": "vmid"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{}"
																}
															]
														}
													]
												},
												{
													"name": "info",
													"item": [
														{
															"name": "Execute info.",
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/agent/info",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"qemu",
																		":vmid",
																		"agent",
																		"info"
																	],
																	"variable": [
																		{
																			"key": "node",
																			"value": "string",
																			"description": "(Required) The cluster node name."
																		},
																		{
																			"key": "vmid",
																			"value": "358786328",
																			"description": "(Required) The (unique) ID of the VM."
																		}
																	]
																},
																"description": "Execute info."
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/agent/info",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"nodes",
																				":node",
																				"qemu",
																				":vmid",
																				"agent",
																				"info"
																			],
																			"variable": [
																				{
																					"key": "node"
																				},
																				{
																					"key": "vmid"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{}"
																}
															]
														}
													]
												},
												{
													"name": "network-get-interfaces",
													"item": [
														{
															"name": "Execute network-get-interfaces.",
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/agent/network-get-interfaces",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"qemu",
																		":vmid",
																		"agent",
																		"network-get-interfaces"
																	],
																	"variable": [
																		{
																			"key": "node",
																			"value": "string",
																			"description": "(Required) The cluster node name."
																		},
																		{
																			"key": "vmid",
																			"value": "358786328",
																			"description": "(Required) The (unique) ID of the VM."
																		}
																	]
																},
																"description": "Execute network-get-interfaces."
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/agent/network-get-interfaces",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"nodes",
																				":node",
																				"qemu",
																				":vmid",
																				"agent",
																				"network-get-interfaces"
																			],
																			"variable": [
																				{
																					"key": "node"
																				},
																				{
																					"key": "vmid"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{}"
																}
															]
														}
													]
												},
												{
													"name": "ping",
													"item": [
														{
															"name": "Execute ping.",
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/agent/ping",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"qemu",
																		":vmid",
																		"agent",
																		"ping"
																	],
																	"variable": [
																		{
																			"key": "node",
																			"value": "string",
																			"description": "(Required) The cluster node name."
																		},
																		{
																			"key": "vmid",
																			"value": "358786328",
																			"description": "(Required) The (unique) ID of the VM."
																		}
																	]
																},
																"description": "Execute ping."
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/agent/ping",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"nodes",
																				":node",
																				"qemu",
																				":vmid",
																				"agent",
																				"ping"
																			],
																			"variable": [
																				{
																					"key": "node"
																				},
																				{
																					"key": "vmid"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{}"
																}
															]
														}
													]
												},
												{
													"name": "shutdown",
													"item": [
														{
															"name": "Execute shutdown.",
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/agent/shutdown",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"qemu",
																		":vmid",
																		"agent",
																		"shutdown"
																	],
																	"variable": [
																		{
																			"key": "node",
																			"value": "string",
																			"description": "(Required) The cluster node name."
																		},
																		{
																			"key": "vmid",
																			"value": "358786328",
																			"description": "(Required) The (unique) ID of the VM."
																		}
																	]
																},
																"description": "Execute shutdown."
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/agent/shutdown",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"nodes",
																				":node",
																				"qemu",
																				":vmid",
																				"agent",
																				"shutdown"
																			],
																			"variable": [
																				{
																					"key": "node"
																				},
																				{
																					"key": "vmid"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{}"
																}
															]
														}
													]
												},
												{
													"name": "suspend-disk",
													"item": [
														{
															"name": "Execute suspend-disk.",
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/agent/suspend-disk",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"qemu",
																		":vmid",
																		"agent",
																		"suspend-disk"
																	],
																	"variable": [
																		{
																			"key": "node",
																			"value": "string",
																			"description": "(Required) The cluster node name."
																		},
																		{
																			"key": "vmid",
																			"value": "358786328",
																			"description": "(Required) The (unique) ID of the VM."
																		}
																	]
																},
																"description": "Execute suspend-disk."
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/agent/suspend-disk",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"nodes",
																				":node",
																				"qemu",
																				":vmid",
																				"agent",
																				"suspend-disk"
																			],
																			"variable": [
																				{
																					"key": "node"
																				},
																				{
																					"key": "vmid"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{}"
																}
															]
														}
													]
												},
												{
													"name": "suspend-hybrid",
													"item": [
														{
															"name": "Execute suspend-hybrid.",
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/agent/suspend-hybrid",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"qemu",
																		":vmid",
																		"agent",
																		"suspend-hybrid"
																	],
																	"variable": [
																		{
																			"key": "node",
																			"value": "string",
																			"description": "(Required) The cluster node name."
																		},
																		{
																			"key": "vmid",
																			"value": "358786328",
																			"description": "(Required) The (unique) ID of the VM."
																		}
																	]
																},
																"description": "Execute suspend-hybrid."
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/agent/suspend-hybrid",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"nodes",
																				":node",
																				"qemu",
																				":vmid",
																				"agent",
																				"suspend-hybrid"
																			],
																			"variable": [
																				{
																					"key": "node"
																				},
																				{
																					"key": "vmid"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{}"
																}
															]
														}
													]
												},
												{
													"name": "suspend-ram",
													"item": [
														{
															"name": "Execute suspend-ram.",
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/agent/suspend-ram",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"qemu",
																		":vmid",
																		"agent",
																		"suspend-ram"
																	],
																	"variable": [
																		{
																			"key": "node",
																			"value": "string",
																			"description": "(Required) The cluster node name."
																		},
																		{
																			"key": "vmid",
																			"value": "358786328",
																			"description": "(Required) The (unique) ID of the VM."
																		}
																	]
																},
																"description": "Execute suspend-ram."
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/agent/suspend-ram",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"nodes",
																				":node",
																				"qemu",
																				":vmid",
																				"agent",
																				"suspend-ram"
																			],
																			"variable": [
																				{
																					"key": "node"
																				},
																				{
																					"key": "vmid"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{}"
																}
															]
														}
													]
												},
												{
													"name": "set-user-password",
													"item": [
														{
															"name": "Sets the password for the given user to the given password",
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/agent/set-user-password?crypted=0&password=string&username=string",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"qemu",
																		":vmid",
																		"agent",
																		"set-user-password"
																	],
																	"query": [
																		{
																			"key": "crypted",
																			"value": "0",
																			"description": "set to 1 if the password has already been passed through crypt()"
																		},
																		{
																			"key": "password",
																			"value": "string",
																			"description": "(Required) The new password."
																		},
																		{
																			"key": "username",
																			"value": "string",
																			"description": "(Required) The user to set the password for."
																		}
																	],
																	"variable": [
																		{
																			"key": "node",
																			"value": "string",
																			"description": "(Required) The cluster node name."
																		},
																		{
																			"key": "vmid",
																			"value": "358786328",
																			"description": "(Required) The (unique) ID of the VM."
																		}
																	]
																},
																"description": "Sets the password for the given user to the given password"
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/agent/set-user-password?crypted=0&password=string&username=string",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"nodes",
																				":node",
																				"qemu",
																				":vmid",
																				"agent",
																				"set-user-password"
																			],
																			"query": [
																				{
																					"key": "crypted",
																					"value": "0",
																					"description": "set to 1 if the password has already been passed through crypt()"
																				},
																				{
																					"key": "password",
																					"value": "string",
																					"description": "(Required) The new password."
																				},
																				{
																					"key": "username",
																					"value": "string",
																					"description": "(Required) The user to set the password for."
																				}
																			],
																			"variable": [
																				{
																					"key": "node"
																				},
																				{
																					"key": "vmid"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{}"
																}
															]
														}
													]
												},
												{
													"name": "exec",
													"item": [
														{
															"name": "Executes the given command in the vm via the guest-agent and returns an object with the pid.",
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/agent/exec?input-data=string",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"qemu",
																		":vmid",
																		"agent",
																		"exec"
																	],
																	"query": [
																		{
																			"key": "input-data",
																			"value": "string",
																			"description": "Data to pass as 'input-data' to the guest. Usually treated as STDIN to 'command'."
																		}
																	],
																	"variable": [
																		{
																			"key": "node",
																			"value": "string",
																			"description": "(Required) The cluster node name."
																		},
																		{
																			"key": "vmid",
																			"value": "358786328",
																			"description": "(Required) The (unique) ID of the VM."
																		}
																	]
																},
																"description": "Executes the given command in the vm via the guest-agent and returns an object with the pid."
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/agent/exec?input-data=string",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"nodes",
																				":node",
																				"qemu",
																				":vmid",
																				"agent",
																				"exec"
																			],
																			"query": [
																				{
																					"key": "input-data",
																					"value": "string",
																					"description": "Data to pass as 'input-data' to the guest. Usually treated as STDIN to 'command'."
																				}
																			],
																			"variable": [
																				{
																					"key": "node"
																				},
																				{
																					"key": "vmid"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"pid\": 8562\n}"
																}
															]
														}
													]
												},
												{
													"name": "exec-status",
													"item": [
														{
															"name": "Gets the status of the given pid started by the guest-agent",
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/agent/exec-status?pid=5752",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"qemu",
																		":vmid",
																		"agent",
																		"exec-status"
																	],
																	"query": [
																		{
																			"key": "pid",
																			"value": "5752",
																			"description": "(Required) The PID to query"
																		}
																	],
																	"variable": [
																		{
																			"key": "node",
																			"value": "string",
																			"description": "(Required) The cluster node name."
																		},
																		{
																			"key": "vmid",
																			"value": "358786328",
																			"description": "(Required) The (unique) ID of the VM."
																		}
																	]
																},
																"description": "Gets the status of the given pid started by the guest-agent"
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/agent/exec-status?pid=5752",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"nodes",
																				":node",
																				"qemu",
																				":vmid",
																				"agent",
																				"exec-status"
																			],
																			"query": [
																				{
																					"key": "pid",
																					"value": "5752",
																					"description": "(Required) The PID to query"
																				}
																			],
																			"variable": [
																				{
																					"key": "node"
																				},
																				{
																					"key": "vmid"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"err-data\": \"string\",\n  \"err-truncated\": false,\n  \"exitcode\": 3328,\n  \"exited\": true,\n  \"out-data\": \"string\",\n  \"out-truncated\": false,\n  \"signal\": 3113\n}"
																}
															]
														}
													]
												},
												{
													"name": "file-read",
													"item": [
														{
															"name": "Reads the given file via guest agent. Is limited to 16777216 bytes.",
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/agent/file-read?file=string",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"qemu",
																		":vmid",
																		"agent",
																		"file-read"
																	],
																	"query": [
																		{
																			"key": "file",
																			"value": "string",
																			"description": "(Required) The path to the file"
																		}
																	],
																	"variable": [
																		{
																			"key": "node",
																			"value": "string",
																			"description": "(Required) The cluster node name."
																		},
																		{
																			"key": "vmid",
																			"value": "358786328",
																			"description": "(Required) The (unique) ID of the VM."
																		}
																	]
																},
																"description": "Reads the given file via guest agent. Is limited to 16777216 bytes."
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/agent/file-read?file=string",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"nodes",
																				":node",
																				"qemu",
																				":vmid",
																				"agent",
																				"file-read"
																			],
																			"query": [
																				{
																					"key": "file",
																					"value": "string",
																					"description": "(Required) The path to the file"
																				}
																			],
																			"variable": [
																				{
																					"key": "node"
																				},
																				{
																					"key": "vmid"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"content\": \"string\",\n  \"truncated\": true\n}"
																}
															]
														}
													]
												},
												{
													"name": "file-write",
													"item": [
														{
															"name": "Writes the given file via guest agent.",
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/agent/file-write?content=string&encode=1&file=string",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"qemu",
																		":vmid",
																		"agent",
																		"file-write"
																	],
																	"query": [
																		{
																			"key": "content",
																			"value": "string",
																			"description": "(Required) The content to write into the file."
																		},
																		{
																			"key": "encode",
																			"value": "1",
																			"description": "If set, the content will be encoded as base64 (required by QEMU).Otherwise the content needs to be encoded beforehand - defaults to true."
																		},
																		{
																			"key": "file",
																			"value": "string",
																			"description": "(Required) The path to the file."
																		}
																	],
																	"variable": [
																		{
																			"key": "node",
																			"value": "string",
																			"description": "(Required) The cluster node name."
																		},
																		{
																			"key": "vmid",
																			"value": "358786328",
																			"description": "(Required) The (unique) ID of the VM."
																		}
																	]
																},
																"description": "Writes the given file via guest agent."
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/agent/file-write?content=string&encode=1&file=string",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"nodes",
																				":node",
																				"qemu",
																				":vmid",
																				"agent",
																				"file-write"
																			],
																			"query": [
																				{
																					"key": "content",
																					"value": "string",
																					"description": "(Required) The content to write into the file."
																				},
																				{
																					"key": "encode",
																					"value": "1",
																					"description": "If set, the content will be encoded as base64 (required by QEMU).Otherwise the content needs to be encoded beforehand - defaults to true."
																				},
																				{
																					"key": "file",
																					"value": "string",
																					"description": "(Required) The path to the file."
																				}
																			],
																			"variable": [
																				{
																					"key": "node"
																				},
																				{
																					"key": "vmid"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "null"
																}
															]
														}
													]
												},
												{
													"name": "QEMU Guest Agent command index.",
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/agent",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"qemu",
																":vmid",
																"agent"
															],
															"variable": [
																{
																	"key": "node",
																	"value": "string",
																	"description": "(Required) The cluster node name."
																},
																{
																	"key": "vmid",
																	"value": "358786328",
																	"description": "(Required) The (unique) ID of the VM."
																}
															]
														},
														"description": "QEMU Guest Agent command index."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/agent",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"qemu",
																		":vmid",
																		"agent"
																	],
																	"variable": [
																		{
																			"key": "node"
																		},
																		{
																			"key": "vmid"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "[]"
														}
													]
												},
												{
													"name": "Execute QEMU Guest Agent commands.",
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/agent?command=suspend-ram",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"qemu",
																":vmid",
																"agent"
															],
															"query": [
																{
																	"key": "command",
																	"value": "suspend-ram",
																	"description": "(Required) The QGA command."
																}
															],
															"variable": [
																{
																	"key": "node",
																	"value": "string",
																	"description": "(Required) The cluster node name."
																},
																{
																	"key": "vmid",
																	"value": "358786328",
																	"description": "(Required) The (unique) ID of the VM."
																}
															]
														},
														"description": "Execute QEMU Guest Agent commands."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/agent?command=suspend-ram",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"qemu",
																		":vmid",
																		"agent"
																	],
																	"query": [
																		{
																			"key": "command",
																			"value": "suspend-ram",
																			"description": "(Required) The QGA command."
																		}
																	],
																	"variable": [
																		{
																			"key": "node"
																		},
																		{
																			"key": "vmid"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{}"
														}
													]
												}
											]
										},
										{
											"name": "rrd",
											"item": [
												{
													"name": "Read VM RRD statistics (returns PNG)",
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/rrd?cf=MAX&ds=string&timeframe=hour",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"qemu",
																":vmid",
																"rrd"
															],
															"query": [
																{
																	"key": "cf",
																	"value": "MAX",
																	"description": "The RRD consolidation function"
																},
																{
																	"key": "ds",
																	"value": "string",
																	"description": "(Required) The list of datasources you want to display."
																},
																{
																	"key": "timeframe",
																	"value": "hour",
																	"description": "(Required) Specify the time frame you are interested in."
																}
															],
															"variable": [
																{
																	"key": "node",
																	"value": "string",
																	"description": "(Required) The cluster node name."
																},
																{
																	"key": "vmid",
																	"value": "358786328",
																	"description": "(Required) The (unique) ID of the VM."
																}
															]
														},
														"description": "Read VM RRD statistics (returns PNG)"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/rrd?cf=MAX&ds=string&timeframe=hour",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"qemu",
																		":vmid",
																		"rrd"
																	],
																	"query": [
																		{
																			"key": "cf",
																			"value": "MAX",
																			"description": "The RRD consolidation function"
																		},
																		{
																			"key": "ds",
																			"value": "string",
																			"description": "(Required) The list of datasources you want to display."
																		},
																		{
																			"key": "timeframe",
																			"value": "hour",
																			"description": "(Required) Specify the time frame you are interested in."
																		}
																	],
																	"variable": [
																		{
																			"key": "node"
																		},
																		{
																			"key": "vmid"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"filename\": \"string\"\n}"
														}
													]
												}
											]
										},
										{
											"name": "rrddata",
											"item": [
												{
													"name": "Read VM RRD statistics",
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/rrddata?cf=MAX&timeframe=hour",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"qemu",
																":vmid",
																"rrddata"
															],
															"query": [
																{
																	"key": "cf",
																	"value": "MAX",
																	"description": "The RRD consolidation function"
																},
																{
																	"key": "timeframe",
																	"value": "hour",
																	"description": "(Required) Specify the time frame you are interested in."
																}
															],
															"variable": [
																{
																	"key": "node",
																	"value": "string",
																	"description": "(Required) The cluster node name."
																},
																{
																	"key": "vmid",
																	"value": "358786328",
																	"description": "(Required) The (unique) ID of the VM."
																}
															]
														},
														"description": "Read VM RRD statistics"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/rrddata?cf=MAX&timeframe=hour",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"qemu",
																		":vmid",
																		"rrddata"
																	],
																	"query": [
																		{
																			"key": "cf",
																			"value": "MAX",
																			"description": "The RRD consolidation function"
																		},
																		{
																			"key": "timeframe",
																			"value": "hour",
																			"description": "(Required) Specify the time frame you are interested in."
																		}
																	],
																	"variable": [
																		{
																			"key": "node"
																		},
																		{
																			"key": "vmid"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "[]"
														}
													]
												}
											]
										},
										{
											"name": "config",
											"item": [
												{
													"name": "Get the virtual machine configuration with pending configuration changes applied. Set the 'current' parameter to get the current configuration instead.",
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/config?current=0&snapshot=string",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"qemu",
																":vmid",
																"config"
															],
															"query": [
																{
																	"key": "current",
																	"value": "0",
																	"description": "Get current values (instead of pending values)."
																},
																{
																	"key": "snapshot",
																	"value": "string",
																	"description": "Fetch config values from given snapshot."
																}
															],
															"variable": [
																{
																	"key": "node",
																	"value": "string",
																	"description": "(Required) The cluster node name."
																},
																{
																	"key": "vmid",
																	"value": "358786328",
																	"description": "(Required) The (unique) ID of the VM."
																}
															]
														},
														"description": "Get the virtual machine configuration with pending configuration changes applied. Set the 'current' parameter to get the current configuration instead."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/config?current=0&snapshot=string",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"qemu",
																		":vmid",
																		"config"
																	],
																	"query": [
																		{
																			"key": "current",
																			"value": "0",
																			"description": "Get current values (instead of pending values)."
																		},
																		{
																			"key": "snapshot",
																			"value": "string",
																			"description": "Fetch config values from given snapshot."
																		}
																	],
																	"variable": [
																		{
																			"key": "node"
																		},
																		{
																			"key": "vmid"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"acpi\": 1,\n  \"affinity\": \"string\",\n  \"agent\": \"string\",\n  \"amd-sev\": \"string\",\n  \"arch\": \"x86_64\",\n  \"args\": \"string\",\n  \"audio0\": \"string\",\n  \"autostart\": 0,\n  \"balloon\": 5225,\n  \"bios\": \"seabios\",\n  \"boot\": \"string\",\n  \"bootdisk\": \"sata773538132\",\n  \"cdrom\": \"string\",\n  \"cicustom\": \"string\",\n  \"cipassword\": \"string\",\n  \"citype\": \"opennebula\",\n  \"ciupgrade\": 1,\n  \"ciuser\": \"string\",\n  \"cores\": 1,\n  \"cpu\": \"string\",\n  \"cpulimit\": 0,\n  \"cpuunits\": \"cgroup v1: 1024, cgroup v2: 100\",\n  \"description\": \"string\",\n  \"digest\": \"string\",\n  \"efidisk0\": \"string\",\n  \"freeze\": true,\n  \"hookscript\": \"string\",\n  \"hostpci[n]\": \"string\",\n  \"hotplug\": \"network,disk,usb\",\n  \"hugepages\": \"2\",\n  \"ide[n]\": \"string\",\n  \"ipconfig[n]\": \"string\",\n  \"ivshmem\": \"string\",\n  \"keephugepages\": 0,\n  \"keyboard\": null,\n  \"kvm\": 1,\n  \"localtime\": true,\n  \"lock\": \"snapshot-delete\",\n  \"machine\": \"string\",\n  \"memory\": \"string\",\n  \"migrate_downtime\": 0.1,\n  \"migrate_speed\": 0,\n  \"name\": \"string\",\n  \"nameserver\": \"string\",\n  \"net[n]\": \"string\",\n  \"numa\": 0,\n  \"numa[n]\": \"string\",\n  \"onboot\": 0,\n  \"ostype\": \"win10\",\n  \"parallel[n]\": \"/dev/usb/lp66\",\n  \"protection\": 0,\n  \"reboot\": 1,\n  \"rng0\": \"string\",\n  \"running-nets-host-mtu\": \"net196698=956,net6104942=07815953,net928=40,net3389=8315080189,net22228=0088172082,net32=84921039569,net6003=8810,net31=860918014,net3306=71702,net992=89,net97853=243\",\n  \"sata[n]\": \"string\",\n  \"scsi[n]\": \"string\",\n  \"scsihw\": \"lsi\",\n  \"searchdomain\": \"string\",\n  \"serial[n]\": \"socket\",\n  \"shares\": 1000,\n  \"smbios1\": \"string\",\n  \"smp\": 1,\n  \"sockets\": 1,\n  \"spice_enhancements\": \"string\",\n  \"sshkeys\": \"string\",\n  \"startdate\": \"now\",\n  \"startup\": \"string\",\n  \"tablet\": 1,\n  \"tags\": \"string\",\n  \"tdf\": 0,\n  \"template\": 0,\n  \"tpmstate0\": \"string\",\n  \"unused[n]\": \"string\",\n  \"usb[n]\": \"string\",\n  \"vcpus\": 0,\n  \"vga\": \"string\",\n  \"virtio[n]\": \"string\",\n  \"virtiofs[n]\": \"string\",\n  \"vmgenid\": \"1 (autogenerated)\",\n  \"vmstatestorage\": \"string\",\n  \"watchdog\": \"string\"\n}"
														}
													]
												},
												{
													"name": "Set virtual machine options (asynchronous API).",
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/config?acpi=1&affinity=string&agent=string&amd-sev=string&arch=aarch64&args=string&audio0=string&autostart=0&background_delay=17&balloon=8248&bios=seabios&boot=string&bootdisk=virtio092&cdrom=string&cicustom=string&cipassword=string&citype=opennebula&ciupgrade=1&ciuser=string&cores=1&cpu=string&cpulimit=0&cpuunits=cgroup v1: 1024, cgroup v2: 100&delete=string&description=string&digest=string&efidisk0=string&force=true&freeze=true&hookscript=string&hostpci[n]=string&hotplug=network,disk,usb&hugepages=2&ide[n]=string&import-working-storage=string&ipconfig[n]=string&ivshmem=string&keephugepages=0&keyboard=&kvm=1&localtime=true&lock=clone&machine=string&memory=string&migrate_downtime=0.1&migrate_speed=0&name=string&nameserver=string&net[n]=string&numa=0&numa[n]=string&onboot=0&ostype=win7&parallel[n]=/dev/parport044&protection=0&reboot=1&revert=string&rng0=string&running-nets-host-mtu=net1686=7156290533,net4371=021,net4265970009=7845,net4703=0,net09597161=538971,net43657503=30651318,net859=83866960,net9=4&sata[n]=string&scsi[n]=string&scsihw=lsi&searchdomain=string&serial[n]=socket&shares=1000&skiplock=true&smbios1=string&smp=1&sockets=1&spice_enhancements=string&sshkeys=string&startdate=now&startup=string&tablet=1&tags=string&tdf=0&template=0&tpmstate0=string&unused[n]=string&usb[n]=string&vcpus=0&vga=string&virtio[n]=string&virtiofs[n]=string&vmgenid=1 (autogenerated)&vmstatestorage=string&watchdog=string",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"qemu",
																":vmid",
																"config"
															],
															"query": [
																{
																	"key": "acpi",
																	"value": "1",
																	"description": "Enable/disable ACPI."
																},
																{
																	"key": "affinity",
																	"value": "string",
																	"description": "List of host cores used to execute guest processes, for example: 0,5,8-11"
																},
																{
																	"key": "agent",
																	"value": "string",
																	"description": "Enable/disable communication with the QEMU Guest Agent and its properties."
																},
																{
																	"key": "amd-sev",
																	"value": "string",
																	"description": "Secure Encrypted Virtualization (SEV) features by AMD CPUs"
																},
																{
																	"key": "arch",
																	"value": "aarch64",
																	"description": "Virtual processor architecture. Defaults to the host."
																},
																{
																	"key": "args",
																	"value": "string",
																	"description": "Arbitrary arguments passed to kvm."
																},
																{
																	"key": "audio0",
																	"value": "string",
																	"description": "Configure a audio device, useful in combination with QXL/Spice."
																},
																{
																	"key": "autostart",
																	"value": "0",
																	"description": "Automatic restart after crash (currently ignored)."
																},
																{
																	"key": "background_delay",
																	"value": "17",
																	"description": "Time to wait for the task to finish. We return 'null' if the task finish within that time."
																},
																{
																	"key": "balloon",
																	"value": "8248",
																	"description": "Amount of target RAM for the VM in MiB. Using zero disables the ballon driver."
																},
																{
																	"key": "bios",
																	"value": "seabios",
																	"description": "Select BIOS implementation."
																},
																{
																	"key": "boot",
																	"value": "string",
																	"description": "Specify guest boot order. Use the 'order=' sub-property as usage with no key or 'legacy=' is deprecated."
																},
																{
																	"key": "bootdisk",
																	"value": "virtio092",
																	"description": "Enable booting from specified disk. Deprecated: Use 'boot: order=foo;bar' instead."
																},
																{
																	"key": "cdrom",
																	"value": "string",
																	"description": "This is an alias for option -ide2"
																},
																{
																	"key": "cicustom",
																	"value": "string",
																	"description": "cloud-init: Specify custom files to replace the automatically generated ones at start."
																},
																{
																	"key": "cipassword",
																	"value": "string",
																	"description": "cloud-init: Password to assign the user. Using this is generally not recommended. Use ssh keys instead. Also note that older cloud-init versions do not support hashed passwords."
																},
																{
																	"key": "citype",
																	"value": "opennebula",
																	"description": "Specifies the cloud-init configuration format. The default depends on the configured operating system type (`ostype`. We use the `nocloud` format for Linux, and `configdrive2` for windows."
																},
																{
																	"key": "ciupgrade",
																	"value": "1",
																	"description": "cloud-init: do an automatic package upgrade after the first boot."
																},
																{
																	"key": "ciuser",
																	"value": "string",
																	"description": "cloud-init: User name to change ssh keys and password for instead of the image's configured default user."
																},
																{
																	"key": "cores",
																	"value": "1",
																	"description": "The number of cores per socket."
																},
																{
																	"key": "cpu",
																	"value": "string",
																	"description": "Emulated CPU type."
																},
																{
																	"key": "cpulimit",
																	"value": "0",
																	"description": "Limit of CPU usage."
																},
																{
																	"key": "cpuunits",
																	"value": "cgroup v1: 1024, cgroup v2: 100",
																	"description": "CPU weight for a VM, will be clamped to [1, 10000] in cgroup v2."
																},
																{
																	"key": "delete",
																	"value": "string",
																	"description": "A list of settings you want to delete."
																},
																{
																	"key": "description",
																	"value": "string",
																	"description": "Description for the VM. Shown in the web-interface VM's summary. This is saved as comment inside the configuration file."
																},
																{
																	"key": "digest",
																	"value": "string",
																	"description": "Prevent changes if current configuration file has different SHA1 digest. This can be used to prevent concurrent modifications."
																},
																{
																	"key": "efidisk0",
																	"value": "string",
																	"description": "Configure a disk for storing EFI vars. Use the special syntax STORAGE_ID:SIZE_IN_GiB to allocate a new volume. Note that SIZE_IN_GiB is ignored here and that the default EFI vars are copied to the volume instead. Use STORAGE_ID:0 and the 'import-from' parameter to import from an existing volume."
																},
																{
																	"key": "force",
																	"value": "true",
																	"description": "Force physical removal. Without this, we simple remove the disk from the config file and create an additional configuration entry called 'unused[n]', which contains the volume ID. Unlink of unused[n] always cause physical removal."
																},
																{
																	"key": "freeze",
																	"value": "true",
																	"description": "Freeze CPU at startup (use 'c' monitor command to start execution)."
																},
																{
																	"key": "hookscript",
																	"value": "string",
																	"description": "Script that will be executed during various steps in the vms lifetime."
																},
																{
																	"key": "hostpci[n]",
																	"value": "string",
																	"description": "Map host PCI devices into guest."
																},
																{
																	"key": "hotplug",
																	"value": "network,disk,usb",
																	"description": "Selectively enable hotplug features. This is a comma separated list of hotplug features: 'network', 'disk', 'cpu', 'memory', 'usb' and 'cloudinit'. Use '0' to disable hotplug completely. Using '1' as value is an alias for the default `network,disk,usb`. USB hotplugging is possible for guests with machine version >= 7.1 and ostype l26 or windows > 7."
																},
																{
																	"key": "hugepages",
																	"value": "2",
																	"description": "Enable/disable hugepages memory."
																},
																{
																	"key": "ide[n]",
																	"value": "string",
																	"description": "Use volume as IDE hard disk or CD-ROM (n is 0 to 3). Use the special syntax STORAGE_ID:SIZE_IN_GiB to allocate a new volume. Use STORAGE_ID:0 and the 'import-from' parameter to import from an existing volume."
																},
																{
																	"key": "import-working-storage",
																	"value": "string",
																	"description": "A file-based storage with 'images' content-type enabled, which is used as an intermediary extraction storage during import. Defaults to the source storage."
																},
																{
																	"key": "ipconfig[n]",
																	"value": "string",
																	"description": "cloud-init: Specify IP addresses and gateways for the corresponding interface.\n\nIP addresses use CIDR notation, gateways are optional but need an IP of the same type specified.\n\nThe special string 'dhcp' can be used for IP addresses to use DHCP, in which case no explicit\ngateway should be provided.\nFor IPv6 the special string 'auto' can be used to use stateless autoconfiguration. This requires\ncloud-init 19.4 or newer.\n\nIf cloud-init is enabled and neither an IPv4 nor an IPv6 address is specified, it defaults to using\ndhcp on IPv4.\n"
																},
																{
																	"key": "ivshmem",
																	"value": "string",
																	"description": "Inter-VM shared memory. Useful for direct communication between VMs, or to the host."
																},
																{
																	"key": "keephugepages",
																	"value": "0",
																	"description": "Use together with hugepages. If enabled, hugepages will not not be deleted after VM shutdown and can be used for subsequent starts."
																},
																{
																	"key": "keyboard",
																	"value": "",
																	"description": "Keyboard layout for VNC server. This option is generally not required and is often better handled from within the guest OS."
																},
																{
																	"key": "kvm",
																	"value": "1",
																	"description": "Enable/disable KVM hardware virtualization."
																},
																{
																	"key": "localtime",
																	"value": "true",
																	"description": "Set the real time clock (RTC) to local time. This is enabled by default if the `ostype` indicates a Microsoft Windows OS."
																},
																{
																	"key": "lock",
																	"value": "clone",
																	"description": "Lock/unlock the VM."
																},
																{
																	"key": "machine",
																	"value": "string",
																	"description": "Specify the QEMU machine."
																},
																{
																	"key": "memory",
																	"value": "string",
																	"description": "Memory properties."
																},
																{
																	"key": "migrate_downtime",
																	"value": "0.1",
																	"description": "Set maximum tolerated downtime (in seconds) for migrations. Should the migration not be able to converge in the very end, because too much newly dirtied RAM needs to be transferred, the limit will be increased automatically step-by-step until migration can converge."
																},
																{
																	"key": "migrate_speed",
																	"value": "0",
																	"description": "Set maximum speed (in MB/s) for migrations. Value 0 is no limit."
																},
																{
																	"key": "name",
																	"value": "string",
																	"description": "Set a name for the VM. Only used on the configuration web interface."
																},
																{
																	"key": "nameserver",
																	"value": "string",
																	"description": "cloud-init: Sets DNS server IP address for a container. Create will automatically use the setting from the host if neither searchdomain nor nameserver are set."
																},
																{
																	"key": "net[n]",
																	"value": "string",
																	"description": "Specify network devices."
																},
																{
																	"key": "numa",
																	"value": "0",
																	"description": "Enable/disable NUMA."
																},
																{
																	"key": "numa[n]",
																	"value": "string",
																	"description": "NUMA topology."
																},
																{
																	"key": "onboot",
																	"value": "0",
																	"description": "Specifies whether a VM will be started during system bootup."
																},
																{
																	"key": "ostype",
																	"value": "win7",
																	"description": "Specify guest operating system."
																},
																{
																	"key": "parallel[n]",
																	"value": "/dev/parport044",
																	"description": "Map host parallel devices (n is 0 to 2)."
																},
																{
																	"key": "protection",
																	"value": "0",
																	"description": "Sets the protection flag of the VM. This will disable the remove VM and remove disk operations."
																},
																{
																	"key": "reboot",
																	"value": "1",
																	"description": "Allow reboot. If set to '0' the VM exit on reboot."
																},
																{
																	"key": "revert",
																	"value": "string",
																	"description": "Revert a pending change."
																},
																{
																	"key": "rng0",
																	"value": "string",
																	"description": "Configure a VirtIO-based Random Number Generator."
																},
																{
																	"key": "running-nets-host-mtu",
																	"value": "net1686=7156290533,net4371=021,net4265970009=7845,net4703=0,net09597161=538971,net43657503=30651318,net859=83866960,net9=4",
																	"description": "List of VirtIO network devices and their effective host_mtu setting. A value of 0 means that the host_mtu parameter is to be avoided for the corresponding device. This is used internally for snapshots."
																},
																{
																	"key": "sata[n]",
																	"value": "string",
																	"description": "Use volume as SATA hard disk or CD-ROM (n is 0 to 5). Use the special syntax STORAGE_ID:SIZE_IN_GiB to allocate a new volume. Use STORAGE_ID:0 and the 'import-from' parameter to import from an existing volume."
																},
																{
																	"key": "scsi[n]",
																	"value": "string",
																	"description": "Use volume as SCSI hard disk or CD-ROM (n is 0 to 30). Use the special syntax STORAGE_ID:SIZE_IN_GiB to allocate a new volume. Use STORAGE_ID:0 and the 'import-from' parameter to import from an existing volume."
																},
																{
																	"key": "scsihw",
																	"value": "lsi",
																	"description": "SCSI controller model"
																},
																{
																	"key": "searchdomain",
																	"value": "string",
																	"description": "cloud-init: Sets DNS search domains for a container. Create will automatically use the setting from the host if neither searchdomain nor nameserver are set."
																},
																{
																	"key": "serial[n]",
																	"value": "socket",
																	"description": "Create a serial device inside the VM (n is 0 to 3)"
																},
																{
																	"key": "shares",
																	"value": "1000",
																	"description": "Amount of memory shares for auto-ballooning. The larger the number is, the more memory this VM gets. Number is relative to weights of all other running VMs. Using zero disables auto-ballooning. Auto-ballooning is done by pvestatd."
																},
																{
																	"key": "skiplock",
																	"value": "true",
																	"description": "Ignore locks - only root is allowed to use this option."
																},
																{
																	"key": "smbios1",
																	"value": "string",
																	"description": "Specify SMBIOS type 1 fields."
																},
																{
																	"key": "smp",
																	"value": "1",
																	"description": "The number of CPUs. Please use option -sockets instead."
																},
																{
																	"key": "sockets",
																	"value": "1",
																	"description": "The number of CPU sockets."
																},
																{
																	"key": "spice_enhancements",
																	"value": "string",
																	"description": "Configure additional enhancements for SPICE."
																},
																{
																	"key": "sshkeys",
																	"value": "string",
																	"description": "cloud-init: Setup public SSH keys (one key per line, OpenSSH format)."
																},
																{
																	"key": "startdate",
																	"value": "now",
																	"description": "Set the initial date of the real time clock. Valid format for date are:'now' or '2006-06-17T16:01:21' or '2006-06-17'."
																},
																{
																	"key": "startup",
																	"value": "string",
																	"description": "Startup and shutdown behavior. Order is a non-negative number defining the general startup order. Shutdown in done with reverse ordering. Additionally you can set the 'up' or 'down' delay in seconds, which specifies a delay to wait before the next VM is started or stopped."
																},
																{
																	"key": "tablet",
																	"value": "1",
																	"description": "Enable/disable the USB tablet device."
																},
																{
																	"key": "tags",
																	"value": "string",
																	"description": "Tags of the VM. This is only meta information."
																},
																{
																	"key": "tdf",
																	"value": "0",
																	"description": "Enable/disable time drift fix."
																},
																{
																	"key": "template",
																	"value": "0",
																	"description": "Enable/disable Template."
																},
																{
																	"key": "tpmstate0",
																	"value": "string",
																	"description": "Configure a Disk for storing TPM state. The format is fixed to 'raw'. Use the special syntax STORAGE_ID:SIZE_IN_GiB to allocate a new volume. Note that SIZE_IN_GiB is ignored here and 4 MiB will be used instead. Use STORAGE_ID:0 and the 'import-from' parameter to import from an existing volume."
																},
																{
																	"key": "unused[n]",
																	"value": "string",
																	"description": "Reference to unused volumes. This is used internally, and should not be modified manually."
																},
																{
																	"key": "usb[n]",
																	"value": "string",
																	"description": "Configure an USB device (n is 0 to 4, for machine version >= 7.1 and ostype l26 or windows > 7, n can be up to 14)."
																},
																{
																	"key": "vcpus",
																	"value": "0",
																	"description": "Number of hotplugged vcpus."
																},
																{
																	"key": "vga",
																	"value": "string",
																	"description": "Configure the VGA hardware."
																},
																{
																	"key": "virtio[n]",
																	"value": "string",
																	"description": "Use volume as VIRTIO hard disk (n is 0 to 15). Use the special syntax STORAGE_ID:SIZE_IN_GiB to allocate a new volume. Use STORAGE_ID:0 and the 'import-from' parameter to import from an existing volume."
																},
																{
																	"key": "virtiofs[n]",
																	"value": "string",
																	"description": "Configuration for sharing a directory between host and guest using Virtio-fs."
																},
																{
																	"key": "vmgenid",
																	"value": "1 (autogenerated)",
																	"description": "Set VM Generation ID. Use '1' to autogenerate on create or update, pass '0' to disable explicitly."
																},
																{
																	"key": "vmstatestorage",
																	"value": "string",
																	"description": "Default storage for VM state volumes/files."
																},
																{
																	"key": "watchdog",
																	"value": "string",
																	"description": "Create a virtual hardware watchdog device."
																}
															],
															"variable": [
																{
																	"key": "node",
																	"value": "string",
																	"description": "(Required) The cluster node name."
																},
																{
																	"key": "vmid",
																	"value": "358786328",
																	"description": "(Required) The (unique) ID of the VM."
																}
															]
														},
														"description": "Set virtual machine options (asynchronous API)."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/config?acpi=1&affinity=string&agent=string&amd-sev=string&arch=aarch64&args=string&audio0=string&autostart=0&background_delay=17&balloon=8248&bios=seabios&boot=string&bootdisk=virtio092&cdrom=string&cicustom=string&cipassword=string&citype=opennebula&ciupgrade=1&ciuser=string&cores=1&cpu=string&cpulimit=0&cpuunits=cgroup v1: 1024, cgroup v2: 100&delete=string&description=string&digest=string&efidisk0=string&force=true&freeze=true&hookscript=string&hostpci[n]=string&hotplug=network,disk,usb&hugepages=2&ide[n]=string&import-working-storage=string&ipconfig[n]=string&ivshmem=string&keephugepages=0&keyboard=&kvm=1&localtime=true&lock=clone&machine=string&memory=string&migrate_downtime=0.1&migrate_speed=0&name=string&nameserver=string&net[n]=string&numa=0&numa[n]=string&onboot=0&ostype=win7&parallel[n]=/dev/parport044&protection=0&reboot=1&revert=string&rng0=string&running-nets-host-mtu=net1686=7156290533,net4371=021,net4265970009=7845,net4703=0,net09597161=538971,net43657503=30651318,net859=83866960,net9=4&sata[n]=string&scsi[n]=string&scsihw=lsi&searchdomain=string&serial[n]=socket&shares=1000&skiplock=true&smbios1=string&smp=1&sockets=1&spice_enhancements=string&sshkeys=string&startdate=now&startup=string&tablet=1&tags=string&tdf=0&template=0&tpmstate0=string&unused[n]=string&usb[n]=string&vcpus=0&vga=string&virtio[n]=string&virtiofs[n]=string&vmgenid=1 (autogenerated)&vmstatestorage=string&watchdog=string",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"qemu",
																		":vmid",
																		"config"
																	],
																	"query": [
																		{
																			"key": "acpi",
																			"value": "1",
																			"description": "Enable/disable ACPI."
																		},
																		{
																			"key": "affinity",
																			"value": "string",
																			"description": "List of host cores used to execute guest processes, for example: 0,5,8-11"
																		},
																		{
																			"key": "agent",
																			"value": "string",
																			"description": "Enable/disable communication with the QEMU Guest Agent and its properties."
																		},
																		{
																			"key": "amd-sev",
																			"value": "string",
																			"description": "Secure Encrypted Virtualization (SEV) features by AMD CPUs"
																		},
																		{
																			"key": "arch",
																			"value": "aarch64",
																			"description": "Virtual processor architecture. Defaults to the host."
																		},
																		{
																			"key": "args",
																			"value": "string",
																			"description": "Arbitrary arguments passed to kvm."
																		},
																		{
																			"key": "audio0",
																			"value": "string",
																			"description": "Configure a audio device, useful in combination with QXL/Spice."
																		},
																		{
																			"key": "autostart",
																			"value": "0",
																			"description": "Automatic restart after crash (currently ignored)."
																		},
																		{
																			"key": "background_delay",
																			"value": "17",
																			"description": "Time to wait for the task to finish. We return 'null' if the task finish within that time."
																		},
																		{
																			"key": "balloon",
																			"value": "8248",
																			"description": "Amount of target RAM for the VM in MiB. Using zero disables the ballon driver."
																		},
																		{
																			"key": "bios",
																			"value": "seabios",
																			"description": "Select BIOS implementation."
																		},
																		{
																			"key": "boot",
																			"value": "string",
																			"description": "Specify guest boot order. Use the 'order=' sub-property as usage with no key or 'legacy=' is deprecated."
																		},
																		{
																			"key": "bootdisk",
																			"value": "virtio092",
																			"description": "Enable booting from specified disk. Deprecated: Use 'boot: order=foo;bar' instead."
																		},
																		{
																			"key": "cdrom",
																			"value": "string",
																			"description": "This is an alias for option -ide2"
																		},
																		{
																			"key": "cicustom",
																			"value": "string",
																			"description": "cloud-init: Specify custom files to replace the automatically generated ones at start."
																		},
																		{
																			"key": "cipassword",
																			"value": "string",
																			"description": "cloud-init: Password to assign the user. Using this is generally not recommended. Use ssh keys instead. Also note that older cloud-init versions do not support hashed passwords."
																		},
																		{
																			"key": "citype",
																			"value": "opennebula",
																			"description": "Specifies the cloud-init configuration format. The default depends on the configured operating system type (`ostype`. We use the `nocloud` format for Linux, and `configdrive2` for windows."
																		},
																		{
																			"key": "ciupgrade",
																			"value": "1",
																			"description": "cloud-init: do an automatic package upgrade after the first boot."
																		},
																		{
																			"key": "ciuser",
																			"value": "string",
																			"description": "cloud-init: User name to change ssh keys and password for instead of the image's configured default user."
																		},
																		{
																			"key": "cores",
																			"value": "1",
																			"description": "The number of cores per socket."
																		},
																		{
																			"key": "cpu",
																			"value": "string",
																			"description": "Emulated CPU type."
																		},
																		{
																			"key": "cpulimit",
																			"value": "0",
																			"description": "Limit of CPU usage."
																		},
																		{
																			"key": "cpuunits",
																			"value": "cgroup v1: 1024, cgroup v2: 100",
																			"description": "CPU weight for a VM, will be clamped to [1, 10000] in cgroup v2."
																		},
																		{
																			"key": "delete",
																			"value": "string",
																			"description": "A list of settings you want to delete."
																		},
																		{
																			"key": "description",
																			"value": "string",
																			"description": "Description for the VM. Shown in the web-interface VM's summary. This is saved as comment inside the configuration file."
																		},
																		{
																			"key": "digest",
																			"value": "string",
																			"description": "Prevent changes if current configuration file has different SHA1 digest. This can be used to prevent concurrent modifications."
																		},
																		{
																			"key": "efidisk0",
																			"value": "string",
																			"description": "Configure a disk for storing EFI vars. Use the special syntax STORAGE_ID:SIZE_IN_GiB to allocate a new volume. Note that SIZE_IN_GiB is ignored here and that the default EFI vars are copied to the volume instead. Use STORAGE_ID:0 and the 'import-from' parameter to import from an existing volume."
																		},
																		{
																			"key": "force",
																			"value": "true",
																			"description": "Force physical removal. Without this, we simple remove the disk from the config file and create an additional configuration entry called 'unused[n]', which contains the volume ID. Unlink of unused[n] always cause physical removal."
																		},
																		{
																			"key": "freeze",
																			"value": "true",
																			"description": "Freeze CPU at startup (use 'c' monitor command to start execution)."
																		},
																		{
																			"key": "hookscript",
																			"value": "string",
																			"description": "Script that will be executed during various steps in the vms lifetime."
																		},
																		{
																			"key": "hostpci[n]",
																			"value": "string",
																			"description": "Map host PCI devices into guest."
																		},
																		{
																			"key": "hotplug",
																			"value": "network,disk,usb",
																			"description": "Selectively enable hotplug features. This is a comma separated list of hotplug features: 'network', 'disk', 'cpu', 'memory', 'usb' and 'cloudinit'. Use '0' to disable hotplug completely. Using '1' as value is an alias for the default `network,disk,usb`. USB hotplugging is possible for guests with machine version >= 7.1 and ostype l26 or windows > 7."
																		},
																		{
																			"key": "hugepages",
																			"value": "2",
																			"description": "Enable/disable hugepages memory."
																		},
																		{
																			"key": "ide[n]",
																			"value": "string",
																			"description": "Use volume as IDE hard disk or CD-ROM (n is 0 to 3). Use the special syntax STORAGE_ID:SIZE_IN_GiB to allocate a new volume. Use STORAGE_ID:0 and the 'import-from' parameter to import from an existing volume."
																		},
																		{
																			"key": "import-working-storage",
																			"value": "string",
																			"description": "A file-based storage with 'images' content-type enabled, which is used as an intermediary extraction storage during import. Defaults to the source storage."
																		},
																		{
																			"key": "ipconfig[n]",
																			"value": "string",
																			"description": "cloud-init: Specify IP addresses and gateways for the corresponding interface.\n\nIP addresses use CIDR notation, gateways are optional but need an IP of the same type specified.\n\nThe special string 'dhcp' can be used for IP addresses to use DHCP, in which case no explicit\ngateway should be provided.\nFor IPv6 the special string 'auto' can be used to use stateless autoconfiguration. This requires\ncloud-init 19.4 or newer.\n\nIf cloud-init is enabled and neither an IPv4 nor an IPv6 address is specified, it defaults to using\ndhcp on IPv4.\n"
																		},
																		{
																			"key": "ivshmem",
																			"value": "string",
																			"description": "Inter-VM shared memory. Useful for direct communication between VMs, or to the host."
																		},
																		{
																			"key": "keephugepages",
																			"value": "0",
																			"description": "Use together with hugepages. If enabled, hugepages will not not be deleted after VM shutdown and can be used for subsequent starts."
																		},
																		{
																			"key": "keyboard",
																			"value": "",
																			"description": "Keyboard layout for VNC server. This option is generally not required and is often better handled from within the guest OS."
																		},
																		{
																			"key": "kvm",
																			"value": "1",
																			"description": "Enable/disable KVM hardware virtualization."
																		},
																		{
																			"key": "localtime",
																			"value": "true",
																			"description": "Set the real time clock (RTC) to local time. This is enabled by default if the `ostype` indicates a Microsoft Windows OS."
																		},
																		{
																			"key": "lock",
																			"value": "clone",
																			"description": "Lock/unlock the VM."
																		},
																		{
																			"key": "machine",
																			"value": "string",
																			"description": "Specify the QEMU machine."
																		},
																		{
																			"key": "memory",
																			"value": "string",
																			"description": "Memory properties."
																		},
																		{
																			"key": "migrate_downtime",
																			"value": "0.1",
																			"description": "Set maximum tolerated downtime (in seconds) for migrations. Should the migration not be able to converge in the very end, because too much newly dirtied RAM needs to be transferred, the limit will be increased automatically step-by-step until migration can converge."
																		},
																		{
																			"key": "migrate_speed",
																			"value": "0",
																			"description": "Set maximum speed (in MB/s) for migrations. Value 0 is no limit."
																		},
																		{
																			"key": "name",
																			"value": "string",
																			"description": "Set a name for the VM. Only used on the configuration web interface."
																		},
																		{
																			"key": "nameserver",
																			"value": "string",
																			"description": "cloud-init: Sets DNS server IP address for a container. Create will automatically use the setting from the host if neither searchdomain nor nameserver are set."
																		},
																		{
																			"key": "net[n]",
																			"value": "string",
																			"description": "Specify network devices."
																		},
																		{
																			"key": "numa",
																			"value": "0",
																			"description": "Enable/disable NUMA."
																		},
																		{
																			"key": "numa[n]",
																			"value": "string",
																			"description": "NUMA topology."
																		},
																		{
																			"key": "onboot",
																			"value": "0",
																			"description": "Specifies whether a VM will be started during system bootup."
																		},
																		{
																			"key": "ostype",
																			"value": "win7",
																			"description": "Specify guest operating system."
																		},
																		{
																			"key": "parallel[n]",
																			"value": "/dev/parport044",
																			"description": "Map host parallel devices (n is 0 to 2)."
																		},
																		{
																			"key": "protection",
																			"value": "0",
																			"description": "Sets the protection flag of the VM. This will disable the remove VM and remove disk operations."
																		},
																		{
																			"key": "reboot",
																			"value": "1",
																			"description": "Allow reboot. If set to '0' the VM exit on reboot."
																		},
																		{
																			"key": "revert",
																			"value": "string",
																			"description": "Revert a pending change."
																		},
																		{
																			"key": "rng0",
																			"value": "string",
																			"description": "Configure a VirtIO-based Random Number Generator."
																		},
																		{
																			"key": "running-nets-host-mtu",
																			"value": "net1686=7156290533,net4371=021,net4265970009=7845,net4703=0,net09597161=538971,net43657503=30651318,net859=83866960,net9=4",
																			"description": "List of VirtIO network devices and their effective host_mtu setting. A value of 0 means that the host_mtu parameter is to be avoided for the corresponding device. This is used internally for snapshots."
																		},
																		{
																			"key": "sata[n]",
																			"value": "string",
																			"description": "Use volume as SATA hard disk or CD-ROM (n is 0 to 5). Use the special syntax STORAGE_ID:SIZE_IN_GiB to allocate a new volume. Use STORAGE_ID:0 and the 'import-from' parameter to import from an existing volume."
																		},
																		{
																			"key": "scsi[n]",
																			"value": "string",
																			"description": "Use volume as SCSI hard disk or CD-ROM (n is 0 to 30). Use the special syntax STORAGE_ID:SIZE_IN_GiB to allocate a new volume. Use STORAGE_ID:0 and the 'import-from' parameter to import from an existing volume."
																		},
																		{
																			"key": "scsihw",
																			"value": "lsi",
																			"description": "SCSI controller model"
																		},
																		{
																			"key": "searchdomain",
																			"value": "string",
																			"description": "cloud-init: Sets DNS search domains for a container. Create will automatically use the setting from the host if neither searchdomain nor nameserver are set."
																		},
																		{
																			"key": "serial[n]",
																			"value": "socket",
																			"description": "Create a serial device inside the VM (n is 0 to 3)"
																		},
																		{
																			"key": "shares",
																			"value": "1000",
																			"description": "Amount of memory shares for auto-ballooning. The larger the number is, the more memory this VM gets. Number is relative to weights of all other running VMs. Using zero disables auto-ballooning. Auto-ballooning is done by pvestatd."
																		},
																		{
																			"key": "skiplock",
																			"value": "true",
																			"description": "Ignore locks - only root is allowed to use this option."
																		},
																		{
																			"key": "smbios1",
																			"value": "string",
																			"description": "Specify SMBIOS type 1 fields."
																		},
																		{
																			"key": "smp",
																			"value": "1",
																			"description": "The number of CPUs. Please use option -sockets instead."
																		},
																		{
																			"key": "sockets",
																			"value": "1",
																			"description": "The number of CPU sockets."
																		},
																		{
																			"key": "spice_enhancements",
																			"value": "string",
																			"description": "Configure additional enhancements for SPICE."
																		},
																		{
																			"key": "sshkeys",
																			"value": "string",
																			"description": "cloud-init: Setup public SSH keys (one key per line, OpenSSH format)."
																		},
																		{
																			"key": "startdate",
																			"value": "now",
																			"description": "Set the initial date of the real time clock. Valid format for date are:'now' or '2006-06-17T16:01:21' or '2006-06-17'."
																		},
																		{
																			"key": "startup",
																			"value": "string",
																			"description": "Startup and shutdown behavior. Order is a non-negative number defining the general startup order. Shutdown in done with reverse ordering. Additionally you can set the 'up' or 'down' delay in seconds, which specifies a delay to wait before the next VM is started or stopped."
																		},
																		{
																			"key": "tablet",
																			"value": "1",
																			"description": "Enable/disable the USB tablet device."
																		},
																		{
																			"key": "tags",
																			"value": "string",
																			"description": "Tags of the VM. This is only meta information."
																		},
																		{
																			"key": "tdf",
																			"value": "0",
																			"description": "Enable/disable time drift fix."
																		},
																		{
																			"key": "template",
																			"value": "0",
																			"description": "Enable/disable Template."
																		},
																		{
																			"key": "tpmstate0",
																			"value": "string",
																			"description": "Configure a Disk for storing TPM state. The format is fixed to 'raw'. Use the special syntax STORAGE_ID:SIZE_IN_GiB to allocate a new volume. Note that SIZE_IN_GiB is ignored here and 4 MiB will be used instead. Use STORAGE_ID:0 and the 'import-from' parameter to import from an existing volume."
																		},
																		{
																			"key": "unused[n]",
																			"value": "string",
																			"description": "Reference to unused volumes. This is used internally, and should not be modified manually."
																		},
																		{
																			"key": "usb[n]",
																			"value": "string",
																			"description": "Configure an USB device (n is 0 to 4, for machine version >= 7.1 and ostype l26 or windows > 7, n can be up to 14)."
																		},
																		{
																			"key": "vcpus",
																			"value": "0",
																			"description": "Number of hotplugged vcpus."
																		},
																		{
																			"key": "vga",
																			"value": "string",
																			"description": "Configure the VGA hardware."
																		},
																		{
																			"key": "virtio[n]",
																			"value": "string",
																			"description": "Use volume as VIRTIO hard disk (n is 0 to 15). Use the special syntax STORAGE_ID:SIZE_IN_GiB to allocate a new volume. Use STORAGE_ID:0 and the 'import-from' parameter to import from an existing volume."
																		},
																		{
																			"key": "virtiofs[n]",
																			"value": "string",
																			"description": "Configuration for sharing a directory between host and guest using Virtio-fs."
																		},
																		{
																			"key": "vmgenid",
																			"value": "1 (autogenerated)",
																			"description": "Set VM Generation ID. Use '1' to autogenerate on create or update, pass '0' to disable explicitly."
																		},
																		{
																			"key": "vmstatestorage",
																			"value": "string",
																			"description": "Default storage for VM state volumes/files."
																		},
																		{
																			"key": "watchdog",
																			"value": "string",
																			"description": "Create a virtual hardware watchdog device."
																		}
																	],
																	"variable": [
																		{
																			"key": "node"
																		},
																		{
																			"key": "vmid"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "string"
														}
													]
												},
												{
													"name": "Set virtual machine options (synchronous API) - You should consider using the POST method instead for any actions involving hotplug or storage allocation.",
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/config?acpi=1&affinity=string&agent=string&amd-sev=string&arch=aarch64&args=string&audio0=string&autostart=0&balloon=8248&bios=seabios&boot=string&bootdisk=virtio092&cdrom=string&cicustom=string&cipassword=string&citype=opennebula&ciupgrade=1&ciuser=string&cores=1&cpu=string&cpulimit=0&cpuunits=cgroup v1: 1024, cgroup v2: 100&delete=string&description=string&digest=string&efidisk0=string&force=true&freeze=true&hookscript=string&hostpci[n]=string&hotplug=network,disk,usb&hugepages=2&ide[n]=string&ipconfig[n]=string&ivshmem=string&keephugepages=0&keyboard=&kvm=1&localtime=true&lock=clone&machine=string&memory=string&migrate_downtime=0.1&migrate_speed=0&name=string&nameserver=string&net[n]=string&numa=0&numa[n]=string&onboot=0&ostype=win7&parallel[n]=/dev/parport044&protection=0&reboot=1&revert=string&rng0=string&running-nets-host-mtu=net1686=7156290533,net4371=021,net4265970009=7845,net4703=0,net09597161=538971,net43657503=30651318,net859=83866960,net9=4&sata[n]=string&scsi[n]=string&scsihw=lsi&searchdomain=string&serial[n]=socket&shares=1000&skiplock=true&smbios1=string&smp=1&sockets=1&spice_enhancements=string&sshkeys=string&startdate=now&startup=string&tablet=1&tags=string&tdf=0&template=0&tpmstate0=string&unused[n]=string&usb[n]=string&vcpus=0&vga=string&virtio[n]=string&virtiofs[n]=string&vmgenid=1 (autogenerated)&vmstatestorage=string&watchdog=string",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"qemu",
																":vmid",
																"config"
															],
															"query": [
																{
																	"key": "acpi",
																	"value": "1",
																	"description": "Enable/disable ACPI."
																},
																{
																	"key": "affinity",
																	"value": "string",
																	"description": "List of host cores used to execute guest processes, for example: 0,5,8-11"
																},
																{
																	"key": "agent",
																	"value": "string",
																	"description": "Enable/disable communication with the QEMU Guest Agent and its properties."
																},
																{
																	"key": "amd-sev",
																	"value": "string",
																	"description": "Secure Encrypted Virtualization (SEV) features by AMD CPUs"
																},
																{
																	"key": "arch",
																	"value": "aarch64",
																	"description": "Virtual processor architecture. Defaults to the host."
																},
																{
																	"key": "args",
																	"value": "string",
																	"description": "Arbitrary arguments passed to kvm."
																},
																{
																	"key": "audio0",
																	"value": "string",
																	"description": "Configure a audio device, useful in combination with QXL/Spice."
																},
																{
																	"key": "autostart",
																	"value": "0",
																	"description": "Automatic restart after crash (currently ignored)."
																},
																{
																	"key": "balloon",
																	"value": "8248",
																	"description": "Amount of target RAM for the VM in MiB. Using zero disables the ballon driver."
																},
																{
																	"key": "bios",
																	"value": "seabios",
																	"description": "Select BIOS implementation."
																},
																{
																	"key": "boot",
																	"value": "string",
																	"description": "Specify guest boot order. Use the 'order=' sub-property as usage with no key or 'legacy=' is deprecated."
																},
																{
																	"key": "bootdisk",
																	"value": "virtio092",
																	"description": "Enable booting from specified disk. Deprecated: Use 'boot: order=foo;bar' instead."
																},
																{
																	"key": "cdrom",
																	"value": "string",
																	"description": "This is an alias for option -ide2"
																},
																{
																	"key": "cicustom",
																	"value": "string",
																	"description": "cloud-init: Specify custom files to replace the automatically generated ones at start."
																},
																{
																	"key": "cipassword",
																	"value": "string",
																	"description": "cloud-init: Password to assign the user. Using this is generally not recommended. Use ssh keys instead. Also note that older cloud-init versions do not support hashed passwords."
																},
																{
																	"key": "citype",
																	"value": "opennebula",
																	"description": "Specifies the cloud-init configuration format. The default depends on the configured operating system type (`ostype`. We use the `nocloud` format for Linux, and `configdrive2` for windows."
																},
																{
																	"key": "ciupgrade",
																	"value": "1",
																	"description": "cloud-init: do an automatic package upgrade after the first boot."
																},
																{
																	"key": "ciuser",
																	"value": "string",
																	"description": "cloud-init: User name to change ssh keys and password for instead of the image's configured default user."
																},
																{
																	"key": "cores",
																	"value": "1",
																	"description": "The number of cores per socket."
																},
																{
																	"key": "cpu",
																	"value": "string",
																	"description": "Emulated CPU type."
																},
																{
																	"key": "cpulimit",
																	"value": "0",
																	"description": "Limit of CPU usage."
																},
																{
																	"key": "cpuunits",
																	"value": "cgroup v1: 1024, cgroup v2: 100",
																	"description": "CPU weight for a VM, will be clamped to [1, 10000] in cgroup v2."
																},
																{
																	"key": "delete",
																	"value": "string",
																	"description": "A list of settings you want to delete."
																},
																{
																	"key": "description",
																	"value": "string",
																	"description": "Description for the VM. Shown in the web-interface VM's summary. This is saved as comment inside the configuration file."
																},
																{
																	"key": "digest",
																	"value": "string",
																	"description": "Prevent changes if current configuration file has different SHA1 digest. This can be used to prevent concurrent modifications."
																},
																{
																	"key": "efidisk0",
																	"value": "string",
																	"description": "Configure a disk for storing EFI vars. Use the special syntax STORAGE_ID:SIZE_IN_GiB to allocate a new volume. Note that SIZE_IN_GiB is ignored here and that the default EFI vars are copied to the volume instead. Use STORAGE_ID:0 and the 'import-from' parameter to import from an existing volume."
																},
																{
																	"key": "force",
																	"value": "true",
																	"description": "Force physical removal. Without this, we simple remove the disk from the config file and create an additional configuration entry called 'unused[n]', which contains the volume ID. Unlink of unused[n] always cause physical removal."
																},
																{
																	"key": "freeze",
																	"value": "true",
																	"description": "Freeze CPU at startup (use 'c' monitor command to start execution)."
																},
																{
																	"key": "hookscript",
																	"value": "string",
																	"description": "Script that will be executed during various steps in the vms lifetime."
																},
																{
																	"key": "hostpci[n]",
																	"value": "string",
																	"description": "Map host PCI devices into guest."
																},
																{
																	"key": "hotplug",
																	"value": "network,disk,usb",
																	"description": "Selectively enable hotplug features. This is a comma separated list of hotplug features: 'network', 'disk', 'cpu', 'memory', 'usb' and 'cloudinit'. Use '0' to disable hotplug completely. Using '1' as value is an alias for the default `network,disk,usb`. USB hotplugging is possible for guests with machine version >= 7.1 and ostype l26 or windows > 7."
																},
																{
																	"key": "hugepages",
																	"value": "2",
																	"description": "Enable/disable hugepages memory."
																},
																{
																	"key": "ide[n]",
																	"value": "string",
																	"description": "Use volume as IDE hard disk or CD-ROM (n is 0 to 3). Use the special syntax STORAGE_ID:SIZE_IN_GiB to allocate a new volume. Use STORAGE_ID:0 and the 'import-from' parameter to import from an existing volume."
																},
																{
																	"key": "ipconfig[n]",
																	"value": "string",
																	"description": "cloud-init: Specify IP addresses and gateways for the corresponding interface.\n\nIP addresses use CIDR notation, gateways are optional but need an IP of the same type specified.\n\nThe special string 'dhcp' can be used for IP addresses to use DHCP, in which case no explicit\ngateway should be provided.\nFor IPv6 the special string 'auto' can be used to use stateless autoconfiguration. This requires\ncloud-init 19.4 or newer.\n\nIf cloud-init is enabled and neither an IPv4 nor an IPv6 address is specified, it defaults to using\ndhcp on IPv4.\n"
																},
																{
																	"key": "ivshmem",
																	"value": "string",
																	"description": "Inter-VM shared memory. Useful for direct communication between VMs, or to the host."
																},
																{
																	"key": "keephugepages",
																	"value": "0",
																	"description": "Use together with hugepages. If enabled, hugepages will not not be deleted after VM shutdown and can be used for subsequent starts."
																},
																{
																	"key": "keyboard",
																	"value": "",
																	"description": "Keyboard layout for VNC server. This option is generally not required and is often better handled from within the guest OS."
																},
																{
																	"key": "kvm",
																	"value": "1",
																	"description": "Enable/disable KVM hardware virtualization."
																},
																{
																	"key": "localtime",
																	"value": "true",
																	"description": "Set the real time clock (RTC) to local time. This is enabled by default if the `ostype` indicates a Microsoft Windows OS."
																},
																{
																	"key": "lock",
																	"value": "clone",
																	"description": "Lock/unlock the VM."
																},
																{
																	"key": "machine",
																	"value": "string",
																	"description": "Specify the QEMU machine."
																},
																{
																	"key": "memory",
																	"value": "string",
																	"description": "Memory properties."
																},
																{
																	"key": "migrate_downtime",
																	"value": "0.1",
																	"description": "Set maximum tolerated downtime (in seconds) for migrations. Should the migration not be able to converge in the very end, because too much newly dirtied RAM needs to be transferred, the limit will be increased automatically step-by-step until migration can converge."
																},
																{
																	"key": "migrate_speed",
																	"value": "0",
																	"description": "Set maximum speed (in MB/s) for migrations. Value 0 is no limit."
																},
																{
																	"key": "name",
																	"value": "string",
																	"description": "Set a name for the VM. Only used on the configuration web interface."
																},
																{
																	"key": "nameserver",
																	"value": "string",
																	"description": "cloud-init: Sets DNS server IP address for a container. Create will automatically use the setting from the host if neither searchdomain nor nameserver are set."
																},
																{
																	"key": "net[n]",
																	"value": "string",
																	"description": "Specify network devices."
																},
																{
																	"key": "numa",
																	"value": "0",
																	"description": "Enable/disable NUMA."
																},
																{
																	"key": "numa[n]",
																	"value": "string",
																	"description": "NUMA topology."
																},
																{
																	"key": "onboot",
																	"value": "0",
																	"description": "Specifies whether a VM will be started during system bootup."
																},
																{
																	"key": "ostype",
																	"value": "win7",
																	"description": "Specify guest operating system."
																},
																{
																	"key": "parallel[n]",
																	"value": "/dev/parport044",
																	"description": "Map host parallel devices (n is 0 to 2)."
																},
																{
																	"key": "protection",
																	"value": "0",
																	"description": "Sets the protection flag of the VM. This will disable the remove VM and remove disk operations."
																},
																{
																	"key": "reboot",
																	"value": "1",
																	"description": "Allow reboot. If set to '0' the VM exit on reboot."
																},
																{
																	"key": "revert",
																	"value": "string",
																	"description": "Revert a pending change."
																},
																{
																	"key": "rng0",
																	"value": "string",
																	"description": "Configure a VirtIO-based Random Number Generator."
																},
																{
																	"key": "running-nets-host-mtu",
																	"value": "net1686=7156290533,net4371=021,net4265970009=7845,net4703=0,net09597161=538971,net43657503=30651318,net859=83866960,net9=4",
																	"description": "List of VirtIO network devices and their effective host_mtu setting. A value of 0 means that the host_mtu parameter is to be avoided for the corresponding device. This is used internally for snapshots."
																},
																{
																	"key": "sata[n]",
																	"value": "string",
																	"description": "Use volume as SATA hard disk or CD-ROM (n is 0 to 5). Use the special syntax STORAGE_ID:SIZE_IN_GiB to allocate a new volume. Use STORAGE_ID:0 and the 'import-from' parameter to import from an existing volume."
																},
																{
																	"key": "scsi[n]",
																	"value": "string",
																	"description": "Use volume as SCSI hard disk or CD-ROM (n is 0 to 30). Use the special syntax STORAGE_ID:SIZE_IN_GiB to allocate a new volume. Use STORAGE_ID:0 and the 'import-from' parameter to import from an existing volume."
																},
																{
																	"key": "scsihw",
																	"value": "lsi",
																	"description": "SCSI controller model"
																},
																{
																	"key": "searchdomain",
																	"value": "string",
																	"description": "cloud-init: Sets DNS search domains for a container. Create will automatically use the setting from the host if neither searchdomain nor nameserver are set."
																},
																{
																	"key": "serial[n]",
																	"value": "socket",
																	"description": "Create a serial device inside the VM (n is 0 to 3)"
																},
																{
																	"key": "shares",
																	"value": "1000",
																	"description": "Amount of memory shares for auto-ballooning. The larger the number is, the more memory this VM gets. Number is relative to weights of all other running VMs. Using zero disables auto-ballooning. Auto-ballooning is done by pvestatd."
																},
																{
																	"key": "skiplock",
																	"value": "true",
																	"description": "Ignore locks - only root is allowed to use this option."
																},
																{
																	"key": "smbios1",
																	"value": "string",
																	"description": "Specify SMBIOS type 1 fields."
																},
																{
																	"key": "smp",
																	"value": "1",
																	"description": "The number of CPUs. Please use option -sockets instead."
																},
																{
																	"key": "sockets",
																	"value": "1",
																	"description": "The number of CPU sockets."
																},
																{
																	"key": "spice_enhancements",
																	"value": "string",
																	"description": "Configure additional enhancements for SPICE."
																},
																{
																	"key": "sshkeys",
																	"value": "string",
																	"description": "cloud-init: Setup public SSH keys (one key per line, OpenSSH format)."
																},
																{
																	"key": "startdate",
																	"value": "now",
																	"description": "Set the initial date of the real time clock. Valid format for date are:'now' or '2006-06-17T16:01:21' or '2006-06-17'."
																},
																{
																	"key": "startup",
																	"value": "string",
																	"description": "Startup and shutdown behavior. Order is a non-negative number defining the general startup order. Shutdown in done with reverse ordering. Additionally you can set the 'up' or 'down' delay in seconds, which specifies a delay to wait before the next VM is started or stopped."
																},
																{
																	"key": "tablet",
																	"value": "1",
																	"description": "Enable/disable the USB tablet device."
																},
																{
																	"key": "tags",
																	"value": "string",
																	"description": "Tags of the VM. This is only meta information."
																},
																{
																	"key": "tdf",
																	"value": "0",
																	"description": "Enable/disable time drift fix."
																},
																{
																	"key": "template",
																	"value": "0",
																	"description": "Enable/disable Template."
																},
																{
																	"key": "tpmstate0",
																	"value": "string",
																	"description": "Configure a Disk for storing TPM state. The format is fixed to 'raw'. Use the special syntax STORAGE_ID:SIZE_IN_GiB to allocate a new volume. Note that SIZE_IN_GiB is ignored here and 4 MiB will be used instead. Use STORAGE_ID:0 and the 'import-from' parameter to import from an existing volume."
																},
																{
																	"key": "unused[n]",
																	"value": "string",
																	"description": "Reference to unused volumes. This is used internally, and should not be modified manually."
																},
																{
																	"key": "usb[n]",
																	"value": "string",
																	"description": "Configure an USB device (n is 0 to 4, for machine version >= 7.1 and ostype l26 or windows > 7, n can be up to 14)."
																},
																{
																	"key": "vcpus",
																	"value": "0",
																	"description": "Number of hotplugged vcpus."
																},
																{
																	"key": "vga",
																	"value": "string",
																	"description": "Configure the VGA hardware."
																},
																{
																	"key": "virtio[n]",
																	"value": "string",
																	"description": "Use volume as VIRTIO hard disk (n is 0 to 15). Use the special syntax STORAGE_ID:SIZE_IN_GiB to allocate a new volume. Use STORAGE_ID:0 and the 'import-from' parameter to import from an existing volume."
																},
																{
																	"key": "virtiofs[n]",
																	"value": "string",
																	"description": "Configuration for sharing a directory between host and guest using Virtio-fs."
																},
																{
																	"key": "vmgenid",
																	"value": "1 (autogenerated)",
																	"description": "Set VM Generation ID. Use '1' to autogenerate on create or update, pass '0' to disable explicitly."
																},
																{
																	"key": "vmstatestorage",
																	"value": "string",
																	"description": "Default storage for VM state volumes/files."
																},
																{
																	"key": "watchdog",
																	"value": "string",
																	"description": "Create a virtual hardware watchdog device."
																}
															],
															"variable": [
																{
																	"key": "node",
																	"value": "string",
																	"description": "(Required) The cluster node name."
																},
																{
																	"key": "vmid",
																	"value": "358786328",
																	"description": "(Required) The (unique) ID of the VM."
																}
															]
														},
														"description": "Set virtual machine options (synchronous API) - You should consider using the POST method instead for any actions involving hotplug or storage allocation."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/config?acpi=1&affinity=string&agent=string&amd-sev=string&arch=aarch64&args=string&audio0=string&autostart=0&balloon=8248&bios=seabios&boot=string&bootdisk=virtio092&cdrom=string&cicustom=string&cipassword=string&citype=opennebula&ciupgrade=1&ciuser=string&cores=1&cpu=string&cpulimit=0&cpuunits=cgroup v1: 1024, cgroup v2: 100&delete=string&description=string&digest=string&efidisk0=string&force=true&freeze=true&hookscript=string&hostpci[n]=string&hotplug=network,disk,usb&hugepages=2&ide[n]=string&ipconfig[n]=string&ivshmem=string&keephugepages=0&keyboard=&kvm=1&localtime=true&lock=clone&machine=string&memory=string&migrate_downtime=0.1&migrate_speed=0&name=string&nameserver=string&net[n]=string&numa=0&numa[n]=string&onboot=0&ostype=win7&parallel[n]=/dev/parport044&protection=0&reboot=1&revert=string&rng0=string&running-nets-host-mtu=net1686=7156290533,net4371=021,net4265970009=7845,net4703=0,net09597161=538971,net43657503=30651318,net859=83866960,net9=4&sata[n]=string&scsi[n]=string&scsihw=lsi&searchdomain=string&serial[n]=socket&shares=1000&skiplock=true&smbios1=string&smp=1&sockets=1&spice_enhancements=string&sshkeys=string&startdate=now&startup=string&tablet=1&tags=string&tdf=0&template=0&tpmstate0=string&unused[n]=string&usb[n]=string&vcpus=0&vga=string&virtio[n]=string&virtiofs[n]=string&vmgenid=1 (autogenerated)&vmstatestorage=string&watchdog=string",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"qemu",
																		":vmid",
																		"config"
																	],
																	"query": [
																		{
																			"key": "acpi",
																			"value": "1",
																			"description": "Enable/disable ACPI."
																		},
																		{
																			"key": "affinity",
																			"value": "string",
																			"description": "List of host cores used to execute guest processes, for example: 0,5,8-11"
																		},
																		{
																			"key": "agent",
																			"value": "string",
																			"description": "Enable/disable communication with the QEMU Guest Agent and its properties."
																		},
																		{
																			"key": "amd-sev",
																			"value": "string",
																			"description": "Secure Encrypted Virtualization (SEV) features by AMD CPUs"
																		},
																		{
																			"key": "arch",
																			"value": "aarch64",
																			"description": "Virtual processor architecture. Defaults to the host."
																		},
																		{
																			"key": "args",
																			"value": "string",
																			"description": "Arbitrary arguments passed to kvm."
																		},
																		{
																			"key": "audio0",
																			"value": "string",
																			"description": "Configure a audio device, useful in combination with QXL/Spice."
																		},
																		{
																			"key": "autostart",
																			"value": "0",
																			"description": "Automatic restart after crash (currently ignored)."
																		},
																		{
																			"key": "balloon",
																			"value": "8248",
																			"description": "Amount of target RAM for the VM in MiB. Using zero disables the ballon driver."
																		},
																		{
																			"key": "bios",
																			"value": "seabios",
																			"description": "Select BIOS implementation."
																		},
																		{
																			"key": "boot",
																			"value": "string",
																			"description": "Specify guest boot order. Use the 'order=' sub-property as usage with no key or 'legacy=' is deprecated."
																		},
																		{
																			"key": "bootdisk",
																			"value": "virtio092",
																			"description": "Enable booting from specified disk. Deprecated: Use 'boot: order=foo;bar' instead."
																		},
																		{
																			"key": "cdrom",
																			"value": "string",
																			"description": "This is an alias for option -ide2"
																		},
																		{
																			"key": "cicustom",
																			"value": "string",
																			"description": "cloud-init: Specify custom files to replace the automatically generated ones at start."
																		},
																		{
																			"key": "cipassword",
																			"value": "string",
																			"description": "cloud-init: Password to assign the user. Using this is generally not recommended. Use ssh keys instead. Also note that older cloud-init versions do not support hashed passwords."
																		},
																		{
																			"key": "citype",
																			"value": "opennebula",
																			"description": "Specifies the cloud-init configuration format. The default depends on the configured operating system type (`ostype`. We use the `nocloud` format for Linux, and `configdrive2` for windows."
																		},
																		{
																			"key": "ciupgrade",
																			"value": "1",
																			"description": "cloud-init: do an automatic package upgrade after the first boot."
																		},
																		{
																			"key": "ciuser",
																			"value": "string",
																			"description": "cloud-init: User name to change ssh keys and password for instead of the image's configured default user."
																		},
																		{
																			"key": "cores",
																			"value": "1",
																			"description": "The number of cores per socket."
																		},
																		{
																			"key": "cpu",
																			"value": "string",
																			"description": "Emulated CPU type."
																		},
																		{
																			"key": "cpulimit",
																			"value": "0",
																			"description": "Limit of CPU usage."
																		},
																		{
																			"key": "cpuunits",
																			"value": "cgroup v1: 1024, cgroup v2: 100",
																			"description": "CPU weight for a VM, will be clamped to [1, 10000] in cgroup v2."
																		},
																		{
																			"key": "delete",
																			"value": "string",
																			"description": "A list of settings you want to delete."
																		},
																		{
																			"key": "description",
																			"value": "string",
																			"description": "Description for the VM. Shown in the web-interface VM's summary. This is saved as comment inside the configuration file."
																		},
																		{
																			"key": "digest",
																			"value": "string",
																			"description": "Prevent changes if current configuration file has different SHA1 digest. This can be used to prevent concurrent modifications."
																		},
																		{
																			"key": "efidisk0",
																			"value": "string",
																			"description": "Configure a disk for storing EFI vars. Use the special syntax STORAGE_ID:SIZE_IN_GiB to allocate a new volume. Note that SIZE_IN_GiB is ignored here and that the default EFI vars are copied to the volume instead. Use STORAGE_ID:0 and the 'import-from' parameter to import from an existing volume."
																		},
																		{
																			"key": "force",
																			"value": "true",
																			"description": "Force physical removal. Without this, we simple remove the disk from the config file and create an additional configuration entry called 'unused[n]', which contains the volume ID. Unlink of unused[n] always cause physical removal."
																		},
																		{
																			"key": "freeze",
																			"value": "true",
																			"description": "Freeze CPU at startup (use 'c' monitor command to start execution)."
																		},
																		{
																			"key": "hookscript",
																			"value": "string",
																			"description": "Script that will be executed during various steps in the vms lifetime."
																		},
																		{
																			"key": "hostpci[n]",
																			"value": "string",
																			"description": "Map host PCI devices into guest."
																		},
																		{
																			"key": "hotplug",
																			"value": "network,disk,usb",
																			"description": "Selectively enable hotplug features. This is a comma separated list of hotplug features: 'network', 'disk', 'cpu', 'memory', 'usb' and 'cloudinit'. Use '0' to disable hotplug completely. Using '1' as value is an alias for the default `network,disk,usb`. USB hotplugging is possible for guests with machine version >= 7.1 and ostype l26 or windows > 7."
																		},
																		{
																			"key": "hugepages",
																			"value": "2",
																			"description": "Enable/disable hugepages memory."
																		},
																		{
																			"key": "ide[n]",
																			"value": "string",
																			"description": "Use volume as IDE hard disk or CD-ROM (n is 0 to 3). Use the special syntax STORAGE_ID:SIZE_IN_GiB to allocate a new volume. Use STORAGE_ID:0 and the 'import-from' parameter to import from an existing volume."
																		},
																		{
																			"key": "ipconfig[n]",
																			"value": "string",
																			"description": "cloud-init: Specify IP addresses and gateways for the corresponding interface.\n\nIP addresses use CIDR notation, gateways are optional but need an IP of the same type specified.\n\nThe special string 'dhcp' can be used for IP addresses to use DHCP, in which case no explicit\ngateway should be provided.\nFor IPv6 the special string 'auto' can be used to use stateless autoconfiguration. This requires\ncloud-init 19.4 or newer.\n\nIf cloud-init is enabled and neither an IPv4 nor an IPv6 address is specified, it defaults to using\ndhcp on IPv4.\n"
																		},
																		{
																			"key": "ivshmem",
																			"value": "string",
																			"description": "Inter-VM shared memory. Useful for direct communication between VMs, or to the host."
																		},
																		{
																			"key": "keephugepages",
																			"value": "0",
																			"description": "Use together with hugepages. If enabled, hugepages will not not be deleted after VM shutdown and can be used for subsequent starts."
																		},
																		{
																			"key": "keyboard",
																			"value": "",
																			"description": "Keyboard layout for VNC server. This option is generally not required and is often better handled from within the guest OS."
																		},
																		{
																			"key": "kvm",
																			"value": "1",
																			"description": "Enable/disable KVM hardware virtualization."
																		},
																		{
																			"key": "localtime",
																			"value": "true",
																			"description": "Set the real time clock (RTC) to local time. This is enabled by default if the `ostype` indicates a Microsoft Windows OS."
																		},
																		{
																			"key": "lock",
																			"value": "clone",
																			"description": "Lock/unlock the VM."
																		},
																		{
																			"key": "machine",
																			"value": "string",
																			"description": "Specify the QEMU machine."
																		},
																		{
																			"key": "memory",
																			"value": "string",
																			"description": "Memory properties."
																		},
																		{
																			"key": "migrate_downtime",
																			"value": "0.1",
																			"description": "Set maximum tolerated downtime (in seconds) for migrations. Should the migration not be able to converge in the very end, because too much newly dirtied RAM needs to be transferred, the limit will be increased automatically step-by-step until migration can converge."
																		},
																		{
																			"key": "migrate_speed",
																			"value": "0",
																			"description": "Set maximum speed (in MB/s) for migrations. Value 0 is no limit."
																		},
																		{
																			"key": "name",
																			"value": "string",
																			"description": "Set a name for the VM. Only used on the configuration web interface."
																		},
																		{
																			"key": "nameserver",
																			"value": "string",
																			"description": "cloud-init: Sets DNS server IP address for a container. Create will automatically use the setting from the host if neither searchdomain nor nameserver are set."
																		},
																		{
																			"key": "net[n]",
																			"value": "string",
																			"description": "Specify network devices."
																		},
																		{
																			"key": "numa",
																			"value": "0",
																			"description": "Enable/disable NUMA."
																		},
																		{
																			"key": "numa[n]",
																			"value": "string",
																			"description": "NUMA topology."
																		},
																		{
																			"key": "onboot",
																			"value": "0",
																			"description": "Specifies whether a VM will be started during system bootup."
																		},
																		{
																			"key": "ostype",
																			"value": "win7",
																			"description": "Specify guest operating system."
																		},
																		{
																			"key": "parallel[n]",
																			"value": "/dev/parport044",
																			"description": "Map host parallel devices (n is 0 to 2)."
																		},
																		{
																			"key": "protection",
																			"value": "0",
																			"description": "Sets the protection flag of the VM. This will disable the remove VM and remove disk operations."
																		},
																		{
																			"key": "reboot",
																			"value": "1",
																			"description": "Allow reboot. If set to '0' the VM exit on reboot."
																		},
																		{
																			"key": "revert",
																			"value": "string",
																			"description": "Revert a pending change."
																		},
																		{
																			"key": "rng0",
																			"value": "string",
																			"description": "Configure a VirtIO-based Random Number Generator."
																		},
																		{
																			"key": "running-nets-host-mtu",
																			"value": "net1686=7156290533,net4371=021,net4265970009=7845,net4703=0,net09597161=538971,net43657503=30651318,net859=83866960,net9=4",
																			"description": "List of VirtIO network devices and their effective host_mtu setting. A value of 0 means that the host_mtu parameter is to be avoided for the corresponding device. This is used internally for snapshots."
																		},
																		{
																			"key": "sata[n]",
																			"value": "string",
																			"description": "Use volume as SATA hard disk or CD-ROM (n is 0 to 5). Use the special syntax STORAGE_ID:SIZE_IN_GiB to allocate a new volume. Use STORAGE_ID:0 and the 'import-from' parameter to import from an existing volume."
																		},
																		{
																			"key": "scsi[n]",
																			"value": "string",
																			"description": "Use volume as SCSI hard disk or CD-ROM (n is 0 to 30). Use the special syntax STORAGE_ID:SIZE_IN_GiB to allocate a new volume. Use STORAGE_ID:0 and the 'import-from' parameter to import from an existing volume."
																		},
																		{
																			"key": "scsihw",
																			"value": "lsi",
																			"description": "SCSI controller model"
																		},
																		{
																			"key": "searchdomain",
																			"value": "string",
																			"description": "cloud-init: Sets DNS search domains for a container. Create will automatically use the setting from the host if neither searchdomain nor nameserver are set."
																		},
																		{
																			"key": "serial[n]",
																			"value": "socket",
																			"description": "Create a serial device inside the VM (n is 0 to 3)"
																		},
																		{
																			"key": "shares",
																			"value": "1000",
																			"description": "Amount of memory shares for auto-ballooning. The larger the number is, the more memory this VM gets. Number is relative to weights of all other running VMs. Using zero disables auto-ballooning. Auto-ballooning is done by pvestatd."
																		},
																		{
																			"key": "skiplock",
																			"value": "true",
																			"description": "Ignore locks - only root is allowed to use this option."
																		},
																		{
																			"key": "smbios1",
																			"value": "string",
																			"description": "Specify SMBIOS type 1 fields."
																		},
																		{
																			"key": "smp",
																			"value": "1",
																			"description": "The number of CPUs. Please use option -sockets instead."
																		},
																		{
																			"key": "sockets",
																			"value": "1",
																			"description": "The number of CPU sockets."
																		},
																		{
																			"key": "spice_enhancements",
																			"value": "string",
																			"description": "Configure additional enhancements for SPICE."
																		},
																		{
																			"key": "sshkeys",
																			"value": "string",
																			"description": "cloud-init: Setup public SSH keys (one key per line, OpenSSH format)."
																		},
																		{
																			"key": "startdate",
																			"value": "now",
																			"description": "Set the initial date of the real time clock. Valid format for date are:'now' or '2006-06-17T16:01:21' or '2006-06-17'."
																		},
																		{
																			"key": "startup",
																			"value": "string",
																			"description": "Startup and shutdown behavior. Order is a non-negative number defining the general startup order. Shutdown in done with reverse ordering. Additionally you can set the 'up' or 'down' delay in seconds, which specifies a delay to wait before the next VM is started or stopped."
																		},
																		{
																			"key": "tablet",
																			"value": "1",
																			"description": "Enable/disable the USB tablet device."
																		},
																		{
																			"key": "tags",
																			"value": "string",
																			"description": "Tags of the VM. This is only meta information."
																		},
																		{
																			"key": "tdf",
																			"value": "0",
																			"description": "Enable/disable time drift fix."
																		},
																		{
																			"key": "template",
																			"value": "0",
																			"description": "Enable/disable Template."
																		},
																		{
																			"key": "tpmstate0",
																			"value": "string",
																			"description": "Configure a Disk for storing TPM state. The format is fixed to 'raw'. Use the special syntax STORAGE_ID:SIZE_IN_GiB to allocate a new volume. Note that SIZE_IN_GiB is ignored here and 4 MiB will be used instead. Use STORAGE_ID:0 and the 'import-from' parameter to import from an existing volume."
																		},
																		{
																			"key": "unused[n]",
																			"value": "string",
																			"description": "Reference to unused volumes. This is used internally, and should not be modified manually."
																		},
																		{
																			"key": "usb[n]",
																			"value": "string",
																			"description": "Configure an USB device (n is 0 to 4, for machine version >= 7.1 and ostype l26 or windows > 7, n can be up to 14)."
																		},
																		{
																			"key": "vcpus",
																			"value": "0",
																			"description": "Number of hotplugged vcpus."
																		},
																		{
																			"key": "vga",
																			"value": "string",
																			"description": "Configure the VGA hardware."
																		},
																		{
																			"key": "virtio[n]",
																			"value": "string",
																			"description": "Use volume as VIRTIO hard disk (n is 0 to 15). Use the special syntax STORAGE_ID:SIZE_IN_GiB to allocate a new volume. Use STORAGE_ID:0 and the 'import-from' parameter to import from an existing volume."
																		},
																		{
																			"key": "virtiofs[n]",
																			"value": "string",
																			"description": "Configuration for sharing a directory between host and guest using Virtio-fs."
																		},
																		{
																			"key": "vmgenid",
																			"value": "1 (autogenerated)",
																			"description": "Set VM Generation ID. Use '1' to autogenerate on create or update, pass '0' to disable explicitly."
																		},
																		{
																			"key": "vmstatestorage",
																			"value": "string",
																			"description": "Default storage for VM state volumes/files."
																		},
																		{
																			"key": "watchdog",
																			"value": "string",
																			"description": "Create a virtual hardware watchdog device."
																		}
																	],
																	"variable": [
																		{
																			"key": "node"
																		},
																		{
																			"key": "vmid"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "null"
														}
													]
												}
											]
										},
										{
											"name": "pending",
											"item": [
												{
													"name": "Get the virtual machine configuration with both current and pending values.",
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/pending",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"qemu",
																":vmid",
																"pending"
															],
															"variable": [
																{
																	"key": "node",
																	"value": "string",
																	"description": "(Required) The cluster node name."
																},
																{
																	"key": "vmid",
																	"value": "358786328",
																	"description": "(Required) The (unique) ID of the VM."
																}
															]
														},
														"description": "Get the virtual machine configuration with both current and pending values."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/pending",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"qemu",
																		":vmid",
																		"pending"
																	],
																	"variable": [
																		{
																			"key": "node"
																		},
																		{
																			"key": "vmid"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "[\n  {\n    \"delete\": 1,\n    \"key\": \"string\",\n    \"pending\": \"string\",\n    \"value\": \"string\"\n  },\n  {\n    \"delete\": 1,\n    \"key\": \"string\",\n    \"pending\": \"string\",\n    \"value\": \"string\"\n  }\n]"
														}
													]
												}
											]
										},
										{
											"name": "cloudinit",
											"item": [
												{
													"name": "dump",
													"item": [
														{
															"name": "Get automatically generated cloudinit config.",
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/cloudinit/dump?type=user",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"qemu",
																		":vmid",
																		"cloudinit",
																		"dump"
																	],
																	"query": [
																		{
																			"key": "type",
																			"value": "user",
																			"description": "(Required) Config type."
																		}
																	],
																	"variable": [
																		{
																			"key": "node",
																			"value": "string",
																			"description": "(Required) The cluster node name."
																		},
																		{
																			"key": "vmid",
																			"value": "358786328",
																			"description": "(Required) The (unique) ID of the VM."
																		}
																	]
																},
																"description": "Get automatically generated cloudinit config."
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/cloudinit/dump?type=user",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"nodes",
																				":node",
																				"qemu",
																				":vmid",
																				"cloudinit",
																				"dump"
																			],
																			"query": [
																				{
																					"key": "type",
																					"value": "user",
																					"description": "(Required) Config type."
																				}
																			],
																			"variable": [
																				{
																					"key": "node"
																				},
																				{
																					"key": "vmid"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "string"
																}
															]
														}
													]
												},
												{
													"name": "Get the cloudinit configuration with both current and pending values.",
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/cloudinit",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"qemu",
																":vmid",
																"cloudinit"
															],
															"variable": [
																{
																	"key": "node",
																	"value": "string",
																	"description": "(Required) The cluster node name."
																},
																{
																	"key": "vmid",
																	"value": "358786328",
																	"description": "(Required) The (unique) ID of the VM."
																}
															]
														},
														"description": "Get the cloudinit configuration with both current and pending values."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/cloudinit",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"qemu",
																		":vmid",
																		"cloudinit"
																	],
																	"variable": [
																		{
																			"key": "node"
																		},
																		{
																			"key": "vmid"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "[\n  {\n    \"delete\": 0,\n    \"key\": \"string\",\n    \"pending\": \"string\",\n    \"value\": \"string\"\n  },\n  {\n    \"delete\": 0,\n    \"key\": \"string\",\n    \"pending\": \"string\",\n    \"value\": \"string\"\n  }\n]"
														}
													]
												},
												{
													"name": "Regenerate and change cloudinit config drive.",
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/cloudinit",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"qemu",
																":vmid",
																"cloudinit"
															],
															"variable": [
																{
																	"key": "node",
																	"value": "string",
																	"description": "(Required) The cluster node name."
																},
																{
																	"key": "vmid",
																	"value": "358786328",
																	"description": "(Required) The (unique) ID of the VM."
																}
															]
														},
														"description": "Regenerate and change cloudinit config drive."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/cloudinit",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"qemu",
																		":vmid",
																		"cloudinit"
																	],
																	"variable": [
																		{
																			"key": "node"
																		},
																		{
																			"key": "vmid"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "null"
														}
													]
												}
											]
										},
										{
											"name": "unlink",
											"item": [
												{
													"name": "Unlink/delete disk images.",
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/unlink?force=true&idlist=string",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"qemu",
																":vmid",
																"unlink"
															],
															"query": [
																{
																	"key": "force",
																	"value": "true",
																	"description": "Force physical removal. Without this, we simple remove the disk from the config file and create an additional configuration entry called 'unused[n]', which contains the volume ID. Unlink of unused[n] always cause physical removal."
																},
																{
																	"key": "idlist",
																	"value": "string",
																	"description": "(Required) A list of disk IDs you want to delete."
																}
															],
															"variable": [
																{
																	"key": "node",
																	"value": "string",
																	"description": "(Required) The cluster node name."
																},
																{
																	"key": "vmid",
																	"value": "358786328",
																	"description": "(Required) The (unique) ID of the VM."
																}
															]
														},
														"description": "Unlink/delete disk images."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/unlink?force=true&idlist=string",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"qemu",
																		":vmid",
																		"unlink"
																	],
																	"query": [
																		{
																			"key": "force",
																			"value": "true",
																			"description": "Force physical removal. Without this, we simple remove the disk from the config file and create an additional configuration entry called 'unused[n]', which contains the volume ID. Unlink of unused[n] always cause physical removal."
																		},
																		{
																			"key": "idlist",
																			"value": "string",
																			"description": "(Required) A list of disk IDs you want to delete."
																		}
																	],
																	"variable": [
																		{
																			"key": "node"
																		},
																		{
																			"key": "vmid"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "null"
														}
													]
												}
											]
										},
										{
											"name": "vncproxy",
											"item": [
												{
													"name": "Creates a TCP VNC proxy connections.",
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/vncproxy?generate-password=0&websocket=true",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"qemu",
																":vmid",
																"vncproxy"
															],
															"query": [
																{
																	"key": "generate-password",
																	"value": "0",
																	"description": "Generates a random password to be used as ticket instead of the API ticket."
																},
																{
																	"key": "websocket",
																	"value": "true",
																	"description": "Prepare for websocket upgrade (only required when using serial terminal, otherwise upgrade is always possible)."
																}
															],
															"variable": [
																{
																	"key": "node",
																	"value": "string",
																	"description": "(Required) The cluster node name."
																},
																{
																	"key": "vmid",
																	"value": "358786328",
																	"description": "(Required) The (unique) ID of the VM."
																}
															]
														},
														"description": "Creates a TCP VNC proxy connections."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/vncproxy?generate-password=0&websocket=true",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"qemu",
																		":vmid",
																		"vncproxy"
																	],
																	"query": [
																		{
																			"key": "generate-password",
																			"value": "0",
																			"description": "Generates a random password to be used as ticket instead of the API ticket."
																		},
																		{
																			"key": "websocket",
																			"value": "true",
																			"description": "Prepare for websocket upgrade (only required when using serial terminal, otherwise upgrade is always possible)."
																		}
																	],
																	"variable": [
																		{
																			"key": "node"
																		},
																		{
																			"key": "vmid"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"cert\": \"string\",\n  \"password\": \"string\",\n  \"port\": 5059,\n  \"ticket\": \"string\",\n  \"upid\": \"string\",\n  \"user\": \"string\"\n}"
														}
													]
												}
											]
										},
										{
											"name": "termproxy",
											"item": [
												{
													"name": "Creates a TCP proxy connections.",
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/termproxy?serial=serial0",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"qemu",
																":vmid",
																"termproxy"
															],
															"query": [
																{
																	"key": "serial",
																	"value": "serial0",
																	"description": "opens a serial terminal (defaults to display)"
																}
															],
															"variable": [
																{
																	"key": "node",
																	"value": "string",
																	"description": "(Required) The cluster node name."
																},
																{
																	"key": "vmid",
																	"value": "358786328",
																	"description": "(Required) The (unique) ID of the VM."
																}
															]
														},
														"description": "Creates a TCP proxy connections."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/termproxy?serial=serial0",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"qemu",
																		":vmid",
																		"termproxy"
																	],
																	"query": [
																		{
																			"key": "serial",
																			"value": "serial0",
																			"description": "opens a serial terminal (defaults to display)"
																		}
																	],
																	"variable": [
																		{
																			"key": "node"
																		},
																		{
																			"key": "vmid"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"port\": 1613,\n  \"ticket\": \"string\",\n  \"upid\": \"string\",\n  \"user\": \"string\"\n}"
														}
													]
												}
											]
										},
										{
											"name": "vncwebsocket",
											"item": [
												{
													"name": "Opens a weksocket for VNC traffic.",
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/vncwebsocket?port=5902&vncticket=string",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"qemu",
																":vmid",
																"vncwebsocket"
															],
															"query": [
																{
																	"key": "port",
																	"value": "5902",
																	"description": "(Required) Port number returned by previous vncproxy call."
																},
																{
																	"key": "vncticket",
																	"value": "string",
																	"description": "(Required) Ticket from previous call to vncproxy."
																}
															],
															"variable": [
																{
																	"key": "node",
																	"value": "string",
																	"description": "(Required) The cluster node name."
																},
																{
																	"key": "vmid",
																	"value": "358786328",
																	"description": "(Required) The (unique) ID of the VM."
																}
															]
														},
														"description": "Opens a weksocket for VNC traffic."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/vncwebsocket?port=5902&vncticket=string",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"qemu",
																		":vmid",
																		"vncwebsocket"
																	],
																	"query": [
																		{
																			"key": "port",
																			"value": "5902",
																			"description": "(Required) Port number returned by previous vncproxy call."
																		},
																		{
																			"key": "vncticket",
																			"value": "string",
																			"description": "(Required) Ticket from previous call to vncproxy."
																		}
																	],
																	"variable": [
																		{
																			"key": "node"
																		},
																		{
																			"key": "vmid"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"port\": \"string\"\n}"
														}
													]
												}
											]
										},
										{
											"name": "spiceproxy",
											"item": [
												{
													"name": "Returns a SPICE configuration to connect to the VM.",
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/spiceproxy?proxy=string",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"qemu",
																":vmid",
																"spiceproxy"
															],
															"query": [
																{
																	"key": "proxy",
																	"value": "string",
																	"description": "SPICE proxy server. This can be used by the client to specify the proxy server. All nodes in a cluster runs 'spiceproxy', so it is up to the client to choose one. By default, we return the node where the VM is currently running. As reasonable setting is to use same node you use to connect to the API (This is window.location.hostname for the JS GUI)."
																}
															],
															"variable": [
																{
																	"key": "node",
																	"value": "string",
																	"description": "(Required) The cluster node name."
																},
																{
																	"key": "vmid",
																	"value": "358786328",
																	"description": "(Required) The (unique) ID of the VM."
																}
															]
														},
														"description": "Returns a SPICE configuration to connect to the VM."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/spiceproxy?proxy=string",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"qemu",
																		":vmid",
																		"spiceproxy"
																	],
																	"query": [
																		{
																			"key": "proxy",
																			"value": "string",
																			"description": "SPICE proxy server. This can be used by the client to specify the proxy server. All nodes in a cluster runs 'spiceproxy', so it is up to the client to choose one. By default, we return the node where the VM is currently running. As reasonable setting is to use same node you use to connect to the API (This is window.location.hostname for the JS GUI)."
																		}
																	],
																	"variable": [
																		{
																			"key": "node"
																		},
																		{
																			"key": "vmid"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"host\": \"string\",\n  \"password\": \"string\",\n  \"proxy\": \"string\",\n  \"tls-port\": 4012,\n  \"type\": \"string\"\n}"
														}
													]
												}
											]
										},
										{
											"name": "status",
											"item": [
												{
													"name": "current",
													"item": [
														{
															"name": "Get virtual machine status.",
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/status/current",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"qemu",
																		":vmid",
																		"status",
																		"current"
																	],
																	"variable": [
																		{
																			"key": "node",
																			"value": "string",
																			"description": "(Required) The cluster node name."
																		},
																		{
																			"key": "vmid",
																			"value": "358786328",
																			"description": "(Required) The (unique) ID of the VM."
																		}
																	]
																},
																"description": "Get virtual machine status."
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/status/current",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"nodes",
																				":node",
																				"qemu",
																				":vmid",
																				"status",
																				"current"
																			],
																			"variable": [
																				{
																					"key": "node"
																				},
																				{
																					"key": "vmid"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"agent\": true,\n  \"clipboard\": \"vnc\",\n  \"cpu\": 9872.062747985603,\n  \"cpus\": 8813.610856775127,\n  \"diskread\": 1267,\n  \"diskwrite\": 7686,\n  \"ha\": {},\n  \"lock\": \"string\",\n  \"maxdisk\": 8781,\n  \"maxmem\": 214,\n  \"mem\": 9210,\n  \"memhost\": 2895,\n  \"name\": \"string\",\n  \"netin\": 3815,\n  \"netout\": 7422,\n  \"pid\": 4550,\n  \"pressurecpufull\": 4676.2146527715995,\n  \"pressurecpusome\": 4778.5299131422025,\n  \"pressureiofull\": 2137.930888904982,\n  \"pressureiosome\": 9542.906604789543,\n  \"pressurememoryfull\": 761.0803728993409,\n  \"pressurememorysome\": 1016.5791178411209,\n  \"qmpstatus\": \"string\",\n  \"running-machine\": \"string\",\n  \"running-qemu\": \"string\",\n  \"serial\": true,\n  \"spice\": true,\n  \"status\": \"running\",\n  \"tags\": \"string\",\n  \"template\": 0,\n  \"uptime\": 3748,\n  \"vmid\": 215788447\n}"
																}
															]
														}
													]
												},
												{
													"name": "start",
													"item": [
														{
															"name": "Start virtual machine.",
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/status/start?force-cpu=string&machine=string&migratedfrom=string&migration_network=string&migration_type=insecure&nets-host-mtu=net1686=7156290533,net4371=021,net4265970009=7845,net4703=0,net09597161=538971,net43657503=30651318,net859=83866960,net9=4&skiplock=true&stateuri=string&targetstorage=string&timeout=max(30, vm memory in GiB)&with-conntrack-state=0",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"qemu",
																		":vmid",
																		"status",
																		"start"
																	],
																	"query": [
																		{
																			"key": "force-cpu",
																			"value": "string",
																			"description": "Override QEMU's -cpu argument with the given string."
																		},
																		{
																			"key": "machine",
																			"value": "string",
																			"description": "Specify the QEMU machine."
																		},
																		{
																			"key": "migratedfrom",
																			"value": "string",
																			"description": "The cluster node name."
																		},
																		{
																			"key": "migration_network",
																			"value": "string",
																			"description": "CIDR of the (sub) network that is used for migration."
																		},
																		{
																			"key": "migration_type",
																			"value": "insecure",
																			"description": "Migration traffic is encrypted using an SSH tunnel by default. On secure, completely private networks this can be disabled to increase performance."
																		},
																		{
																			"key": "nets-host-mtu",
																			"value": "net1686=7156290533,net4371=021,net4265970009=7845,net4703=0,net09597161=538971,net43657503=30651318,net859=83866960,net9=4",
																			"description": "Used for migration compat. List of VirtIO network devices and their effective host_mtu setting according to the QEMU object model on the source side of the migration. A value of 0 means that the host_mtu parameter is to be avoided for the corresponding device."
																		},
																		{
																			"key": "skiplock",
																			"value": "true",
																			"description": "Ignore locks - only root is allowed to use this option."
																		},
																		{
																			"key": "stateuri",
																			"value": "string",
																			"description": "Some command save/restore state from this location."
																		},
																		{
																			"key": "targetstorage",
																			"value": "string",
																			"description": "Mapping from source to target storages. Providing only a single storage ID maps all source storages to that storage. Providing the special value '1' will map each source storage to itself."
																		},
																		{
																			"key": "timeout",
																			"value": "max(30, vm memory in GiB)",
																			"description": "Wait maximal timeout seconds."
																		},
																		{
																			"key": "with-conntrack-state",
																			"value": "0",
																			"description": "Whether to migrate conntrack entries for running VMs."
																		}
																	],
																	"variable": [
																		{
																			"key": "node",
																			"value": "string",
																			"description": "(Required) The cluster node name."
																		},
																		{
																			"key": "vmid",
																			"value": "358786328",
																			"description": "(Required) The (unique) ID of the VM."
																		}
																	]
																},
																"description": "Start virtual machine."
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/status/start?force-cpu=string&machine=string&migratedfrom=string&migration_network=string&migration_type=insecure&nets-host-mtu=net1686=7156290533,net4371=021,net4265970009=7845,net4703=0,net09597161=538971,net43657503=30651318,net859=83866960,net9=4&skiplock=true&stateuri=string&targetstorage=string&timeout=max(30, vm memory in GiB)&with-conntrack-state=0",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"nodes",
																				":node",
																				"qemu",
																				":vmid",
																				"status",
																				"start"
																			],
																			"query": [
																				{
																					"key": "force-cpu",
																					"value": "string",
																					"description": "Override QEMU's -cpu argument with the given string."
																				},
																				{
																					"key": "machine",
																					"value": "string",
																					"description": "Specify the QEMU machine."
																				},
																				{
																					"key": "migratedfrom",
																					"value": "string",
																					"description": "The cluster node name."
																				},
																				{
																					"key": "migration_network",
																					"value": "string",
																					"description": "CIDR of the (sub) network that is used for migration."
																				},
																				{
																					"key": "migration_type",
																					"value": "insecure",
																					"description": "Migration traffic is encrypted using an SSH tunnel by default. On secure, completely private networks this can be disabled to increase performance."
																				},
																				{
																					"key": "nets-host-mtu",
																					"value": "net1686=7156290533,net4371=021,net4265970009=7845,net4703=0,net09597161=538971,net43657503=30651318,net859=83866960,net9=4",
																					"description": "Used for migration compat. List of VirtIO network devices and their effective host_mtu setting according to the QEMU object model on the source side of the migration. A value of 0 means that the host_mtu parameter is to be avoided for the corresponding device."
																				},
																				{
																					"key": "skiplock",
																					"value": "true",
																					"description": "Ignore locks - only root is allowed to use this option."
																				},
																				{
																					"key": "stateuri",
																					"value": "string",
																					"description": "Some command save/restore state from this location."
																				},
																				{
																					"key": "targetstorage",
																					"value": "string",
																					"description": "Mapping from source to target storages. Providing only a single storage ID maps all source storages to that storage. Providing the special value '1' will map each source storage to itself."
																				},
																				{
																					"key": "timeout",
																					"value": "max(30, vm memory in GiB)",
																					"description": "Wait maximal timeout seconds."
																				},
																				{
																					"key": "with-conntrack-state",
																					"value": "0",
																					"description": "Whether to migrate conntrack entries for running VMs."
																				}
																			],
																			"variable": [
																				{
																					"key": "node"
																				},
																				{
																					"key": "vmid"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "string"
																}
															]
														}
													]
												},
												{
													"name": "stop",
													"item": [
														{
															"name": "Stop virtual machine. The qemu process will exit immediately. This is akin to pulling the power plug of a running computer and may damage the VM data.",
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/status/stop?keepActive=0&migratedfrom=string&overrule-shutdown=0&skiplock=true&timeout=8248",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"qemu",
																		":vmid",
																		"status",
																		"stop"
																	],
																	"query": [
																		{
																			"key": "keepActive",
																			"value": "0",
																			"description": "Do not deactivate storage volumes."
																		},
																		{
																			"key": "migratedfrom",
																			"value": "string",
																			"description": "The cluster node name."
																		},
																		{
																			"key": "overrule-shutdown",
																			"value": "0",
																			"description": "Try to abort active 'qmshutdown' tasks before stopping."
																		},
																		{
																			"key": "skiplock",
																			"value": "true",
																			"description": "Ignore locks - only root is allowed to use this option."
																		},
																		{
																			"key": "timeout",
																			"value": "8248",
																			"description": "Wait maximal timeout seconds."
																		}
																	],
																	"variable": [
																		{
																			"key": "node",
																			"value": "string",
																			"description": "(Required) The cluster node name."
																		},
																		{
																			"key": "vmid",
																			"value": "358786328",
																			"description": "(Required) The (unique) ID of the VM."
																		}
																	]
																},
																"description": "Stop virtual machine. The qemu process will exit immediately. This is akin to pulling the power plug of a running computer and may damage the VM data."
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/status/stop?keepActive=0&migratedfrom=string&overrule-shutdown=0&skiplock=true&timeout=8248",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"nodes",
																				":node",
																				"qemu",
																				":vmid",
																				"status",
																				"stop"
																			],
																			"query": [
																				{
																					"key": "keepActive",
																					"value": "0",
																					"description": "Do not deactivate storage volumes."
																				},
																				{
																					"key": "migratedfrom",
																					"value": "string",
																					"description": "The cluster node name."
																				},
																				{
																					"key": "overrule-shutdown",
																					"value": "0",
																					"description": "Try to abort active 'qmshutdown' tasks before stopping."
																				},
																				{
																					"key": "skiplock",
																					"value": "true",
																					"description": "Ignore locks - only root is allowed to use this option."
																				},
																				{
																					"key": "timeout",
																					"value": "8248",
																					"description": "Wait maximal timeout seconds."
																				}
																			],
																			"variable": [
																				{
																					"key": "node"
																				},
																				{
																					"key": "vmid"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "string"
																}
															]
														}
													]
												},
												{
													"name": "reset",
													"item": [
														{
															"name": "Reset virtual machine.",
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/status/reset?skiplock=true",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"qemu",
																		":vmid",
																		"status",
																		"reset"
																	],
																	"query": [
																		{
																			"key": "skiplock",
																			"value": "true",
																			"description": "Ignore locks - only root is allowed to use this option."
																		}
																	],
																	"variable": [
																		{
																			"key": "node",
																			"value": "string",
																			"description": "(Required) The cluster node name."
																		},
																		{
																			"key": "vmid",
																			"value": "358786328",
																			"description": "(Required) The (unique) ID of the VM."
																		}
																	]
																},
																"description": "Reset virtual machine."
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/status/reset?skiplock=true",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"nodes",
																				":node",
																				"qemu",
																				":vmid",
																				"status",
																				"reset"
																			],
																			"query": [
																				{
																					"key": "skiplock",
																					"value": "true",
																					"description": "Ignore locks - only root is allowed to use this option."
																				}
																			],
																			"variable": [
																				{
																					"key": "node"
																				},
																				{
																					"key": "vmid"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "string"
																}
															]
														}
													]
												},
												{
													"name": "shutdown",
													"item": [
														{
															"name": "Shutdown virtual machine. This is similar to pressing the power button on a physical machine. This will send an ACPI event for the guest OS, which should then proceed to a clean shutdown.",
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/status/shutdown?forceStop=0&keepActive=0&skiplock=true&timeout=8248",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"qemu",
																		":vmid",
																		"status",
																		"shutdown"
																	],
																	"query": [
																		{
																			"key": "forceStop",
																			"value": "0",
																			"description": "Make sure the VM stops."
																		},
																		{
																			"key": "keepActive",
																			"value": "0",
																			"description": "Do not deactivate storage volumes."
																		},
																		{
																			"key": "skiplock",
																			"value": "true",
																			"description": "Ignore locks - only root is allowed to use this option."
																		},
																		{
																			"key": "timeout",
																			"value": "8248",
																			"description": "Wait maximal timeout seconds."
																		}
																	],
																	"variable": [
																		{
																			"key": "node",
																			"value": "string",
																			"description": "(Required) The cluster node name."
																		},
																		{
																			"key": "vmid",
																			"value": "358786328",
																			"description": "(Required) The (unique) ID of the VM."
																		}
																	]
																},
																"description": "Shutdown virtual machine. This is similar to pressing the power button on a physical machine. This will send an ACPI event for the guest OS, which should then proceed to a clean shutdown."
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/status/shutdown?forceStop=0&keepActive=0&skiplock=true&timeout=8248",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"nodes",
																				":node",
																				"qemu",
																				":vmid",
																				"status",
																				"shutdown"
																			],
																			"query": [
																				{
																					"key": "forceStop",
																					"value": "0",
																					"description": "Make sure the VM stops."
																				},
																				{
																					"key": "keepActive",
																					"value": "0",
																					"description": "Do not deactivate storage volumes."
																				},
																				{
																					"key": "skiplock",
																					"value": "true",
																					"description": "Ignore locks - only root is allowed to use this option."
																				},
																				{
																					"key": "timeout",
																					"value": "8248",
																					"description": "Wait maximal timeout seconds."
																				}
																			],
																			"variable": [
																				{
																					"key": "node"
																				},
																				{
																					"key": "vmid"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "string"
																}
															]
														}
													]
												},
												{
													"name": "reboot",
													"item": [
														{
															"name": "Reboot the VM by shutting it down, and starting it again. Applies pending changes.",
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/status/reboot?timeout=8248",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"qemu",
																		":vmid",
																		"status",
																		"reboot"
																	],
																	"query": [
																		{
																			"key": "timeout",
																			"value": "8248",
																			"description": "Wait maximal timeout seconds for the shutdown."
																		}
																	],
																	"variable": [
																		{
																			"key": "node",
																			"value": "string",
																			"description": "(Required) The cluster node name."
																		},
																		{
																			"key": "vmid",
																			"value": "358786328",
																			"description": "(Required) The (unique) ID of the VM."
																		}
																	]
																},
																"description": "Reboot the VM by shutting it down, and starting it again. Applies pending changes."
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/status/reboot?timeout=8248",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"nodes",
																				":node",
																				"qemu",
																				":vmid",
																				"status",
																				"reboot"
																			],
																			"query": [
																				{
																					"key": "timeout",
																					"value": "8248",
																					"description": "Wait maximal timeout seconds for the shutdown."
																				}
																			],
																			"variable": [
																				{
																					"key": "node"
																				},
																				{
																					"key": "vmid"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "string"
																}
															]
														}
													]
												},
												{
													"name": "suspend",
													"item": [
														{
															"name": "Suspend virtual machine.",
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/status/suspend?skiplock=true&statestorage=string&todisk=0",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"qemu",
																		":vmid",
																		"status",
																		"suspend"
																	],
																	"query": [
																		{
																			"key": "skiplock",
																			"value": "true",
																			"description": "Ignore locks - only root is allowed to use this option."
																		},
																		{
																			"key": "statestorage",
																			"value": "string",
																			"description": "The storage for the VM state"
																		},
																		{
																			"key": "todisk",
																			"value": "0",
																			"description": "If set, suspends the VM to disk. Will be resumed on next VM start."
																		}
																	],
																	"variable": [
																		{
																			"key": "node",
																			"value": "string",
																			"description": "(Required) The cluster node name."
																		},
																		{
																			"key": "vmid",
																			"value": "358786328",
																			"description": "(Required) The (unique) ID of the VM."
																		}
																	]
																},
																"description": "Suspend virtual machine."
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/status/suspend?skiplock=true&statestorage=string&todisk=0",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"nodes",
																				":node",
																				"qemu",
																				":vmid",
																				"status",
																				"suspend"
																			],
																			"query": [
																				{
																					"key": "skiplock",
																					"value": "true",
																					"description": "Ignore locks - only root is allowed to use this option."
																				},
																				{
																					"key": "statestorage",
																					"value": "string",
																					"description": "The storage for the VM state"
																				},
																				{
																					"key": "todisk",
																					"value": "0",
																					"description": "If set, suspends the VM to disk. Will be resumed on next VM start."
																				}
																			],
																			"variable": [
																				{
																					"key": "node"
																				},
																				{
																					"key": "vmid"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "string"
																}
															]
														}
													]
												},
												{
													"name": "resume",
													"item": [
														{
															"name": "Resume virtual machine.",
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/status/resume?nocheck=true&skiplock=true",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"qemu",
																		":vmid",
																		"status",
																		"resume"
																	],
																	"query": [
																		{
																			"key": "nocheck",
																			"value": "true"
																		},
																		{
																			"key": "skiplock",
																			"value": "true",
																			"description": "Ignore locks - only root is allowed to use this option."
																		}
																	],
																	"variable": [
																		{
																			"key": "node",
																			"value": "string",
																			"description": "(Required) The cluster node name."
																		},
																		{
																			"key": "vmid",
																			"value": "358786328",
																			"description": "(Required) The (unique) ID of the VM."
																		}
																	]
																},
																"description": "Resume virtual machine."
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/status/resume?nocheck=true&skiplock=true",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"nodes",
																				":node",
																				"qemu",
																				":vmid",
																				"status",
																				"resume"
																			],
																			"query": [
																				{
																					"key": "nocheck",
																					"value": "true"
																				},
																				{
																					"key": "skiplock",
																					"value": "true",
																					"description": "Ignore locks - only root is allowed to use this option."
																				}
																			],
																			"variable": [
																				{
																					"key": "node"
																				},
																				{
																					"key": "vmid"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "string"
																}
															]
														}
													]
												},
												{
													"name": "Directory index",
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/status",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"qemu",
																":vmid",
																"status"
															],
															"variable": [
																{
																	"key": "node",
																	"value": "string",
																	"description": "(Required) The cluster node name."
																},
																{
																	"key": "vmid",
																	"value": "358786328",
																	"description": "(Required) The (unique) ID of the VM."
																}
															]
														},
														"description": "Directory index"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/status",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"qemu",
																		":vmid",
																		"status"
																	],
																	"variable": [
																		{
																			"key": "node"
																		},
																		{
																			"key": "vmid"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "[\n  {\n    \"subdir\": \"string\"\n  },\n  {\n    \"subdir\": \"string\"\n  }\n]"
														}
													]
												}
											]
										},
										{
											"name": "sendkey",
											"item": [
												{
													"name": "Send key event to virtual machine.",
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/sendkey?key=string&skiplock=true",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"qemu",
																":vmid",
																"sendkey"
															],
															"query": [
																{
																	"key": "key",
																	"value": "string",
																	"description": "(Required) The key (qemu monitor encoding)."
																},
																{
																	"key": "skiplock",
																	"value": "true",
																	"description": "Ignore locks - only root is allowed to use this option."
																}
															],
															"variable": [
																{
																	"key": "node",
																	"value": "string",
																	"description": "(Required) The cluster node name."
																},
																{
																	"key": "vmid",
																	"value": "358786328",
																	"description": "(Required) The (unique) ID of the VM."
																}
															]
														},
														"description": "Send key event to virtual machine."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/sendkey?key=string&skiplock=true",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"qemu",
																		":vmid",
																		"sendkey"
																	],
																	"query": [
																		{
																			"key": "key",
																			"value": "string",
																			"description": "(Required) The key (qemu monitor encoding)."
																		},
																		{
																			"key": "skiplock",
																			"value": "true",
																			"description": "Ignore locks - only root is allowed to use this option."
																		}
																	],
																	"variable": [
																		{
																			"key": "node"
																		},
																		{
																			"key": "vmid"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "null"
														}
													]
												}
											]
										},
										{
											"name": "feature",
											"item": [
												{
													"name": "Check if feature for virtual machine is available.",
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/feature?feature=clone&snapname=string",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"qemu",
																":vmid",
																"feature"
															],
															"query": [
																{
																	"key": "feature",
																	"value": "clone",
																	"description": "(Required) Feature to check."
																},
																{
																	"key": "snapname",
																	"value": "string",
																	"description": "The name of the snapshot."
																}
															],
															"variable": [
																{
																	"key": "node",
																	"value": "string",
																	"description": "(Required) The cluster node name."
																},
																{
																	"key": "vmid",
																	"value": "358786328",
																	"description": "(Required) The (unique) ID of the VM."
																}
															]
														},
														"description": "Check if feature for virtual machine is available."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/feature?feature=clone&snapname=string",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"qemu",
																		":vmid",
																		"feature"
																	],
																	"query": [
																		{
																			"key": "feature",
																			"value": "clone",
																			"description": "(Required) Feature to check."
																		},
																		{
																			"key": "snapname",
																			"value": "string",
																			"description": "The name of the snapshot."
																		}
																	],
																	"variable": [
																		{
																			"key": "node"
																		},
																		{
																			"key": "vmid"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"hasFeature\": false,\n  \"nodes\": [\n    \"string\",\n    \"string\"\n  ]\n}"
														}
													]
												}
											]
										},
										{
											"name": "clone",
											"item": [
												{
													"name": "Create a copy of virtual machine/template.",
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/clone?bwlimit=clone limit from datacenter or storage config&description=string&format=qcow2&full=true&name=string&newid=358786328&pool=string&snapname=string&storage=string&target=string",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"qemu",
																":vmid",
																"clone"
															],
															"query": [
																{
																	"key": "bwlimit",
																	"value": "clone limit from datacenter or storage config",
																	"description": "Override I/O bandwidth limit (in KiB/s)."
																},
																{
																	"key": "description",
																	"value": "string",
																	"description": "Description for the new VM."
																},
																{
																	"key": "format",
																	"value": "qcow2",
																	"description": "Target format for file storage. Only valid for full clone."
																},
																{
																	"key": "full",
																	"value": "true",
																	"description": "Create a full copy of all disks. This is always done when you clone a normal VM. For VM templates, we try to create a linked clone by default."
																},
																{
																	"key": "name",
																	"value": "string",
																	"description": "Set a name for the new VM."
																},
																{
																	"key": "newid",
																	"value": "358786328",
																	"description": "(Required) VMID for the clone."
																},
																{
																	"key": "pool",
																	"value": "string",
																	"description": "Add the new VM to the specified pool."
																},
																{
																	"key": "snapname",
																	"value": "string",
																	"description": "The name of the snapshot."
																},
																{
																	"key": "storage",
																	"value": "string",
																	"description": "Target storage for full clone."
																},
																{
																	"key": "target",
																	"value": "string",
																	"description": "Target node. Only allowed if the original VM is on shared storage."
																}
															],
															"variable": [
																{
																	"key": "node",
																	"value": "string",
																	"description": "(Required) The cluster node name."
																},
																{
																	"key": "vmid",
																	"value": "358786328",
																	"description": "(Required) The (unique) ID of the VM."
																}
															]
														},
														"description": "Create a copy of virtual machine/template."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/clone?bwlimit=clone limit from datacenter or storage config&description=string&format=qcow2&full=true&name=string&newid=358786328&pool=string&snapname=string&storage=string&target=string",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"qemu",
																		":vmid",
																		"clone"
																	],
																	"query": [
																		{
																			"key": "bwlimit",
																			"value": "clone limit from datacenter or storage config",
																			"description": "Override I/O bandwidth limit (in KiB/s)."
																		},
																		{
																			"key": "description",
																			"value": "string",
																			"description": "Description for the new VM."
																		},
																		{
																			"key": "format",
																			"value": "qcow2",
																			"description": "Target format for file storage. Only valid for full clone."
																		},
																		{
																			"key": "full",
																			"value": "true",
																			"description": "Create a full copy of all disks. This is always done when you clone a normal VM. For VM templates, we try to create a linked clone by default."
																		},
																		{
																			"key": "name",
																			"value": "string",
																			"description": "Set a name for the new VM."
																		},
																		{
																			"key": "newid",
																			"value": "358786328",
																			"description": "(Required) VMID for the clone."
																		},
																		{
																			"key": "pool",
																			"value": "string",
																			"description": "Add the new VM to the specified pool."
																		},
																		{
																			"key": "snapname",
																			"value": "string",
																			"description": "The name of the snapshot."
																		},
																		{
																			"key": "storage",
																			"value": "string",
																			"description": "Target storage for full clone."
																		},
																		{
																			"key": "target",
																			"value": "string",
																			"description": "Target node. Only allowed if the original VM is on shared storage."
																		}
																	],
																	"variable": [
																		{
																			"key": "node"
																		},
																		{
																			"key": "vmid"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "string"
														}
													]
												}
											]
										},
										{
											"name": "move_disk",
											"item": [
												{
													"name": "Move volume to different storage or to a different VM.",
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/move_disk?bwlimit=move limit from datacenter or storage config&delete=0&digest=string&disk=virtio7&format=qcow2&storage=string&target-digest=string&target-disk=virtio7&target-vmid=358786328",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"qemu",
																":vmid",
																"move_disk"
															],
															"query": [
																{
																	"key": "bwlimit",
																	"value": "move limit from datacenter or storage config",
																	"description": "Override I/O bandwidth limit (in KiB/s)."
																},
																{
																	"key": "delete",
																	"value": "0",
																	"description": "Delete the original disk after successful copy. By default the original disk is kept as unused disk."
																},
																{
																	"key": "digest",
																	"value": "string",
																	"description": "Prevent changes if current configuration file has different SHA1\"\n\t\t    .\" digest. This can be used to prevent concurrent modifications."
																},
																{
																	"key": "disk",
																	"value": "virtio7",
																	"description": "(Required) The disk you want to move."
																},
																{
																	"key": "format",
																	"value": "qcow2",
																	"description": "Target Format."
																},
																{
																	"key": "storage",
																	"value": "string",
																	"description": "Target storage."
																},
																{
																	"key": "target-digest",
																	"value": "string",
																	"description": "Prevent changes if the current config file of the target VM has a\"\n\t\t    .\" different SHA1 digest. This can be used to detect concurrent modifications."
																},
																{
																	"key": "target-disk",
																	"value": "virtio7",
																	"description": "The config key the disk will be moved to on the target VM (for example, ide0 or scsi1). Default is the source disk key."
																},
																{
																	"key": "target-vmid",
																	"value": "358786328",
																	"description": "The (unique) ID of the VM."
																}
															],
															"variable": [
																{
																	"key": "node",
																	"value": "string",
																	"description": "(Required) The cluster node name."
																},
																{
																	"key": "vmid",
																	"value": "358786328",
																	"description": "(Required) The (unique) ID of the VM."
																}
															]
														},
														"description": "Move volume to different storage or to a different VM."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/move_disk?bwlimit=move limit from datacenter or storage config&delete=0&digest=string&disk=virtio7&format=qcow2&storage=string&target-digest=string&target-disk=virtio7&target-vmid=358786328",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"qemu",
																		":vmid",
																		"move_disk"
																	],
																	"query": [
																		{
																			"key": "bwlimit",
																			"value": "move limit from datacenter or storage config",
																			"description": "Override I/O bandwidth limit (in KiB/s)."
																		},
																		{
																			"key": "delete",
																			"value": "0",
																			"description": "Delete the original disk after successful copy. By default the original disk is kept as unused disk."
																		},
																		{
																			"key": "digest",
																			"value": "string",
																			"description": "Prevent changes if current configuration file has different SHA1\"\n\t\t    .\" digest. This can be used to prevent concurrent modifications."
																		},
																		{
																			"key": "disk",
																			"value": "virtio7",
																			"description": "(Required) The disk you want to move."
																		},
																		{
																			"key": "format",
																			"value": "qcow2",
																			"description": "Target Format."
																		},
																		{
																			"key": "storage",
																			"value": "string",
																			"description": "Target storage."
																		},
																		{
																			"key": "target-digest",
																			"value": "string",
																			"description": "Prevent changes if the current config file of the target VM has a\"\n\t\t    .\" different SHA1 digest. This can be used to detect concurrent modifications."
																		},
																		{
																			"key": "target-disk",
																			"value": "virtio7",
																			"description": "The config key the disk will be moved to on the target VM (for example, ide0 or scsi1). Default is the source disk key."
																		},
																		{
																			"key": "target-vmid",
																			"value": "358786328",
																			"description": "The (unique) ID of the VM."
																		}
																	],
																	"variable": [
																		{
																			"key": "node"
																		},
																		{
																			"key": "vmid"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "string"
														}
													]
												}
											]
										},
										{
											"name": "migrate",
											"item": [
												{
													"name": "Get preconditions for migration.",
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/migrate?target=string",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"qemu",
																":vmid",
																"migrate"
															],
															"query": [
																{
																	"key": "target",
																	"value": "string",
																	"description": "Target node."
																}
															],
															"variable": [
																{
																	"key": "node",
																	"value": "string",
																	"description": "(Required) The cluster node name."
																},
																{
																	"key": "vmid",
																	"value": "358786328",
																	"description": "(Required) The (unique) ID of the VM."
																}
															]
														},
														"description": "Get preconditions for migration."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/migrate?target=string",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"qemu",
																		":vmid",
																		"migrate"
																	],
																	"query": [
																		{
																			"key": "target",
																			"value": "string",
																			"description": "Target node."
																		}
																	],
																	"variable": [
																		{
																			"key": "node"
																		},
																		{
																			"key": "vmid"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"allowed_nodes\": [\n    \"string\",\n    \"string\"\n  ],\n  \"dependent-ha-resources\": [\n    \"string\",\n    \"string\"\n  ],\n  \"has-dbus-vmstate\": false,\n  \"local_disks\": [\n    {\n      \"cdrom\": true,\n      \"is_unused\": true,\n      \"size\": 6728,\n      \"volid\": \"string\"\n    },\n    {\n      \"cdrom\": false,\n      \"is_unused\": false,\n      \"size\": 1122,\n      \"volid\": \"string\"\n    }\n  ],\n  \"local_resources\": [\n    \"string\",\n    \"string\"\n  ],\n  \"mapped-resource-info\": {},\n  \"mapped-resources\": [\n    \"string\",\n    \"string\"\n  ],\n  \"not_allowed_nodes\": {\n    \"blocking-ha-resources\": [\n      {\n        \"cause\": \"resource-affinity\",\n        \"sid\": \"string\"\n      },\n      {\n        \"cause\": \"resource-affinity\",\n        \"sid\": \"string\"\n      }\n    ],\n    \"unavailable_storages\": [\n      \"string\",\n      \"string\"\n    ]\n  },\n  \"running\": true\n}"
														}
													]
												},
												{
													"name": "Migrate virtual machine. Creates a new migration task.",
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/migrate?bwlimit=migrate limit from datacenter or storage config&force=true&migration_network=string&migration_type=insecure&online=true&target=string&targetstorage=string&with-conntrack-state=0&with-local-disks=true",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"qemu",
																":vmid",
																"migrate"
															],
															"query": [
																{
																	"key": "bwlimit",
																	"value": "migrate limit from datacenter or storage config",
																	"description": "Override I/O bandwidth limit (in KiB/s)."
																},
																{
																	"key": "force",
																	"value": "true",
																	"description": "Allow to migrate VMs which use local devices. Only root may use this option."
																},
																{
																	"key": "migration_network",
																	"value": "string",
																	"description": "CIDR of the (sub) network that is used for migration."
																},
																{
																	"key": "migration_type",
																	"value": "insecure",
																	"description": "Migration traffic is encrypted using an SSH tunnel by default. On secure, completely private networks this can be disabled to increase performance."
																},
																{
																	"key": "online",
																	"value": "true",
																	"description": "Use online/live migration if VM is running. Ignored if VM is stopped."
																},
																{
																	"key": "target",
																	"value": "string",
																	"description": "(Required) Target node."
																},
																{
																	"key": "targetstorage",
																	"value": "string",
																	"description": "Mapping from source to target storages. Providing only a single storage ID maps all source storages to that storage. Providing the special value '1' will map each source storage to itself."
																},
																{
																	"key": "with-conntrack-state",
																	"value": "0",
																	"description": "Whether to migrate conntrack entries for running VMs."
																},
																{
																	"key": "with-local-disks",
																	"value": "true",
																	"description": "Enable live storage migration for local disk"
																}
															],
															"variable": [
																{
																	"key": "node",
																	"value": "string",
																	"description": "(Required) The cluster node name."
																},
																{
																	"key": "vmid",
																	"value": "358786328",
																	"description": "(Required) The (unique) ID of the VM."
																}
															]
														},
														"description": "Migrate virtual machine. Creates a new migration task."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/migrate?bwlimit=migrate limit from datacenter or storage config&force=true&migration_network=string&migration_type=insecure&online=true&target=string&targetstorage=string&with-conntrack-state=0&with-local-disks=true",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"qemu",
																		":vmid",
																		"migrate"
																	],
																	"query": [
																		{
																			"key": "bwlimit",
																			"value": "migrate limit from datacenter or storage config",
																			"description": "Override I/O bandwidth limit (in KiB/s)."
																		},
																		{
																			"key": "force",
																			"value": "true",
																			"description": "Allow to migrate VMs which use local devices. Only root may use this option."
																		},
																		{
																			"key": "migration_network",
																			"value": "string",
																			"description": "CIDR of the (sub) network that is used for migration."
																		},
																		{
																			"key": "migration_type",
																			"value": "insecure",
																			"description": "Migration traffic is encrypted using an SSH tunnel by default. On secure, completely private networks this can be disabled to increase performance."
																		},
																		{
																			"key": "online",
																			"value": "true",
																			"description": "Use online/live migration if VM is running. Ignored if VM is stopped."
																		},
																		{
																			"key": "target",
																			"value": "string",
																			"description": "(Required) Target node."
																		},
																		{
																			"key": "targetstorage",
																			"value": "string",
																			"description": "Mapping from source to target storages. Providing only a single storage ID maps all source storages to that storage. Providing the special value '1' will map each source storage to itself."
																		},
																		{
																			"key": "with-conntrack-state",
																			"value": "0",
																			"description": "Whether to migrate conntrack entries for running VMs."
																		},
																		{
																			"key": "with-local-disks",
																			"value": "true",
																			"description": "Enable live storage migration for local disk"
																		}
																	],
																	"variable": [
																		{
																			"key": "node"
																		},
																		{
																			"key": "vmid"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "string"
														}
													]
												}
											]
										},
										{
											"name": "remote_migrate",
											"item": [
												{
													"name": "Migrate virtual machine to a remote cluster. Creates a new migration task. EXPERIMENTAL feature!",
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/remote_migrate?bwlimit=migrate limit from datacenter or storage config&delete=0&online=true&target-bridge=string&target-endpoint=string&target-storage=string&target-vmid=358786328",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"qemu",
																":vmid",
																"remote_migrate"
															],
															"query": [
																{
																	"key": "bwlimit",
																	"value": "migrate limit from datacenter or storage config",
																	"description": "Override I/O bandwidth limit (in KiB/s)."
																},
																{
																	"key": "delete",
																	"value": "0",
																	"description": "Delete the original VM and related data after successful migration. By default the original VM is kept on the source cluster in a stopped state."
																},
																{
																	"key": "online",
																	"value": "true",
																	"description": "Use online/live migration if VM is running. Ignored if VM is stopped."
																},
																{
																	"key": "target-bridge",
																	"value": "string",
																	"description": "(Required) Mapping from source to target bridges. Providing only a single bridge ID maps all source bridges to that bridge. Providing the special value '1' will map each source bridge to itself."
																},
																{
																	"key": "target-endpoint",
																	"value": "string",
																	"description": "(Required) Remote target endpoint"
																},
																{
																	"key": "target-storage",
																	"value": "string",
																	"description": "(Required) Mapping from source to target storages. Providing only a single storage ID maps all source storages to that storage. Providing the special value '1' will map each source storage to itself."
																},
																{
																	"key": "target-vmid",
																	"value": "358786328",
																	"description": "The (unique) ID of the VM."
																}
															],
															"variable": [
																{
																	"key": "node",
																	"value": "string",
																	"description": "(Required) The cluster node name."
																},
																{
																	"key": "vmid",
																	"value": "358786328",
																	"description": "(Required) The (unique) ID of the VM."
																}
															]
														},
														"description": "Migrate virtual machine to a remote cluster. Creates a new migration task. EXPERIMENTAL feature!"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/remote_migrate?bwlimit=migrate limit from datacenter or storage config&delete=0&online=true&target-bridge=string&target-endpoint=string&target-storage=string&target-vmid=358786328",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"qemu",
																		":vmid",
																		"remote_migrate"
																	],
																	"query": [
																		{
																			"key": "bwlimit",
																			"value": "migrate limit from datacenter or storage config",
																			"description": "Override I/O bandwidth limit (in KiB/s)."
																		},
																		{
																			"key": "delete",
																			"value": "0",
																			"description": "Delete the original VM and related data after successful migration. By default the original VM is kept on the source cluster in a stopped state."
																		},
																		{
																			"key": "online",
																			"value": "true",
																			"description": "Use online/live migration if VM is running. Ignored if VM is stopped."
																		},
																		{
																			"key": "target-bridge",
																			"value": "string",
																			"description": "(Required) Mapping from source to target bridges. Providing only a single bridge ID maps all source bridges to that bridge. Providing the special value '1' will map each source bridge to itself."
																		},
																		{
																			"key": "target-endpoint",
																			"value": "string",
																			"description": "(Required) Remote target endpoint"
																		},
																		{
																			"key": "target-storage",
																			"value": "string",
																			"description": "(Required) Mapping from source to target storages. Providing only a single storage ID maps all source storages to that storage. Providing the special value '1' will map each source storage to itself."
																		},
																		{
																			"key": "target-vmid",
																			"value": "358786328",
																			"description": "The (unique) ID of the VM."
																		}
																	],
																	"variable": [
																		{
																			"key": "node"
																		},
																		{
																			"key": "vmid"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "string"
														}
													]
												}
											]
										},
										{
											"name": "monitor",
											"item": [
												{
													"name": "Execute QEMU monitor commands.",
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/monitor?command=string",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"qemu",
																":vmid",
																"monitor"
															],
															"query": [
																{
																	"key": "command",
																	"value": "string",
																	"description": "(Required) The monitor command."
																}
															],
															"variable": [
																{
																	"key": "node",
																	"value": "string",
																	"description": "(Required) The cluster node name."
																},
																{
																	"key": "vmid",
																	"value": "358786328",
																	"description": "(Required) The (unique) ID of the VM."
																}
															]
														},
														"description": "Execute QEMU monitor commands."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/monitor?command=string",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"qemu",
																		":vmid",
																		"monitor"
																	],
																	"query": [
																		{
																			"key": "command",
																			"value": "string",
																			"description": "(Required) The monitor command."
																		}
																	],
																	"variable": [
																		{
																			"key": "node"
																		},
																		{
																			"key": "vmid"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "string"
														}
													]
												}
											]
										},
										{
											"name": "resize",
											"item": [
												{
													"name": "Extend volume size.",
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/resize?digest=string&disk=virtio13&size=3.2200K&skiplock=true",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"qemu",
																":vmid",
																"resize"
															],
															"query": [
																{
																	"key": "digest",
																	"value": "string",
																	"description": "Prevent changes if current configuration file has different SHA1 digest. This can be used to prevent concurrent modifications."
																},
																{
																	"key": "disk",
																	"value": "virtio13",
																	"description": "(Required) The disk you want to resize."
																},
																{
																	"key": "size",
																	"value": "3.2200K",
																	"description": "(Required) The new size. With the `+` sign the value is added to the actual size of the volume and without it, the value is taken as an absolute one. Shrinking disk size is not supported."
																},
																{
																	"key": "skiplock",
																	"value": "true",
																	"description": "Ignore locks - only root is allowed to use this option."
																}
															],
															"variable": [
																{
																	"key": "node",
																	"value": "string",
																	"description": "(Required) The cluster node name."
																},
																{
																	"key": "vmid",
																	"value": "358786328",
																	"description": "(Required) The (unique) ID of the VM."
																}
															]
														},
														"description": "Extend volume size."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/resize?digest=string&disk=virtio13&size=3.2200K&skiplock=true",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"qemu",
																		":vmid",
																		"resize"
																	],
																	"query": [
																		{
																			"key": "digest",
																			"value": "string",
																			"description": "Prevent changes if current configuration file has different SHA1 digest. This can be used to prevent concurrent modifications."
																		},
																		{
																			"key": "disk",
																			"value": "virtio13",
																			"description": "(Required) The disk you want to resize."
																		},
																		{
																			"key": "size",
																			"value": "3.2200K",
																			"description": "(Required) The new size. With the `+` sign the value is added to the actual size of the volume and without it, the value is taken as an absolute one. Shrinking disk size is not supported."
																		},
																		{
																			"key": "skiplock",
																			"value": "true",
																			"description": "Ignore locks - only root is allowed to use this option."
																		}
																	],
																	"variable": [
																		{
																			"key": "node"
																		},
																		{
																			"key": "vmid"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "string"
														}
													]
												}
											]
										},
										{
											"name": "snapshot",
											"item": [
												{
													"name": "{snapname}",
													"item": [
														{
															"name": "config",
															"item": [
																{
																	"name": "Get snapshot configuration",
																	"request": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/snapshot/:snapname/config",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"nodes",
																				":node",
																				"qemu",
																				":vmid",
																				"snapshot",
																				":snapname",
																				"config"
																			],
																			"variable": [
																				{
																					"key": "node",
																					"value": "string",
																					"description": "(Required) The cluster node name."
																				},
																				{
																					"key": "vmid",
																					"value": "358786328",
																					"description": "(Required) The (unique) ID of the VM."
																				},
																				{
																					"key": "snapname",
																					"value": "string",
																					"description": "(Required) The name of the snapshot."
																				}
																			]
																		},
																		"description": "Get snapshot configuration"
																	},
																	"response": [
																		{
																			"name": "successful operation",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/snapshot/:snapname/config",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"nodes",
																						":node",
																						"qemu",
																						":vmid",
																						"snapshot",
																						":snapname",
																						"config"
																					],
																					"variable": [
																						{
																							"key": "node"
																						},
																						{
																							"key": "vmid"
																						},
																						{
																							"key": "snapname"
																						}
																					]
																				}
																			},
																			"status": "OK",
																			"code": 200,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "{}"
																		}
																	]
																},
																{
																	"name": "Update snapshot metadata.",
																	"request": {
																		"method": "PUT",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/snapshot/:snapname/config?description=string",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"nodes",
																				":node",
																				"qemu",
																				":vmid",
																				"snapshot",
																				":snapname",
																				"config"
																			],
																			"query": [
																				{
																					"key": "description",
																					"value": "string",
																					"description": "A textual description or comment."
																				}
																			],
																			"variable": [
																				{
																					"key": "node",
																					"value": "string",
																					"description": "(Required) The cluster node name."
																				},
																				{
																					"key": "vmid",
																					"value": "358786328",
																					"description": "(Required) The (unique) ID of the VM."
																				},
																				{
																					"key": "snapname",
																					"value": "string",
																					"description": "(Required) The name of the snapshot."
																				}
																			]
																		},
																		"description": "Update snapshot metadata."
																	},
																	"response": [
																		{
																			"name": "successful operation",
																			"originalRequest": {
																				"method": "PUT",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/snapshot/:snapname/config?description=string",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"nodes",
																						":node",
																						"qemu",
																						":vmid",
																						"snapshot",
																						":snapname",
																						"config"
																					],
																					"query": [
																						{
																							"key": "description",
																							"value": "string",
																							"description": "A textual description or comment."
																						}
																					],
																					"variable": [
																						{
																							"key": "node"
																						},
																						{
																							"key": "vmid"
																						},
																						{
																							"key": "snapname"
																						}
																					]
																				}
																			},
																			"status": "OK",
																			"code": 200,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "null"
																		}
																	]
																}
															]
														},
														{
															"name": "rollback",
															"item": [
																{
																	"name": "Rollback VM state to specified snapshot.",
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/snapshot/:snapname/rollback?start=0",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"nodes",
																				":node",
																				"qemu",
																				":vmid",
																				"snapshot",
																				":snapname",
																				"rollback"
																			],
																			"query": [
																				{
																					"key": "start",
																					"value": "0",
																					"description": "Whether the VM should get started after rolling back successfully. (Note: VMs will be automatically started if the snapshot includes RAM.)"
																				}
																			],
																			"variable": [
																				{
																					"key": "node",
																					"value": "string",
																					"description": "(Required) The cluster node name."
																				},
																				{
																					"key": "vmid",
																					"value": "358786328",
																					"description": "(Required) The (unique) ID of the VM."
																				},
																				{
																					"key": "snapname",
																					"value": "string",
																					"description": "(Required) The name of the snapshot."
																				}
																			]
																		},
																		"description": "Rollback VM state to specified snapshot."
																	},
																	"response": [
																		{
																			"name": "successful operation",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/snapshot/:snapname/rollback?start=0",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"nodes",
																						":node",
																						"qemu",
																						":vmid",
																						"snapshot",
																						":snapname",
																						"rollback"
																					],
																					"query": [
																						{
																							"key": "start",
																							"value": "0",
																							"description": "Whether the VM should get started after rolling back successfully. (Note: VMs will be automatically started if the snapshot includes RAM.)"
																						}
																					],
																					"variable": [
																						{
																							"key": "node"
																						},
																						{
																							"key": "vmid"
																						},
																						{
																							"key": "snapname"
																						}
																					]
																				}
																			},
																			"status": "OK",
																			"code": 200,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "string"
																		}
																	]
																}
															]
														},
														{
															"name": "Delete a VM snapshot.",
															"request": {
																"method": "DELETE",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/snapshot/:snapname?force=true",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"qemu",
																		":vmid",
																		"snapshot",
																		":snapname"
																	],
																	"query": [
																		{
																			"key": "force",
																			"value": "true",
																			"description": "For removal from config file, even if removing disk snapshots fails."
																		}
																	],
																	"variable": [
																		{
																			"key": "node",
																			"value": "string",
																			"description": "(Required) The cluster node name."
																		},
																		{
																			"key": "vmid",
																			"value": "358786328",
																			"description": "(Required) The (unique) ID of the VM."
																		},
																		{
																			"key": "snapname",
																			"value": "string",
																			"description": "(Required) The name of the snapshot."
																		}
																	]
																},
																"description": "Delete a VM snapshot."
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "DELETE",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/snapshot/:snapname?force=true",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"nodes",
																				":node",
																				"qemu",
																				":vmid",
																				"snapshot",
																				":snapname"
																			],
																			"query": [
																				{
																					"key": "force",
																					"value": "true",
																					"description": "For removal from config file, even if removing disk snapshots fails."
																				}
																			],
																			"variable": [
																				{
																					"key": "node"
																				},
																				{
																					"key": "vmid"
																				},
																				{
																					"key": "snapname"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "string"
																}
															]
														},
														{
															"name": "/nodes/:node/qemu/:vmid/snapshot/:snapname",
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/snapshot/:snapname",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"qemu",
																		":vmid",
																		"snapshot",
																		":snapname"
																	],
																	"variable": [
																		{
																			"key": "node",
																			"value": "string",
																			"description": "(Required) The cluster node name."
																		},
																		{
																			"key": "vmid",
																			"value": "358786328",
																			"description": "(Required) The (unique) ID of the VM."
																		},
																		{
																			"key": "snapname",
																			"value": "string",
																			"description": "(Required) The name of the snapshot."
																		}
																	]
																}
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/snapshot/:snapname",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"nodes",
																				":node",
																				"qemu",
																				":vmid",
																				"snapshot",
																				":snapname"
																			],
																			"variable": [
																				{
																					"key": "node"
																				},
																				{
																					"key": "vmid"
																				},
																				{
																					"key": "snapname"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "[]"
																}
															]
														}
													]
												},
												{
													"name": "List all snapshots.",
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/snapshot",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"qemu",
																":vmid",
																"snapshot"
															],
															"variable": [
																{
																	"key": "node",
																	"value": "string",
																	"description": "(Required) The cluster node name."
																},
																{
																	"key": "vmid",
																	"value": "358786328",
																	"description": "(Required) The (unique) ID of the VM."
																}
															]
														},
														"description": "List all snapshots."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/snapshot",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"qemu",
																		":vmid",
																		"snapshot"
																	],
																	"variable": [
																		{
																			"key": "node"
																		},
																		{
																			"key": "vmid"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "[\n  {\n    \"description\": \"string\",\n    \"name\": \"string\",\n    \"parent\": \"string\",\n    \"snaptime\": 1431,\n    \"vmstate\": false\n  },\n  {\n    \"description\": \"string\",\n    \"name\": \"string\",\n    \"parent\": \"string\",\n    \"snaptime\": 433,\n    \"vmstate\": false\n  }\n]"
														}
													]
												},
												{
													"name": "Snapshot a VM.",
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/snapshot?description=string&snapname=string&vmstate=true",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"qemu",
																":vmid",
																"snapshot"
															],
															"query": [
																{
																	"key": "description",
																	"value": "string",
																	"description": "A textual description or comment."
																},
																{
																	"key": "snapname",
																	"value": "string",
																	"description": "(Required) The name of the snapshot."
																},
																{
																	"key": "vmstate",
																	"value": "true",
																	"description": "Save the vmstate"
																}
															],
															"variable": [
																{
																	"key": "node",
																	"value": "string",
																	"description": "(Required) The cluster node name."
																},
																{
																	"key": "vmid",
																	"value": "358786328",
																	"description": "(Required) The (unique) ID of the VM."
																}
															]
														},
														"description": "Snapshot a VM."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/snapshot?description=string&snapname=string&vmstate=true",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"qemu",
																		":vmid",
																		"snapshot"
																	],
																	"query": [
																		{
																			"key": "description",
																			"value": "string",
																			"description": "A textual description or comment."
																		},
																		{
																			"key": "snapname",
																			"value": "string",
																			"description": "(Required) The name of the snapshot."
																		},
																		{
																			"key": "vmstate",
																			"value": "true",
																			"description": "Save the vmstate"
																		}
																	],
																	"variable": [
																		{
																			"key": "node"
																		},
																		{
																			"key": "vmid"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "string"
														}
													]
												}
											]
										},
										{
											"name": "template",
											"item": [
												{
													"name": "Create a Template.",
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/template?disk=virtio13",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"qemu",
																":vmid",
																"template"
															],
															"query": [
																{
																	"key": "disk",
																	"value": "virtio13",
																	"description": "If you want to convert only 1 disk to base image."
																}
															],
															"variable": [
																{
																	"key": "node",
																	"value": "string",
																	"description": "(Required) The cluster node name."
																},
																{
																	"key": "vmid",
																	"value": "358786328",
																	"description": "(Required) The (unique) ID of the VM."
																}
															]
														},
														"description": "Create a Template."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/template?disk=virtio13",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"qemu",
																		":vmid",
																		"template"
																	],
																	"query": [
																		{
																			"key": "disk",
																			"value": "virtio13",
																			"description": "If you want to convert only 1 disk to base image."
																		}
																	],
																	"variable": [
																		{
																			"key": "node"
																		},
																		{
																			"key": "vmid"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "string"
														}
													]
												}
											]
										},
										{
											"name": "mtunnel",
											"item": [
												{
													"name": "Migration tunnel endpoint - only for internal use by VM migration.",
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/mtunnel?bridges=string&storages=string",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"qemu",
																":vmid",
																"mtunnel"
															],
															"query": [
																{
																	"key": "bridges",
																	"value": "string",
																	"description": "List of network bridges to check availability. Will be checked again for actually used bridges during migration."
																},
																{
																	"key": "storages",
																	"value": "string",
																	"description": "List of storages to check permission and availability. Will be checked again for all actually used storages during migration."
																}
															],
															"variable": [
																{
																	"key": "node",
																	"value": "string",
																	"description": "(Required) The cluster node name."
																},
																{
																	"key": "vmid",
																	"value": "358786328",
																	"description": "(Required) The (unique) ID of the VM."
																}
															]
														},
														"description": "Migration tunnel endpoint - only for internal use by VM migration."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/mtunnel?bridges=string&storages=string",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"qemu",
																		":vmid",
																		"mtunnel"
																	],
																	"query": [
																		{
																			"key": "bridges",
																			"value": "string",
																			"description": "List of network bridges to check availability. Will be checked again for actually used bridges during migration."
																		},
																		{
																			"key": "storages",
																			"value": "string",
																			"description": "List of storages to check permission and availability. Will be checked again for all actually used storages during migration."
																		}
																	],
																	"variable": [
																		{
																			"key": "node"
																		},
																		{
																			"key": "vmid"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"socket\": \"string\",\n  \"ticket\": \"string\",\n  \"upid\": \"string\"\n}"
														}
													]
												}
											]
										},
										{
											"name": "mtunnelwebsocket",
											"item": [
												{
													"name": "Migration tunnel endpoint for websocket upgrade - only for internal use by VM migration.",
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/mtunnelwebsocket?socket=string&ticket=string",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"qemu",
																":vmid",
																"mtunnelwebsocket"
															],
															"query": [
																{
																	"key": "socket",
																	"value": "string",
																	"description": "(Required) unix socket to forward to"
																},
																{
																	"key": "ticket",
																	"value": "string",
																	"description": "(Required) ticket return by initial 'mtunnel' API call, or retrieved via 'ticket' tunnel command"
																}
															],
															"variable": [
																{
																	"key": "node",
																	"value": "string",
																	"description": "(Required) The cluster node name."
																},
																{
																	"key": "vmid",
																	"value": "358786328",
																	"description": "(Required) The (unique) ID of the VM."
																}
															]
														},
														"description": "Migration tunnel endpoint for websocket upgrade - only for internal use by VM migration."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/mtunnelwebsocket?socket=string&ticket=string",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"qemu",
																		":vmid",
																		"mtunnelwebsocket"
																	],
																	"query": [
																		{
																			"key": "socket",
																			"value": "string",
																			"description": "(Required) unix socket to forward to"
																		},
																		{
																			"key": "ticket",
																			"value": "string",
																			"description": "(Required) ticket return by initial 'mtunnel' API call, or retrieved via 'ticket' tunnel command"
																		}
																	],
																	"variable": [
																		{
																			"key": "node"
																		},
																		{
																			"key": "vmid"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"port\": \"string\",\n  \"socket\": \"string\"\n}"
														}
													]
												}
											]
										},
										{
											"name": "dbus-vmstate",
											"item": [
												{
													"name": "Control the dbus-vmstate helper for a given running VM.",
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/dbus-vmstate?action=start",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"qemu",
																":vmid",
																"dbus-vmstate"
															],
															"query": [
																{
																	"key": "action",
																	"value": "start",
																	"description": "(Required) Action to perform on the DBus VMState helper."
																}
															],
															"variable": [
																{
																	"key": "node",
																	"value": "string",
																	"description": "(Required) The cluster node name."
																},
																{
																	"key": "vmid",
																	"value": "358786328",
																	"description": "(Required) The (unique) ID of the VM."
																}
															]
														},
														"description": "Control the dbus-vmstate helper for a given running VM."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid/dbus-vmstate?action=start",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"qemu",
																		":vmid",
																		"dbus-vmstate"
																	],
																	"query": [
																		{
																			"key": "action",
																			"value": "start",
																			"description": "(Required) Action to perform on the DBus VMState helper."
																		}
																	],
																	"variable": [
																		{
																			"key": "node"
																		},
																		{
																			"key": "vmid"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "null"
														}
													]
												}
											]
										},
										{
											"name": "Destroy the VM and  all used/owned volumes. Removes any VM specific permissions and firewall rules",
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid?destroy-unreferenced-disks=0&purge=true&skiplock=true",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"qemu",
														":vmid"
													],
													"query": [
														{
															"key": "destroy-unreferenced-disks",
															"value": "0",
															"description": "If set, destroy additionally all disks not referenced in the config but with a matching VMID from all enabled storages."
														},
														{
															"key": "purge",
															"value": "true",
															"description": "Remove VMID from configurations, like backup & replication jobs and HA."
														},
														{
															"key": "skiplock",
															"value": "true",
															"description": "Ignore locks - only root is allowed to use this option."
														}
													],
													"variable": [
														{
															"key": "node",
															"value": "string",
															"description": "(Required) The cluster node name."
														},
														{
															"key": "vmid",
															"value": "358786328",
															"description": "(Required) The (unique) ID of the VM."
														}
													]
												},
												"description": "Destroy the VM and  all used/owned volumes. Removes any VM specific permissions and firewall rules"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid?destroy-unreferenced-disks=0&purge=true&skiplock=true",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"qemu",
																":vmid"
															],
															"query": [
																{
																	"key": "destroy-unreferenced-disks",
																	"value": "0",
																	"description": "If set, destroy additionally all disks not referenced in the config but with a matching VMID from all enabled storages."
																},
																{
																	"key": "purge",
																	"value": "true",
																	"description": "Remove VMID from configurations, like backup & replication jobs and HA."
																},
																{
																	"key": "skiplock",
																	"value": "true",
																	"description": "Ignore locks - only root is allowed to use this option."
																}
															],
															"variable": [
																{
																	"key": "node"
																},
																{
																	"key": "vmid"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "string"
												}
											]
										},
										{
											"name": "Directory index",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"qemu",
														":vmid"
													],
													"variable": [
														{
															"key": "node",
															"value": "string",
															"description": "(Required) The cluster node name."
														},
														{
															"key": "vmid",
															"value": "358786328",
															"description": "(Required) The (unique) ID of the VM."
														}
													]
												},
												"description": "Directory index"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/qemu/:vmid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"qemu",
																":vmid"
															],
															"variable": [
																{
																	"key": "node"
																},
																{
																	"key": "vmid"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "[\n  {\n    \"subdir\": \"string\"\n  },\n  {\n    \"subdir\": \"string\"\n  }\n]"
												}
											]
										}
									]
								},
								{
									"name": "Virtual machine index (per node).",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/nodes/:node/qemu?full=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"nodes",
												":node",
												"qemu"
											],
											"query": [
												{
													"key": "full",
													"value": "true",
													"description": "Determine the full status of active VMs."
												}
											],
											"variable": [
												{
													"key": "node",
													"value": "string",
													"description": "(Required) The cluster node name."
												}
											]
										},
										"description": "Virtual machine index (per node)."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/qemu?full=true",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"qemu"
													],
													"query": [
														{
															"key": "full",
															"value": "true",
															"description": "Determine the full status of active VMs."
														}
													],
													"variable": [
														{
															"key": "node"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"cpu\": 5929.8912018186065,\n    \"cpus\": 1195.2638374206304,\n    \"diskread\": 9434,\n    \"diskwrite\": 5945,\n    \"lock\": \"string\",\n    \"maxdisk\": 3368,\n    \"maxmem\": 1767,\n    \"mem\": 6934,\n    \"memhost\": 1355,\n    \"name\": \"string\",\n    \"netin\": 9154,\n    \"netout\": 592,\n    \"pid\": 2224,\n    \"pressurecpufull\": 8265.445728387516,\n    \"pressurecpusome\": 4475.6355896186315,\n    \"pressureiofull\": 3138.3130102281866,\n    \"pressureiosome\": 5690.545141029899,\n    \"pressurememoryfull\": 6060.934017760475,\n    \"pressurememorysome\": 6840.023949810625,\n    \"qmpstatus\": \"string\",\n    \"running-machine\": \"string\",\n    \"running-qemu\": \"string\",\n    \"serial\": false,\n    \"status\": \"running\",\n    \"tags\": \"string\",\n    \"template\": 0,\n    \"uptime\": 177,\n    \"vmid\": 219157212\n  },\n  {\n    \"cpu\": 773.0646438830635,\n    \"cpus\": 2246.9227119768775,\n    \"diskread\": 6153,\n    \"diskwrite\": 8350,\n    \"lock\": \"string\",\n    \"maxdisk\": 7749,\n    \"maxmem\": 1080,\n    \"mem\": 5399,\n    \"memhost\": 5216,\n    \"name\": \"string\",\n    \"netin\": 3645,\n    \"netout\": 4481,\n    \"pid\": 8004,\n    \"pressurecpufull\": 8254.84989900104,\n    \"pressurecpusome\": 1904.7391740414432,\n    \"pressureiofull\": 8454.825923183806,\n    \"pressureiosome\": 8491.75512316409,\n    \"pressurememoryfull\": 9814.680902735145,\n    \"pressurememorysome\": 1700.9474658138824,\n    \"qmpstatus\": \"string\",\n    \"running-machine\": \"string\",\n    \"running-qemu\": \"string\",\n    \"serial\": true,\n    \"status\": \"running\",\n    \"tags\": \"string\",\n    \"template\": 0,\n    \"uptime\": 7383,\n    \"vmid\": 162846220\n  }\n]"
										}
									]
								},
								{
									"name": "Create or restore a virtual machine.",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/nodes/:node/qemu?acpi=1&affinity=string&agent=string&amd-sev=string&arch=aarch64&archive=string&args=string&audio0=string&autostart=0&balloon=8248&bios=seabios&boot=string&bootdisk=virtio092&bwlimit=restore limit from datacenter or storage config&cdrom=string&cicustom=string&cipassword=string&citype=opennebula&ciupgrade=1&ciuser=string&cores=1&cpu=string&cpulimit=0&cpuunits=cgroup v1: 1024, cgroup v2: 100&description=string&efidisk0=string&force=true&freeze=true&hookscript=string&hostpci[n]=string&hotplug=network,disk,usb&hugepages=2&ide[n]=string&import-working-storage=string&ipconfig[n]=string&ivshmem=string&keephugepages=0&keyboard=&kvm=1&live-restore=true&localtime=true&lock=clone&machine=string&memory=string&migrate_downtime=0.1&migrate_speed=0&name=string&nameserver=string&net[n]=string&numa=0&numa[n]=string&onboot=0&ostype=win7&parallel[n]=/dev/parport044&pool=string&protection=0&reboot=1&rng0=string&running-nets-host-mtu=net1686=7156290533,net4371=021,net4265970009=7845,net4703=0,net09597161=538971,net43657503=30651318,net859=83866960,net9=4&sata[n]=string&scsi[n]=string&scsihw=lsi&searchdomain=string&serial[n]=socket&shares=1000&smbios1=string&smp=1&sockets=1&spice_enhancements=string&sshkeys=string&start=0&startdate=now&startup=string&storage=string&tablet=1&tags=string&tdf=0&template=0&tpmstate0=string&unique=true&unused[n]=string&usb[n]=string&vcpus=0&vga=string&virtio[n]=string&virtiofs[n]=string&vmgenid=1 (autogenerated)&vmid=358786328&vmstatestorage=string&watchdog=string",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"nodes",
												":node",
												"qemu"
											],
											"query": [
												{
													"key": "acpi",
													"value": "1",
													"description": "Enable/disable ACPI."
												},
												{
													"key": "affinity",
													"value": "string",
													"description": "List of host cores used to execute guest processes, for example: 0,5,8-11"
												},
												{
													"key": "agent",
													"value": "string",
													"description": "Enable/disable communication with the QEMU Guest Agent and its properties."
												},
												{
													"key": "amd-sev",
													"value": "string",
													"description": "Secure Encrypted Virtualization (SEV) features by AMD CPUs"
												},
												{
													"key": "arch",
													"value": "aarch64",
													"description": "Virtual processor architecture. Defaults to the host."
												},
												{
													"key": "archive",
													"value": "string",
													"description": "The backup archive. Either the file system path to a .tar or .vma file (use '-' to pipe data from stdin) or a proxmox storage backup volume identifier."
												},
												{
													"key": "args",
													"value": "string",
													"description": "Arbitrary arguments passed to kvm."
												},
												{
													"key": "audio0",
													"value": "string",
													"description": "Configure a audio device, useful in combination with QXL/Spice."
												},
												{
													"key": "autostart",
													"value": "0",
													"description": "Automatic restart after crash (currently ignored)."
												},
												{
													"key": "balloon",
													"value": "8248",
													"description": "Amount of target RAM for the VM in MiB. Using zero disables the ballon driver."
												},
												{
													"key": "bios",
													"value": "seabios",
													"description": "Select BIOS implementation."
												},
												{
													"key": "boot",
													"value": "string",
													"description": "Specify guest boot order. Use the 'order=' sub-property as usage with no key or 'legacy=' is deprecated."
												},
												{
													"key": "bootdisk",
													"value": "virtio092",
													"description": "Enable booting from specified disk. Deprecated: Use 'boot: order=foo;bar' instead."
												},
												{
													"key": "bwlimit",
													"value": "restore limit from datacenter or storage config",
													"description": "Override I/O bandwidth limit (in KiB/s)."
												},
												{
													"key": "cdrom",
													"value": "string",
													"description": "This is an alias for option -ide2"
												},
												{
													"key": "cicustom",
													"value": "string",
													"description": "cloud-init: Specify custom files to replace the automatically generated ones at start."
												},
												{
													"key": "cipassword",
													"value": "string",
													"description": "cloud-init: Password to assign the user. Using this is generally not recommended. Use ssh keys instead. Also note that older cloud-init versions do not support hashed passwords."
												},
												{
													"key": "citype",
													"value": "opennebula",
													"description": "Specifies the cloud-init configuration format. The default depends on the configured operating system type (`ostype`. We use the `nocloud` format for Linux, and `configdrive2` for windows."
												},
												{
													"key": "ciupgrade",
													"value": "1",
													"description": "cloud-init: do an automatic package upgrade after the first boot."
												},
												{
													"key": "ciuser",
													"value": "string",
													"description": "cloud-init: User name to change ssh keys and password for instead of the image's configured default user."
												},
												{
													"key": "cores",
													"value": "1",
													"description": "The number of cores per socket."
												},
												{
													"key": "cpu",
													"value": "string",
													"description": "Emulated CPU type."
												},
												{
													"key": "cpulimit",
													"value": "0",
													"description": "Limit of CPU usage."
												},
												{
													"key": "cpuunits",
													"value": "cgroup v1: 1024, cgroup v2: 100",
													"description": "CPU weight for a VM, will be clamped to [1, 10000] in cgroup v2."
												},
												{
													"key": "description",
													"value": "string",
													"description": "Description for the VM. Shown in the web-interface VM's summary. This is saved as comment inside the configuration file."
												},
												{
													"key": "efidisk0",
													"value": "string",
													"description": "Configure a disk for storing EFI vars. Use the special syntax STORAGE_ID:SIZE_IN_GiB to allocate a new volume. Note that SIZE_IN_GiB is ignored here and that the default EFI vars are copied to the volume instead. Use STORAGE_ID:0 and the 'import-from' parameter to import from an existing volume."
												},
												{
													"key": "force",
													"value": "true",
													"description": "Allow to overwrite existing VM."
												},
												{
													"key": "freeze",
													"value": "true",
													"description": "Freeze CPU at startup (use 'c' monitor command to start execution)."
												},
												{
													"key": "hookscript",
													"value": "string",
													"description": "Script that will be executed during various steps in the vms lifetime."
												},
												{
													"key": "hostpci[n]",
													"value": "string",
													"description": "Map host PCI devices into guest."
												},
												{
													"key": "hotplug",
													"value": "network,disk,usb",
													"description": "Selectively enable hotplug features. This is a comma separated list of hotplug features: 'network', 'disk', 'cpu', 'memory', 'usb' and 'cloudinit'. Use '0' to disable hotplug completely. Using '1' as value is an alias for the default `network,disk,usb`. USB hotplugging is possible for guests with machine version >= 7.1 and ostype l26 or windows > 7."
												},
												{
													"key": "hugepages",
													"value": "2",
													"description": "Enable/disable hugepages memory."
												},
												{
													"key": "ide[n]",
													"value": "string",
													"description": "Use volume as IDE hard disk or CD-ROM (n is 0 to 3). Use the special syntax STORAGE_ID:SIZE_IN_GiB to allocate a new volume. Use STORAGE_ID:0 and the 'import-from' parameter to import from an existing volume."
												},
												{
													"key": "import-working-storage",
													"value": "string",
													"description": "A file-based storage with 'images' content-type enabled, which is used as an intermediary extraction storage during import. Defaults to the source storage."
												},
												{
													"key": "ipconfig[n]",
													"value": "string",
													"description": "cloud-init: Specify IP addresses and gateways for the corresponding interface.\n\nIP addresses use CIDR notation, gateways are optional but need an IP of the same type specified.\n\nThe special string 'dhcp' can be used for IP addresses to use DHCP, in which case no explicit\ngateway should be provided.\nFor IPv6 the special string 'auto' can be used to use stateless autoconfiguration. This requires\ncloud-init 19.4 or newer.\n\nIf cloud-init is enabled and neither an IPv4 nor an IPv6 address is specified, it defaults to using\ndhcp on IPv4.\n"
												},
												{
													"key": "ivshmem",
													"value": "string",
													"description": "Inter-VM shared memory. Useful for direct communication between VMs, or to the host."
												},
												{
													"key": "keephugepages",
													"value": "0",
													"description": "Use together with hugepages. If enabled, hugepages will not not be deleted after VM shutdown and can be used for subsequent starts."
												},
												{
													"key": "keyboard",
													"value": "",
													"description": "Keyboard layout for VNC server. This option is generally not required and is often better handled from within the guest OS."
												},
												{
													"key": "kvm",
													"value": "1",
													"description": "Enable/disable KVM hardware virtualization."
												},
												{
													"key": "live-restore",
													"value": "true",
													"description": "Start the VM immediately while importing or restoring in the background."
												},
												{
													"key": "localtime",
													"value": "true",
													"description": "Set the real time clock (RTC) to local time. This is enabled by default if the `ostype` indicates a Microsoft Windows OS."
												},
												{
													"key": "lock",
													"value": "clone",
													"description": "Lock/unlock the VM."
												},
												{
													"key": "machine",
													"value": "string",
													"description": "Specify the QEMU machine."
												},
												{
													"key": "memory",
													"value": "string",
													"description": "Memory properties."
												},
												{
													"key": "migrate_downtime",
													"value": "0.1",
													"description": "Set maximum tolerated downtime (in seconds) for migrations. Should the migration not be able to converge in the very end, because too much newly dirtied RAM needs to be transferred, the limit will be increased automatically step-by-step until migration can converge."
												},
												{
													"key": "migrate_speed",
													"value": "0",
													"description": "Set maximum speed (in MB/s) for migrations. Value 0 is no limit."
												},
												{
													"key": "name",
													"value": "string",
													"description": "Set a name for the VM. Only used on the configuration web interface."
												},
												{
													"key": "nameserver",
													"value": "string",
													"description": "cloud-init: Sets DNS server IP address for a container. Create will automatically use the setting from the host if neither searchdomain nor nameserver are set."
												},
												{
													"key": "net[n]",
													"value": "string",
													"description": "Specify network devices."
												},
												{
													"key": "numa",
													"value": "0",
													"description": "Enable/disable NUMA."
												},
												{
													"key": "numa[n]",
													"value": "string",
													"description": "NUMA topology."
												},
												{
													"key": "onboot",
													"value": "0",
													"description": "Specifies whether a VM will be started during system bootup."
												},
												{
													"key": "ostype",
													"value": "win7",
													"description": "Specify guest operating system."
												},
												{
													"key": "parallel[n]",
													"value": "/dev/parport044",
													"description": "Map host parallel devices (n is 0 to 2)."
												},
												{
													"key": "pool",
													"value": "string",
													"description": "Add the VM to the specified pool."
												},
												{
													"key": "protection",
													"value": "0",
													"description": "Sets the protection flag of the VM. This will disable the remove VM and remove disk operations."
												},
												{
													"key": "reboot",
													"value": "1",
													"description": "Allow reboot. If set to '0' the VM exit on reboot."
												},
												{
													"key": "rng0",
													"value": "string",
													"description": "Configure a VirtIO-based Random Number Generator."
												},
												{
													"key": "running-nets-host-mtu",
													"value": "net1686=7156290533,net4371=021,net4265970009=7845,net4703=0,net09597161=538971,net43657503=30651318,net859=83866960,net9=4",
													"description": "List of VirtIO network devices and their effective host_mtu setting. A value of 0 means that the host_mtu parameter is to be avoided for the corresponding device. This is used internally for snapshots."
												},
												{
													"key": "sata[n]",
													"value": "string",
													"description": "Use volume as SATA hard disk or CD-ROM (n is 0 to 5). Use the special syntax STORAGE_ID:SIZE_IN_GiB to allocate a new volume. Use STORAGE_ID:0 and the 'import-from' parameter to import from an existing volume."
												},
												{
													"key": "scsi[n]",
													"value": "string",
													"description": "Use volume as SCSI hard disk or CD-ROM (n is 0 to 30). Use the special syntax STORAGE_ID:SIZE_IN_GiB to allocate a new volume. Use STORAGE_ID:0 and the 'import-from' parameter to import from an existing volume."
												},
												{
													"key": "scsihw",
													"value": "lsi",
													"description": "SCSI controller model"
												},
												{
													"key": "searchdomain",
													"value": "string",
													"description": "cloud-init: Sets DNS search domains for a container. Create will automatically use the setting from the host if neither searchdomain nor nameserver are set."
												},
												{
													"key": "serial[n]",
													"value": "socket",
													"description": "Create a serial device inside the VM (n is 0 to 3)"
												},
												{
													"key": "shares",
													"value": "1000",
													"description": "Amount of memory shares for auto-ballooning. The larger the number is, the more memory this VM gets. Number is relative to weights of all other running VMs. Using zero disables auto-ballooning. Auto-ballooning is done by pvestatd."
												},
												{
													"key": "smbios1",
													"value": "string",
													"description": "Specify SMBIOS type 1 fields."
												},
												{
													"key": "smp",
													"value": "1",
													"description": "The number of CPUs. Please use option -sockets instead."
												},
												{
													"key": "sockets",
													"value": "1",
													"description": "The number of CPU sockets."
												},
												{
													"key": "spice_enhancements",
													"value": "string",
													"description": "Configure additional enhancements for SPICE."
												},
												{
													"key": "sshkeys",
													"value": "string",
													"description": "cloud-init: Setup public SSH keys (one key per line, OpenSSH format)."
												},
												{
													"key": "start",
													"value": "0",
													"description": "Start VM after it was created successfully."
												},
												{
													"key": "startdate",
													"value": "now",
													"description": "Set the initial date of the real time clock. Valid format for date are:'now' or '2006-06-17T16:01:21' or '2006-06-17'."
												},
												{
													"key": "startup",
													"value": "string",
													"description": "Startup and shutdown behavior. Order is a non-negative number defining the general startup order. Shutdown in done with reverse ordering. Additionally you can set the 'up' or 'down' delay in seconds, which specifies a delay to wait before the next VM is started or stopped."
												},
												{
													"key": "storage",
													"value": "string",
													"description": "Default storage."
												},
												{
													"key": "tablet",
													"value": "1",
													"description": "Enable/disable the USB tablet device."
												},
												{
													"key": "tags",
													"value": "string",
													"description": "Tags of the VM. This is only meta information."
												},
												{
													"key": "tdf",
													"value": "0",
													"description": "Enable/disable time drift fix."
												},
												{
													"key": "template",
													"value": "0",
													"description": "Enable/disable Template."
												},
												{
													"key": "tpmstate0",
													"value": "string",
													"description": "Configure a Disk for storing TPM state. The format is fixed to 'raw'. Use the special syntax STORAGE_ID:SIZE_IN_GiB to allocate a new volume. Note that SIZE_IN_GiB is ignored here and 4 MiB will be used instead. Use STORAGE_ID:0 and the 'import-from' parameter to import from an existing volume."
												},
												{
													"key": "unique",
													"value": "true",
													"description": "Assign a unique random ethernet address."
												},
												{
													"key": "unused[n]",
													"value": "string",
													"description": "Reference to unused volumes. This is used internally, and should not be modified manually."
												},
												{
													"key": "usb[n]",
													"value": "string",
													"description": "Configure an USB device (n is 0 to 4, for machine version >= 7.1 and ostype l26 or windows > 7, n can be up to 14)."
												},
												{
													"key": "vcpus",
													"value": "0",
													"description": "Number of hotplugged vcpus."
												},
												{
													"key": "vga",
													"value": "string",
													"description": "Configure the VGA hardware."
												},
												{
													"key": "virtio[n]",
													"value": "string",
													"description": "Use volume as VIRTIO hard disk (n is 0 to 15). Use the special syntax STORAGE_ID:SIZE_IN_GiB to allocate a new volume. Use STORAGE_ID:0 and the 'import-from' parameter to import from an existing volume."
												},
												{
													"key": "virtiofs[n]",
													"value": "string",
													"description": "Configuration for sharing a directory between host and guest using Virtio-fs."
												},
												{
													"key": "vmgenid",
													"value": "1 (autogenerated)",
													"description": "Set VM Generation ID. Use '1' to autogenerate on create or update, pass '0' to disable explicitly."
												},
												{
													"key": "vmid",
													"value": "358786328",
													"description": "(Required) The (unique) ID of the VM."
												},
												{
													"key": "vmstatestorage",
													"value": "string",
													"description": "Default storage for VM state volumes/files."
												},
												{
													"key": "watchdog",
													"value": "string",
													"description": "Create a virtual hardware watchdog device."
												}
											],
											"variable": [
												{
													"key": "node",
													"value": "string",
													"description": "(Required) The cluster node name."
												}
											]
										},
										"description": "Create or restore a virtual machine."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/qemu?acpi=1&affinity=string&agent=string&amd-sev=string&arch=aarch64&archive=string&args=string&audio0=string&autostart=0&balloon=8248&bios=seabios&boot=string&bootdisk=virtio092&bwlimit=restore limit from datacenter or storage config&cdrom=string&cicustom=string&cipassword=string&citype=opennebula&ciupgrade=1&ciuser=string&cores=1&cpu=string&cpulimit=0&cpuunits=cgroup v1: 1024, cgroup v2: 100&description=string&efidisk0=string&force=true&freeze=true&hookscript=string&hostpci[n]=string&hotplug=network,disk,usb&hugepages=2&ide[n]=string&import-working-storage=string&ipconfig[n]=string&ivshmem=string&keephugepages=0&keyboard=&kvm=1&live-restore=true&localtime=true&lock=clone&machine=string&memory=string&migrate_downtime=0.1&migrate_speed=0&name=string&nameserver=string&net[n]=string&numa=0&numa[n]=string&onboot=0&ostype=win7&parallel[n]=/dev/parport044&pool=string&protection=0&reboot=1&rng0=string&running-nets-host-mtu=net1686=7156290533,net4371=021,net4265970009=7845,net4703=0,net09597161=538971,net43657503=30651318,net859=83866960,net9=4&sata[n]=string&scsi[n]=string&scsihw=lsi&searchdomain=string&serial[n]=socket&shares=1000&smbios1=string&smp=1&sockets=1&spice_enhancements=string&sshkeys=string&start=0&startdate=now&startup=string&storage=string&tablet=1&tags=string&tdf=0&template=0&tpmstate0=string&unique=true&unused[n]=string&usb[n]=string&vcpus=0&vga=string&virtio[n]=string&virtiofs[n]=string&vmgenid=1 (autogenerated)&vmid=358786328&vmstatestorage=string&watchdog=string",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"qemu"
													],
													"query": [
														{
															"key": "acpi",
															"value": "1",
															"description": "Enable/disable ACPI."
														},
														{
															"key": "affinity",
															"value": "string",
															"description": "List of host cores used to execute guest processes, for example: 0,5,8-11"
														},
														{
															"key": "agent",
															"value": "string",
															"description": "Enable/disable communication with the QEMU Guest Agent and its properties."
														},
														{
															"key": "amd-sev",
															"value": "string",
															"description": "Secure Encrypted Virtualization (SEV) features by AMD CPUs"
														},
														{
															"key": "arch",
															"value": "aarch64",
															"description": "Virtual processor architecture. Defaults to the host."
														},
														{
															"key": "archive",
															"value": "string",
															"description": "The backup archive. Either the file system path to a .tar or .vma file (use '-' to pipe data from stdin) or a proxmox storage backup volume identifier."
														},
														{
															"key": "args",
															"value": "string",
															"description": "Arbitrary arguments passed to kvm."
														},
														{
															"key": "audio0",
															"value": "string",
															"description": "Configure a audio device, useful in combination with QXL/Spice."
														},
														{
															"key": "autostart",
															"value": "0",
															"description": "Automatic restart after crash (currently ignored)."
														},
														{
															"key": "balloon",
															"value": "8248",
															"description": "Amount of target RAM for the VM in MiB. Using zero disables the ballon driver."
														},
														{
															"key": "bios",
															"value": "seabios",
															"description": "Select BIOS implementation."
														},
														{
															"key": "boot",
															"value": "string",
															"description": "Specify guest boot order. Use the 'order=' sub-property as usage with no key or 'legacy=' is deprecated."
														},
														{
															"key": "bootdisk",
															"value": "virtio092",
															"description": "Enable booting from specified disk. Deprecated: Use 'boot: order=foo;bar' instead."
														},
														{
															"key": "bwlimit",
															"value": "restore limit from datacenter or storage config",
															"description": "Override I/O bandwidth limit (in KiB/s)."
														},
														{
															"key": "cdrom",
															"value": "string",
															"description": "This is an alias for option -ide2"
														},
														{
															"key": "cicustom",
															"value": "string",
															"description": "cloud-init: Specify custom files to replace the automatically generated ones at start."
														},
														{
															"key": "cipassword",
															"value": "string",
															"description": "cloud-init: Password to assign the user. Using this is generally not recommended. Use ssh keys instead. Also note that older cloud-init versions do not support hashed passwords."
														},
														{
															"key": "citype",
															"value": "opennebula",
															"description": "Specifies the cloud-init configuration format. The default depends on the configured operating system type (`ostype`. We use the `nocloud` format for Linux, and `configdrive2` for windows."
														},
														{
															"key": "ciupgrade",
															"value": "1",
															"description": "cloud-init: do an automatic package upgrade after the first boot."
														},
														{
															"key": "ciuser",
															"value": "string",
															"description": "cloud-init: User name to change ssh keys and password for instead of the image's configured default user."
														},
														{
															"key": "cores",
															"value": "1",
															"description": "The number of cores per socket."
														},
														{
															"key": "cpu",
															"value": "string",
															"description": "Emulated CPU type."
														},
														{
															"key": "cpulimit",
															"value": "0",
															"description": "Limit of CPU usage."
														},
														{
															"key": "cpuunits",
															"value": "cgroup v1: 1024, cgroup v2: 100",
															"description": "CPU weight for a VM, will be clamped to [1, 10000] in cgroup v2."
														},
														{
															"key": "description",
															"value": "string",
															"description": "Description for the VM. Shown in the web-interface VM's summary. This is saved as comment inside the configuration file."
														},
														{
															"key": "efidisk0",
															"value": "string",
															"description": "Configure a disk for storing EFI vars. Use the special syntax STORAGE_ID:SIZE_IN_GiB to allocate a new volume. Note that SIZE_IN_GiB is ignored here and that the default EFI vars are copied to the volume instead. Use STORAGE_ID:0 and the 'import-from' parameter to import from an existing volume."
														},
														{
															"key": "force",
															"value": "true",
															"description": "Allow to overwrite existing VM."
														},
														{
															"key": "freeze",
															"value": "true",
															"description": "Freeze CPU at startup (use 'c' monitor command to start execution)."
														},
														{
															"key": "hookscript",
															"value": "string",
															"description": "Script that will be executed during various steps in the vms lifetime."
														},
														{
															"key": "hostpci[n]",
															"value": "string",
															"description": "Map host PCI devices into guest."
														},
														{
															"key": "hotplug",
															"value": "network,disk,usb",
															"description": "Selectively enable hotplug features. This is a comma separated list of hotplug features: 'network', 'disk', 'cpu', 'memory', 'usb' and 'cloudinit'. Use '0' to disable hotplug completely. Using '1' as value is an alias for the default `network,disk,usb`. USB hotplugging is possible for guests with machine version >= 7.1 and ostype l26 or windows > 7."
														},
														{
															"key": "hugepages",
															"value": "2",
															"description": "Enable/disable hugepages memory."
														},
														{
															"key": "ide[n]",
															"value": "string",
															"description": "Use volume as IDE hard disk or CD-ROM (n is 0 to 3). Use the special syntax STORAGE_ID:SIZE_IN_GiB to allocate a new volume. Use STORAGE_ID:0 and the 'import-from' parameter to import from an existing volume."
														},
														{
															"key": "import-working-storage",
															"value": "string",
															"description": "A file-based storage with 'images' content-type enabled, which is used as an intermediary extraction storage during import. Defaults to the source storage."
														},
														{
															"key": "ipconfig[n]",
															"value": "string",
															"description": "cloud-init: Specify IP addresses and gateways for the corresponding interface.\n\nIP addresses use CIDR notation, gateways are optional but need an IP of the same type specified.\n\nThe special string 'dhcp' can be used for IP addresses to use DHCP, in which case no explicit\ngateway should be provided.\nFor IPv6 the special string 'auto' can be used to use stateless autoconfiguration. This requires\ncloud-init 19.4 or newer.\n\nIf cloud-init is enabled and neither an IPv4 nor an IPv6 address is specified, it defaults to using\ndhcp on IPv4.\n"
														},
														{
															"key": "ivshmem",
															"value": "string",
															"description": "Inter-VM shared memory. Useful for direct communication between VMs, or to the host."
														},
														{
															"key": "keephugepages",
															"value": "0",
															"description": "Use together with hugepages. If enabled, hugepages will not not be deleted after VM shutdown and can be used for subsequent starts."
														},
														{
															"key": "keyboard",
															"value": "",
															"description": "Keyboard layout for VNC server. This option is generally not required and is often better handled from within the guest OS."
														},
														{
															"key": "kvm",
															"value": "1",
															"description": "Enable/disable KVM hardware virtualization."
														},
														{
															"key": "live-restore",
															"value": "true",
															"description": "Start the VM immediately while importing or restoring in the background."
														},
														{
															"key": "localtime",
															"value": "true",
															"description": "Set the real time clock (RTC) to local time. This is enabled by default if the `ostype` indicates a Microsoft Windows OS."
														},
														{
															"key": "lock",
															"value": "clone",
															"description": "Lock/unlock the VM."
														},
														{
															"key": "machine",
															"value": "string",
															"description": "Specify the QEMU machine."
														},
														{
															"key": "memory",
															"value": "string",
															"description": "Memory properties."
														},
														{
															"key": "migrate_downtime",
															"value": "0.1",
															"description": "Set maximum tolerated downtime (in seconds) for migrations. Should the migration not be able to converge in the very end, because too much newly dirtied RAM needs to be transferred, the limit will be increased automatically step-by-step until migration can converge."
														},
														{
															"key": "migrate_speed",
															"value": "0",
															"description": "Set maximum speed (in MB/s) for migrations. Value 0 is no limit."
														},
														{
															"key": "name",
															"value": "string",
															"description": "Set a name for the VM. Only used on the configuration web interface."
														},
														{
															"key": "nameserver",
															"value": "string",
															"description": "cloud-init: Sets DNS server IP address for a container. Create will automatically use the setting from the host if neither searchdomain nor nameserver are set."
														},
														{
															"key": "net[n]",
															"value": "string",
															"description": "Specify network devices."
														},
														{
															"key": "numa",
															"value": "0",
															"description": "Enable/disable NUMA."
														},
														{
															"key": "numa[n]",
															"value": "string",
															"description": "NUMA topology."
														},
														{
															"key": "onboot",
															"value": "0",
															"description": "Specifies whether a VM will be started during system bootup."
														},
														{
															"key": "ostype",
															"value": "win7",
															"description": "Specify guest operating system."
														},
														{
															"key": "parallel[n]",
															"value": "/dev/parport044",
															"description": "Map host parallel devices (n is 0 to 2)."
														},
														{
															"key": "pool",
															"value": "string",
															"description": "Add the VM to the specified pool."
														},
														{
															"key": "protection",
															"value": "0",
															"description": "Sets the protection flag of the VM. This will disable the remove VM and remove disk operations."
														},
														{
															"key": "reboot",
															"value": "1",
															"description": "Allow reboot. If set to '0' the VM exit on reboot."
														},
														{
															"key": "rng0",
															"value": "string",
															"description": "Configure a VirtIO-based Random Number Generator."
														},
														{
															"key": "running-nets-host-mtu",
															"value": "net1686=7156290533,net4371=021,net4265970009=7845,net4703=0,net09597161=538971,net43657503=30651318,net859=83866960,net9=4",
															"description": "List of VirtIO network devices and their effective host_mtu setting. A value of 0 means that the host_mtu parameter is to be avoided for the corresponding device. This is used internally for snapshots."
														},
														{
															"key": "sata[n]",
															"value": "string",
															"description": "Use volume as SATA hard disk or CD-ROM (n is 0 to 5). Use the special syntax STORAGE_ID:SIZE_IN_GiB to allocate a new volume. Use STORAGE_ID:0 and the 'import-from' parameter to import from an existing volume."
														},
														{
															"key": "scsi[n]",
															"value": "string",
															"description": "Use volume as SCSI hard disk or CD-ROM (n is 0 to 30). Use the special syntax STORAGE_ID:SIZE_IN_GiB to allocate a new volume. Use STORAGE_ID:0 and the 'import-from' parameter to import from an existing volume."
														},
														{
															"key": "scsihw",
															"value": "lsi",
															"description": "SCSI controller model"
														},
														{
															"key": "searchdomain",
															"value": "string",
															"description": "cloud-init: Sets DNS search domains for a container. Create will automatically use the setting from the host if neither searchdomain nor nameserver are set."
														},
														{
															"key": "serial[n]",
															"value": "socket",
															"description": "Create a serial device inside the VM (n is 0 to 3)"
														},
														{
															"key": "shares",
															"value": "1000",
															"description": "Amount of memory shares for auto-ballooning. The larger the number is, the more memory this VM gets. Number is relative to weights of all other running VMs. Using zero disables auto-ballooning. Auto-ballooning is done by pvestatd."
														},
														{
															"key": "smbios1",
															"value": "string",
															"description": "Specify SMBIOS type 1 fields."
														},
														{
															"key": "smp",
															"value": "1",
															"description": "The number of CPUs. Please use option -sockets instead."
														},
														{
															"key": "sockets",
															"value": "1",
															"description": "The number of CPU sockets."
														},
														{
															"key": "spice_enhancements",
															"value": "string",
															"description": "Configure additional enhancements for SPICE."
														},
														{
															"key": "sshkeys",
															"value": "string",
															"description": "cloud-init: Setup public SSH keys (one key per line, OpenSSH format)."
														},
														{
															"key": "start",
															"value": "0",
															"description": "Start VM after it was created successfully."
														},
														{
															"key": "startdate",
															"value": "now",
															"description": "Set the initial date of the real time clock. Valid format for date are:'now' or '2006-06-17T16:01:21' or '2006-06-17'."
														},
														{
															"key": "startup",
															"value": "string",
															"description": "Startup and shutdown behavior. Order is a non-negative number defining the general startup order. Shutdown in done with reverse ordering. Additionally you can set the 'up' or 'down' delay in seconds, which specifies a delay to wait before the next VM is started or stopped."
														},
														{
															"key": "storage",
															"value": "string",
															"description": "Default storage."
														},
														{
															"key": "tablet",
															"value": "1",
															"description": "Enable/disable the USB tablet device."
														},
														{
															"key": "tags",
															"value": "string",
															"description": "Tags of the VM. This is only meta information."
														},
														{
															"key": "tdf",
															"value": "0",
															"description": "Enable/disable time drift fix."
														},
														{
															"key": "template",
															"value": "0",
															"description": "Enable/disable Template."
														},
														{
															"key": "tpmstate0",
															"value": "string",
															"description": "Configure a Disk for storing TPM state. The format is fixed to 'raw'. Use the special syntax STORAGE_ID:SIZE_IN_GiB to allocate a new volume. Note that SIZE_IN_GiB is ignored here and 4 MiB will be used instead. Use STORAGE_ID:0 and the 'import-from' parameter to import from an existing volume."
														},
														{
															"key": "unique",
															"value": "true",
															"description": "Assign a unique random ethernet address."
														},
														{
															"key": "unused[n]",
															"value": "string",
															"description": "Reference to unused volumes. This is used internally, and should not be modified manually."
														},
														{
															"key": "usb[n]",
															"value": "string",
															"description": "Configure an USB device (n is 0 to 4, for machine version >= 7.1 and ostype l26 or windows > 7, n can be up to 14)."
														},
														{
															"key": "vcpus",
															"value": "0",
															"description": "Number of hotplugged vcpus."
														},
														{
															"key": "vga",
															"value": "string",
															"description": "Configure the VGA hardware."
														},
														{
															"key": "virtio[n]",
															"value": "string",
															"description": "Use volume as VIRTIO hard disk (n is 0 to 15). Use the special syntax STORAGE_ID:SIZE_IN_GiB to allocate a new volume. Use STORAGE_ID:0 and the 'import-from' parameter to import from an existing volume."
														},
														{
															"key": "virtiofs[n]",
															"value": "string",
															"description": "Configuration for sharing a directory between host and guest using Virtio-fs."
														},
														{
															"key": "vmgenid",
															"value": "1 (autogenerated)",
															"description": "Set VM Generation ID. Use '1' to autogenerate on create or update, pass '0' to disable explicitly."
														},
														{
															"key": "vmid",
															"value": "358786328",
															"description": "(Required) The (unique) ID of the VM."
														},
														{
															"key": "vmstatestorage",
															"value": "string",
															"description": "Default storage for VM state volumes/files."
														},
														{
															"key": "watchdog",
															"value": "string",
															"description": "Create a virtual hardware watchdog device."
														}
													],
													"variable": [
														{
															"key": "node"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "string"
										}
									]
								}
							]
						},
						{
							"name": "lxc",
							"item": [
								{
									"name": "{vmid}",
									"item": [
										{
											"name": "config",
											"item": [
												{
													"name": "Get container configuration.",
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/lxc/:vmid/config?current=0&snapshot=string",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"lxc",
																":vmid",
																"config"
															],
															"query": [
																{
																	"key": "current",
																	"value": "0",
																	"description": "Get current values (instead of pending values)."
																},
																{
																	"key": "snapshot",
																	"value": "string",
																	"description": "Fetch config values from given snapshot."
																}
															],
															"variable": [
																{
																	"key": "node",
																	"value": "string",
																	"description": "(Required) The cluster node name."
																},
																{
																	"key": "vmid",
																	"value": "358786328",
																	"description": "(Required) The (unique) ID of the VM."
																}
															]
														},
														"description": "Get container configuration."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/lxc/:vmid/config?current=0&snapshot=string",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"lxc",
																		":vmid",
																		"config"
																	],
																	"query": [
																		{
																			"key": "current",
																			"value": "0",
																			"description": "Get current values (instead of pending values)."
																		},
																		{
																			"key": "snapshot",
																			"value": "string",
																			"description": "Fetch config values from given snapshot."
																		}
																	],
																	"variable": [
																		{
																			"key": "node"
																		},
																		{
																			"key": "vmid"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"arch\": \"amd64\",\n  \"cmode\": \"tty\",\n  \"console\": 1,\n  \"cores\": 7001,\n  \"cpulimit\": 0,\n  \"cpuunits\": \"cgroup v1: 1024, cgroup v2: 100\",\n  \"debug\": 0,\n  \"description\": \"string\",\n  \"dev[n]\": \"string\",\n  \"digest\": \"string\",\n  \"features\": \"string\",\n  \"hookscript\": \"string\",\n  \"hostname\": \"string\",\n  \"lock\": \"migrate\",\n  \"lxc\": [\n    [\n      \"string\",\n      \"string\"\n    ],\n    [\n      \"string\",\n      \"string\"\n    ]\n  ],\n  \"memory\": 512,\n  \"mp[n]\": \"string\",\n  \"nameserver\": \"string\",\n  \"net[n]\": \"string\",\n  \"onboot\": 0,\n  \"ostype\": \"opensuse\",\n  \"protection\": 0,\n  \"rootfs\": \"string\",\n  \"searchdomain\": \"string\",\n  \"startup\": \"string\",\n  \"swap\": 512,\n  \"tags\": \"string\",\n  \"template\": 0,\n  \"timezone\": \"string\",\n  \"tty\": 2,\n  \"unprivileged\": 0,\n  \"unused[n]\": \"string\"\n}"
														}
													]
												},
												{
													"name": "Set container options.",
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/lxc/:vmid/config?arch=amd64&cmode=tty&console=1&cores=4035&cpulimit=0&cpuunits=cgroup v1: 1024, cgroup v2: 100&debug=0&delete=string&description=string&dev[n]=string&digest=string&features=string&hookscript=string&hostname=string&lock=snapshot&memory=512&mp[n]=string&nameserver=string&net[n]=string&onboot=0&ostype=alpine&protection=0&revert=string&rootfs=string&searchdomain=string&startup=string&swap=512&tags=string&template=0&timezone=string&tty=2&unprivileged=0&unused[n]=string",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"lxc",
																":vmid",
																"config"
															],
															"query": [
																{
																	"key": "arch",
																	"value": "amd64",
																	"description": "OS architecture type."
																},
																{
																	"key": "cmode",
																	"value": "tty",
																	"description": "Console mode. By default, the console command tries to open a connection to one of the available tty devices. By setting cmode to 'console' it tries to attach to /dev/console instead. If you set cmode to 'shell', it simply invokes a shell inside the container (no login)."
																},
																{
																	"key": "console",
																	"value": "1",
																	"description": "Attach a console device (/dev/console) to the container."
																},
																{
																	"key": "cores",
																	"value": "4035",
																	"description": "The number of cores assigned to the container. A container can use all available cores by default."
																},
																{
																	"key": "cpulimit",
																	"value": "0",
																	"description": "Limit of CPU usage.\n\nNOTE: If the computer has 2 CPUs, it has a total of '2' CPU time. Value '0' indicates no CPU limit."
																},
																{
																	"key": "cpuunits",
																	"value": "cgroup v1: 1024, cgroup v2: 100",
																	"description": "CPU weight for a container, will be clamped to [1, 10000] in cgroup v2."
																},
																{
																	"key": "debug",
																	"value": "0",
																	"description": "Try to be more verbose. For now this only enables debug log-level on start."
																},
																{
																	"key": "delete",
																	"value": "string",
																	"description": "A list of settings you want to delete."
																},
																{
																	"key": "description",
																	"value": "string",
																	"description": "Description for the Container. Shown in the web-interface CT's summary. This is saved as comment inside the configuration file."
																},
																{
																	"key": "dev[n]",
																	"value": "string",
																	"description": "Device to pass through to the container"
																},
																{
																	"key": "digest",
																	"value": "string",
																	"description": "Prevent changes if current configuration file has different SHA1 digest. This can be used to prevent concurrent modifications."
																},
																{
																	"key": "features",
																	"value": "string",
																	"description": "Allow containers access to advanced features."
																},
																{
																	"key": "hookscript",
																	"value": "string",
																	"description": "Script that will be executed during various steps in the containers lifetime."
																},
																{
																	"key": "hostname",
																	"value": "string",
																	"description": "Set a host name for the container."
																},
																{
																	"key": "lock",
																	"value": "snapshot",
																	"description": "Lock/unlock the container."
																},
																{
																	"key": "memory",
																	"value": "512",
																	"description": "Amount of RAM for the container in MB."
																},
																{
																	"key": "mp[n]",
																	"value": "string",
																	"description": "Use volume as container mount point. Use the special syntax STORAGE_ID:SIZE_IN_GiB to allocate a new volume."
																},
																{
																	"key": "nameserver",
																	"value": "string",
																	"description": "Sets DNS server IP address for a container. Create will automatically use the setting from the host if you neither set searchdomain nor nameserver."
																},
																{
																	"key": "net[n]",
																	"value": "string",
																	"description": "Specifies network interfaces for the container."
																},
																{
																	"key": "onboot",
																	"value": "0",
																	"description": "Specifies whether a container will be started during system bootup."
																},
																{
																	"key": "ostype",
																	"value": "alpine",
																	"description": "OS type. This is used to setup configuration inside the container, and corresponds to lxc setup scripts in /usr/share/lxc/config/<ostype>.common.conf. Value 'unmanaged' can be used to skip and OS specific setup."
																},
																{
																	"key": "protection",
																	"value": "0",
																	"description": "Sets the protection flag of the container. This will prevent the CT or CT's disk remove/update operation."
																},
																{
																	"key": "revert",
																	"value": "string",
																	"description": "Revert a pending change."
																},
																{
																	"key": "rootfs",
																	"value": "string",
																	"description": "Use volume as container root."
																},
																{
																	"key": "searchdomain",
																	"value": "string",
																	"description": "Sets DNS search domains for a container. Create will automatically use the setting from the host if you neither set searchdomain nor nameserver."
																},
																{
																	"key": "startup",
																	"value": "string",
																	"description": "Startup and shutdown behavior. Order is a non-negative number defining the general startup order. Shutdown in done with reverse ordering. Additionally you can set the 'up' or 'down' delay in seconds, which specifies a delay to wait before the next VM is started or stopped."
																},
																{
																	"key": "swap",
																	"value": "512",
																	"description": "Amount of SWAP for the container in MB."
																},
																{
																	"key": "tags",
																	"value": "string",
																	"description": "Tags of the Container. This is only meta information."
																},
																{
																	"key": "template",
																	"value": "0",
																	"description": "Enable/disable Template."
																},
																{
																	"key": "timezone",
																	"value": "string",
																	"description": "Time zone to use in the container. If option isn't set, then nothing will be done. Can be set to 'host' to match the host time zone, or an arbitrary time zone option from /usr/share/zoneinfo/zone.tab"
																},
																{
																	"key": "tty",
																	"value": "2",
																	"description": "Specify the number of tty available to the container"
																},
																{
																	"key": "unprivileged",
																	"value": "0",
																	"description": "Makes the container run as unprivileged user. (Should not be modified manually.)"
																},
																{
																	"key": "unused[n]",
																	"value": "string",
																	"description": "Reference to unused volumes. This is used internally, and should not be modified manually."
																}
															],
															"variable": [
																{
																	"key": "node",
																	"value": "string",
																	"description": "(Required) The cluster node name."
																},
																{
																	"key": "vmid",
																	"value": "358786328",
																	"description": "(Required) The (unique) ID of the VM."
																}
															]
														},
														"description": "Set container options."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/lxc/:vmid/config?arch=amd64&cmode=tty&console=1&cores=4035&cpulimit=0&cpuunits=cgroup v1: 1024, cgroup v2: 100&debug=0&delete=string&description=string&dev[n]=string&digest=string&features=string&hookscript=string&hostname=string&lock=snapshot&memory=512&mp[n]=string&nameserver=string&net[n]=string&onboot=0&ostype=alpine&protection=0&revert=string&rootfs=string&searchdomain=string&startup=string&swap=512&tags=string&template=0&timezone=string&tty=2&unprivileged=0&unused[n]=string",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"lxc",
																		":vmid",
																		"config"
																	],
																	"query": [
																		{
																			"key": "arch",
																			"value": "amd64",
																			"description": "OS architecture type."
																		},
																		{
																			"key": "cmode",
																			"value": "tty",
																			"description": "Console mode. By default, the console command tries to open a connection to one of the available tty devices. By setting cmode to 'console' it tries to attach to /dev/console instead. If you set cmode to 'shell', it simply invokes a shell inside the container (no login)."
																		},
																		{
																			"key": "console",
																			"value": "1",
																			"description": "Attach a console device (/dev/console) to the container."
																		},
																		{
																			"key": "cores",
																			"value": "4035",
																			"description": "The number of cores assigned to the container. A container can use all available cores by default."
																		},
																		{
																			"key": "cpulimit",
																			"value": "0",
																			"description": "Limit of CPU usage.\n\nNOTE: If the computer has 2 CPUs, it has a total of '2' CPU time. Value '0' indicates no CPU limit."
																		},
																		{
																			"key": "cpuunits",
																			"value": "cgroup v1: 1024, cgroup v2: 100",
																			"description": "CPU weight for a container, will be clamped to [1, 10000] in cgroup v2."
																		},
																		{
																			"key": "debug",
																			"value": "0",
																			"description": "Try to be more verbose. For now this only enables debug log-level on start."
																		},
																		{
																			"key": "delete",
																			"value": "string",
																			"description": "A list of settings you want to delete."
																		},
																		{
																			"key": "description",
																			"value": "string",
																			"description": "Description for the Container. Shown in the web-interface CT's summary. This is saved as comment inside the configuration file."
																		},
																		{
																			"key": "dev[n]",
																			"value": "string",
																			"description": "Device to pass through to the container"
																		},
																		{
																			"key": "digest",
																			"value": "string",
																			"description": "Prevent changes if current configuration file has different SHA1 digest. This can be used to prevent concurrent modifications."
																		},
																		{
																			"key": "features",
																			"value": "string",
																			"description": "Allow containers access to advanced features."
																		},
																		{
																			"key": "hookscript",
																			"value": "string",
																			"description": "Script that will be executed during various steps in the containers lifetime."
																		},
																		{
																			"key": "hostname",
																			"value": "string",
																			"description": "Set a host name for the container."
																		},
																		{
																			"key": "lock",
																			"value": "snapshot",
																			"description": "Lock/unlock the container."
																		},
																		{
																			"key": "memory",
																			"value": "512",
																			"description": "Amount of RAM for the container in MB."
																		},
																		{
																			"key": "mp[n]",
																			"value": "string",
																			"description": "Use volume as container mount point. Use the special syntax STORAGE_ID:SIZE_IN_GiB to allocate a new volume."
																		},
																		{
																			"key": "nameserver",
																			"value": "string",
																			"description": "Sets DNS server IP address for a container. Create will automatically use the setting from the host if you neither set searchdomain nor nameserver."
																		},
																		{
																			"key": "net[n]",
																			"value": "string",
																			"description": "Specifies network interfaces for the container."
																		},
																		{
																			"key": "onboot",
																			"value": "0",
																			"description": "Specifies whether a container will be started during system bootup."
																		},
																		{
																			"key": "ostype",
																			"value": "alpine",
																			"description": "OS type. This is used to setup configuration inside the container, and corresponds to lxc setup scripts in /usr/share/lxc/config/<ostype>.common.conf. Value 'unmanaged' can be used to skip and OS specific setup."
																		},
																		{
																			"key": "protection",
																			"value": "0",
																			"description": "Sets the protection flag of the container. This will prevent the CT or CT's disk remove/update operation."
																		},
																		{
																			"key": "revert",
																			"value": "string",
																			"description": "Revert a pending change."
																		},
																		{
																			"key": "rootfs",
																			"value": "string",
																			"description": "Use volume as container root."
																		},
																		{
																			"key": "searchdomain",
																			"value": "string",
																			"description": "Sets DNS search domains for a container. Create will automatically use the setting from the host if you neither set searchdomain nor nameserver."
																		},
																		{
																			"key": "startup",
																			"value": "string",
																			"description": "Startup and shutdown behavior. Order is a non-negative number defining the general startup order. Shutdown in done with reverse ordering. Additionally you can set the 'up' or 'down' delay in seconds, which specifies a delay to wait before the next VM is started or stopped."
																		},
																		{
																			"key": "swap",
																			"value": "512",
																			"description": "Amount of SWAP for the container in MB."
																		},
																		{
																			"key": "tags",
																			"value": "string",
																			"description": "Tags of the Container. This is only meta information."
																		},
																		{
																			"key": "template",
																			"value": "0",
																			"description": "Enable/disable Template."
																		},
																		{
																			"key": "timezone",
																			"value": "string",
																			"description": "Time zone to use in the container. If option isn't set, then nothing will be done. Can be set to 'host' to match the host time zone, or an arbitrary time zone option from /usr/share/zoneinfo/zone.tab"
																		},
																		{
																			"key": "tty",
																			"value": "2",
																			"description": "Specify the number of tty available to the container"
																		},
																		{
																			"key": "unprivileged",
																			"value": "0",
																			"description": "Makes the container run as unprivileged user. (Should not be modified manually.)"
																		},
																		{
																			"key": "unused[n]",
																			"value": "string",
																			"description": "Reference to unused volumes. This is used internally, and should not be modified manually."
																		}
																	],
																	"variable": [
																		{
																			"key": "node"
																		},
																		{
																			"key": "vmid"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "null"
														}
													]
												}
											]
										},
										{
											"name": "status",
											"item": [
												{
													"name": "current",
													"item": [
														{
															"name": "Get virtual machine status.",
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/lxc/:vmid/status/current",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"lxc",
																		":vmid",
																		"status",
																		"current"
																	],
																	"variable": [
																		{
																			"key": "node",
																			"value": "string",
																			"description": "(Required) The cluster node name."
																		},
																		{
																			"key": "vmid",
																			"value": "358786328",
																			"description": "(Required) The (unique) ID of the VM."
																		}
																	]
																},
																"description": "Get virtual machine status."
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/nodes/:node/lxc/:vmid/status/current",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"nodes",
																				":node",
																				"lxc",
																				":vmid",
																				"status",
																				"current"
																			],
																			"variable": [
																				{
																					"key": "node"
																				},
																				{
																					"key": "vmid"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"cpu\": 7784.886113424683,\n  \"cpus\": 8643.111208009543,\n  \"disk\": 221,\n  \"diskread\": 7913,\n  \"diskwrite\": 2424,\n  \"ha\": {},\n  \"lock\": \"string\",\n  \"maxdisk\": 1126,\n  \"maxmem\": 4486,\n  \"maxswap\": 7680,\n  \"mem\": 6958,\n  \"name\": \"string\",\n  \"netin\": 9941,\n  \"netout\": 6567,\n  \"pressurecpusome\": 1338.7466174028307,\n  \"pressureiofull\": 9651.415590955661,\n  \"pressureiosome\": 7110.532693198444,\n  \"pressurememoryfull\": 3150.1476536185824,\n  \"pressurememorysome\": 9157.096978754027,\n  \"status\": \"stopped\",\n  \"tags\": \"string\",\n  \"template\": 0,\n  \"uptime\": 1553,\n  \"vmid\": 898948920\n}"
																}
															]
														}
													]
												},
												{
													"name": "start",
													"item": [
														{
															"name": "Start the container.",
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/lxc/:vmid/status/start?debug=0&skiplock=true",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"lxc",
																		":vmid",
																		"status",
																		"start"
																	],
																	"query": [
																		{
																			"key": "debug",
																			"value": "0",
																			"description": "If set, enables very verbose debug log-level on start."
																		},
																		{
																			"key": "skiplock",
																			"value": "true",
																			"description": "Ignore locks - only root is allowed to use this option."
																		}
																	],
																	"variable": [
																		{
																			"key": "node",
																			"value": "string",
																			"description": "(Required) The cluster node name."
																		},
																		{
																			"key": "vmid",
																			"value": "358786328",
																			"description": "(Required) The (unique) ID of the VM."
																		}
																	]
																},
																"description": "Start the container."
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/nodes/:node/lxc/:vmid/status/start?debug=0&skiplock=true",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"nodes",
																				":node",
																				"lxc",
																				":vmid",
																				"status",
																				"start"
																			],
																			"query": [
																				{
																					"key": "debug",
																					"value": "0",
																					"description": "If set, enables very verbose debug log-level on start."
																				},
																				{
																					"key": "skiplock",
																					"value": "true",
																					"description": "Ignore locks - only root is allowed to use this option."
																				}
																			],
																			"variable": [
																				{
																					"key": "node"
																				},
																				{
																					"key": "vmid"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "string"
																}
															]
														}
													]
												},
												{
													"name": "stop",
													"item": [
														{
															"name": "Stop the container. This will abruptly stop all processes running in the container.",
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/lxc/:vmid/status/stop?overrule-shutdown=0&skiplock=true",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"lxc",
																		":vmid",
																		"status",
																		"stop"
																	],
																	"query": [
																		{
																			"key": "overrule-shutdown",
																			"value": "0",
																			"description": "Try to abort active 'vzshutdown' tasks before stopping."
																		},
																		{
																			"key": "skiplock",
																			"value": "true",
																			"description": "Ignore locks - only root is allowed to use this option."
																		}
																	],
																	"variable": [
																		{
																			"key": "node",
																			"value": "string",
																			"description": "(Required) The cluster node name."
																		},
																		{
																			"key": "vmid",
																			"value": "358786328",
																			"description": "(Required) The (unique) ID of the VM."
																		}
																	]
																},
																"description": "Stop the container. This will abruptly stop all processes running in the container."
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/nodes/:node/lxc/:vmid/status/stop?overrule-shutdown=0&skiplock=true",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"nodes",
																				":node",
																				"lxc",
																				":vmid",
																				"status",
																				"stop"
																			],
																			"query": [
																				{
																					"key": "overrule-shutdown",
																					"value": "0",
																					"description": "Try to abort active 'vzshutdown' tasks before stopping."
																				},
																				{
																					"key": "skiplock",
																					"value": "true",
																					"description": "Ignore locks - only root is allowed to use this option."
																				}
																			],
																			"variable": [
																				{
																					"key": "node"
																				},
																				{
																					"key": "vmid"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "string"
																}
															]
														}
													]
												},
												{
													"name": "shutdown",
													"item": [
														{
															"name": "Shutdown the container. This will trigger a clean shutdown of the container, see lxc-stop(1) for details.",
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/lxc/:vmid/status/shutdown?forceStop=0&timeout=60",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"lxc",
																		":vmid",
																		"status",
																		"shutdown"
																	],
																	"query": [
																		{
																			"key": "forceStop",
																			"value": "0",
																			"description": "Make sure the Container stops."
																		},
																		{
																			"key": "timeout",
																			"value": "60",
																			"description": "Wait maximal timeout seconds."
																		}
																	],
																	"variable": [
																		{
																			"key": "node",
																			"value": "string",
																			"description": "(Required) The cluster node name."
																		},
																		{
																			"key": "vmid",
																			"value": "358786328",
																			"description": "(Required) The (unique) ID of the VM."
																		}
																	]
																},
																"description": "Shutdown the container. This will trigger a clean shutdown of the container, see lxc-stop(1) for details."
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/nodes/:node/lxc/:vmid/status/shutdown?forceStop=0&timeout=60",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"nodes",
																				":node",
																				"lxc",
																				":vmid",
																				"status",
																				"shutdown"
																			],
																			"query": [
																				{
																					"key": "forceStop",
																					"value": "0",
																					"description": "Make sure the Container stops."
																				},
																				{
																					"key": "timeout",
																					"value": "60",
																					"description": "Wait maximal timeout seconds."
																				}
																			],
																			"variable": [
																				{
																					"key": "node"
																				},
																				{
																					"key": "vmid"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "string"
																}
															]
														}
													]
												},
												{
													"name": "suspend",
													"item": [
														{
															"name": "Suspend the container. This is experimental.",
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/lxc/:vmid/status/suspend",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"lxc",
																		":vmid",
																		"status",
																		"suspend"
																	],
																	"variable": [
																		{
																			"key": "node",
																			"value": "string",
																			"description": "(Required) The cluster node name."
																		},
																		{
																			"key": "vmid",
																			"value": "358786328",
																			"description": "(Required) The (unique) ID of the VM."
																		}
																	]
																},
																"description": "Suspend the container. This is experimental."
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/nodes/:node/lxc/:vmid/status/suspend",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"nodes",
																				":node",
																				"lxc",
																				":vmid",
																				"status",
																				"suspend"
																			],
																			"variable": [
																				{
																					"key": "node"
																				},
																				{
																					"key": "vmid"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "string"
																}
															]
														}
													]
												},
												{
													"name": "resume",
													"item": [
														{
															"name": "Resume the container.",
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/lxc/:vmid/status/resume",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"lxc",
																		":vmid",
																		"status",
																		"resume"
																	],
																	"variable": [
																		{
																			"key": "node",
																			"value": "string",
																			"description": "(Required) The cluster node name."
																		},
																		{
																			"key": "vmid",
																			"value": "358786328",
																			"description": "(Required) The (unique) ID of the VM."
																		}
																	]
																},
																"description": "Resume the container."
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/nodes/:node/lxc/:vmid/status/resume",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"nodes",
																				":node",
																				"lxc",
																				":vmid",
																				"status",
																				"resume"
																			],
																			"variable": [
																				{
																					"key": "node"
																				},
																				{
																					"key": "vmid"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "string"
																}
															]
														}
													]
												},
												{
													"name": "reboot",
													"item": [
														{
															"name": "Reboot the container by shutting it down, and starting it again. Applies pending changes.",
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/lxc/:vmid/status/reboot?timeout=8248",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"lxc",
																		":vmid",
																		"status",
																		"reboot"
																	],
																	"query": [
																		{
																			"key": "timeout",
																			"value": "8248",
																			"description": "Wait maximal timeout seconds for the shutdown."
																		}
																	],
																	"variable": [
																		{
																			"key": "node",
																			"value": "string",
																			"description": "(Required) The cluster node name."
																		},
																		{
																			"key": "vmid",
																			"value": "358786328",
																			"description": "(Required) The (unique) ID of the VM."
																		}
																	]
																},
																"description": "Reboot the container by shutting it down, and starting it again. Applies pending changes."
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/nodes/:node/lxc/:vmid/status/reboot?timeout=8248",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"nodes",
																				":node",
																				"lxc",
																				":vmid",
																				"status",
																				"reboot"
																			],
																			"query": [
																				{
																					"key": "timeout",
																					"value": "8248",
																					"description": "Wait maximal timeout seconds for the shutdown."
																				}
																			],
																			"variable": [
																				{
																					"key": "node"
																				},
																				{
																					"key": "vmid"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "string"
																}
															]
														}
													]
												},
												{
													"name": "Directory index",
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/lxc/:vmid/status",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"lxc",
																":vmid",
																"status"
															],
															"variable": [
																{
																	"key": "node",
																	"value": "string",
																	"description": "(Required) The cluster node name."
																},
																{
																	"key": "vmid",
																	"value": "358786328",
																	"description": "(Required) The (unique) ID of the VM."
																}
															]
														},
														"description": "Directory index"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/lxc/:vmid/status",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"lxc",
																		":vmid",
																		"status"
																	],
																	"variable": [
																		{
																			"key": "node"
																		},
																		{
																			"key": "vmid"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "[\n  {\n    \"subdir\": \"string\"\n  },\n  {\n    \"subdir\": \"string\"\n  }\n]"
														}
													]
												}
											]
										},
										{
											"name": "snapshot",
											"item": [
												{
													"name": "{snapname}",
													"item": [
														{
															"name": "rollback",
															"item": [
																{
																	"name": "Rollback LXC state to specified snapshot.",
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/nodes/:node/lxc/:vmid/snapshot/:snapname/rollback?start=0",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"nodes",
																				":node",
																				"lxc",
																				":vmid",
																				"snapshot",
																				":snapname",
																				"rollback"
																			],
																			"query": [
																				{
																					"key": "start",
																					"value": "0",
																					"description": "Whether the container should get started after rolling back successfully"
																				}
																			],
																			"variable": [
																				{
																					"key": "node",
																					"value": "string",
																					"description": "(Required) The cluster node name."
																				},
																				{
																					"key": "vmid",
																					"value": "358786328",
																					"description": "(Required) The (unique) ID of the VM."
																				},
																				{
																					"key": "snapname",
																					"value": "string",
																					"description": "(Required) The name of the snapshot."
																				}
																			]
																		},
																		"description": "Rollback LXC state to specified snapshot."
																	},
																	"response": [
																		{
																			"name": "successful operation",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/nodes/:node/lxc/:vmid/snapshot/:snapname/rollback?start=0",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"nodes",
																						":node",
																						"lxc",
																						":vmid",
																						"snapshot",
																						":snapname",
																						"rollback"
																					],
																					"query": [
																						{
																							"key": "start",
																							"value": "0",
																							"description": "Whether the container should get started after rolling back successfully"
																						}
																					],
																					"variable": [
																						{
																							"key": "node"
																						},
																						{
																							"key": "vmid"
																						},
																						{
																							"key": "snapname"
																						}
																					]
																				}
																			},
																			"status": "OK",
																			"code": 200,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "string"
																		}
																	]
																}
															]
														},
														{
															"name": "config",
															"item": [
																{
																	"name": "Get snapshot configuration",
																	"request": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/nodes/:node/lxc/:vmid/snapshot/:snapname/config",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"nodes",
																				":node",
																				"lxc",
																				":vmid",
																				"snapshot",
																				":snapname",
																				"config"
																			],
																			"variable": [
																				{
																					"key": "node",
																					"value": "string",
																					"description": "(Required) The cluster node name."
																				},
																				{
																					"key": "vmid",
																					"value": "358786328",
																					"description": "(Required) The (unique) ID of the VM."
																				},
																				{
																					"key": "snapname",
																					"value": "string",
																					"description": "(Required) The name of the snapshot."
																				}
																			]
																		},
																		"description": "Get snapshot configuration"
																	},
																	"response": [
																		{
																			"name": "successful operation",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/nodes/:node/lxc/:vmid/snapshot/:snapname/config",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"nodes",
																						":node",
																						"lxc",
																						":vmid",
																						"snapshot",
																						":snapname",
																						"config"
																					],
																					"variable": [
																						{
																							"key": "node"
																						},
																						{
																							"key": "vmid"
																						},
																						{
																							"key": "snapname"
																						}
																					]
																				}
																			},
																			"status": "OK",
																			"code": 200,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "{}"
																		}
																	]
																},
																{
																	"name": "Update snapshot metadata.",
																	"request": {
																		"method": "PUT",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/nodes/:node/lxc/:vmid/snapshot/:snapname/config?description=string",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"nodes",
																				":node",
																				"lxc",
																				":vmid",
																				"snapshot",
																				":snapname",
																				"config"
																			],
																			"query": [
																				{
																					"key": "description",
																					"value": "string",
																					"description": "A textual description or comment."
																				}
																			],
																			"variable": [
																				{
																					"key": "node",
																					"value": "string",
																					"description": "(Required) The cluster node name."
																				},
																				{
																					"key": "vmid",
																					"value": "358786328",
																					"description": "(Required) The (unique) ID of the VM."
																				},
																				{
																					"key": "snapname",
																					"value": "string",
																					"description": "(Required) The name of the snapshot."
																				}
																			]
																		},
																		"description": "Update snapshot metadata."
																	},
																	"response": [
																		{
																			"name": "successful operation",
																			"originalRequest": {
																				"method": "PUT",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/nodes/:node/lxc/:vmid/snapshot/:snapname/config?description=string",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"nodes",
																						":node",
																						"lxc",
																						":vmid",
																						"snapshot",
																						":snapname",
																						"config"
																					],
																					"query": [
																						{
																							"key": "description",
																							"value": "string",
																							"description": "A textual description or comment."
																						}
																					],
																					"variable": [
																						{
																							"key": "node"
																						},
																						{
																							"key": "vmid"
																						},
																						{
																							"key": "snapname"
																						}
																					]
																				}
																			},
																			"status": "OK",
																			"code": 200,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "null"
																		}
																	]
																}
															]
														},
														{
															"name": "Delete a LXC snapshot.",
															"request": {
																"method": "DELETE",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/lxc/:vmid/snapshot/:snapname?force=true",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"lxc",
																		":vmid",
																		"snapshot",
																		":snapname"
																	],
																	"query": [
																		{
																			"key": "force",
																			"value": "true",
																			"description": "For removal from config file, even if removing disk snapshots fails."
																		}
																	],
																	"variable": [
																		{
																			"key": "node",
																			"value": "string",
																			"description": "(Required) The cluster node name."
																		},
																		{
																			"key": "vmid",
																			"value": "358786328",
																			"description": "(Required) The (unique) ID of the VM."
																		},
																		{
																			"key": "snapname",
																			"value": "string",
																			"description": "(Required) The name of the snapshot."
																		}
																	]
																},
																"description": "Delete a LXC snapshot."
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "DELETE",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/nodes/:node/lxc/:vmid/snapshot/:snapname?force=true",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"nodes",
																				":node",
																				"lxc",
																				":vmid",
																				"snapshot",
																				":snapname"
																			],
																			"query": [
																				{
																					"key": "force",
																					"value": "true",
																					"description": "For removal from config file, even if removing disk snapshots fails."
																				}
																			],
																			"variable": [
																				{
																					"key": "node"
																				},
																				{
																					"key": "vmid"
																				},
																				{
																					"key": "snapname"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "string"
																}
															]
														},
														{
															"name": "/nodes/:node/lxc/:vmid/snapshot/:snapname",
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/lxc/:vmid/snapshot/:snapname",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"lxc",
																		":vmid",
																		"snapshot",
																		":snapname"
																	],
																	"variable": [
																		{
																			"key": "node",
																			"value": "string",
																			"description": "(Required) The cluster node name."
																		},
																		{
																			"key": "vmid",
																			"value": "358786328",
																			"description": "(Required) The (unique) ID of the VM."
																		},
																		{
																			"key": "snapname",
																			"value": "string",
																			"description": "(Required) The name of the snapshot."
																		}
																	]
																}
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/nodes/:node/lxc/:vmid/snapshot/:snapname",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"nodes",
																				":node",
																				"lxc",
																				":vmid",
																				"snapshot",
																				":snapname"
																			],
																			"variable": [
																				{
																					"key": "node"
																				},
																				{
																					"key": "vmid"
																				},
																				{
																					"key": "snapname"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "[]"
																}
															]
														}
													]
												},
												{
													"name": "List all snapshots.",
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/lxc/:vmid/snapshot",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"lxc",
																":vmid",
																"snapshot"
															],
															"variable": [
																{
																	"key": "node",
																	"value": "string",
																	"description": "(Required) The cluster node name."
																},
																{
																	"key": "vmid",
																	"value": "358786328",
																	"description": "(Required) The (unique) ID of the VM."
																}
															]
														},
														"description": "List all snapshots."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/lxc/:vmid/snapshot",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"lxc",
																		":vmid",
																		"snapshot"
																	],
																	"variable": [
																		{
																			"key": "node"
																		},
																		{
																			"key": "vmid"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "[\n  {\n    \"description\": \"string\",\n    \"name\": \"string\",\n    \"parent\": \"string\",\n    \"snaptime\": 5099\n  },\n  {\n    \"description\": \"string\",\n    \"name\": \"string\",\n    \"parent\": \"string\",\n    \"snaptime\": 1693\n  }\n]"
														}
													]
												},
												{
													"name": "Snapshot a container.",
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/lxc/:vmid/snapshot?description=string&snapname=string",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"lxc",
																":vmid",
																"snapshot"
															],
															"query": [
																{
																	"key": "description",
																	"value": "string",
																	"description": "A textual description or comment."
																},
																{
																	"key": "snapname",
																	"value": "string",
																	"description": "(Required) The name of the snapshot."
																}
															],
															"variable": [
																{
																	"key": "node",
																	"value": "string",
																	"description": "(Required) The cluster node name."
																},
																{
																	"key": "vmid",
																	"value": "358786328",
																	"description": "(Required) The (unique) ID of the VM."
																}
															]
														},
														"description": "Snapshot a container."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/lxc/:vmid/snapshot?description=string&snapname=string",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"lxc",
																		":vmid",
																		"snapshot"
																	],
																	"query": [
																		{
																			"key": "description",
																			"value": "string",
																			"description": "A textual description or comment."
																		},
																		{
																			"key": "snapname",
																			"value": "string",
																			"description": "(Required) The name of the snapshot."
																		}
																	],
																	"variable": [
																		{
																			"key": "node"
																		},
																		{
																			"key": "vmid"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "string"
														}
													]
												}
											]
										},
										{
											"name": "firewall",
											"item": [
												{
													"name": "rules",
													"item": [
														{
															"name": "{pos}",
															"item": [
																{
																	"name": "Delete rule.",
																	"request": {
																		"method": "DELETE",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/nodes/:node/lxc/:vmid/firewall/rules/:pos?digest=string",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"nodes",
																				":node",
																				"lxc",
																				":vmid",
																				"firewall",
																				"rules",
																				":pos"
																			],
																			"query": [
																				{
																					"key": "digest",
																					"value": "string",
																					"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
																				}
																			],
																			"variable": [
																				{
																					"key": "node",
																					"value": "string",
																					"description": "(Required) The cluster node name."
																				},
																				{
																					"key": "vmid",
																					"value": "358786328",
																					"description": "(Required) The (unique) ID of the VM."
																				},
																				{
																					"key": "pos",
																					"value": "8248",
																					"description": "Update rule at position <pos>."
																				}
																			]
																		},
																		"description": "Delete rule."
																	},
																	"response": [
																		{
																			"name": "successful operation",
																			"originalRequest": {
																				"method": "DELETE",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/nodes/:node/lxc/:vmid/firewall/rules/:pos?digest=string",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"nodes",
																						":node",
																						"lxc",
																						":vmid",
																						"firewall",
																						"rules",
																						":pos"
																					],
																					"query": [
																						{
																							"key": "digest",
																							"value": "string",
																							"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
																						}
																					],
																					"variable": [
																						{
																							"key": "node"
																						},
																						{
																							"key": "vmid"
																						},
																						{
																							"key": "pos"
																						}
																					]
																				}
																			},
																			"status": "OK",
																			"code": 200,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "null"
																		}
																	]
																},
																{
																	"name": "Get single rule data.",
																	"request": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/nodes/:node/lxc/:vmid/firewall/rules/:pos",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"nodes",
																				":node",
																				"lxc",
																				":vmid",
																				"firewall",
																				"rules",
																				":pos"
																			],
																			"variable": [
																				{
																					"key": "node",
																					"value": "string",
																					"description": "(Required) The cluster node name."
																				},
																				{
																					"key": "vmid",
																					"value": "358786328",
																					"description": "(Required) The (unique) ID of the VM."
																				},
																				{
																					"key": "pos",
																					"value": "8248",
																					"description": "Update rule at position <pos>."
																				}
																			]
																		},
																		"description": "Get single rule data."
																	},
																	"response": [
																		{
																			"name": "successful operation",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/nodes/:node/lxc/:vmid/firewall/rules/:pos",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"nodes",
																						":node",
																						"lxc",
																						":vmid",
																						"firewall",
																						"rules",
																						":pos"
																					],
																					"variable": [
																						{
																							"key": "node"
																						},
																						{
																							"key": "vmid"
																						},
																						{
																							"key": "pos"
																						}
																					]
																				}
																			},
																			"status": "OK",
																			"code": 200,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"action\": \"string\",\n  \"comment\": \"string\",\n  \"dest\": \"string\",\n  \"dport\": \"string\",\n  \"enable\": 7351,\n  \"icmp-type\": \"string\",\n  \"iface\": \"string\",\n  \"ipversion\": 3130,\n  \"log\": \"debug\",\n  \"macro\": \"string\",\n  \"pos\": 4146,\n  \"proto\": \"string\",\n  \"source\": \"string\",\n  \"sport\": \"string\",\n  \"type\": \"string\"\n}"
																		}
																	]
																},
																{
																	"name": "Modify rule data.",
																	"request": {
																		"method": "PUT",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/nodes/:node/lxc/:vmid/firewall/rules/:pos?action=wrF&comment=string&delete=string&dest=string&digest=string&dport=string&enable=8248&icmp-type=string&iface=string&log=crit&macro=string&moveto=8248&proto=string&source=string&sport=string&type=forward",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"nodes",
																				":node",
																				"lxc",
																				":vmid",
																				"firewall",
																				"rules",
																				":pos"
																			],
																			"query": [
																				{
																					"key": "action",
																					"value": "wrF",
																					"description": "Rule action ('ACCEPT', 'DROP', 'REJECT') or security group name."
																				},
																				{
																					"key": "comment",
																					"value": "string",
																					"description": "Descriptive comment."
																				},
																				{
																					"key": "delete",
																					"value": "string",
																					"description": "A list of settings you want to delete."
																				},
																				{
																					"key": "dest",
																					"value": "string",
																					"description": "Restrict packet destination address. This can refer to a single IP address, an IP set ('+ipsetname') or an IP alias definition. You can also specify an address range like '20.34.101.207-201.3.9.99', or a list of IP addresses and networks (entries are separated by comma). Please do not mix IPv4 and IPv6 addresses inside such lists."
																				},
																				{
																					"key": "digest",
																					"value": "string",
																					"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
																				},
																				{
																					"key": "dport",
																					"value": "string",
																					"description": "Restrict TCP/UDP destination port. You can use service names or simple numbers (0-65535), as defined in '/etc/services'. Port ranges can be specified with '\\d+:\\d+', for example '80:85', and you can use comma separated list to match several ports or ranges."
																				},
																				{
																					"key": "enable",
																					"value": "8248",
																					"description": "Flag to enable/disable a rule."
																				},
																				{
																					"key": "icmp-type",
																					"value": "string",
																					"description": "Specify icmp-type. Only valid if proto equals 'icmp' or 'icmpv6'/'ipv6-icmp'."
																				},
																				{
																					"key": "iface",
																					"value": "string",
																					"description": "Network interface name. You have to use network configuration key names for VMs and containers ('net\\d+'). Host related rules can use arbitrary strings."
																				},
																				{
																					"key": "log",
																					"value": "crit",
																					"description": "Log level for firewall rule."
																				},
																				{
																					"key": "macro",
																					"value": "string",
																					"description": "Use predefined standard macro."
																				},
																				{
																					"key": "moveto",
																					"value": "8248",
																					"description": "Move rule to new position <moveto>. Other arguments are ignored."
																				},
																				{
																					"key": "proto",
																					"value": "string",
																					"description": "IP protocol. You can use protocol names ('tcp'/'udp') or simple numbers, as defined in '/etc/protocols'."
																				},
																				{
																					"key": "source",
																					"value": "string",
																					"description": "Restrict packet source address. This can refer to a single IP address, an IP set ('+ipsetname') or an IP alias definition. You can also specify an address range like '20.34.101.207-201.3.9.99', or a list of IP addresses and networks (entries are separated by comma). Please do not mix IPv4 and IPv6 addresses inside such lists."
																				},
																				{
																					"key": "sport",
																					"value": "string",
																					"description": "Restrict TCP/UDP source port. You can use service names or simple numbers (0-65535), as defined in '/etc/services'. Port ranges can be specified with '\\d+:\\d+', for example '80:85', and you can use comma separated list to match several ports or ranges."
																				},
																				{
																					"key": "type",
																					"value": "forward",
																					"description": "Rule type."
																				}
																			],
																			"variable": [
																				{
																					"key": "node",
																					"value": "string",
																					"description": "(Required) The cluster node name."
																				},
																				{
																					"key": "vmid",
																					"value": "358786328",
																					"description": "(Required) The (unique) ID of the VM."
																				},
																				{
																					"key": "pos",
																					"value": "8248",
																					"description": "Update rule at position <pos>."
																				}
																			]
																		},
																		"description": "Modify rule data."
																	},
																	"response": [
																		{
																			"name": "successful operation",
																			"originalRequest": {
																				"method": "PUT",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/nodes/:node/lxc/:vmid/firewall/rules/:pos?action=wrF&comment=string&delete=string&dest=string&digest=string&dport=string&enable=8248&icmp-type=string&iface=string&log=crit&macro=string&moveto=8248&proto=string&source=string&sport=string&type=forward",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"nodes",
																						":node",
																						"lxc",
																						":vmid",
																						"firewall",
																						"rules",
																						":pos"
																					],
																					"query": [
																						{
																							"key": "action",
																							"value": "wrF",
																							"description": "Rule action ('ACCEPT', 'DROP', 'REJECT') or security group name."
																						},
																						{
																							"key": "comment",
																							"value": "string",
																							"description": "Descriptive comment."
																						},
																						{
																							"key": "delete",
																							"value": "string",
																							"description": "A list of settings you want to delete."
																						},
																						{
																							"key": "dest",
																							"value": "string",
																							"description": "Restrict packet destination address. This can refer to a single IP address, an IP set ('+ipsetname') or an IP alias definition. You can also specify an address range like '20.34.101.207-201.3.9.99', or a list of IP addresses and networks (entries are separated by comma). Please do not mix IPv4 and IPv6 addresses inside such lists."
																						},
																						{
																							"key": "digest",
																							"value": "string",
																							"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
																						},
																						{
																							"key": "dport",
																							"value": "string",
																							"description": "Restrict TCP/UDP destination port. You can use service names or simple numbers (0-65535), as defined in '/etc/services'. Port ranges can be specified with '\\d+:\\d+', for example '80:85', and you can use comma separated list to match several ports or ranges."
																						},
																						{
																							"key": "enable",
																							"value": "8248",
																							"description": "Flag to enable/disable a rule."
																						},
																						{
																							"key": "icmp-type",
																							"value": "string",
																							"description": "Specify icmp-type. Only valid if proto equals 'icmp' or 'icmpv6'/'ipv6-icmp'."
																						},
																						{
																							"key": "iface",
																							"value": "string",
																							"description": "Network interface name. You have to use network configuration key names for VMs and containers ('net\\d+'). Host related rules can use arbitrary strings."
																						},
																						{
																							"key": "log",
																							"value": "crit",
																							"description": "Log level for firewall rule."
																						},
																						{
																							"key": "macro",
																							"value": "string",
																							"description": "Use predefined standard macro."
																						},
																						{
																							"key": "moveto",
																							"value": "8248",
																							"description": "Move rule to new position <moveto>. Other arguments are ignored."
																						},
																						{
																							"key": "proto",
																							"value": "string",
																							"description": "IP protocol. You can use protocol names ('tcp'/'udp') or simple numbers, as defined in '/etc/protocols'."
																						},
																						{
																							"key": "source",
																							"value": "string",
																							"description": "Restrict packet source address. This can refer to a single IP address, an IP set ('+ipsetname') or an IP alias definition. You can also specify an address range like '20.34.101.207-201.3.9.99', or a list of IP addresses and networks (entries are separated by comma). Please do not mix IPv4 and IPv6 addresses inside such lists."
																						},
																						{
																							"key": "sport",
																							"value": "string",
																							"description": "Restrict TCP/UDP source port. You can use service names or simple numbers (0-65535), as defined in '/etc/services'. Port ranges can be specified with '\\d+:\\d+', for example '80:85', and you can use comma separated list to match several ports or ranges."
																						},
																						{
																							"key": "type",
																							"value": "forward",
																							"description": "Rule type."
																						}
																					],
																					"variable": [
																						{
																							"key": "node"
																						},
																						{
																							"key": "vmid"
																						},
																						{
																							"key": "pos"
																						}
																					]
																				}
																			},
																			"status": "OK",
																			"code": 200,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "null"
																		}
																	]
																}
															]
														},
														{
															"name": "List rules.",
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/lxc/:vmid/firewall/rules",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"lxc",
																		":vmid",
																		"firewall",
																		"rules"
																	],
																	"variable": [
																		{
																			"key": "node",
																			"value": "string",
																			"description": "(Required) The cluster node name."
																		},
																		{
																			"key": "vmid",
																			"value": "358786328",
																			"description": "(Required) The (unique) ID of the VM."
																		}
																	]
																},
																"description": "List rules."
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/nodes/:node/lxc/:vmid/firewall/rules",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"nodes",
																				":node",
																				"lxc",
																				":vmid",
																				"firewall",
																				"rules"
																			],
																			"variable": [
																				{
																					"key": "node"
																				},
																				{
																					"key": "vmid"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "[\n  {\n    \"pos\": 2798\n  },\n  {\n    \"pos\": 6715\n  }\n]"
																}
															]
														},
														{
															"name": "Create new rule.",
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/lxc/:vmid/firewall/rules?action=wrF&comment=string&dest=string&digest=string&dport=string&enable=8248&icmp-type=string&iface=string&log=crit&macro=string&pos=8248&proto=string&source=string&sport=string&type=forward",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"lxc",
																		":vmid",
																		"firewall",
																		"rules"
																	],
																	"query": [
																		{
																			"key": "action",
																			"value": "wrF",
																			"description": "(Required) Rule action ('ACCEPT', 'DROP', 'REJECT') or security group name."
																		},
																		{
																			"key": "comment",
																			"value": "string",
																			"description": "Descriptive comment."
																		},
																		{
																			"key": "dest",
																			"value": "string",
																			"description": "Restrict packet destination address. This can refer to a single IP address, an IP set ('+ipsetname') or an IP alias definition. You can also specify an address range like '20.34.101.207-201.3.9.99', or a list of IP addresses and networks (entries are separated by comma). Please do not mix IPv4 and IPv6 addresses inside such lists."
																		},
																		{
																			"key": "digest",
																			"value": "string",
																			"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
																		},
																		{
																			"key": "dport",
																			"value": "string",
																			"description": "Restrict TCP/UDP destination port. You can use service names or simple numbers (0-65535), as defined in '/etc/services'. Port ranges can be specified with '\\d+:\\d+', for example '80:85', and you can use comma separated list to match several ports or ranges."
																		},
																		{
																			"key": "enable",
																			"value": "8248",
																			"description": "Flag to enable/disable a rule."
																		},
																		{
																			"key": "icmp-type",
																			"value": "string",
																			"description": "Specify icmp-type. Only valid if proto equals 'icmp' or 'icmpv6'/'ipv6-icmp'."
																		},
																		{
																			"key": "iface",
																			"value": "string",
																			"description": "Network interface name. You have to use network configuration key names for VMs and containers ('net\\d+'). Host related rules can use arbitrary strings."
																		},
																		{
																			"key": "log",
																			"value": "crit",
																			"description": "Log level for firewall rule."
																		},
																		{
																			"key": "macro",
																			"value": "string",
																			"description": "Use predefined standard macro."
																		},
																		{
																			"key": "pos",
																			"value": "8248",
																			"description": "Update rule at position <pos>."
																		},
																		{
																			"key": "proto",
																			"value": "string",
																			"description": "IP protocol. You can use protocol names ('tcp'/'udp') or simple numbers, as defined in '/etc/protocols'."
																		},
																		{
																			"key": "source",
																			"value": "string",
																			"description": "Restrict packet source address. This can refer to a single IP address, an IP set ('+ipsetname') or an IP alias definition. You can also specify an address range like '20.34.101.207-201.3.9.99', or a list of IP addresses and networks (entries are separated by comma). Please do not mix IPv4 and IPv6 addresses inside such lists."
																		},
																		{
																			"key": "sport",
																			"value": "string",
																			"description": "Restrict TCP/UDP source port. You can use service names or simple numbers (0-65535), as defined in '/etc/services'. Port ranges can be specified with '\\d+:\\d+', for example '80:85', and you can use comma separated list to match several ports or ranges."
																		},
																		{
																			"key": "type",
																			"value": "forward",
																			"description": "(Required) Rule type."
																		}
																	],
																	"variable": [
																		{
																			"key": "node",
																			"value": "string",
																			"description": "(Required) The cluster node name."
																		},
																		{
																			"key": "vmid",
																			"value": "358786328",
																			"description": "(Required) The (unique) ID of the VM."
																		}
																	]
																},
																"description": "Create new rule."
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/nodes/:node/lxc/:vmid/firewall/rules?action=wrF&comment=string&dest=string&digest=string&dport=string&enable=8248&icmp-type=string&iface=string&log=crit&macro=string&pos=8248&proto=string&source=string&sport=string&type=forward",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"nodes",
																				":node",
																				"lxc",
																				":vmid",
																				"firewall",
																				"rules"
																			],
																			"query": [
																				{
																					"key": "action",
																					"value": "wrF",
																					"description": "(Required) Rule action ('ACCEPT', 'DROP', 'REJECT') or security group name."
																				},
																				{
																					"key": "comment",
																					"value": "string",
																					"description": "Descriptive comment."
																				},
																				{
																					"key": "dest",
																					"value": "string",
																					"description": "Restrict packet destination address. This can refer to a single IP address, an IP set ('+ipsetname') or an IP alias definition. You can also specify an address range like '20.34.101.207-201.3.9.99', or a list of IP addresses and networks (entries are separated by comma). Please do not mix IPv4 and IPv6 addresses inside such lists."
																				},
																				{
																					"key": "digest",
																					"value": "string",
																					"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
																				},
																				{
																					"key": "dport",
																					"value": "string",
																					"description": "Restrict TCP/UDP destination port. You can use service names or simple numbers (0-65535), as defined in '/etc/services'. Port ranges can be specified with '\\d+:\\d+', for example '80:85', and you can use comma separated list to match several ports or ranges."
																				},
																				{
																					"key": "enable",
																					"value": "8248",
																					"description": "Flag to enable/disable a rule."
																				},
																				{
																					"key": "icmp-type",
																					"value": "string",
																					"description": "Specify icmp-type. Only valid if proto equals 'icmp' or 'icmpv6'/'ipv6-icmp'."
																				},
																				{
																					"key": "iface",
																					"value": "string",
																					"description": "Network interface name. You have to use network configuration key names for VMs and containers ('net\\d+'). Host related rules can use arbitrary strings."
																				},
																				{
																					"key": "log",
																					"value": "crit",
																					"description": "Log level for firewall rule."
																				},
																				{
																					"key": "macro",
																					"value": "string",
																					"description": "Use predefined standard macro."
																				},
																				{
																					"key": "pos",
																					"value": "8248",
																					"description": "Update rule at position <pos>."
																				},
																				{
																					"key": "proto",
																					"value": "string",
																					"description": "IP protocol. You can use protocol names ('tcp'/'udp') or simple numbers, as defined in '/etc/protocols'."
																				},
																				{
																					"key": "source",
																					"value": "string",
																					"description": "Restrict packet source address. This can refer to a single IP address, an IP set ('+ipsetname') or an IP alias definition. You can also specify an address range like '20.34.101.207-201.3.9.99', or a list of IP addresses and networks (entries are separated by comma). Please do not mix IPv4 and IPv6 addresses inside such lists."
																				},
																				{
																					"key": "sport",
																					"value": "string",
																					"description": "Restrict TCP/UDP source port. You can use service names or simple numbers (0-65535), as defined in '/etc/services'. Port ranges can be specified with '\\d+:\\d+', for example '80:85', and you can use comma separated list to match several ports or ranges."
																				},
																				{
																					"key": "type",
																					"value": "forward",
																					"description": "(Required) Rule type."
																				}
																			],
																			"variable": [
																				{
																					"key": "node"
																				},
																				{
																					"key": "vmid"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "null"
																}
															]
														}
													]
												},
												{
													"name": "aliases",
													"item": [
														{
															"name": "{name}",
															"item": [
																{
																	"name": "Remove IP or Network alias.",
																	"request": {
																		"method": "DELETE",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/nodes/:node/lxc/:vmid/firewall/aliases/:name?digest=string",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"nodes",
																				":node",
																				"lxc",
																				":vmid",
																				"firewall",
																				"aliases",
																				":name"
																			],
																			"query": [
																				{
																					"key": "digest",
																					"value": "string",
																					"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
																				}
																			],
																			"variable": [
																				{
																					"key": "node",
																					"value": "string",
																					"description": "(Required) The cluster node name."
																				},
																				{
																					"key": "vmid",
																					"value": "358786328",
																					"description": "(Required) The (unique) ID of the VM."
																				},
																				{
																					"key": "name",
																					"value": "AcFp",
																					"description": "(Required) Alias name."
																				}
																			]
																		},
																		"description": "Remove IP or Network alias."
																	},
																	"response": [
																		{
																			"name": "successful operation",
																			"originalRequest": {
																				"method": "DELETE",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/nodes/:node/lxc/:vmid/firewall/aliases/:name?digest=string",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"nodes",
																						":node",
																						"lxc",
																						":vmid",
																						"firewall",
																						"aliases",
																						":name"
																					],
																					"query": [
																						{
																							"key": "digest",
																							"value": "string",
																							"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
																						}
																					],
																					"variable": [
																						{
																							"key": "node"
																						},
																						{
																							"key": "vmid"
																						},
																						{
																							"key": "name"
																						}
																					]
																				}
																			},
																			"status": "OK",
																			"code": 200,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "null"
																		}
																	]
																},
																{
																	"name": "Read alias.",
																	"request": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/nodes/:node/lxc/:vmid/firewall/aliases/:name",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"nodes",
																				":node",
																				"lxc",
																				":vmid",
																				"firewall",
																				"aliases",
																				":name"
																			],
																			"variable": [
																				{
																					"key": "node",
																					"value": "string",
																					"description": "(Required) The cluster node name."
																				},
																				{
																					"key": "vmid",
																					"value": "358786328",
																					"description": "(Required) The (unique) ID of the VM."
																				},
																				{
																					"key": "name",
																					"value": "AcFp",
																					"description": "(Required) Alias name."
																				}
																			]
																		},
																		"description": "Read alias."
																	},
																	"response": [
																		{
																			"name": "successful operation",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/nodes/:node/lxc/:vmid/firewall/aliases/:name",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"nodes",
																						":node",
																						"lxc",
																						":vmid",
																						"firewall",
																						"aliases",
																						":name"
																					],
																					"variable": [
																						{
																							"key": "node"
																						},
																						{
																							"key": "vmid"
																						},
																						{
																							"key": "name"
																						}
																					]
																				}
																			},
																			"status": "OK",
																			"code": 200,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "{}"
																		}
																	]
																},
																{
																	"name": "Update IP or Network alias.",
																	"request": {
																		"method": "PUT",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/nodes/:node/lxc/:vmid/firewall/aliases/:name?cidr=string&comment=string&digest=string&rename=AcFp",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"nodes",
																				":node",
																				"lxc",
																				":vmid",
																				"firewall",
																				"aliases",
																				":name"
																			],
																			"query": [
																				{
																					"key": "cidr",
																					"value": "string",
																					"description": "(Required) Network/IP specification in CIDR format."
																				},
																				{
																					"key": "comment",
																					"value": "string"
																				},
																				{
																					"key": "digest",
																					"value": "string",
																					"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
																				},
																				{
																					"key": "rename",
																					"value": "AcFp",
																					"description": "Rename an existing alias."
																				}
																			],
																			"variable": [
																				{
																					"key": "node",
																					"value": "string",
																					"description": "(Required) The cluster node name."
																				},
																				{
																					"key": "vmid",
																					"value": "358786328",
																					"description": "(Required) The (unique) ID of the VM."
																				},
																				{
																					"key": "name",
																					"value": "AcFp",
																					"description": "(Required) Alias name."
																				}
																			]
																		},
																		"description": "Update IP or Network alias."
																	},
																	"response": [
																		{
																			"name": "successful operation",
																			"originalRequest": {
																				"method": "PUT",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/nodes/:node/lxc/:vmid/firewall/aliases/:name?cidr=string&comment=string&digest=string&rename=AcFp",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"nodes",
																						":node",
																						"lxc",
																						":vmid",
																						"firewall",
																						"aliases",
																						":name"
																					],
																					"query": [
																						{
																							"key": "cidr",
																							"value": "string",
																							"description": "(Required) Network/IP specification in CIDR format."
																						},
																						{
																							"key": "comment",
																							"value": "string"
																						},
																						{
																							"key": "digest",
																							"value": "string",
																							"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
																						},
																						{
																							"key": "rename",
																							"value": "AcFp",
																							"description": "Rename an existing alias."
																						}
																					],
																					"variable": [
																						{
																							"key": "node"
																						},
																						{
																							"key": "vmid"
																						},
																						{
																							"key": "name"
																						}
																					]
																				}
																			},
																			"status": "OK",
																			"code": 200,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "null"
																		}
																	]
																}
															]
														},
														{
															"name": "List aliases",
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/lxc/:vmid/firewall/aliases",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"lxc",
																		":vmid",
																		"firewall",
																		"aliases"
																	],
																	"variable": [
																		{
																			"key": "node",
																			"value": "string",
																			"description": "(Required) The cluster node name."
																		},
																		{
																			"key": "vmid",
																			"value": "358786328",
																			"description": "(Required) The (unique) ID of the VM."
																		}
																	]
																},
																"description": "List aliases"
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/nodes/:node/lxc/:vmid/firewall/aliases",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"nodes",
																				":node",
																				"lxc",
																				":vmid",
																				"firewall",
																				"aliases"
																			],
																			"variable": [
																				{
																					"key": "node"
																				},
																				{
																					"key": "vmid"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "[\n  {\n    \"cidr\": \"string\",\n    \"comment\": \"string\",\n    \"digest\": \"string\",\n    \"name\": \"string\"\n  },\n  {\n    \"cidr\": \"string\",\n    \"comment\": \"string\",\n    \"digest\": \"string\",\n    \"name\": \"string\"\n  }\n]"
																}
															]
														},
														{
															"name": "Create IP or Network Alias.",
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/lxc/:vmid/firewall/aliases?cidr=string&comment=string&name=AcFp",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"lxc",
																		":vmid",
																		"firewall",
																		"aliases"
																	],
																	"query": [
																		{
																			"key": "cidr",
																			"value": "string",
																			"description": "(Required) Network/IP specification in CIDR format."
																		},
																		{
																			"key": "comment",
																			"value": "string"
																		},
																		{
																			"key": "name",
																			"value": "AcFp",
																			"description": "(Required) Alias name."
																		}
																	],
																	"variable": [
																		{
																			"key": "node",
																			"value": "string",
																			"description": "(Required) The cluster node name."
																		},
																		{
																			"key": "vmid",
																			"value": "358786328",
																			"description": "(Required) The (unique) ID of the VM."
																		}
																	]
																},
																"description": "Create IP or Network Alias."
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/nodes/:node/lxc/:vmid/firewall/aliases?cidr=string&comment=string&name=AcFp",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"nodes",
																				":node",
																				"lxc",
																				":vmid",
																				"firewall",
																				"aliases"
																			],
																			"query": [
																				{
																					"key": "cidr",
																					"value": "string",
																					"description": "(Required) Network/IP specification in CIDR format."
																				},
																				{
																					"key": "comment",
																					"value": "string"
																				},
																				{
																					"key": "name",
																					"value": "AcFp",
																					"description": "(Required) Alias name."
																				}
																			],
																			"variable": [
																				{
																					"key": "node"
																				},
																				{
																					"key": "vmid"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "null"
																}
															]
														}
													]
												},
												{
													"name": "ipset",
													"item": [
														{
															"name": "{name}",
															"item": [
																{
																	"name": "{cidr}",
																	"item": [
																		{
																			"name": "Remove IP or Network from IPSet.",
																			"request": {
																				"method": "DELETE",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/nodes/:node/lxc/:vmid/firewall/ipset/:name/:cidr?digest=string",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"nodes",
																						":node",
																						"lxc",
																						":vmid",
																						"firewall",
																						"ipset",
																						":name",
																						":cidr"
																					],
																					"query": [
																						{
																							"key": "digest",
																							"value": "string",
																							"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
																						}
																					],
																					"variable": [
																						{
																							"key": "node",
																							"value": "string",
																							"description": "(Required) The cluster node name."
																						},
																						{
																							"key": "vmid",
																							"value": "358786328",
																							"description": "(Required) The (unique) ID of the VM."
																						},
																						{
																							"key": "name",
																							"value": "AcFp",
																							"description": "(Required) IP set name."
																						},
																						{
																							"key": "cidr",
																							"value": "string",
																							"description": "(Required) Network/IP specification in CIDR format."
																						}
																					]
																				},
																				"description": "Remove IP or Network from IPSet."
																			},
																			"response": [
																				{
																					"name": "successful operation",
																					"originalRequest": {
																						"method": "DELETE",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/nodes/:node/lxc/:vmid/firewall/ipset/:name/:cidr?digest=string",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"nodes",
																								":node",
																								"lxc",
																								":vmid",
																								"firewall",
																								"ipset",
																								":name",
																								":cidr"
																							],
																							"query": [
																								{
																									"key": "digest",
																									"value": "string",
																									"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
																								}
																							],
																							"variable": [
																								{
																									"key": "node"
																								},
																								{
																									"key": "vmid"
																								},
																								{
																									"key": "name"
																								},
																								{
																									"key": "cidr"
																								}
																							]
																						}
																					},
																					"status": "OK",
																					"code": 200,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "null"
																				}
																			]
																		},
																		{
																			"name": "Read IP or Network settings from IPSet.",
																			"request": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/nodes/:node/lxc/:vmid/firewall/ipset/:name/:cidr",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"nodes",
																						":node",
																						"lxc",
																						":vmid",
																						"firewall",
																						"ipset",
																						":name",
																						":cidr"
																					],
																					"variable": [
																						{
																							"key": "node",
																							"value": "string",
																							"description": "(Required) The cluster node name."
																						},
																						{
																							"key": "vmid",
																							"value": "358786328",
																							"description": "(Required) The (unique) ID of the VM."
																						},
																						{
																							"key": "name",
																							"value": "AcFp",
																							"description": "(Required) IP set name."
																						},
																						{
																							"key": "cidr",
																							"value": "string",
																							"description": "(Required) Network/IP specification in CIDR format."
																						}
																					]
																				},
																				"description": "Read IP or Network settings from IPSet."
																			},
																			"response": [
																				{
																					"name": "successful operation",
																					"originalRequest": {
																						"method": "GET",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/nodes/:node/lxc/:vmid/firewall/ipset/:name/:cidr",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"nodes",
																								":node",
																								"lxc",
																								":vmid",
																								"firewall",
																								"ipset",
																								":name",
																								":cidr"
																							],
																							"variable": [
																								{
																									"key": "node"
																								},
																								{
																									"key": "vmid"
																								},
																								{
																									"key": "name"
																								},
																								{
																									"key": "cidr"
																								}
																							]
																						}
																					},
																					"status": "OK",
																					"code": 200,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "{}"
																				}
																			]
																		},
																		{
																			"name": "Update IP or Network settings",
																			"request": {
																				"method": "PUT",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/nodes/:node/lxc/:vmid/firewall/ipset/:name/:cidr?comment=string&digest=string&nomatch=true",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"nodes",
																						":node",
																						"lxc",
																						":vmid",
																						"firewall",
																						"ipset",
																						":name",
																						":cidr"
																					],
																					"query": [
																						{
																							"key": "comment",
																							"value": "string"
																						},
																						{
																							"key": "digest",
																							"value": "string",
																							"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
																						},
																						{
																							"key": "nomatch",
																							"value": "true"
																						}
																					],
																					"variable": [
																						{
																							"key": "node",
																							"value": "string",
																							"description": "(Required) The cluster node name."
																						},
																						{
																							"key": "vmid",
																							"value": "358786328",
																							"description": "(Required) The (unique) ID of the VM."
																						},
																						{
																							"key": "name",
																							"value": "AcFp",
																							"description": "(Required) IP set name."
																						},
																						{
																							"key": "cidr",
																							"value": "string",
																							"description": "(Required) Network/IP specification in CIDR format."
																						}
																					]
																				},
																				"description": "Update IP or Network settings"
																			},
																			"response": [
																				{
																					"name": "successful operation",
																					"originalRequest": {
																						"method": "PUT",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/nodes/:node/lxc/:vmid/firewall/ipset/:name/:cidr?comment=string&digest=string&nomatch=true",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"nodes",
																								":node",
																								"lxc",
																								":vmid",
																								"firewall",
																								"ipset",
																								":name",
																								":cidr"
																							],
																							"query": [
																								{
																									"key": "comment",
																									"value": "string"
																								},
																								{
																									"key": "digest",
																									"value": "string",
																									"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
																								},
																								{
																									"key": "nomatch",
																									"value": "true"
																								}
																							],
																							"variable": [
																								{
																									"key": "node"
																								},
																								{
																									"key": "vmid"
																								},
																								{
																									"key": "name"
																								},
																								{
																									"key": "cidr"
																								}
																							]
																						}
																					},
																					"status": "OK",
																					"code": 200,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						}
																					],
																					"cookie": [],
																					"body": "null"
																				}
																			]
																		}
																	]
																},
																{
																	"name": "Delete IPSet",
																	"request": {
																		"method": "DELETE",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/nodes/:node/lxc/:vmid/firewall/ipset/:name?force=true",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"nodes",
																				":node",
																				"lxc",
																				":vmid",
																				"firewall",
																				"ipset",
																				":name"
																			],
																			"query": [
																				{
																					"key": "force",
																					"value": "true",
																					"description": "Delete all members of the IPSet, if there are any."
																				}
																			],
																			"variable": [
																				{
																					"key": "node",
																					"value": "string",
																					"description": "(Required) The cluster node name."
																				},
																				{
																					"key": "vmid",
																					"value": "358786328",
																					"description": "(Required) The (unique) ID of the VM."
																				},
																				{
																					"key": "name",
																					"value": "AcFp",
																					"description": "(Required) IP set name."
																				}
																			]
																		},
																		"description": "Delete IPSet"
																	},
																	"response": [
																		{
																			"name": "successful operation",
																			"originalRequest": {
																				"method": "DELETE",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/nodes/:node/lxc/:vmid/firewall/ipset/:name?force=true",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"nodes",
																						":node",
																						"lxc",
																						":vmid",
																						"firewall",
																						"ipset",
																						":name"
																					],
																					"query": [
																						{
																							"key": "force",
																							"value": "true",
																							"description": "Delete all members of the IPSet, if there are any."
																						}
																					],
																					"variable": [
																						{
																							"key": "node"
																						},
																						{
																							"key": "vmid"
																						},
																						{
																							"key": "name"
																						}
																					]
																				}
																			},
																			"status": "OK",
																			"code": 200,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "null"
																		}
																	]
																},
																{
																	"name": "List IPSet content",
																	"request": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/nodes/:node/lxc/:vmid/firewall/ipset/:name",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"nodes",
																				":node",
																				"lxc",
																				":vmid",
																				"firewall",
																				"ipset",
																				":name"
																			],
																			"variable": [
																				{
																					"key": "node",
																					"value": "string",
																					"description": "(Required) The cluster node name."
																				},
																				{
																					"key": "vmid",
																					"value": "358786328",
																					"description": "(Required) The (unique) ID of the VM."
																				},
																				{
																					"key": "name",
																					"value": "AcFp",
																					"description": "(Required) IP set name."
																				}
																			]
																		},
																		"description": "List IPSet content"
																	},
																	"response": [
																		{
																			"name": "successful operation",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/nodes/:node/lxc/:vmid/firewall/ipset/:name",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"nodes",
																						":node",
																						"lxc",
																						":vmid",
																						"firewall",
																						"ipset",
																						":name"
																					],
																					"variable": [
																						{
																							"key": "node"
																						},
																						{
																							"key": "vmid"
																						},
																						{
																							"key": "name"
																						}
																					]
																				}
																			},
																			"status": "OK",
																			"code": 200,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "[\n  {\n    \"cidr\": \"string\",\n    \"comment\": \"string\",\n    \"digest\": \"string\",\n    \"nomatch\": true\n  },\n  {\n    \"cidr\": \"string\",\n    \"comment\": \"string\",\n    \"digest\": \"string\",\n    \"nomatch\": true\n  }\n]"
																		}
																	]
																},
																{
																	"name": "Add IP or Network to IPSet.",
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/nodes/:node/lxc/:vmid/firewall/ipset/:name?cidr=string&comment=string&nomatch=true",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"nodes",
																				":node",
																				"lxc",
																				":vmid",
																				"firewall",
																				"ipset",
																				":name"
																			],
																			"query": [
																				{
																					"key": "cidr",
																					"value": "string",
																					"description": "(Required) Network/IP specification in CIDR format."
																				},
																				{
																					"key": "comment",
																					"value": "string"
																				},
																				{
																					"key": "nomatch",
																					"value": "true"
																				}
																			],
																			"variable": [
																				{
																					"key": "node",
																					"value": "string",
																					"description": "(Required) The cluster node name."
																				},
																				{
																					"key": "vmid",
																					"value": "358786328",
																					"description": "(Required) The (unique) ID of the VM."
																				},
																				{
																					"key": "name",
																					"value": "AcFp",
																					"description": "(Required) IP set name."
																				}
																			]
																		},
																		"description": "Add IP or Network to IPSet."
																	},
																	"response": [
																		{
																			"name": "successful operation",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/nodes/:node/lxc/:vmid/firewall/ipset/:name?cidr=string&comment=string&nomatch=true",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"nodes",
																						":node",
																						"lxc",
																						":vmid",
																						"firewall",
																						"ipset",
																						":name"
																					],
																					"query": [
																						{
																							"key": "cidr",
																							"value": "string",
																							"description": "(Required) Network/IP specification in CIDR format."
																						},
																						{
																							"key": "comment",
																							"value": "string"
																						},
																						{
																							"key": "nomatch",
																							"value": "true"
																						}
																					],
																					"variable": [
																						{
																							"key": "node"
																						},
																						{
																							"key": "vmid"
																						},
																						{
																							"key": "name"
																						}
																					]
																				}
																			},
																			"status": "OK",
																			"code": 200,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				}
																			],
																			"cookie": [],
																			"body": "null"
																		}
																	]
																}
															]
														},
														{
															"name": "List IPSets",
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/lxc/:vmid/firewall/ipset",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"lxc",
																		":vmid",
																		"firewall",
																		"ipset"
																	],
																	"variable": [
																		{
																			"key": "node",
																			"value": "string",
																			"description": "(Required) The cluster node name."
																		},
																		{
																			"key": "vmid",
																			"value": "358786328",
																			"description": "(Required) The (unique) ID of the VM."
																		}
																	]
																},
																"description": "List IPSets"
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/nodes/:node/lxc/:vmid/firewall/ipset",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"nodes",
																				":node",
																				"lxc",
																				":vmid",
																				"firewall",
																				"ipset"
																			],
																			"variable": [
																				{
																					"key": "node"
																				},
																				{
																					"key": "vmid"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "[\n  {\n    \"comment\": \"string\",\n    \"digest\": \"string\",\n    \"name\": \"l2MB_\"\n  },\n  {\n    \"comment\": \"string\",\n    \"digest\": \"string\",\n    \"name\": \"qM63zam-u8BC\"\n  }\n]"
																}
															]
														},
														{
															"name": "Create new IPSet",
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/lxc/:vmid/firewall/ipset?comment=string&digest=string&name=AcFp&rename=AcFp",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"lxc",
																		":vmid",
																		"firewall",
																		"ipset"
																	],
																	"query": [
																		{
																			"key": "comment",
																			"value": "string"
																		},
																		{
																			"key": "digest",
																			"value": "string",
																			"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
																		},
																		{
																			"key": "name",
																			"value": "AcFp",
																			"description": "(Required) IP set name."
																		},
																		{
																			"key": "rename",
																			"value": "AcFp",
																			"description": "Rename an existing IPSet. You can set 'rename' to the same value as 'name' to update the 'comment' of an existing IPSet."
																		}
																	],
																	"variable": [
																		{
																			"key": "node",
																			"value": "string",
																			"description": "(Required) The cluster node name."
																		},
																		{
																			"key": "vmid",
																			"value": "358786328",
																			"description": "(Required) The (unique) ID of the VM."
																		}
																	]
																},
																"description": "Create new IPSet"
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/nodes/:node/lxc/:vmid/firewall/ipset?comment=string&digest=string&name=AcFp&rename=AcFp",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"nodes",
																				":node",
																				"lxc",
																				":vmid",
																				"firewall",
																				"ipset"
																			],
																			"query": [
																				{
																					"key": "comment",
																					"value": "string"
																				},
																				{
																					"key": "digest",
																					"value": "string",
																					"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
																				},
																				{
																					"key": "name",
																					"value": "AcFp",
																					"description": "(Required) IP set name."
																				},
																				{
																					"key": "rename",
																					"value": "AcFp",
																					"description": "Rename an existing IPSet. You can set 'rename' to the same value as 'name' to update the 'comment' of an existing IPSet."
																				}
																			],
																			"variable": [
																				{
																					"key": "node"
																				},
																				{
																					"key": "vmid"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "null"
																}
															]
														}
													]
												},
												{
													"name": "options",
													"item": [
														{
															"name": "Get VM firewall options.",
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/lxc/:vmid/firewall/options",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"lxc",
																		":vmid",
																		"firewall",
																		"options"
																	],
																	"variable": [
																		{
																			"key": "node",
																			"value": "string",
																			"description": "(Required) The cluster node name."
																		},
																		{
																			"key": "vmid",
																			"value": "358786328",
																			"description": "(Required) The (unique) ID of the VM."
																		}
																	]
																},
																"description": "Get VM firewall options."
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/nodes/:node/lxc/:vmid/firewall/options",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"nodes",
																				":node",
																				"lxc",
																				":vmid",
																				"firewall",
																				"options"
																			],
																			"variable": [
																				{
																					"key": "node"
																				},
																				{
																					"key": "vmid"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"dhcp\": 0,\n  \"enable\": 0,\n  \"ipfilter\": false,\n  \"log_level_in\": \"nolog\",\n  \"log_level_out\": \"warning\",\n  \"macfilter\": 1,\n  \"ndp\": 0,\n  \"policy_in\": \"DROP\",\n  \"policy_out\": \"REJECT\",\n  \"radv\": false\n}"
																}
															]
														},
														{
															"name": "Set Firewall options.",
															"request": {
																"method": "PUT",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/lxc/:vmid/firewall/options?delete=string&dhcp=0&digest=string&enable=0&ipfilter=true&log_level_in=crit&log_level_out=crit&macfilter=1&ndp=0&policy_in=DROP&policy_out=DROP&radv=true",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"lxc",
																		":vmid",
																		"firewall",
																		"options"
																	],
																	"query": [
																		{
																			"key": "delete",
																			"value": "string",
																			"description": "A list of settings you want to delete."
																		},
																		{
																			"key": "dhcp",
																			"value": "0",
																			"description": "Enable DHCP."
																		},
																		{
																			"key": "digest",
																			"value": "string",
																			"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
																		},
																		{
																			"key": "enable",
																			"value": "0",
																			"description": "Enable/disable firewall rules."
																		},
																		{
																			"key": "ipfilter",
																			"value": "true",
																			"description": "Enable default IP filters. This is equivalent to adding an empty ipfilter-net<id> ipset for every interface. Such ipsets implicitly contain sane default restrictions such as restricting IPv6 link local addresses to the one derived from the interface's MAC address. For containers the configured IP addresses will be implicitly added."
																		},
																		{
																			"key": "log_level_in",
																			"value": "crit",
																			"description": "Log level for incoming traffic."
																		},
																		{
																			"key": "log_level_out",
																			"value": "crit",
																			"description": "Log level for outgoing traffic."
																		},
																		{
																			"key": "macfilter",
																			"value": "1",
																			"description": "Enable/disable MAC address filter."
																		},
																		{
																			"key": "ndp",
																			"value": "0",
																			"description": "Enable NDP (Neighbor Discovery Protocol)."
																		},
																		{
																			"key": "policy_in",
																			"value": "DROP",
																			"description": "Input policy."
																		},
																		{
																			"key": "policy_out",
																			"value": "DROP",
																			"description": "Output policy."
																		},
																		{
																			"key": "radv",
																			"value": "true",
																			"description": "Allow sending Router Advertisement."
																		}
																	],
																	"variable": [
																		{
																			"key": "node",
																			"value": "string",
																			"description": "(Required) The cluster node name."
																		},
																		{
																			"key": "vmid",
																			"value": "358786328",
																			"description": "(Required) The (unique) ID of the VM."
																		}
																	]
																},
																"description": "Set Firewall options."
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "PUT",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/nodes/:node/lxc/:vmid/firewall/options?delete=string&dhcp=0&digest=string&enable=0&ipfilter=true&log_level_in=crit&log_level_out=crit&macfilter=1&ndp=0&policy_in=DROP&policy_out=DROP&radv=true",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"nodes",
																				":node",
																				"lxc",
																				":vmid",
																				"firewall",
																				"options"
																			],
																			"query": [
																				{
																					"key": "delete",
																					"value": "string",
																					"description": "A list of settings you want to delete."
																				},
																				{
																					"key": "dhcp",
																					"value": "0",
																					"description": "Enable DHCP."
																				},
																				{
																					"key": "digest",
																					"value": "string",
																					"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
																				},
																				{
																					"key": "enable",
																					"value": "0",
																					"description": "Enable/disable firewall rules."
																				},
																				{
																					"key": "ipfilter",
																					"value": "true",
																					"description": "Enable default IP filters. This is equivalent to adding an empty ipfilter-net<id> ipset for every interface. Such ipsets implicitly contain sane default restrictions such as restricting IPv6 link local addresses to the one derived from the interface's MAC address. For containers the configured IP addresses will be implicitly added."
																				},
																				{
																					"key": "log_level_in",
																					"value": "crit",
																					"description": "Log level for incoming traffic."
																				},
																				{
																					"key": "log_level_out",
																					"value": "crit",
																					"description": "Log level for outgoing traffic."
																				},
																				{
																					"key": "macfilter",
																					"value": "1",
																					"description": "Enable/disable MAC address filter."
																				},
																				{
																					"key": "ndp",
																					"value": "0",
																					"description": "Enable NDP (Neighbor Discovery Protocol)."
																				},
																				{
																					"key": "policy_in",
																					"value": "DROP",
																					"description": "Input policy."
																				},
																				{
																					"key": "policy_out",
																					"value": "DROP",
																					"description": "Output policy."
																				},
																				{
																					"key": "radv",
																					"value": "true",
																					"description": "Allow sending Router Advertisement."
																				}
																			],
																			"variable": [
																				{
																					"key": "node"
																				},
																				{
																					"key": "vmid"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "null"
																}
															]
														}
													]
												},
												{
													"name": "log",
													"item": [
														{
															"name": "Read firewall log",
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/lxc/:vmid/firewall/log?limit=8248&since=8248&start=8248&until=8248",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"lxc",
																		":vmid",
																		"firewall",
																		"log"
																	],
																	"query": [
																		{
																			"key": "limit",
																			"value": "8248"
																		},
																		{
																			"key": "since",
																			"value": "8248",
																			"description": "Display log since this UNIX epoch."
																		},
																		{
																			"key": "start",
																			"value": "8248"
																		},
																		{
																			"key": "until",
																			"value": "8248",
																			"description": "Display log until this UNIX epoch."
																		}
																	],
																	"variable": [
																		{
																			"key": "node",
																			"value": "string",
																			"description": "(Required) The cluster node name."
																		},
																		{
																			"key": "vmid",
																			"value": "358786328",
																			"description": "(Required) The (unique) ID of the VM."
																		}
																	]
																},
																"description": "Read firewall log"
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/nodes/:node/lxc/:vmid/firewall/log?limit=8248&since=8248&start=8248&until=8248",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"nodes",
																				":node",
																				"lxc",
																				":vmid",
																				"firewall",
																				"log"
																			],
																			"query": [
																				{
																					"key": "limit",
																					"value": "8248"
																				},
																				{
																					"key": "since",
																					"value": "8248",
																					"description": "Display log since this UNIX epoch."
																				},
																				{
																					"key": "start",
																					"value": "8248"
																				},
																				{
																					"key": "until",
																					"value": "8248",
																					"description": "Display log until this UNIX epoch."
																				}
																			],
																			"variable": [
																				{
																					"key": "node"
																				},
																				{
																					"key": "vmid"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "[\n  {\n    \"n\": 6858,\n    \"t\": \"string\"\n  },\n  {\n    \"n\": 9106,\n    \"t\": \"string\"\n  }\n]"
																}
															]
														}
													]
												},
												{
													"name": "refs",
													"item": [
														{
															"name": "Lists possible IPSet/Alias reference which are allowed in source/dest properties.",
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/lxc/:vmid/firewall/refs?type=alias",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"lxc",
																		":vmid",
																		"firewall",
																		"refs"
																	],
																	"query": [
																		{
																			"key": "type",
																			"value": "alias",
																			"description": "Only list references of specified type."
																		}
																	],
																	"variable": [
																		{
																			"key": "node",
																			"value": "string",
																			"description": "(Required) The cluster node name."
																		},
																		{
																			"key": "vmid",
																			"value": "358786328",
																			"description": "(Required) The (unique) ID of the VM."
																		}
																	]
																},
																"description": "Lists possible IPSet/Alias reference which are allowed in source/dest properties."
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/nodes/:node/lxc/:vmid/firewall/refs?type=alias",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"nodes",
																				":node",
																				"lxc",
																				":vmid",
																				"firewall",
																				"refs"
																			],
																			"query": [
																				{
																					"key": "type",
																					"value": "alias",
																					"description": "Only list references of specified type."
																				}
																			],
																			"variable": [
																				{
																					"key": "node"
																				},
																				{
																					"key": "vmid"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "[\n  {\n    \"comment\": \"string\",\n    \"name\": \"string\",\n    \"ref\": \"string\",\n    \"scope\": \"string\",\n    \"type\": \"alias\"\n  },\n  {\n    \"comment\": \"string\",\n    \"name\": \"string\",\n    \"ref\": \"string\",\n    \"scope\": \"string\",\n    \"type\": \"ipset\"\n  }\n]"
																}
															]
														}
													]
												},
												{
													"name": "Directory index.",
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/lxc/:vmid/firewall",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"lxc",
																":vmid",
																"firewall"
															],
															"variable": [
																{
																	"key": "node",
																	"value": "string",
																	"description": "(Required) The cluster node name."
																},
																{
																	"key": "vmid",
																	"value": "358786328",
																	"description": "(Required) The (unique) ID of the VM."
																}
															]
														},
														"description": "Directory index."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/lxc/:vmid/firewall",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"lxc",
																		":vmid",
																		"firewall"
																	],
																	"variable": [
																		{
																			"key": "node"
																		},
																		{
																			"key": "vmid"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "[]"
														}
													]
												}
											]
										},
										{
											"name": "rrd",
											"item": [
												{
													"name": "Read VM RRD statistics (returns PNG)",
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/lxc/:vmid/rrd?cf=MAX&ds=string&timeframe=hour",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"lxc",
																":vmid",
																"rrd"
															],
															"query": [
																{
																	"key": "cf",
																	"value": "MAX",
																	"description": "The RRD consolidation function"
																},
																{
																	"key": "ds",
																	"value": "string",
																	"description": "(Required) The list of datasources you want to display."
																},
																{
																	"key": "timeframe",
																	"value": "hour",
																	"description": "(Required) Specify the time frame you are interested in."
																}
															],
															"variable": [
																{
																	"key": "node",
																	"value": "string",
																	"description": "(Required) The cluster node name."
																},
																{
																	"key": "vmid",
																	"value": "358786328",
																	"description": "(Required) The (unique) ID of the VM."
																}
															]
														},
														"description": "Read VM RRD statistics (returns PNG)"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/lxc/:vmid/rrd?cf=MAX&ds=string&timeframe=hour",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"lxc",
																		":vmid",
																		"rrd"
																	],
																	"query": [
																		{
																			"key": "cf",
																			"value": "MAX",
																			"description": "The RRD consolidation function"
																		},
																		{
																			"key": "ds",
																			"value": "string",
																			"description": "(Required) The list of datasources you want to display."
																		},
																		{
																			"key": "timeframe",
																			"value": "hour",
																			"description": "(Required) Specify the time frame you are interested in."
																		}
																	],
																	"variable": [
																		{
																			"key": "node"
																		},
																		{
																			"key": "vmid"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"filename\": \"string\"\n}"
														}
													]
												}
											]
										},
										{
											"name": "rrddata",
											"item": [
												{
													"name": "Read VM RRD statistics",
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/lxc/:vmid/rrddata?cf=MAX&timeframe=hour",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"lxc",
																":vmid",
																"rrddata"
															],
															"query": [
																{
																	"key": "cf",
																	"value": "MAX",
																	"description": "The RRD consolidation function"
																},
																{
																	"key": "timeframe",
																	"value": "hour",
																	"description": "(Required) Specify the time frame you are interested in."
																}
															],
															"variable": [
																{
																	"key": "node",
																	"value": "string",
																	"description": "(Required) The cluster node name."
																},
																{
																	"key": "vmid",
																	"value": "358786328",
																	"description": "(Required) The (unique) ID of the VM."
																}
															]
														},
														"description": "Read VM RRD statistics"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/lxc/:vmid/rrddata?cf=MAX&timeframe=hour",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"lxc",
																		":vmid",
																		"rrddata"
																	],
																	"query": [
																		{
																			"key": "cf",
																			"value": "MAX",
																			"description": "The RRD consolidation function"
																		},
																		{
																			"key": "timeframe",
																			"value": "hour",
																			"description": "(Required) Specify the time frame you are interested in."
																		}
																	],
																	"variable": [
																		{
																			"key": "node"
																		},
																		{
																			"key": "vmid"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "[]"
														}
													]
												}
											]
										},
										{
											"name": "vncproxy",
											"item": [
												{
													"name": "Creates a TCP VNC proxy connections.",
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/lxc/:vmid/vncproxy?height=741&websocket=true&width=880",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"lxc",
																":vmid",
																"vncproxy"
															],
															"query": [
																{
																	"key": "height",
																	"value": "741",
																	"description": "sets the height of the console in pixels."
																},
																{
																	"key": "websocket",
																	"value": "true",
																	"description": "use websocket instead of standard VNC."
																},
																{
																	"key": "width",
																	"value": "880",
																	"description": "sets the width of the console in pixels."
																}
															],
															"variable": [
																{
																	"key": "node",
																	"value": "string",
																	"description": "(Required) The cluster node name."
																},
																{
																	"key": "vmid",
																	"value": "358786328",
																	"description": "(Required) The (unique) ID of the VM."
																}
															]
														},
														"description": "Creates a TCP VNC proxy connections."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/lxc/:vmid/vncproxy?height=741&websocket=true&width=880",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"lxc",
																		":vmid",
																		"vncproxy"
																	],
																	"query": [
																		{
																			"key": "height",
																			"value": "741",
																			"description": "sets the height of the console in pixels."
																		},
																		{
																			"key": "websocket",
																			"value": "true",
																			"description": "use websocket instead of standard VNC."
																		},
																		{
																			"key": "width",
																			"value": "880",
																			"description": "sets the width of the console in pixels."
																		}
																	],
																	"variable": [
																		{
																			"key": "node"
																		},
																		{
																			"key": "vmid"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"cert\": \"string\",\n  \"port\": 5394,\n  \"ticket\": \"string\",\n  \"upid\": \"string\",\n  \"user\": \"string\"\n}"
														}
													]
												}
											]
										},
										{
											"name": "termproxy",
											"item": [
												{
													"name": "Creates a TCP proxy connection.",
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/lxc/:vmid/termproxy",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"lxc",
																":vmid",
																"termproxy"
															],
															"variable": [
																{
																	"key": "node",
																	"value": "string",
																	"description": "(Required) The cluster node name."
																},
																{
																	"key": "vmid",
																	"value": "358786328",
																	"description": "(Required) The (unique) ID of the VM."
																}
															]
														},
														"description": "Creates a TCP proxy connection."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/lxc/:vmid/termproxy",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"lxc",
																		":vmid",
																		"termproxy"
																	],
																	"variable": [
																		{
																			"key": "node"
																		},
																		{
																			"key": "vmid"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"port\": 1613,\n  \"ticket\": \"string\",\n  \"upid\": \"string\",\n  \"user\": \"string\"\n}"
														}
													]
												}
											]
										},
										{
											"name": "vncwebsocket",
											"item": [
												{
													"name": "Opens a weksocket for VNC traffic.",
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/lxc/:vmid/vncwebsocket?port=5902&vncticket=string",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"lxc",
																":vmid",
																"vncwebsocket"
															],
															"query": [
																{
																	"key": "port",
																	"value": "5902",
																	"description": "(Required) Port number returned by previous vncproxy call."
																},
																{
																	"key": "vncticket",
																	"value": "string",
																	"description": "(Required) Ticket from previous call to vncproxy."
																}
															],
															"variable": [
																{
																	"key": "node",
																	"value": "string",
																	"description": "(Required) The cluster node name."
																},
																{
																	"key": "vmid",
																	"value": "358786328",
																	"description": "(Required) The (unique) ID of the VM."
																}
															]
														},
														"description": "Opens a weksocket for VNC traffic."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/lxc/:vmid/vncwebsocket?port=5902&vncticket=string",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"lxc",
																		":vmid",
																		"vncwebsocket"
																	],
																	"query": [
																		{
																			"key": "port",
																			"value": "5902",
																			"description": "(Required) Port number returned by previous vncproxy call."
																		},
																		{
																			"key": "vncticket",
																			"value": "string",
																			"description": "(Required) Ticket from previous call to vncproxy."
																		}
																	],
																	"variable": [
																		{
																			"key": "node"
																		},
																		{
																			"key": "vmid"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"port\": \"string\"\n}"
														}
													]
												}
											]
										},
										{
											"name": "spiceproxy",
											"item": [
												{
													"name": "Returns a SPICE configuration to connect to the CT.",
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/lxc/:vmid/spiceproxy?proxy=string",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"lxc",
																":vmid",
																"spiceproxy"
															],
															"query": [
																{
																	"key": "proxy",
																	"value": "string",
																	"description": "SPICE proxy server. This can be used by the client to specify the proxy server. All nodes in a cluster runs 'spiceproxy', so it is up to the client to choose one. By default, we return the node where the VM is currently running. As reasonable setting is to use same node you use to connect to the API (This is window.location.hostname for the JS GUI)."
																}
															],
															"variable": [
																{
																	"key": "node",
																	"value": "string",
																	"description": "(Required) The cluster node name."
																},
																{
																	"key": "vmid",
																	"value": "358786328",
																	"description": "(Required) The (unique) ID of the VM."
																}
															]
														},
														"description": "Returns a SPICE configuration to connect to the CT."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/lxc/:vmid/spiceproxy?proxy=string",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"lxc",
																		":vmid",
																		"spiceproxy"
																	],
																	"query": [
																		{
																			"key": "proxy",
																			"value": "string",
																			"description": "SPICE proxy server. This can be used by the client to specify the proxy server. All nodes in a cluster runs 'spiceproxy', so it is up to the client to choose one. By default, we return the node where the VM is currently running. As reasonable setting is to use same node you use to connect to the API (This is window.location.hostname for the JS GUI)."
																		}
																	],
																	"variable": [
																		{
																			"key": "node"
																		},
																		{
																			"key": "vmid"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"host\": \"string\",\n  \"password\": \"string\",\n  \"proxy\": \"string\",\n  \"tls-port\": 4012,\n  \"type\": \"string\"\n}"
														}
													]
												}
											]
										},
										{
											"name": "remote_migrate",
											"item": [
												{
													"name": "Migrate the container to another cluster. Creates a new migration task. EXPERIMENTAL feature!",
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/lxc/:vmid/remote_migrate?bwlimit=migrate limit from datacenter or storage config&delete=0&online=true&restart=true&target-bridge=string&target-endpoint=string&target-storage=string&target-vmid=358786328&timeout=180",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"lxc",
																":vmid",
																"remote_migrate"
															],
															"query": [
																{
																	"key": "bwlimit",
																	"value": "migrate limit from datacenter or storage config",
																	"description": "Override I/O bandwidth limit (in KiB/s)."
																},
																{
																	"key": "delete",
																	"value": "0",
																	"description": "Delete the original CT and related data after successful migration. By default the original CT is kept on the source cluster in a stopped state."
																},
																{
																	"key": "online",
																	"value": "true",
																	"description": "Use online/live migration."
																},
																{
																	"key": "restart",
																	"value": "true",
																	"description": "Use restart migration"
																},
																{
																	"key": "target-bridge",
																	"value": "string",
																	"description": "(Required) Mapping from source to target bridges. Providing only a single bridge ID maps all source bridges to that bridge. Providing the special value '1' will map each source bridge to itself."
																},
																{
																	"key": "target-endpoint",
																	"value": "string",
																	"description": "(Required) Remote target endpoint"
																},
																{
																	"key": "target-storage",
																	"value": "string",
																	"description": "(Required) Mapping from source to target storages. Providing only a single storage ID maps all source storages to that storage. Providing the special value '1' will map each source storage to itself."
																},
																{
																	"key": "target-vmid",
																	"value": "358786328",
																	"description": "The (unique) ID of the VM."
																},
																{
																	"key": "timeout",
																	"value": "180",
																	"description": "Timeout in seconds for shutdown for restart migration"
																}
															],
															"variable": [
																{
																	"key": "node",
																	"value": "string",
																	"description": "(Required) The cluster node name."
																},
																{
																	"key": "vmid",
																	"value": "358786328",
																	"description": "(Required) The (unique) ID of the VM."
																}
															]
														},
														"description": "Migrate the container to another cluster. Creates a new migration task. EXPERIMENTAL feature!"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/lxc/:vmid/remote_migrate?bwlimit=migrate limit from datacenter or storage config&delete=0&online=true&restart=true&target-bridge=string&target-endpoint=string&target-storage=string&target-vmid=358786328&timeout=180",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"lxc",
																		":vmid",
																		"remote_migrate"
																	],
																	"query": [
																		{
																			"key": "bwlimit",
																			"value": "migrate limit from datacenter or storage config",
																			"description": "Override I/O bandwidth limit (in KiB/s)."
																		},
																		{
																			"key": "delete",
																			"value": "0",
																			"description": "Delete the original CT and related data after successful migration. By default the original CT is kept on the source cluster in a stopped state."
																		},
																		{
																			"key": "online",
																			"value": "true",
																			"description": "Use online/live migration."
																		},
																		{
																			"key": "restart",
																			"value": "true",
																			"description": "Use restart migration"
																		},
																		{
																			"key": "target-bridge",
																			"value": "string",
																			"description": "(Required) Mapping from source to target bridges. Providing only a single bridge ID maps all source bridges to that bridge. Providing the special value '1' will map each source bridge to itself."
																		},
																		{
																			"key": "target-endpoint",
																			"value": "string",
																			"description": "(Required) Remote target endpoint"
																		},
																		{
																			"key": "target-storage",
																			"value": "string",
																			"description": "(Required) Mapping from source to target storages. Providing only a single storage ID maps all source storages to that storage. Providing the special value '1' will map each source storage to itself."
																		},
																		{
																			"key": "target-vmid",
																			"value": "358786328",
																			"description": "The (unique) ID of the VM."
																		},
																		{
																			"key": "timeout",
																			"value": "180",
																			"description": "Timeout in seconds for shutdown for restart migration"
																		}
																	],
																	"variable": [
																		{
																			"key": "node"
																		},
																		{
																			"key": "vmid"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "string"
														}
													]
												}
											]
										},
										{
											"name": "migrate",
											"item": [
												{
													"name": "Get preconditions for migration.",
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/lxc/:vmid/migrate?target=string",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"lxc",
																":vmid",
																"migrate"
															],
															"query": [
																{
																	"key": "target",
																	"value": "string",
																	"description": "Target node."
																}
															],
															"variable": [
																{
																	"key": "node",
																	"value": "string",
																	"description": "(Required) The cluster node name."
																},
																{
																	"key": "vmid",
																	"value": "358786328",
																	"description": "(Required) The (unique) ID of the VM."
																}
															]
														},
														"description": "Get preconditions for migration."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/lxc/:vmid/migrate?target=string",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"lxc",
																		":vmid",
																		"migrate"
																	],
																	"query": [
																		{
																			"key": "target",
																			"value": "string",
																			"description": "Target node."
																		}
																	],
																	"variable": [
																		{
																			"key": "node"
																		},
																		{
																			"key": "vmid"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"allowed-nodes\": [\n    \"string\",\n    \"string\"\n  ],\n  \"dependent-ha-resources\": [\n    \"string\",\n    \"string\"\n  ],\n  \"not-allowed-nodes\": {\n    \"blocking-ha-resources\": [\n      {\n        \"cause\": \"resource-affinity\",\n        \"sid\": \"string\"\n      },\n      {\n        \"cause\": \"resource-affinity\",\n        \"sid\": \"string\"\n      }\n    ]\n  },\n  \"running\": true\n}"
														}
													]
												},
												{
													"name": "Migrate the container to another node. Creates a new migration task.",
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/lxc/:vmid/migrate?bwlimit=migrate limit from datacenter or storage config&online=true&restart=true&target=string&target-storage=string&timeout=180",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"lxc",
																":vmid",
																"migrate"
															],
															"query": [
																{
																	"key": "bwlimit",
																	"value": "migrate limit from datacenter or storage config",
																	"description": "Override I/O bandwidth limit (in KiB/s)."
																},
																{
																	"key": "online",
																	"value": "true",
																	"description": "Use online/live migration."
																},
																{
																	"key": "restart",
																	"value": "true",
																	"description": "Use restart migration"
																},
																{
																	"key": "target",
																	"value": "string",
																	"description": "(Required) Target node."
																},
																{
																	"key": "target-storage",
																	"value": "string",
																	"description": "Mapping from source to target storages. Providing only a single storage ID maps all source storages to that storage. Providing the special value '1' will map each source storage to itself."
																},
																{
																	"key": "timeout",
																	"value": "180",
																	"description": "Timeout in seconds for shutdown for restart migration"
																}
															],
															"variable": [
																{
																	"key": "node",
																	"value": "string",
																	"description": "(Required) The cluster node name."
																},
																{
																	"key": "vmid",
																	"value": "358786328",
																	"description": "(Required) The (unique) ID of the VM."
																}
															]
														},
														"description": "Migrate the container to another node. Creates a new migration task."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/lxc/:vmid/migrate?bwlimit=migrate limit from datacenter or storage config&online=true&restart=true&target=string&target-storage=string&timeout=180",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"lxc",
																		":vmid",
																		"migrate"
																	],
																	"query": [
																		{
																			"key": "bwlimit",
																			"value": "migrate limit from datacenter or storage config",
																			"description": "Override I/O bandwidth limit (in KiB/s)."
																		},
																		{
																			"key": "online",
																			"value": "true",
																			"description": "Use online/live migration."
																		},
																		{
																			"key": "restart",
																			"value": "true",
																			"description": "Use restart migration"
																		},
																		{
																			"key": "target",
																			"value": "string",
																			"description": "(Required) Target node."
																		},
																		{
																			"key": "target-storage",
																			"value": "string",
																			"description": "Mapping from source to target storages. Providing only a single storage ID maps all source storages to that storage. Providing the special value '1' will map each source storage to itself."
																		},
																		{
																			"key": "timeout",
																			"value": "180",
																			"description": "Timeout in seconds for shutdown for restart migration"
																		}
																	],
																	"variable": [
																		{
																			"key": "node"
																		},
																		{
																			"key": "vmid"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "string"
														}
													]
												}
											]
										},
										{
											"name": "feature",
											"item": [
												{
													"name": "Check if feature for virtual machine is available.",
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/lxc/:vmid/feature?feature=clone&snapname=string",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"lxc",
																":vmid",
																"feature"
															],
															"query": [
																{
																	"key": "feature",
																	"value": "clone",
																	"description": "(Required) Feature to check."
																},
																{
																	"key": "snapname",
																	"value": "string",
																	"description": "The name of the snapshot."
																}
															],
															"variable": [
																{
																	"key": "node",
																	"value": "string",
																	"description": "(Required) The cluster node name."
																},
																{
																	"key": "vmid",
																	"value": "358786328",
																	"description": "(Required) The (unique) ID of the VM."
																}
															]
														},
														"description": "Check if feature for virtual machine is available."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/lxc/:vmid/feature?feature=clone&snapname=string",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"lxc",
																		":vmid",
																		"feature"
																	],
																	"query": [
																		{
																			"key": "feature",
																			"value": "clone",
																			"description": "(Required) Feature to check."
																		},
																		{
																			"key": "snapname",
																			"value": "string",
																			"description": "The name of the snapshot."
																		}
																	],
																	"variable": [
																		{
																			"key": "node"
																		},
																		{
																			"key": "vmid"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"hasFeature\": false\n}"
														}
													]
												}
											]
										},
										{
											"name": "template",
											"item": [
												{
													"name": "Create a Template.",
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/lxc/:vmid/template",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"lxc",
																":vmid",
																"template"
															],
															"variable": [
																{
																	"key": "node",
																	"value": "string",
																	"description": "(Required) The cluster node name."
																},
																{
																	"key": "vmid",
																	"value": "358786328",
																	"description": "(Required) The (unique) ID of the VM."
																}
															]
														},
														"description": "Create a Template."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/lxc/:vmid/template",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"lxc",
																		":vmid",
																		"template"
																	],
																	"variable": [
																		{
																			"key": "node"
																		},
																		{
																			"key": "vmid"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "null"
														}
													]
												}
											]
										},
										{
											"name": "clone",
											"item": [
												{
													"name": "Create a container clone/copy",
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/lxc/:vmid/clone?bwlimit=clone limit from datacenter or storage config&description=string&full=true&hostname=string&newid=358786328&pool=string&snapname=string&storage=string&target=string",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"lxc",
																":vmid",
																"clone"
															],
															"query": [
																{
																	"key": "bwlimit",
																	"value": "clone limit from datacenter or storage config",
																	"description": "Override I/O bandwidth limit (in KiB/s)."
																},
																{
																	"key": "description",
																	"value": "string",
																	"description": "Description for the new CT."
																},
																{
																	"key": "full",
																	"value": "true",
																	"description": "Create a full copy of all disks. This is always done when you clone a normal CT. For CT templates, we try to create a linked clone by default."
																},
																{
																	"key": "hostname",
																	"value": "string",
																	"description": "Set a hostname for the new CT."
																},
																{
																	"key": "newid",
																	"value": "358786328",
																	"description": "(Required) VMID for the clone."
																},
																{
																	"key": "pool",
																	"value": "string",
																	"description": "Add the new CT to the specified pool."
																},
																{
																	"key": "snapname",
																	"value": "string",
																	"description": "The name of the snapshot."
																},
																{
																	"key": "storage",
																	"value": "string",
																	"description": "Target storage for full clone."
																},
																{
																	"key": "target",
																	"value": "string",
																	"description": "Target node. Only allowed if the original VM is on shared storage."
																}
															],
															"variable": [
																{
																	"key": "node",
																	"value": "string",
																	"description": "(Required) The cluster node name."
																},
																{
																	"key": "vmid",
																	"value": "358786328",
																	"description": "(Required) The (unique) ID of the VM."
																}
															]
														},
														"description": "Create a container clone/copy"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/lxc/:vmid/clone?bwlimit=clone limit from datacenter or storage config&description=string&full=true&hostname=string&newid=358786328&pool=string&snapname=string&storage=string&target=string",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"lxc",
																		":vmid",
																		"clone"
																	],
																	"query": [
																		{
																			"key": "bwlimit",
																			"value": "clone limit from datacenter or storage config",
																			"description": "Override I/O bandwidth limit (in KiB/s)."
																		},
																		{
																			"key": "description",
																			"value": "string",
																			"description": "Description for the new CT."
																		},
																		{
																			"key": "full",
																			"value": "true",
																			"description": "Create a full copy of all disks. This is always done when you clone a normal CT. For CT templates, we try to create a linked clone by default."
																		},
																		{
																			"key": "hostname",
																			"value": "string",
																			"description": "Set a hostname for the new CT."
																		},
																		{
																			"key": "newid",
																			"value": "358786328",
																			"description": "(Required) VMID for the clone."
																		},
																		{
																			"key": "pool",
																			"value": "string",
																			"description": "Add the new CT to the specified pool."
																		},
																		{
																			"key": "snapname",
																			"value": "string",
																			"description": "The name of the snapshot."
																		},
																		{
																			"key": "storage",
																			"value": "string",
																			"description": "Target storage for full clone."
																		},
																		{
																			"key": "target",
																			"value": "string",
																			"description": "Target node. Only allowed if the original VM is on shared storage."
																		}
																	],
																	"variable": [
																		{
																			"key": "node"
																		},
																		{
																			"key": "vmid"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "string"
														}
													]
												}
											]
										},
										{
											"name": "resize",
											"item": [
												{
													"name": "Resize a container mount point.",
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/lxc/:vmid/resize?digest=string&disk=mp191&size=3.2200K",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"lxc",
																":vmid",
																"resize"
															],
															"query": [
																{
																	"key": "digest",
																	"value": "string",
																	"description": "Prevent changes if current configuration file has different SHA1 digest. This can be used to prevent concurrent modifications."
																},
																{
																	"key": "disk",
																	"value": "mp191",
																	"description": "(Required) The disk you want to resize."
																},
																{
																	"key": "size",
																	"value": "3.2200K",
																	"description": "(Required) The new size. With the '+' sign the value is added to the actual size of the volume and without it, the value is taken as an absolute one. Shrinking disk size is not supported."
																}
															],
															"variable": [
																{
																	"key": "node",
																	"value": "string",
																	"description": "(Required) The cluster node name."
																},
																{
																	"key": "vmid",
																	"value": "358786328",
																	"description": "(Required) The (unique) ID of the VM."
																}
															]
														},
														"description": "Resize a container mount point."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/lxc/:vmid/resize?digest=string&disk=mp191&size=3.2200K",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"lxc",
																		":vmid",
																		"resize"
																	],
																	"query": [
																		{
																			"key": "digest",
																			"value": "string",
																			"description": "Prevent changes if current configuration file has different SHA1 digest. This can be used to prevent concurrent modifications."
																		},
																		{
																			"key": "disk",
																			"value": "mp191",
																			"description": "(Required) The disk you want to resize."
																		},
																		{
																			"key": "size",
																			"value": "3.2200K",
																			"description": "(Required) The new size. With the '+' sign the value is added to the actual size of the volume and without it, the value is taken as an absolute one. Shrinking disk size is not supported."
																		}
																	],
																	"variable": [
																		{
																			"key": "node"
																		},
																		{
																			"key": "vmid"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "string"
														}
													]
												}
											]
										},
										{
											"name": "move_volume",
											"item": [
												{
													"name": "Move a rootfs-/mp-volume to a different storage or to a different container.",
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/lxc/:vmid/move_volume?bwlimit=clone limit from datacenter or storage config&delete=0&digest=string&storage=string&target-digest=string&target-vmid=358786328&target-volume=unused21&volume=unused21",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"lxc",
																":vmid",
																"move_volume"
															],
															"query": [
																{
																	"key": "bwlimit",
																	"value": "clone limit from datacenter or storage config",
																	"description": "Override I/O bandwidth limit (in KiB/s)."
																},
																{
																	"key": "delete",
																	"value": "0",
																	"description": "Delete the original volume after successful copy. By default the original is kept as an unused volume entry."
																},
																{
																	"key": "digest",
																	"value": "string",
																	"description": "Prevent changes if current configuration file has different SHA1 \" .\n\t\t    \"digest. This can be used to prevent concurrent modifications."
																},
																{
																	"key": "storage",
																	"value": "string",
																	"description": "Target Storage."
																},
																{
																	"key": "target-digest",
																	"value": "string",
																	"description": "Prevent changes if current configuration file of the target \" .\n\t\t    \"container has a different SHA1 digest. This can be used to prevent \" .\n\t\t    \"concurrent modifications."
																},
																{
																	"key": "target-vmid",
																	"value": "358786328",
																	"description": "The (unique) ID of the VM."
																},
																{
																	"key": "target-volume",
																	"value": "unused21",
																	"description": "The config key the volume will be moved to. Default is the source volume key."
																},
																{
																	"key": "volume",
																	"value": "unused21",
																	"description": "(Required) Volume which will be moved."
																}
															],
															"variable": [
																{
																	"key": "node",
																	"value": "string",
																	"description": "(Required) The cluster node name."
																},
																{
																	"key": "vmid",
																	"value": "358786328",
																	"description": "(Required) The (unique) ID of the VM."
																}
															]
														},
														"description": "Move a rootfs-/mp-volume to a different storage or to a different container."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/lxc/:vmid/move_volume?bwlimit=clone limit from datacenter or storage config&delete=0&digest=string&storage=string&target-digest=string&target-vmid=358786328&target-volume=unused21&volume=unused21",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"lxc",
																		":vmid",
																		"move_volume"
																	],
																	"query": [
																		{
																			"key": "bwlimit",
																			"value": "clone limit from datacenter or storage config",
																			"description": "Override I/O bandwidth limit (in KiB/s)."
																		},
																		{
																			"key": "delete",
																			"value": "0",
																			"description": "Delete the original volume after successful copy. By default the original is kept as an unused volume entry."
																		},
																		{
																			"key": "digest",
																			"value": "string",
																			"description": "Prevent changes if current configuration file has different SHA1 \" .\n\t\t    \"digest. This can be used to prevent concurrent modifications."
																		},
																		{
																			"key": "storage",
																			"value": "string",
																			"description": "Target Storage."
																		},
																		{
																			"key": "target-digest",
																			"value": "string",
																			"description": "Prevent changes if current configuration file of the target \" .\n\t\t    \"container has a different SHA1 digest. This can be used to prevent \" .\n\t\t    \"concurrent modifications."
																		},
																		{
																			"key": "target-vmid",
																			"value": "358786328",
																			"description": "The (unique) ID of the VM."
																		},
																		{
																			"key": "target-volume",
																			"value": "unused21",
																			"description": "The config key the volume will be moved to. Default is the source volume key."
																		},
																		{
																			"key": "volume",
																			"value": "unused21",
																			"description": "(Required) Volume which will be moved."
																		}
																	],
																	"variable": [
																		{
																			"key": "node"
																		},
																		{
																			"key": "vmid"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "string"
														}
													]
												}
											]
										},
										{
											"name": "pending",
											"item": [
												{
													"name": "Get container configuration, including pending changes.",
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/lxc/:vmid/pending",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"lxc",
																":vmid",
																"pending"
															],
															"variable": [
																{
																	"key": "node",
																	"value": "string",
																	"description": "(Required) The cluster node name."
																},
																{
																	"key": "vmid",
																	"value": "358786328",
																	"description": "(Required) The (unique) ID of the VM."
																}
															]
														},
														"description": "Get container configuration, including pending changes."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/lxc/:vmid/pending",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"lxc",
																		":vmid",
																		"pending"
																	],
																	"variable": [
																		{
																			"key": "node"
																		},
																		{
																			"key": "vmid"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "[\n  {\n    \"delete\": 1,\n    \"key\": \"string\",\n    \"pending\": \"string\",\n    \"value\": \"string\"\n  },\n  {\n    \"delete\": 0,\n    \"key\": \"string\",\n    \"pending\": \"string\",\n    \"value\": \"string\"\n  }\n]"
														}
													]
												}
											]
										},
										{
											"name": "interfaces",
											"item": [
												{
													"name": "Get IP addresses of the specified container interface.",
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/lxc/:vmid/interfaces",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"lxc",
																":vmid",
																"interfaces"
															],
															"variable": [
																{
																	"key": "node",
																	"value": "string",
																	"description": "(Required) The cluster node name."
																},
																{
																	"key": "vmid",
																	"value": "358786328",
																	"description": "(Required) The (unique) ID of the VM."
																}
															]
														},
														"description": "Get IP addresses of the specified container interface."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/lxc/:vmid/interfaces",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"lxc",
																		":vmid",
																		"interfaces"
																	],
																	"variable": [
																		{
																			"key": "node"
																		},
																		{
																			"key": "vmid"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "[\n  {\n    \"hardware-address\": \"string\",\n    \"hwaddr\": \"string\",\n    \"inet\": \"string\",\n    \"inet6\": \"string\",\n    \"ip-addresses\": [\n      {\n        \"ip-address\": \"string\",\n        \"ip-address-type\": \"string\",\n        \"prefix\": 2108\n      },\n      {\n        \"ip-address\": \"string\",\n        \"ip-address-type\": \"string\",\n        \"prefix\": 7122\n      }\n    ],\n    \"name\": \"string\"\n  },\n  {\n    \"hardware-address\": \"string\",\n    \"hwaddr\": \"string\",\n    \"inet\": \"string\",\n    \"inet6\": \"string\",\n    \"ip-addresses\": [\n      {\n        \"ip-address\": \"string\",\n        \"ip-address-type\": \"string\",\n        \"prefix\": 1772\n      },\n      {\n        \"ip-address\": \"string\",\n        \"ip-address-type\": \"string\",\n        \"prefix\": 4252\n      }\n    ],\n    \"name\": \"string\"\n  }\n]"
														}
													]
												}
											]
										},
										{
											"name": "mtunnel",
											"item": [
												{
													"name": "Migration tunnel endpoint - only for internal use by CT migration.",
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/lxc/:vmid/mtunnel?bridges=string&storages=string",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"lxc",
																":vmid",
																"mtunnel"
															],
															"query": [
																{
																	"key": "bridges",
																	"value": "string",
																	"description": "List of network bridges to check availability. Will be checked again for actually used bridges during migration."
																},
																{
																	"key": "storages",
																	"value": "string",
																	"description": "List of storages to check permission and availability. Will be checked again for all actually used storages during migration."
																}
															],
															"variable": [
																{
																	"key": "node",
																	"value": "string",
																	"description": "(Required) The cluster node name."
																},
																{
																	"key": "vmid",
																	"value": "358786328",
																	"description": "(Required) The (unique) ID of the VM."
																}
															]
														},
														"description": "Migration tunnel endpoint - only for internal use by CT migration."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/lxc/:vmid/mtunnel?bridges=string&storages=string",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"lxc",
																		":vmid",
																		"mtunnel"
																	],
																	"query": [
																		{
																			"key": "bridges",
																			"value": "string",
																			"description": "List of network bridges to check availability. Will be checked again for actually used bridges during migration."
																		},
																		{
																			"key": "storages",
																			"value": "string",
																			"description": "List of storages to check permission and availability. Will be checked again for all actually used storages during migration."
																		}
																	],
																	"variable": [
																		{
																			"key": "node"
																		},
																		{
																			"key": "vmid"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"socket\": \"string\",\n  \"ticket\": \"string\",\n  \"upid\": \"string\"\n}"
														}
													]
												}
											]
										},
										{
											"name": "mtunnelwebsocket",
											"item": [
												{
													"name": "Migration tunnel endpoint for websocket upgrade - only for internal use by VM migration.",
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/lxc/:vmid/mtunnelwebsocket?socket=string&ticket=string",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"lxc",
																":vmid",
																"mtunnelwebsocket"
															],
															"query": [
																{
																	"key": "socket",
																	"value": "string",
																	"description": "(Required) unix socket to forward to"
																},
																{
																	"key": "ticket",
																	"value": "string",
																	"description": "(Required) ticket return by initial 'mtunnel' API call, or retrieved via 'ticket' tunnel command"
																}
															],
															"variable": [
																{
																	"key": "node",
																	"value": "string",
																	"description": "(Required) The cluster node name."
																},
																{
																	"key": "vmid",
																	"value": "358786328",
																	"description": "(Required) The (unique) ID of the VM."
																}
															]
														},
														"description": "Migration tunnel endpoint for websocket upgrade - only for internal use by VM migration."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/lxc/:vmid/mtunnelwebsocket?socket=string&ticket=string",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"lxc",
																		":vmid",
																		"mtunnelwebsocket"
																	],
																	"query": [
																		{
																			"key": "socket",
																			"value": "string",
																			"description": "(Required) unix socket to forward to"
																		},
																		{
																			"key": "ticket",
																			"value": "string",
																			"description": "(Required) ticket return by initial 'mtunnel' API call, or retrieved via 'ticket' tunnel command"
																		}
																	],
																	"variable": [
																		{
																			"key": "node"
																		},
																		{
																			"key": "vmid"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"port\": \"string\",\n  \"socket\": \"string\"\n}"
														}
													]
												}
											]
										},
										{
											"name": "Destroy the container (also delete all uses files).",
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/lxc/:vmid?destroy-unreferenced-disks=true&force=0&purge=0",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"lxc",
														":vmid"
													],
													"query": [
														{
															"key": "destroy-unreferenced-disks",
															"value": "true",
															"description": "If set, destroy additionally all disks with the VMID from all enabled storages which are not referenced in the config."
														},
														{
															"key": "force",
															"value": "0",
															"description": "Force destroy, even if running."
														},
														{
															"key": "purge",
															"value": "0",
															"description": "Remove container from all related configurations. For example, backup jobs, replication jobs or HA. Related ACLs and Firewall entries will *always* be removed."
														}
													],
													"variable": [
														{
															"key": "node",
															"value": "string",
															"description": "(Required) The cluster node name."
														},
														{
															"key": "vmid",
															"value": "358786328",
															"description": "(Required) The (unique) ID of the VM."
														}
													]
												},
												"description": "Destroy the container (also delete all uses files)."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/lxc/:vmid?destroy-unreferenced-disks=true&force=0&purge=0",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"lxc",
																":vmid"
															],
															"query": [
																{
																	"key": "destroy-unreferenced-disks",
																	"value": "true",
																	"description": "If set, destroy additionally all disks with the VMID from all enabled storages which are not referenced in the config."
																},
																{
																	"key": "force",
																	"value": "0",
																	"description": "Force destroy, even if running."
																},
																{
																	"key": "purge",
																	"value": "0",
																	"description": "Remove container from all related configurations. For example, backup jobs, replication jobs or HA. Related ACLs and Firewall entries will *always* be removed."
																}
															],
															"variable": [
																{
																	"key": "node"
																},
																{
																	"key": "vmid"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "string"
												}
											]
										},
										{
											"name": "Directory index",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/lxc/:vmid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"lxc",
														":vmid"
													],
													"variable": [
														{
															"key": "node",
															"value": "string",
															"description": "(Required) The cluster node name."
														},
														{
															"key": "vmid",
															"value": "358786328",
															"description": "(Required) The (unique) ID of the VM."
														}
													]
												},
												"description": "Directory index"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/lxc/:vmid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"lxc",
																":vmid"
															],
															"variable": [
																{
																	"key": "node"
																},
																{
																	"key": "vmid"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "[\n  {\n    \"subdir\": \"string\"\n  },\n  {\n    \"subdir\": \"string\"\n  }\n]"
												}
											]
										}
									]
								},
								{
									"name": "LXC container index (per node).",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/nodes/:node/lxc",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"nodes",
												":node",
												"lxc"
											],
											"variable": [
												{
													"key": "node",
													"value": "string",
													"description": "(Required) The cluster node name."
												}
											]
										},
										"description": "LXC container index (per node)."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/lxc",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"lxc"
													],
													"variable": [
														{
															"key": "node"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"cpu\": 8876.241069073669,\n    \"cpus\": 7721.006556456704,\n    \"disk\": 9627,\n    \"diskread\": 7723,\n    \"diskwrite\": 3837,\n    \"lock\": \"string\",\n    \"maxdisk\": 5078,\n    \"maxmem\": 4663,\n    \"maxswap\": 4198,\n    \"mem\": 4285,\n    \"name\": \"string\",\n    \"netin\": 224,\n    \"netout\": 2998,\n    \"pressurecpusome\": 4419.929906067439,\n    \"pressureiofull\": 7433.438828083367,\n    \"pressureiosome\": 6209.071321181296,\n    \"pressurememoryfull\": 5529.268969506195,\n    \"pressurememorysome\": 5572.128717607485,\n    \"status\": \"stopped\",\n    \"tags\": \"string\",\n    \"template\": 0,\n    \"uptime\": 7636,\n    \"vmid\": 807625535\n  },\n  {\n    \"cpu\": 201.3810514589931,\n    \"cpus\": 4858.514723813197,\n    \"disk\": 3585,\n    \"diskread\": 7557,\n    \"diskwrite\": 4990,\n    \"lock\": \"string\",\n    \"maxdisk\": 7333,\n    \"maxmem\": 3994,\n    \"maxswap\": 1360,\n    \"mem\": 1187,\n    \"name\": \"string\",\n    \"netin\": 6165,\n    \"netout\": 9630,\n    \"pressurecpusome\": 4877.507924569632,\n    \"pressureiofull\": 282.562505845525,\n    \"pressureiosome\": 4521.419812150389,\n    \"pressurememoryfull\": 6954.6208476120255,\n    \"pressurememorysome\": 6890.300280668509,\n    \"status\": \"running\",\n    \"tags\": \"string\",\n    \"template\": 0,\n    \"uptime\": 2032,\n    \"vmid\": 195706395\n  }\n]"
										}
									]
								},
								{
									"name": "Create or restore a container.",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/nodes/:node/lxc?arch=amd64&bwlimit=restore limit from datacenter or storage config&cmode=tty&console=1&cores=4035&cpulimit=0&cpuunits=cgroup v1: 1024, cgroup v2: 100&debug=0&description=string&dev[n]=string&features=string&force=true&hookscript=string&hostname=string&ignore-unpack-errors=true&lock=snapshot&memory=512&mp[n]=string&nameserver=string&net[n]=string&onboot=0&ostemplate=string&ostype=alpine&password=string&pool=string&protection=0&restore=true&rootfs=string&searchdomain=string&ssh-public-keys=string&start=0&startup=string&storage=local&swap=512&tags=string&template=0&timezone=string&tty=2&unique=true&unprivileged=0&unused[n]=string&vmid=358786328",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"nodes",
												":node",
												"lxc"
											],
											"query": [
												{
													"key": "arch",
													"value": "amd64",
													"description": "OS architecture type."
												},
												{
													"key": "bwlimit",
													"value": "restore limit from datacenter or storage config",
													"description": "Override I/O bandwidth limit (in KiB/s)."
												},
												{
													"key": "cmode",
													"value": "tty",
													"description": "Console mode. By default, the console command tries to open a connection to one of the available tty devices. By setting cmode to 'console' it tries to attach to /dev/console instead. If you set cmode to 'shell', it simply invokes a shell inside the container (no login)."
												},
												{
													"key": "console",
													"value": "1",
													"description": "Attach a console device (/dev/console) to the container."
												},
												{
													"key": "cores",
													"value": "4035",
													"description": "The number of cores assigned to the container. A container can use all available cores by default."
												},
												{
													"key": "cpulimit",
													"value": "0",
													"description": "Limit of CPU usage.\n\nNOTE: If the computer has 2 CPUs, it has a total of '2' CPU time. Value '0' indicates no CPU limit."
												},
												{
													"key": "cpuunits",
													"value": "cgroup v1: 1024, cgroup v2: 100",
													"description": "CPU weight for a container, will be clamped to [1, 10000] in cgroup v2."
												},
												{
													"key": "debug",
													"value": "0",
													"description": "Try to be more verbose. For now this only enables debug log-level on start."
												},
												{
													"key": "description",
													"value": "string",
													"description": "Description for the Container. Shown in the web-interface CT's summary. This is saved as comment inside the configuration file."
												},
												{
													"key": "dev[n]",
													"value": "string",
													"description": "Device to pass through to the container"
												},
												{
													"key": "features",
													"value": "string",
													"description": "Allow containers access to advanced features."
												},
												{
													"key": "force",
													"value": "true",
													"description": "Allow to overwrite existing container."
												},
												{
													"key": "hookscript",
													"value": "string",
													"description": "Script that will be executed during various steps in the containers lifetime."
												},
												{
													"key": "hostname",
													"value": "string",
													"description": "Set a host name for the container."
												},
												{
													"key": "ignore-unpack-errors",
													"value": "true",
													"description": "Ignore errors when extracting the template."
												},
												{
													"key": "lock",
													"value": "snapshot",
													"description": "Lock/unlock the container."
												},
												{
													"key": "memory",
													"value": "512",
													"description": "Amount of RAM for the container in MB."
												},
												{
													"key": "mp[n]",
													"value": "string",
													"description": "Use volume as container mount point. Use the special syntax STORAGE_ID:SIZE_IN_GiB to allocate a new volume."
												},
												{
													"key": "nameserver",
													"value": "string",
													"description": "Sets DNS server IP address for a container. Create will automatically use the setting from the host if you neither set searchdomain nor nameserver."
												},
												{
													"key": "net[n]",
													"value": "string",
													"description": "Specifies network interfaces for the container."
												},
												{
													"key": "onboot",
													"value": "0",
													"description": "Specifies whether a container will be started during system bootup."
												},
												{
													"key": "ostemplate",
													"value": "string",
													"description": "(Required) The OS template or backup file."
												},
												{
													"key": "ostype",
													"value": "alpine",
													"description": "OS type. This is used to setup configuration inside the container, and corresponds to lxc setup scripts in /usr/share/lxc/config/<ostype>.common.conf. Value 'unmanaged' can be used to skip and OS specific setup."
												},
												{
													"key": "password",
													"value": "string",
													"description": "Sets root password inside container."
												},
												{
													"key": "pool",
													"value": "string",
													"description": "Add the VM to the specified pool."
												},
												{
													"key": "protection",
													"value": "0",
													"description": "Sets the protection flag of the container. This will prevent the CT or CT's disk remove/update operation."
												},
												{
													"key": "restore",
													"value": "true",
													"description": "Mark this as restore task."
												},
												{
													"key": "rootfs",
													"value": "string",
													"description": "Use volume as container root."
												},
												{
													"key": "searchdomain",
													"value": "string",
													"description": "Sets DNS search domains for a container. Create will automatically use the setting from the host if you neither set searchdomain nor nameserver."
												},
												{
													"key": "ssh-public-keys",
													"value": "string",
													"description": "Setup public SSH keys (one key per line, OpenSSH format)."
												},
												{
													"key": "start",
													"value": "0",
													"description": "Start the CT after its creation finished successfully."
												},
												{
													"key": "startup",
													"value": "string",
													"description": "Startup and shutdown behavior. Order is a non-negative number defining the general startup order. Shutdown in done with reverse ordering. Additionally you can set the 'up' or 'down' delay in seconds, which specifies a delay to wait before the next VM is started or stopped."
												},
												{
													"key": "storage",
													"value": "local",
													"description": "Default Storage."
												},
												{
													"key": "swap",
													"value": "512",
													"description": "Amount of SWAP for the container in MB."
												},
												{
													"key": "tags",
													"value": "string",
													"description": "Tags of the Container. This is only meta information."
												},
												{
													"key": "template",
													"value": "0",
													"description": "Enable/disable Template."
												},
												{
													"key": "timezone",
													"value": "string",
													"description": "Time zone to use in the container. If option isn't set, then nothing will be done. Can be set to 'host' to match the host time zone, or an arbitrary time zone option from /usr/share/zoneinfo/zone.tab"
												},
												{
													"key": "tty",
													"value": "2",
													"description": "Specify the number of tty available to the container"
												},
												{
													"key": "unique",
													"value": "true",
													"description": "Assign a unique random ethernet address."
												},
												{
													"key": "unprivileged",
													"value": "0",
													"description": "Makes the container run as unprivileged user. (Should not be modified manually.)"
												},
												{
													"key": "unused[n]",
													"value": "string",
													"description": "Reference to unused volumes. This is used internally, and should not be modified manually."
												},
												{
													"key": "vmid",
													"value": "358786328",
													"description": "(Required) The (unique) ID of the VM."
												}
											],
											"variable": [
												{
													"key": "node",
													"value": "string",
													"description": "(Required) The cluster node name."
												}
											]
										},
										"description": "Create or restore a container."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/lxc?arch=amd64&bwlimit=restore limit from datacenter or storage config&cmode=tty&console=1&cores=4035&cpulimit=0&cpuunits=cgroup v1: 1024, cgroup v2: 100&debug=0&description=string&dev[n]=string&features=string&force=true&hookscript=string&hostname=string&ignore-unpack-errors=true&lock=snapshot&memory=512&mp[n]=string&nameserver=string&net[n]=string&onboot=0&ostemplate=string&ostype=alpine&password=string&pool=string&protection=0&restore=true&rootfs=string&searchdomain=string&ssh-public-keys=string&start=0&startup=string&storage=local&swap=512&tags=string&template=0&timezone=string&tty=2&unique=true&unprivileged=0&unused[n]=string&vmid=358786328",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"lxc"
													],
													"query": [
														{
															"key": "arch",
															"value": "amd64",
															"description": "OS architecture type."
														},
														{
															"key": "bwlimit",
															"value": "restore limit from datacenter or storage config",
															"description": "Override I/O bandwidth limit (in KiB/s)."
														},
														{
															"key": "cmode",
															"value": "tty",
															"description": "Console mode. By default, the console command tries to open a connection to one of the available tty devices. By setting cmode to 'console' it tries to attach to /dev/console instead. If you set cmode to 'shell', it simply invokes a shell inside the container (no login)."
														},
														{
															"key": "console",
															"value": "1",
															"description": "Attach a console device (/dev/console) to the container."
														},
														{
															"key": "cores",
															"value": "4035",
															"description": "The number of cores assigned to the container. A container can use all available cores by default."
														},
														{
															"key": "cpulimit",
															"value": "0",
															"description": "Limit of CPU usage.\n\nNOTE: If the computer has 2 CPUs, it has a total of '2' CPU time. Value '0' indicates no CPU limit."
														},
														{
															"key": "cpuunits",
															"value": "cgroup v1: 1024, cgroup v2: 100",
															"description": "CPU weight for a container, will be clamped to [1, 10000] in cgroup v2."
														},
														{
															"key": "debug",
															"value": "0",
															"description": "Try to be more verbose. For now this only enables debug log-level on start."
														},
														{
															"key": "description",
															"value": "string",
															"description": "Description for the Container. Shown in the web-interface CT's summary. This is saved as comment inside the configuration file."
														},
														{
															"key": "dev[n]",
															"value": "string",
															"description": "Device to pass through to the container"
														},
														{
															"key": "features",
															"value": "string",
															"description": "Allow containers access to advanced features."
														},
														{
															"key": "force",
															"value": "true",
															"description": "Allow to overwrite existing container."
														},
														{
															"key": "hookscript",
															"value": "string",
															"description": "Script that will be executed during various steps in the containers lifetime."
														},
														{
															"key": "hostname",
															"value": "string",
															"description": "Set a host name for the container."
														},
														{
															"key": "ignore-unpack-errors",
															"value": "true",
															"description": "Ignore errors when extracting the template."
														},
														{
															"key": "lock",
															"value": "snapshot",
															"description": "Lock/unlock the container."
														},
														{
															"key": "memory",
															"value": "512",
															"description": "Amount of RAM for the container in MB."
														},
														{
															"key": "mp[n]",
															"value": "string",
															"description": "Use volume as container mount point. Use the special syntax STORAGE_ID:SIZE_IN_GiB to allocate a new volume."
														},
														{
															"key": "nameserver",
															"value": "string",
															"description": "Sets DNS server IP address for a container. Create will automatically use the setting from the host if you neither set searchdomain nor nameserver."
														},
														{
															"key": "net[n]",
															"value": "string",
															"description": "Specifies network interfaces for the container."
														},
														{
															"key": "onboot",
															"value": "0",
															"description": "Specifies whether a container will be started during system bootup."
														},
														{
															"key": "ostemplate",
															"value": "string",
															"description": "(Required) The OS template or backup file."
														},
														{
															"key": "ostype",
															"value": "alpine",
															"description": "OS type. This is used to setup configuration inside the container, and corresponds to lxc setup scripts in /usr/share/lxc/config/<ostype>.common.conf. Value 'unmanaged' can be used to skip and OS specific setup."
														},
														{
															"key": "password",
															"value": "string",
															"description": "Sets root password inside container."
														},
														{
															"key": "pool",
															"value": "string",
															"description": "Add the VM to the specified pool."
														},
														{
															"key": "protection",
															"value": "0",
															"description": "Sets the protection flag of the container. This will prevent the CT or CT's disk remove/update operation."
														},
														{
															"key": "restore",
															"value": "true",
															"description": "Mark this as restore task."
														},
														{
															"key": "rootfs",
															"value": "string",
															"description": "Use volume as container root."
														},
														{
															"key": "searchdomain",
															"value": "string",
															"description": "Sets DNS search domains for a container. Create will automatically use the setting from the host if you neither set searchdomain nor nameserver."
														},
														{
															"key": "ssh-public-keys",
															"value": "string",
															"description": "Setup public SSH keys (one key per line, OpenSSH format)."
														},
														{
															"key": "start",
															"value": "0",
															"description": "Start the CT after its creation finished successfully."
														},
														{
															"key": "startup",
															"value": "string",
															"description": "Startup and shutdown behavior. Order is a non-negative number defining the general startup order. Shutdown in done with reverse ordering. Additionally you can set the 'up' or 'down' delay in seconds, which specifies a delay to wait before the next VM is started or stopped."
														},
														{
															"key": "storage",
															"value": "local",
															"description": "Default Storage."
														},
														{
															"key": "swap",
															"value": "512",
															"description": "Amount of SWAP for the container in MB."
														},
														{
															"key": "tags",
															"value": "string",
															"description": "Tags of the Container. This is only meta information."
														},
														{
															"key": "template",
															"value": "0",
															"description": "Enable/disable Template."
														},
														{
															"key": "timezone",
															"value": "string",
															"description": "Time zone to use in the container. If option isn't set, then nothing will be done. Can be set to 'host' to match the host time zone, or an arbitrary time zone option from /usr/share/zoneinfo/zone.tab"
														},
														{
															"key": "tty",
															"value": "2",
															"description": "Specify the number of tty available to the container"
														},
														{
															"key": "unique",
															"value": "true",
															"description": "Assign a unique random ethernet address."
														},
														{
															"key": "unprivileged",
															"value": "0",
															"description": "Makes the container run as unprivileged user. (Should not be modified manually.)"
														},
														{
															"key": "unused[n]",
															"value": "string",
															"description": "Reference to unused volumes. This is used internally, and should not be modified manually."
														},
														{
															"key": "vmid",
															"value": "358786328",
															"description": "(Required) The (unique) ID of the VM."
														}
													],
													"variable": [
														{
															"key": "node"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "string"
										}
									]
								}
							]
						},
						{
							"name": "ceph",
							"item": [
								{
									"name": "cfg",
									"item": [
										{
											"name": "raw",
											"item": [
												{
													"name": "Get the Ceph configuration file.",
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/ceph/cfg/raw",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"ceph",
																"cfg",
																"raw"
															],
															"variable": [
																{
																	"key": "node",
																	"value": "string",
																	"description": "(Required) The cluster node name."
																}
															]
														},
														"description": "Get the Ceph configuration file."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/ceph/cfg/raw",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"ceph",
																		"cfg",
																		"raw"
																	],
																	"variable": [
																		{
																			"key": "node"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "string"
														}
													]
												}
											]
										},
										{
											"name": "db",
											"item": [
												{
													"name": "Get the Ceph configuration database.",
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/ceph/cfg/db",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"ceph",
																"cfg",
																"db"
															],
															"variable": [
																{
																	"key": "node",
																	"value": "string",
																	"description": "(Required) The cluster node name."
																}
															]
														},
														"description": "Get the Ceph configuration database."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/ceph/cfg/db",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"ceph",
																		"cfg",
																		"db"
																	],
																	"variable": [
																		{
																			"key": "node"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "[\n  {\n    \"can_update_at_runtime\": false,\n    \"level\": \"string\",\n    \"mask\": \"string\",\n    \"name\": \"string\",\n    \"section\": \"string\",\n    \"value\": \"string\"\n  },\n  {\n    \"can_update_at_runtime\": true,\n    \"level\": \"string\",\n    \"mask\": \"string\",\n    \"name\": \"string\",\n    \"section\": \"string\",\n    \"value\": \"string\"\n  }\n]"
														}
													]
												}
											]
										},
										{
											"name": "value",
											"item": [
												{
													"name": "Get configured values from either the config file or config DB.",
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/ceph/cfg/value?config-keys=",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"ceph",
																"cfg",
																"value"
															],
															"query": [
																{
																	"key": "config-keys",
																	"value": "",
																	"description": "(Required) List of <section>:<config key> items."
																}
															],
															"variable": [
																{
																	"key": "node",
																	"value": "string",
																	"description": "(Required) The cluster node name."
																}
															]
														},
														"description": "Get configured values from either the config file or config DB."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/ceph/cfg/value?config-keys=",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"ceph",
																		"cfg",
																		"value"
																	],
																	"query": [
																		{
																			"key": "config-keys",
																			"value": "",
																			"description": "(Required) List of <section>:<config key> items."
																		}
																	],
																	"variable": [
																		{
																			"key": "node"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{}"
														}
													]
												}
											]
										},
										{
											"name": "Directory index.",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/ceph/cfg",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"ceph",
														"cfg"
													],
													"variable": [
														{
															"key": "node",
															"value": "string",
															"description": "(Required) The cluster node name."
														}
													]
												},
												"description": "Directory index."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/ceph/cfg",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"ceph",
																"cfg"
															],
															"variable": [
																{
																	"key": "node"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "[]"
												}
											]
										}
									]
								},
								{
									"name": "osd",
									"item": [
										{
											"name": "{osdid}",
											"item": [
												{
													"name": "metadata",
													"item": [
														{
															"name": "Get OSD details",
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/ceph/osd/:osdid/metadata",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"ceph",
																		"osd",
																		":osdid",
																		"metadata"
																	],
																	"variable": [
																		{
																			"key": "node",
																			"value": "string",
																			"description": "(Required) The cluster node name."
																		},
																		{
																			"key": "osdid",
																			"value": "5752",
																			"description": "(Required) OSD ID"
																		}
																	]
																},
																"description": "Get OSD details"
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/nodes/:node/ceph/osd/:osdid/metadata",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"nodes",
																				":node",
																				"ceph",
																				"osd",
																				":osdid",
																				"metadata"
																			],
																			"variable": [
																				{
																					"key": "node"
																				},
																				{
																					"key": "osdid"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"devices\": [\n    {\n      \"dev_node\": \"string\",\n      \"device\": \"wal\",\n      \"devices\": \"string\",\n      \"size\": 2323,\n      \"support_discard\": false,\n      \"type\": \"string\"\n    },\n    {\n      \"dev_node\": \"string\",\n      \"device\": \"db\",\n      \"devices\": \"string\",\n      \"size\": 7464,\n      \"support_discard\": false,\n      \"type\": \"string\"\n    }\n  ],\n  \"osd\": {\n    \"back_addr\": \"string\",\n    \"front_addr\": \"string\",\n    \"hb_back_addr\": \"string\",\n    \"hb_front_addr\": \"string\",\n    \"hostname\": \"string\",\n    \"id\": 4160,\n    \"mem_usage\": 7672,\n    \"osd_data\": \"string\",\n    \"osd_objectstore\": \"string\",\n    \"pid\": 3697,\n    \"version\": \"string\"\n  }\n}"
																}
															]
														}
													]
												},
												{
													"name": "lv-info",
													"item": [
														{
															"name": "Get OSD volume details",
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/ceph/osd/:osdid/lv-info?type=block",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"ceph",
																		"osd",
																		":osdid",
																		"lv-info"
																	],
																	"query": [
																		{
																			"key": "type",
																			"value": "block",
																			"description": "OSD device type"
																		}
																	],
																	"variable": [
																		{
																			"key": "node",
																			"value": "string",
																			"description": "(Required) The cluster node name."
																		},
																		{
																			"key": "osdid",
																			"value": "5752",
																			"description": "(Required) OSD ID"
																		}
																	]
																},
																"description": "Get OSD volume details"
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/nodes/:node/ceph/osd/:osdid/lv-info?type=block",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"nodes",
																				":node",
																				"ceph",
																				"osd",
																				":osdid",
																				"lv-info"
																			],
																			"query": [
																				{
																					"key": "type",
																					"value": "block",
																					"description": "OSD device type"
																				}
																			],
																			"variable": [
																				{
																					"key": "node"
																				},
																				{
																					"key": "osdid"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"creation_time\": \"string\",\n  \"lv_name\": \"string\",\n  \"lv_path\": \"string\",\n  \"lv_size\": 1193,\n  \"lv_uuid\": \"string\",\n  \"vg_name\": \"string\"\n}"
																}
															]
														}
													]
												},
												{
													"name": "in",
													"item": [
														{
															"name": "ceph osd in",
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/ceph/osd/:osdid/in",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"ceph",
																		"osd",
																		":osdid",
																		"in"
																	],
																	"variable": [
																		{
																			"key": "node",
																			"value": "string",
																			"description": "(Required) The cluster node name."
																		},
																		{
																			"key": "osdid",
																			"value": "5752",
																			"description": "(Required) OSD ID"
																		}
																	]
																},
																"description": "ceph osd in"
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/nodes/:node/ceph/osd/:osdid/in",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"nodes",
																				":node",
																				"ceph",
																				"osd",
																				":osdid",
																				"in"
																			],
																			"variable": [
																				{
																					"key": "node"
																				},
																				{
																					"key": "osdid"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "null"
																}
															]
														}
													]
												},
												{
													"name": "out",
													"item": [
														{
															"name": "ceph osd out",
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/ceph/osd/:osdid/out",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"ceph",
																		"osd",
																		":osdid",
																		"out"
																	],
																	"variable": [
																		{
																			"key": "node",
																			"value": "string",
																			"description": "(Required) The cluster node name."
																		},
																		{
																			"key": "osdid",
																			"value": "5752",
																			"description": "(Required) OSD ID"
																		}
																	]
																},
																"description": "ceph osd out"
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/nodes/:node/ceph/osd/:osdid/out",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"nodes",
																				":node",
																				"ceph",
																				"osd",
																				":osdid",
																				"out"
																			],
																			"variable": [
																				{
																					"key": "node"
																				},
																				{
																					"key": "osdid"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "null"
																}
															]
														}
													]
												},
												{
													"name": "scrub",
													"item": [
														{
															"name": "Instruct the OSD to scrub.",
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/ceph/osd/:osdid/scrub?deep=0",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"ceph",
																		"osd",
																		":osdid",
																		"scrub"
																	],
																	"query": [
																		{
																			"key": "deep",
																			"value": "0",
																			"description": "If set, instructs a deep scrub instead of a normal one."
																		}
																	],
																	"variable": [
																		{
																			"key": "node",
																			"value": "string",
																			"description": "(Required) The cluster node name."
																		},
																		{
																			"key": "osdid",
																			"value": "5752",
																			"description": "(Required) OSD ID"
																		}
																	]
																},
																"description": "Instruct the OSD to scrub."
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/nodes/:node/ceph/osd/:osdid/scrub?deep=0",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"nodes",
																				":node",
																				"ceph",
																				"osd",
																				":osdid",
																				"scrub"
																			],
																			"query": [
																				{
																					"key": "deep",
																					"value": "0",
																					"description": "If set, instructs a deep scrub instead of a normal one."
																				}
																			],
																			"variable": [
																				{
																					"key": "node"
																				},
																				{
																					"key": "osdid"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "null"
																}
															]
														}
													]
												},
												{
													"name": "Destroy OSD",
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/ceph/osd/:osdid?cleanup=0",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"ceph",
																"osd",
																":osdid"
															],
															"query": [
																{
																	"key": "cleanup",
																	"value": "0",
																	"description": "If set, we remove partition table entries."
																}
															],
															"variable": [
																{
																	"key": "node",
																	"value": "string",
																	"description": "(Required) The cluster node name."
																},
																{
																	"key": "osdid",
																	"value": "5752",
																	"description": "(Required) OSD ID"
																}
															]
														},
														"description": "Destroy OSD"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/ceph/osd/:osdid?cleanup=0",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"ceph",
																		"osd",
																		":osdid"
																	],
																	"query": [
																		{
																			"key": "cleanup",
																			"value": "0",
																			"description": "If set, we remove partition table entries."
																		}
																	],
																	"variable": [
																		{
																			"key": "node"
																		},
																		{
																			"key": "osdid"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "string"
														}
													]
												},
												{
													"name": "OSD index.",
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/ceph/osd/:osdid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"ceph",
																"osd",
																":osdid"
															],
															"variable": [
																{
																	"key": "node",
																	"value": "string",
																	"description": "(Required) The cluster node name."
																},
																{
																	"key": "osdid",
																	"value": "5752",
																	"description": "(Required) OSD ID"
																}
															]
														},
														"description": "OSD index."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/ceph/osd/:osdid",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"ceph",
																		"osd",
																		":osdid"
																	],
																	"variable": [
																		{
																			"key": "node"
																		},
																		{
																			"key": "osdid"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "[]"
														}
													]
												}
											]
										},
										{
											"name": "Get Ceph osd list/tree.",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/ceph/osd",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"ceph",
														"osd"
													],
													"variable": [
														{
															"key": "node",
															"value": "string",
															"description": "(Required) The cluster node name."
														}
													]
												},
												"description": "Get Ceph osd list/tree."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/ceph/osd",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"ceph",
																"osd"
															],
															"variable": [
																{
																	"key": "node"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{}"
												}
											]
										},
										{
											"name": "Create OSD",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/ceph/osd?crush-device-class=string&db_dev=string&db_dev_size=bluestore_block_db_size or 10% of OSD size&dev=string&encrypted=0&osds-per-device=5302&wal_dev=string&wal_dev_size=bluestore_block_wal_size or 1% of OSD size",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"ceph",
														"osd"
													],
													"query": [
														{
															"key": "crush-device-class",
															"value": "string",
															"description": "Set the device class of the OSD in crush."
														},
														{
															"key": "db_dev",
															"value": "string",
															"description": "Block device name for block.db."
														},
														{
															"key": "db_dev_size",
															"value": "bluestore_block_db_size or 10% of OSD size",
															"description": "Size in GiB for block.db."
														},
														{
															"key": "dev",
															"value": "string",
															"description": "(Required) Block device name."
														},
														{
															"key": "encrypted",
															"value": "0",
															"description": "Enables encryption of the OSD."
														},
														{
															"key": "osds-per-device",
															"value": "5302",
															"description": "OSD services per physical device. Only useful for fast NVMe devices\"\n\t\t    .\" to utilize their performance better."
														},
														{
															"key": "wal_dev",
															"value": "string",
															"description": "Block device name for block.wal."
														},
														{
															"key": "wal_dev_size",
															"value": "bluestore_block_wal_size or 1% of OSD size",
															"description": "Size in GiB for block.wal."
														}
													],
													"variable": [
														{
															"key": "node",
															"value": "string",
															"description": "(Required) The cluster node name."
														}
													]
												},
												"description": "Create OSD"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/ceph/osd?crush-device-class=string&db_dev=string&db_dev_size=bluestore_block_db_size or 10% of OSD size&dev=string&encrypted=0&osds-per-device=5302&wal_dev=string&wal_dev_size=bluestore_block_wal_size or 1% of OSD size",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"ceph",
																"osd"
															],
															"query": [
																{
																	"key": "crush-device-class",
																	"value": "string",
																	"description": "Set the device class of the OSD in crush."
																},
																{
																	"key": "db_dev",
																	"value": "string",
																	"description": "Block device name for block.db."
																},
																{
																	"key": "db_dev_size",
																	"value": "bluestore_block_db_size or 10% of OSD size",
																	"description": "Size in GiB for block.db."
																},
																{
																	"key": "dev",
																	"value": "string",
																	"description": "(Required) Block device name."
																},
																{
																	"key": "encrypted",
																	"value": "0",
																	"description": "Enables encryption of the OSD."
																},
																{
																	"key": "osds-per-device",
																	"value": "5302",
																	"description": "OSD services per physical device. Only useful for fast NVMe devices\"\n\t\t    .\" to utilize their performance better."
																},
																{
																	"key": "wal_dev",
																	"value": "string",
																	"description": "Block device name for block.wal."
																},
																{
																	"key": "wal_dev_size",
																	"value": "bluestore_block_wal_size or 1% of OSD size",
																	"description": "Size in GiB for block.wal."
																}
															],
															"variable": [
																{
																	"key": "node"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "string"
												}
											]
										}
									]
								},
								{
									"name": "mds",
									"item": [
										{
											"name": "{name}",
											"item": [
												{
													"name": "Destroy Ceph Metadata Server",
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/ceph/mds/:name",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"ceph",
																"mds",
																":name"
															],
															"variable": [
																{
																	"key": "node",
																	"value": "string",
																	"description": "(Required) The cluster node name."
																},
																{
																	"key": "name",
																	"value": "A",
																	"description": "(Required) The name (ID) of the mds"
																}
															]
														},
														"description": "Destroy Ceph Metadata Server"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/ceph/mds/:name",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"ceph",
																		"mds",
																		":name"
																	],
																	"variable": [
																		{
																			"key": "node"
																		},
																		{
																			"key": "name"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "string"
														}
													]
												},
												{
													"name": "Create Ceph Metadata Server (MDS)",
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/ceph/mds/:name?hotstandby=0",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"ceph",
																"mds",
																":name"
															],
															"query": [
																{
																	"key": "hotstandby",
																	"value": "0",
																	"description": "Determines whether a ceph-mds daemon should poll and replay the log of an active MDS. Faster switch on MDS failure, but needs more idle resources."
																}
															],
															"variable": [
																{
																	"key": "node",
																	"value": "string",
																	"description": "(Required) The cluster node name."
																},
																{
																	"key": "name",
																	"value": "nodename",
																	"description": "The ID for the mds, when omitted the same as the nodename"
																}
															]
														},
														"description": "Create Ceph Metadata Server (MDS)"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/ceph/mds/:name?hotstandby=0",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"ceph",
																		"mds",
																		":name"
																	],
																	"query": [
																		{
																			"key": "hotstandby",
																			"value": "0",
																			"description": "Determines whether a ceph-mds daemon should poll and replay the log of an active MDS. Faster switch on MDS failure, but needs more idle resources."
																		}
																	],
																	"variable": [
																		{
																			"key": "node"
																		},
																		{
																			"key": "name"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "string"
														}
													]
												}
											]
										},
										{
											"name": "MDS directory index.",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/ceph/mds",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"ceph",
														"mds"
													],
													"variable": [
														{
															"key": "node",
															"value": "string",
															"description": "(Required) The cluster node name."
														}
													]
												},
												"description": "MDS directory index."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/ceph/mds",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"ceph",
																"mds"
															],
															"variable": [
																{
																	"key": "node"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "[\n  {\n    \"addr\": \"string\",\n    \"host\": \"string\",\n    \"name\": \"string\",\n    \"rank\": 7375,\n    \"standby_replay\": false,\n    \"state\": \"string\"\n  },\n  {\n    \"addr\": \"string\",\n    \"host\": \"string\",\n    \"name\": \"string\",\n    \"rank\": 683,\n    \"standby_replay\": true,\n    \"state\": \"string\"\n  }\n]"
												}
											]
										}
									]
								},
								{
									"name": "mgr",
									"item": [
										{
											"name": "{id}",
											"item": [
												{
													"name": "Destroy Ceph Manager.",
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/ceph/mgr/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"ceph",
																"mgr",
																":id"
															],
															"variable": [
																{
																	"key": "node",
																	"value": "string",
																	"description": "(Required) The cluster node name."
																},
																{
																	"key": "id",
																	"value": "A",
																	"description": "(Required) The ID of the manager"
																}
															]
														},
														"description": "Destroy Ceph Manager."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/ceph/mgr/:id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"ceph",
																		"mgr",
																		":id"
																	],
																	"variable": [
																		{
																			"key": "node"
																		},
																		{
																			"key": "id"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "string"
														}
													]
												},
												{
													"name": "Create Ceph Manager",
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/ceph/mgr/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"ceph",
																"mgr",
																":id"
															],
															"variable": [
																{
																	"key": "node",
																	"value": "string",
																	"description": "(Required) The cluster node name."
																},
																{
																	"key": "id",
																	"value": "d1RqpSk5gl",
																	"description": "The ID for the manager, when omitted the same as the nodename"
																}
															]
														},
														"description": "Create Ceph Manager"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/ceph/mgr/:id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"ceph",
																		"mgr",
																		":id"
																	],
																	"variable": [
																		{
																			"key": "node"
																		},
																		{
																			"key": "id"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "string"
														}
													]
												}
											]
										},
										{
											"name": "MGR directory index.",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/ceph/mgr",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"ceph",
														"mgr"
													],
													"variable": [
														{
															"key": "node",
															"value": "string",
															"description": "(Required) The cluster node name."
														}
													]
												},
												"description": "MGR directory index."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/ceph/mgr",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"ceph",
																"mgr"
															],
															"variable": [
																{
																	"key": "node"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "[\n  {\n    \"addr\": \"string\",\n    \"host\": \"string\",\n    \"name\": \"string\",\n    \"state\": \"string\"\n  },\n  {\n    \"addr\": \"string\",\n    \"host\": \"string\",\n    \"name\": \"string\",\n    \"state\": \"string\"\n  }\n]"
												}
											]
										}
									]
								},
								{
									"name": "mon",
									"item": [
										{
											"name": "{monid}",
											"item": [
												{
													"name": "Destroy Ceph Monitor and Manager.",
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/ceph/mon/:monid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"ceph",
																"mon",
																":monid"
															],
															"variable": [
																{
																	"key": "node",
																	"value": "string",
																	"description": "(Required) The cluster node name."
																},
																{
																	"key": "monid",
																	"value": "A",
																	"description": "(Required) Monitor ID"
																}
															]
														},
														"description": "Destroy Ceph Monitor and Manager."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/ceph/mon/:monid",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"ceph",
																		"mon",
																		":monid"
																	],
																	"variable": [
																		{
																			"key": "node"
																		},
																		{
																			"key": "monid"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "string"
														}
													]
												},
												{
													"name": "Create Ceph Monitor and Manager",
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/ceph/mon/:monid?mon-address=string",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"ceph",
																"mon",
																":monid"
															],
															"query": [
																{
																	"key": "mon-address",
																	"value": "string",
																	"description": "Overwrites autodetected monitor IP address(es). Must be in the public network(s) of Ceph."
																}
															],
															"variable": [
																{
																	"key": "node",
																	"value": "string",
																	"description": "(Required) The cluster node name."
																},
																{
																	"key": "monid",
																	"value": "d1RqpSk5gl",
																	"description": "The ID for the monitor, when omitted the same as the nodename"
																}
															]
														},
														"description": "Create Ceph Monitor and Manager"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/ceph/mon/:monid?mon-address=string",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"ceph",
																		"mon",
																		":monid"
																	],
																	"query": [
																		{
																			"key": "mon-address",
																			"value": "string",
																			"description": "Overwrites autodetected monitor IP address(es). Must be in the public network(s) of Ceph."
																		}
																	],
																	"variable": [
																		{
																			"key": "node"
																		},
																		{
																			"key": "monid"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "string"
														}
													]
												}
											]
										},
										{
											"name": "Get Ceph monitor list.",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/ceph/mon",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"ceph",
														"mon"
													],
													"variable": [
														{
															"key": "node",
															"value": "string",
															"description": "(Required) The cluster node name."
														}
													]
												},
												"description": "Get Ceph monitor list."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/ceph/mon",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"ceph",
																"mon"
															],
															"variable": [
																{
																	"key": "node"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "[\n  {\n    \"addr\": \"string\",\n    \"ceph_version\": \"string\",\n    \"ceph_version_short\": \"string\",\n    \"direxists\": \"string\",\n    \"host\": false,\n    \"name\": \"string\",\n    \"quorum\": true,\n    \"rank\": 8465,\n    \"service\": 781,\n    \"state\": \"string\"\n  },\n  {\n    \"addr\": \"string\",\n    \"ceph_version\": \"string\",\n    \"ceph_version_short\": \"string\",\n    \"direxists\": \"string\",\n    \"host\": true,\n    \"name\": \"string\",\n    \"quorum\": true,\n    \"rank\": 1390,\n    \"service\": 9888,\n    \"state\": \"string\"\n  }\n]"
												}
											]
										}
									]
								},
								{
									"name": "fs",
									"item": [
										{
											"name": "{name}",
											"item": [
												{
													"name": "Create a Ceph filesystem",
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/ceph/fs/:name?add-storage=0&pg_num=128",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"ceph",
																"fs",
																":name"
															],
															"query": [
																{
																	"key": "add-storage",
																	"value": "0",
																	"description": "Configure the created CephFS as storage for this cluster."
																},
																{
																	"key": "pg_num",
																	"value": "128",
																	"description": "Number of placement groups for the backing data pool. The metadata pool will use a quarter of this."
																}
															],
															"variable": [
																{
																	"key": "node",
																	"value": "string",
																	"description": "(Required) The cluster node name."
																},
																{
																	"key": "name",
																	"value": "cephfs",
																	"description": "The ceph filesystem name."
																}
															]
														},
														"description": "Create a Ceph filesystem"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/ceph/fs/:name?add-storage=0&pg_num=128",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"ceph",
																		"fs",
																		":name"
																	],
																	"query": [
																		{
																			"key": "add-storage",
																			"value": "0",
																			"description": "Configure the created CephFS as storage for this cluster."
																		},
																		{
																			"key": "pg_num",
																			"value": "128",
																			"description": "Number of placement groups for the backing data pool. The metadata pool will use a quarter of this."
																		}
																	],
																	"variable": [
																		{
																			"key": "node"
																		},
																		{
																			"key": "name"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "string"
														}
													]
												}
											]
										},
										{
											"name": "Directory index.",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/ceph/fs",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"ceph",
														"fs"
													],
													"variable": [
														{
															"key": "node",
															"value": "string",
															"description": "(Required) The cluster node name."
														}
													]
												},
												"description": "Directory index."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/ceph/fs",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"ceph",
																"fs"
															],
															"variable": [
																{
																	"key": "node"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "[\n  {\n    \"data_pool\": \"string\",\n    \"metadata_pool\": \"string\",\n    \"name\": \"string\"\n  },\n  {\n    \"data_pool\": \"string\",\n    \"metadata_pool\": \"string\",\n    \"name\": \"string\"\n  }\n]"
												}
											]
										}
									]
								},
								{
									"name": "pool",
									"item": [
										{
											"name": "{name}",
											"item": [
												{
													"name": "status",
													"item": [
														{
															"name": "Show the current pool status.",
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/ceph/pool/:name/status?verbose=0",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"ceph",
																		"pool",
																		":name",
																		"status"
																	],
																	"query": [
																		{
																			"key": "verbose",
																			"value": "0",
																			"description": "If enabled, will display additional data(eg. statistics)."
																		}
																	],
																	"variable": [
																		{
																			"key": "node",
																			"value": "string",
																			"description": "(Required) The cluster node name."
																		},
																		{
																			"key": "name",
																			"value": "string",
																			"description": "(Required) The name of the pool. It must be unique."
																		}
																	]
																},
																"description": "Show the current pool status."
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/nodes/:node/ceph/pool/:name/status?verbose=0",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"nodes",
																				":node",
																				"ceph",
																				"pool",
																				":name",
																				"status"
																			],
																			"query": [
																				{
																					"key": "verbose",
																					"value": "0",
																					"description": "If enabled, will display additional data(eg. statistics)."
																				}
																			],
																			"variable": [
																				{
																					"key": "node"
																				},
																				{
																					"key": "name"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "null"
																}
															]
														}
													]
												},
												{
													"name": "Destroy pool",
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/ceph/pool/:name?force=0&remove_ecprofile=1&remove_storages=0",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"ceph",
																"pool",
																":name"
															],
															"query": [
																{
																	"key": "force",
																	"value": "0",
																	"description": "If true, destroys pool even if in use"
																},
																{
																	"key": "remove_ecprofile",
																	"value": "1",
																	"description": "Remove the erasure code profile. Defaults to true, if applicable."
																},
																{
																	"key": "remove_storages",
																	"value": "0",
																	"description": "Remove all pveceph-managed storages configured for this pool"
																}
															],
															"variable": [
																{
																	"key": "node",
																	"value": "string",
																	"description": "(Required) The cluster node name."
																},
																{
																	"key": "name",
																	"value": "string",
																	"description": "(Required) The name of the pool. It must be unique."
																}
															]
														},
														"description": "Destroy pool"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/ceph/pool/:name?force=0&remove_ecprofile=1&remove_storages=0",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"ceph",
																		"pool",
																		":name"
																	],
																	"query": [
																		{
																			"key": "force",
																			"value": "0",
																			"description": "If true, destroys pool even if in use"
																		},
																		{
																			"key": "remove_ecprofile",
																			"value": "1",
																			"description": "Remove the erasure code profile. Defaults to true, if applicable."
																		},
																		{
																			"key": "remove_storages",
																			"value": "0",
																			"description": "Remove all pveceph-managed storages configured for this pool"
																		}
																	],
																	"variable": [
																		{
																			"key": "node"
																		},
																		{
																			"key": "name"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "string"
														}
													]
												},
												{
													"name": "Pool index.",
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/ceph/pool/:name",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"ceph",
																"pool",
																":name"
															],
															"variable": [
																{
																	"key": "node",
																	"value": "string",
																	"description": "(Required) The cluster node name."
																},
																{
																	"key": "name",
																	"value": "string",
																	"description": "(Required) The name of the pool."
																}
															]
														},
														"description": "Pool index."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/ceph/pool/:name",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"ceph",
																		"pool",
																		":name"
																	],
																	"variable": [
																		{
																			"key": "node"
																		},
																		{
																			"key": "name"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "[]"
														}
													]
												},
												{
													"name": "Change POOL settings",
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/ceph/pool/:name?application=rgw&crush_rule=string&min_size=6&pg_autoscale_mode=warn&pg_num=24274&pg_num_min=20936&size=6&target_size=035&target_size_ratio=7384.569001378216",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"ceph",
																"pool",
																":name"
															],
															"query": [
																{
																	"key": "application",
																	"value": "rgw",
																	"description": "The application of the pool."
																},
																{
																	"key": "crush_rule",
																	"value": "string",
																	"description": "The rule to use for mapping object placement in the cluster."
																},
																{
																	"key": "min_size",
																	"value": "6",
																	"description": "Minimum number of replicas per object"
																},
																{
																	"key": "pg_autoscale_mode",
																	"value": "warn",
																	"description": "The automatic PG scaling mode of the pool."
																},
																{
																	"key": "pg_num",
																	"value": "24274",
																	"description": "Number of placement groups."
																},
																{
																	"key": "pg_num_min",
																	"value": "20936",
																	"description": "Minimal number of placement groups."
																},
																{
																	"key": "size",
																	"value": "6",
																	"description": "Number of replicas per object"
																},
																{
																	"key": "target_size",
																	"value": "035",
																	"description": "The estimated target size of the pool for the PG autoscaler."
																},
																{
																	"key": "target_size_ratio",
																	"value": "7384.569001378216",
																	"description": "The estimated target ratio of the pool for the PG autoscaler."
																}
															],
															"variable": [
																{
																	"key": "node",
																	"value": "string",
																	"description": "(Required) The cluster node name."
																},
																{
																	"key": "name",
																	"value": "",
																	"description": "(Required) The name of the pool. It must be unique."
																}
															]
														},
														"description": "Change POOL settings"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/ceph/pool/:name?application=rgw&crush_rule=string&min_size=6&pg_autoscale_mode=warn&pg_num=24274&pg_num_min=20936&size=6&target_size=035&target_size_ratio=7384.569001378216",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"ceph",
																		"pool",
																		":name"
																	],
																	"query": [
																		{
																			"key": "application",
																			"value": "rgw",
																			"description": "The application of the pool."
																		},
																		{
																			"key": "crush_rule",
																			"value": "string",
																			"description": "The rule to use for mapping object placement in the cluster."
																		},
																		{
																			"key": "min_size",
																			"value": "6",
																			"description": "Minimum number of replicas per object"
																		},
																		{
																			"key": "pg_autoscale_mode",
																			"value": "warn",
																			"description": "The automatic PG scaling mode of the pool."
																		},
																		{
																			"key": "pg_num",
																			"value": "24274",
																			"description": "Number of placement groups."
																		},
																		{
																			"key": "pg_num_min",
																			"value": "20936",
																			"description": "Minimal number of placement groups."
																		},
																		{
																			"key": "size",
																			"value": "6",
																			"description": "Number of replicas per object"
																		},
																		{
																			"key": "target_size",
																			"value": "035",
																			"description": "The estimated target size of the pool for the PG autoscaler."
																		},
																		{
																			"key": "target_size_ratio",
																			"value": "7384.569001378216",
																			"description": "The estimated target ratio of the pool for the PG autoscaler."
																		}
																	],
																	"variable": [
																		{
																			"key": "node"
																		},
																		{
																			"key": "name"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "string"
														}
													]
												}
											]
										},
										{
											"name": "List all pools and their settings (which are settable by the POST/PUT endpoints).",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/ceph/pool",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"ceph",
														"pool"
													],
													"variable": [
														{
															"key": "node",
															"value": "string",
															"description": "(Required) The cluster node name."
														}
													]
												},
												"description": "List all pools and their settings (which are settable by the POST/PUT endpoints)."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/ceph/pool",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"ceph",
																"pool"
															],
															"variable": [
																{
																	"key": "node"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "[\n  {\n    \"application_metadata\": {},\n    \"autoscale_status\": {},\n    \"bytes_used\": 4978,\n    \"crush_rule\": 7235,\n    \"crush_rule_name\": \"string\",\n    \"min_size\": 3323,\n    \"percent_used\": 7637.887412705275,\n    \"pg_autoscale_mode\": \"string\",\n    \"pg_num\": 6776,\n    \"pg_num_final\": 3004,\n    \"pg_num_min\": 8916,\n    \"pool\": 5053,\n    \"pool_name\": \"string\",\n    \"size\": 3217,\n    \"target_size\": 9183,\n    \"target_size_ratio\": 7206.114940559319,\n    \"type\": \"replicated\"\n  },\n  {\n    \"application_metadata\": {},\n    \"autoscale_status\": {},\n    \"bytes_used\": 6241,\n    \"crush_rule\": 387,\n    \"crush_rule_name\": \"string\",\n    \"min_size\": 1229,\n    \"percent_used\": 3169.5386926343103,\n    \"pg_autoscale_mode\": \"string\",\n    \"pg_num\": 9018,\n    \"pg_num_final\": 9986,\n    \"pg_num_min\": 4446,\n    \"pool\": 9076,\n    \"pool_name\": \"string\",\n    \"size\": 9390,\n    \"target_size\": 8119,\n    \"target_size_ratio\": 729.3625174586449,\n    \"type\": \"erasure\"\n  }\n]"
												}
											]
										},
										{
											"name": "Create Ceph pool",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/ceph/pool?add_storages=0; for erasure coded pools: 1&application=rbd&crush_rule=string&erasure-coding=string&min_size=2&name=&pg_autoscale_mode=warn&pg_num=128&pg_num_min=20936&size=3&target_size=035&target_size_ratio=7384.569001378216",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"ceph",
														"pool"
													],
													"query": [
														{
															"key": "add_storages",
															"value": "0; for erasure coded pools: 1",
															"description": "Configure VM and CT storage using the new pool."
														},
														{
															"key": "application",
															"value": "rbd",
															"description": "The application of the pool."
														},
														{
															"key": "crush_rule",
															"value": "string",
															"description": "The rule to use for mapping object placement in the cluster."
														},
														{
															"key": "erasure-coding",
															"value": "string",
															"description": "Create an erasure coded pool for RBD with an accompaning replicated pool for metadata storage. With EC, the common ceph options 'size', 'min_size' and 'crush_rule' parameters will be applied to the metadata pool."
														},
														{
															"key": "min_size",
															"value": "2",
															"description": "Minimum number of replicas per object"
														},
														{
															"key": "name",
															"value": "",
															"description": "(Required) The name of the pool. It must be unique."
														},
														{
															"key": "pg_autoscale_mode",
															"value": "warn",
															"description": "The automatic PG scaling mode of the pool."
														},
														{
															"key": "pg_num",
															"value": "128",
															"description": "Number of placement groups."
														},
														{
															"key": "pg_num_min",
															"value": "20936",
															"description": "Minimal number of placement groups."
														},
														{
															"key": "size",
															"value": "3",
															"description": "Number of replicas per object"
														},
														{
															"key": "target_size",
															"value": "035",
															"description": "The estimated target size of the pool for the PG autoscaler."
														},
														{
															"key": "target_size_ratio",
															"value": "7384.569001378216",
															"description": "The estimated target ratio of the pool for the PG autoscaler."
														}
													],
													"variable": [
														{
															"key": "node",
															"value": "string",
															"description": "(Required) The cluster node name."
														}
													]
												},
												"description": "Create Ceph pool"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/ceph/pool?add_storages=0; for erasure coded pools: 1&application=rbd&crush_rule=string&erasure-coding=string&min_size=2&name=&pg_autoscale_mode=warn&pg_num=128&pg_num_min=20936&size=3&target_size=035&target_size_ratio=7384.569001378216",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"ceph",
																"pool"
															],
															"query": [
																{
																	"key": "add_storages",
																	"value": "0; for erasure coded pools: 1",
																	"description": "Configure VM and CT storage using the new pool."
																},
																{
																	"key": "application",
																	"value": "rbd",
																	"description": "The application of the pool."
																},
																{
																	"key": "crush_rule",
																	"value": "string",
																	"description": "The rule to use for mapping object placement in the cluster."
																},
																{
																	"key": "erasure-coding",
																	"value": "string",
																	"description": "Create an erasure coded pool for RBD with an accompaning replicated pool for metadata storage. With EC, the common ceph options 'size', 'min_size' and 'crush_rule' parameters will be applied to the metadata pool."
																},
																{
																	"key": "min_size",
																	"value": "2",
																	"description": "Minimum number of replicas per object"
																},
																{
																	"key": "name",
																	"value": "",
																	"description": "(Required) The name of the pool. It must be unique."
																},
																{
																	"key": "pg_autoscale_mode",
																	"value": "warn",
																	"description": "The automatic PG scaling mode of the pool."
																},
																{
																	"key": "pg_num",
																	"value": "128",
																	"description": "Number of placement groups."
																},
																{
																	"key": "pg_num_min",
																	"value": "20936",
																	"description": "Minimal number of placement groups."
																},
																{
																	"key": "size",
																	"value": "3",
																	"description": "Number of replicas per object"
																},
																{
																	"key": "target_size",
																	"value": "035",
																	"description": "The estimated target size of the pool for the PG autoscaler."
																},
																{
																	"key": "target_size_ratio",
																	"value": "7384.569001378216",
																	"description": "The estimated target ratio of the pool for the PG autoscaler."
																}
															],
															"variable": [
																{
																	"key": "node"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "string"
												}
											]
										}
									]
								},
								{
									"name": "init",
									"item": [
										{
											"name": "Create initial ceph default configuration and setup symlinks.",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/ceph/init?cluster-network=string&disable_cephx=0&min_size=2&network=string&pg_bits=6&size=3",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"ceph",
														"init"
													],
													"query": [
														{
															"key": "cluster-network",
															"value": "string",
															"description": "Declare a separate cluster network, OSDs will routeheartbeat, object replication and recovery traffic over it"
														},
														{
															"key": "disable_cephx",
															"value": "0",
															"description": "Disable cephx authentication.\n\nWARNING: cephx is a security feature protecting against man-in-the-middle attacks. Only consider disabling cephx if your network is private!"
														},
														{
															"key": "min_size",
															"value": "2",
															"description": "Minimum number of available replicas per object to allow I/O"
														},
														{
															"key": "network",
															"value": "string",
															"description": "Use specific network for all ceph related traffic"
														},
														{
															"key": "pg_bits",
															"value": "6",
															"description": "Placement group bits, used to specify the default number of placement groups.\n\nDepreacted. This setting was deprecated in recent Ceph versions."
														},
														{
															"key": "size",
															"value": "3",
															"description": "Targeted number of replicas per object"
														}
													],
													"variable": [
														{
															"key": "node",
															"value": "string",
															"description": "(Required) The cluster node name."
														}
													]
												},
												"description": "Create initial ceph default configuration and setup symlinks."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/ceph/init?cluster-network=string&disable_cephx=0&min_size=2&network=string&pg_bits=6&size=3",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"ceph",
																"init"
															],
															"query": [
																{
																	"key": "cluster-network",
																	"value": "string",
																	"description": "Declare a separate cluster network, OSDs will routeheartbeat, object replication and recovery traffic over it"
																},
																{
																	"key": "disable_cephx",
																	"value": "0",
																	"description": "Disable cephx authentication.\n\nWARNING: cephx is a security feature protecting against man-in-the-middle attacks. Only consider disabling cephx if your network is private!"
																},
																{
																	"key": "min_size",
																	"value": "2",
																	"description": "Minimum number of available replicas per object to allow I/O"
																},
																{
																	"key": "network",
																	"value": "string",
																	"description": "Use specific network for all ceph related traffic"
																},
																{
																	"key": "pg_bits",
																	"value": "6",
																	"description": "Placement group bits, used to specify the default number of placement groups.\n\nDepreacted. This setting was deprecated in recent Ceph versions."
																},
																{
																	"key": "size",
																	"value": "3",
																	"description": "Targeted number of replicas per object"
																}
															],
															"variable": [
																{
																	"key": "node"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "null"
												}
											]
										}
									]
								},
								{
									"name": "stop",
									"item": [
										{
											"name": "Stop ceph services.",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/ceph/stop?service=ceph.target",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"ceph",
														"stop"
													],
													"query": [
														{
															"key": "service",
															"value": "ceph.target",
															"description": "Ceph service name."
														}
													],
													"variable": [
														{
															"key": "node",
															"value": "string",
															"description": "(Required) The cluster node name."
														}
													]
												},
												"description": "Stop ceph services."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/ceph/stop?service=ceph.target",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"ceph",
																"stop"
															],
															"query": [
																{
																	"key": "service",
																	"value": "ceph.target",
																	"description": "Ceph service name."
																}
															],
															"variable": [
																{
																	"key": "node"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "string"
												}
											]
										}
									]
								},
								{
									"name": "start",
									"item": [
										{
											"name": "Start ceph services.",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/ceph/start?service=ceph.target",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"ceph",
														"start"
													],
													"query": [
														{
															"key": "service",
															"value": "ceph.target",
															"description": "Ceph service name."
														}
													],
													"variable": [
														{
															"key": "node",
															"value": "string",
															"description": "(Required) The cluster node name."
														}
													]
												},
												"description": "Start ceph services."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/ceph/start?service=ceph.target",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"ceph",
																"start"
															],
															"query": [
																{
																	"key": "service",
																	"value": "ceph.target",
																	"description": "Ceph service name."
																}
															],
															"variable": [
																{
																	"key": "node"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "string"
												}
											]
										}
									]
								},
								{
									"name": "restart",
									"item": [
										{
											"name": "Restart ceph services.",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/ceph/restart?service=ceph.target",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"ceph",
														"restart"
													],
													"query": [
														{
															"key": "service",
															"value": "ceph.target",
															"description": "Ceph service name."
														}
													],
													"variable": [
														{
															"key": "node",
															"value": "string",
															"description": "(Required) The cluster node name."
														}
													]
												},
												"description": "Restart ceph services."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/ceph/restart?service=ceph.target",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"ceph",
																"restart"
															],
															"query": [
																{
																	"key": "service",
																	"value": "ceph.target",
																	"description": "Ceph service name."
																}
															],
															"variable": [
																{
																	"key": "node"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "string"
												}
											]
										}
									]
								},
								{
									"name": "status",
									"item": [
										{
											"name": "Get ceph status.",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/ceph/status",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"ceph",
														"status"
													],
													"variable": [
														{
															"key": "node",
															"value": "string",
															"description": "(Required) The cluster node name."
														}
													]
												},
												"description": "Get ceph status."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/ceph/status",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"ceph",
																"status"
															],
															"variable": [
																{
																	"key": "node"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{}"
												}
											]
										}
									]
								},
								{
									"name": "crush",
									"item": [
										{
											"name": "Get OSD crush map",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/ceph/crush",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"ceph",
														"crush"
													],
													"variable": [
														{
															"key": "node",
															"value": "string",
															"description": "(Required) The cluster node name."
														}
													]
												},
												"description": "Get OSD crush map"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/ceph/crush",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"ceph",
																"crush"
															],
															"variable": [
																{
																	"key": "node"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "string"
												}
											]
										}
									]
								},
								{
									"name": "log",
									"item": [
										{
											"name": "Read ceph log",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/ceph/log?limit=8248&start=8248",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"ceph",
														"log"
													],
													"query": [
														{
															"key": "limit",
															"value": "8248"
														},
														{
															"key": "start",
															"value": "8248"
														}
													],
													"variable": [
														{
															"key": "node",
															"value": "string",
															"description": "(Required) The cluster node name."
														}
													]
												},
												"description": "Read ceph log"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/ceph/log?limit=8248&start=8248",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"ceph",
																"log"
															],
															"query": [
																{
																	"key": "limit",
																	"value": "8248"
																},
																{
																	"key": "start",
																	"value": "8248"
																}
															],
															"variable": [
																{
																	"key": "node"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "[\n  {\n    \"n\": 6858,\n    \"t\": \"string\"\n  },\n  {\n    \"n\": 9106,\n    \"t\": \"string\"\n  }\n]"
												}
											]
										}
									]
								},
								{
									"name": "rules",
									"item": [
										{
											"name": "List ceph rules.",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/ceph/rules",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"ceph",
														"rules"
													],
													"variable": [
														{
															"key": "node",
															"value": "string",
															"description": "(Required) The cluster node name."
														}
													]
												},
												"description": "List ceph rules."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/ceph/rules",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"ceph",
																"rules"
															],
															"variable": [
																{
																	"key": "node"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "[\n  {\n    \"name\": \"string\"\n  },\n  {\n    \"name\": \"string\"\n  }\n]"
												}
											]
										}
									]
								},
								{
									"name": "cmd-safety",
									"item": [
										{
											"name": "Heuristical check if it is safe to perform an action.",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/ceph/cmd-safety?action=stop&id=string&service=mon",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"ceph",
														"cmd-safety"
													],
													"query": [
														{
															"key": "action",
															"value": "stop",
															"description": "(Required) Action to check"
														},
														{
															"key": "id",
															"value": "string",
															"description": "(Required) ID of the service"
														},
														{
															"key": "service",
															"value": "mon",
															"description": "(Required) Service type"
														}
													],
													"variable": [
														{
															"key": "node",
															"value": "string",
															"description": "(Required) The cluster node name."
														}
													]
												},
												"description": "Heuristical check if it is safe to perform an action."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/ceph/cmd-safety?action=stop&id=string&service=mon",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"ceph",
																"cmd-safety"
															],
															"query": [
																{
																	"key": "action",
																	"value": "stop",
																	"description": "(Required) Action to check"
																},
																{
																	"key": "id",
																	"value": "string",
																	"description": "(Required) ID of the service"
																},
																{
																	"key": "service",
																	"value": "mon",
																	"description": "(Required) Service type"
																}
															],
															"variable": [
																{
																	"key": "node"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"safe\": true,\n  \"status\": \"string\"\n}"
												}
											]
										}
									]
								},
								{
									"name": "Directory index.",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/nodes/:node/ceph",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"nodes",
												":node",
												"ceph"
											],
											"variable": [
												{
													"key": "node",
													"value": "string",
													"description": "(Required) The cluster node name."
												}
											]
										},
										"description": "Directory index."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/ceph",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"ceph"
													],
													"variable": [
														{
															"key": "node"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[]"
										}
									]
								}
							]
						},
						{
							"name": "vzdump",
							"item": [
								{
									"name": "defaults",
									"item": [
										{
											"name": "Get the currently configured vzdump defaults.",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/vzdump/defaults?storage=string",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"vzdump",
														"defaults"
													],
													"query": [
														{
															"key": "storage",
															"value": "string",
															"description": "The storage identifier."
														}
													],
													"variable": [
														{
															"key": "node",
															"value": "string",
															"description": "(Required) The cluster node name."
														}
													]
												},
												"description": "Get the currently configured vzdump defaults."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/vzdump/defaults?storage=string",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"vzdump",
																"defaults"
															],
															"query": [
																{
																	"key": "storage",
																	"value": "string",
																	"description": "The storage identifier."
																}
															],
															"variable": [
																{
																	"key": "node"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"all\": 0,\n  \"bwlimit\": 0,\n  \"compress\": \"0\",\n  \"dumpdir\": \"string\",\n  \"exclude\": \"string\",\n  \"exclude-path\": [\n    \"string\",\n    \"string\"\n  ],\n  \"fleecing\": \"string\",\n  \"ionice\": 7,\n  \"lockwait\": 180,\n  \"mailnotification\": \"always\",\n  \"mailto\": \"string\",\n  \"maxfiles\": 257,\n  \"mode\": \"snapshot\",\n  \"node\": \"string\",\n  \"notes-template\": \"string\",\n  \"notification-mode\": \"auto\",\n  \"pbs-change-detection-mode\": \"legacy\",\n  \"performance\": \"string\",\n  \"pigz\": 0,\n  \"pool\": \"string\",\n  \"protected\": false,\n  \"prune-backups\": \"keep-all=1\",\n  \"quiet\": 0,\n  \"remove\": 1,\n  \"script\": \"string\",\n  \"stdexcludes\": 1,\n  \"stop\": 0,\n  \"stopwait\": 10,\n  \"storage\": \"string\",\n  \"tmpdir\": \"string\",\n  \"vmid\": \"string\",\n  \"zstd\": 1\n}"
												}
											]
										}
									]
								},
								{
									"name": "extractconfig",
									"item": [
										{
											"name": "Extract configuration from vzdump backup archive.",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/vzdump/extractconfig?volume=string",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"vzdump",
														"extractconfig"
													],
													"query": [
														{
															"key": "volume",
															"value": "string",
															"description": "(Required) Volume identifier"
														}
													],
													"variable": [
														{
															"key": "node",
															"value": "string",
															"description": "(Required) The cluster node name."
														}
													]
												},
												"description": "Extract configuration from vzdump backup archive."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/vzdump/extractconfig?volume=string",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"vzdump",
																"extractconfig"
															],
															"query": [
																{
																	"key": "volume",
																	"value": "string",
																	"description": "(Required) Volume identifier"
																}
															],
															"variable": [
																{
																	"key": "node"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "string"
												}
											]
										}
									]
								},
								{
									"name": "Create backup.",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/nodes/:node/vzdump?all=0&bwlimit=0&compress=0&dumpdir=string&exclude=string&fleecing=string&ionice=7&job-id=HSrnRu+&lockwait=180&mailnotification=always&mailto=string&maxfiles=5741&mode=snapshot&notes-template=string&notification-mode=auto&pbs-change-detection-mode=legacy&performance=string&pigz=0&pool=string&protected=true&prune-backups=keep-all=1&quiet=0&remove=1&script=string&stdexcludes=1&stdout=true&stop=0&stopwait=10&storage=string&tmpdir=string&vmid=string&zstd=1",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"nodes",
												":node",
												"vzdump"
											],
											"query": [
												{
													"key": "all",
													"value": "0",
													"description": "Backup all known guest systems on this host."
												},
												{
													"key": "bwlimit",
													"value": "0",
													"description": "Limit I/O bandwidth (in KiB/s)."
												},
												{
													"key": "compress",
													"value": "0",
													"description": "Compress dump file."
												},
												{
													"key": "dumpdir",
													"value": "string",
													"description": "Store resulting files to specified directory."
												},
												{
													"key": "exclude",
													"value": "string",
													"description": "Exclude specified guest systems (assumes --all)"
												},
												{
													"key": "fleecing",
													"value": "string",
													"description": "Options for backup fleecing (VM only)."
												},
												{
													"key": "ionice",
													"value": "7",
													"description": "Set IO priority when using the BFQ scheduler. For snapshot and suspend mode backups of VMs, this only affects the compressor. A value of 8 means the idle priority is used, otherwise the best-effort priority is used with the specified value."
												},
												{
													"key": "job-id",
													"value": "HSrnRu+",
													"description": "The ID of the backup job. If set, the 'backup-job' metadata field of the backup notification will be set to this value. Only root@pam can set this parameter."
												},
												{
													"key": "lockwait",
													"value": "180",
													"description": "Maximal time to wait for the global lock (minutes)."
												},
												{
													"key": "mailnotification",
													"value": "always",
													"description": "Deprecated: use notification targets/matchers instead. Specify when to send a notification mail"
												},
												{
													"key": "mailto",
													"value": "string",
													"description": "Deprecated: Use notification targets/matchers instead. Comma-separated list of email addresses or users that should receive email notifications."
												},
												{
													"key": "maxfiles",
													"value": "5741",
													"description": "Deprecated: use 'prune-backups' instead. Maximal number of backup files per guest system."
												},
												{
													"key": "mode",
													"value": "snapshot",
													"description": "Backup mode."
												},
												{
													"key": "notes-template",
													"value": "string",
													"description": "Template string for generating notes for the backup(s). It can contain variables which will be replaced by their values. Currently supported are {{cluster}}, {{guestname}}, {{node}}, and {{vmid}}, but more might be added in the future. Needs to be a single line, newline and backslash need to be escaped as '\\n' and '\\\\' respectively."
												},
												{
													"key": "notification-mode",
													"value": "auto",
													"description": "Determine which notification system to use. If set to 'legacy-sendmail', vzdump will consider the mailto/mailnotification parameters and send emails to the specified address(es) via the 'sendmail' command. If set to 'notification-system', a notification will be sent via PVE's notification system, and the mailto and mailnotification will be ignored. If set to 'auto' (default setting), an email will be sent if mailto is set, and the notification system will be used if not."
												},
												{
													"key": "pbs-change-detection-mode",
													"value": "legacy",
													"description": "PBS mode used to detect file changes and switch encoding format for container backups."
												},
												{
													"key": "performance",
													"value": "string",
													"description": "Other performance-related settings."
												},
												{
													"key": "pigz",
													"value": "0",
													"description": "Use pigz instead of gzip when N>0. N=1 uses half of cores, N>1 uses N as thread count."
												},
												{
													"key": "pool",
													"value": "string",
													"description": "Backup all known guest systems included in the specified pool."
												},
												{
													"key": "protected",
													"value": "true",
													"description": "If true, mark backup(s) as protected."
												},
												{
													"key": "prune-backups",
													"value": "keep-all=1",
													"description": "Use these retention options instead of those from the storage configuration."
												},
												{
													"key": "quiet",
													"value": "0",
													"description": "Be quiet."
												},
												{
													"key": "remove",
													"value": "1",
													"description": "Prune older backups according to 'prune-backups'."
												},
												{
													"key": "script",
													"value": "string",
													"description": "Use specified hook script."
												},
												{
													"key": "stdexcludes",
													"value": "1",
													"description": "Exclude temporary files and logs."
												},
												{
													"key": "stdout",
													"value": "true",
													"description": "Write tar to stdout, not to a file."
												},
												{
													"key": "stop",
													"value": "0",
													"description": "Stop running backup jobs on this host."
												},
												{
													"key": "stopwait",
													"value": "10",
													"description": "Maximal time to wait until a guest system is stopped (minutes)."
												},
												{
													"key": "storage",
													"value": "string",
													"description": "Store resulting file to this storage."
												},
												{
													"key": "tmpdir",
													"value": "string",
													"description": "Store temporary files to specified directory."
												},
												{
													"key": "vmid",
													"value": "string",
													"description": "The ID of the guest system you want to backup."
												},
												{
													"key": "zstd",
													"value": "1",
													"description": "Zstd threads. N=0 uses half of the available cores, if N is set to a value bigger than 0, N is used as thread count."
												}
											],
											"variable": [
												{
													"key": "node",
													"value": "string",
													"description": "Only run if executed on this node."
												}
											]
										},
										"description": "Create backup."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/vzdump?all=0&bwlimit=0&compress=0&dumpdir=string&exclude=string&fleecing=string&ionice=7&job-id=HSrnRu+&lockwait=180&mailnotification=always&mailto=string&maxfiles=5741&mode=snapshot&notes-template=string&notification-mode=auto&pbs-change-detection-mode=legacy&performance=string&pigz=0&pool=string&protected=true&prune-backups=keep-all=1&quiet=0&remove=1&script=string&stdexcludes=1&stdout=true&stop=0&stopwait=10&storage=string&tmpdir=string&vmid=string&zstd=1",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"vzdump"
													],
													"query": [
														{
															"key": "all",
															"value": "0",
															"description": "Backup all known guest systems on this host."
														},
														{
															"key": "bwlimit",
															"value": "0",
															"description": "Limit I/O bandwidth (in KiB/s)."
														},
														{
															"key": "compress",
															"value": "0",
															"description": "Compress dump file."
														},
														{
															"key": "dumpdir",
															"value": "string",
															"description": "Store resulting files to specified directory."
														},
														{
															"key": "exclude",
															"value": "string",
															"description": "Exclude specified guest systems (assumes --all)"
														},
														{
															"key": "fleecing",
															"value": "string",
															"description": "Options for backup fleecing (VM only)."
														},
														{
															"key": "ionice",
															"value": "7",
															"description": "Set IO priority when using the BFQ scheduler. For snapshot and suspend mode backups of VMs, this only affects the compressor. A value of 8 means the idle priority is used, otherwise the best-effort priority is used with the specified value."
														},
														{
															"key": "job-id",
															"value": "HSrnRu+",
															"description": "The ID of the backup job. If set, the 'backup-job' metadata field of the backup notification will be set to this value. Only root@pam can set this parameter."
														},
														{
															"key": "lockwait",
															"value": "180",
															"description": "Maximal time to wait for the global lock (minutes)."
														},
														{
															"key": "mailnotification",
															"value": "always",
															"description": "Deprecated: use notification targets/matchers instead. Specify when to send a notification mail"
														},
														{
															"key": "mailto",
															"value": "string",
															"description": "Deprecated: Use notification targets/matchers instead. Comma-separated list of email addresses or users that should receive email notifications."
														},
														{
															"key": "maxfiles",
															"value": "5741",
															"description": "Deprecated: use 'prune-backups' instead. Maximal number of backup files per guest system."
														},
														{
															"key": "mode",
															"value": "snapshot",
															"description": "Backup mode."
														},
														{
															"key": "notes-template",
															"value": "string",
															"description": "Template string for generating notes for the backup(s). It can contain variables which will be replaced by their values. Currently supported are {{cluster}}, {{guestname}}, {{node}}, and {{vmid}}, but more might be added in the future. Needs to be a single line, newline and backslash need to be escaped as '\\n' and '\\\\' respectively."
														},
														{
															"key": "notification-mode",
															"value": "auto",
															"description": "Determine which notification system to use. If set to 'legacy-sendmail', vzdump will consider the mailto/mailnotification parameters and send emails to the specified address(es) via the 'sendmail' command. If set to 'notification-system', a notification will be sent via PVE's notification system, and the mailto and mailnotification will be ignored. If set to 'auto' (default setting), an email will be sent if mailto is set, and the notification system will be used if not."
														},
														{
															"key": "pbs-change-detection-mode",
															"value": "legacy",
															"description": "PBS mode used to detect file changes and switch encoding format for container backups."
														},
														{
															"key": "performance",
															"value": "string",
															"description": "Other performance-related settings."
														},
														{
															"key": "pigz",
															"value": "0",
															"description": "Use pigz instead of gzip when N>0. N=1 uses half of cores, N>1 uses N as thread count."
														},
														{
															"key": "pool",
															"value": "string",
															"description": "Backup all known guest systems included in the specified pool."
														},
														{
															"key": "protected",
															"value": "true",
															"description": "If true, mark backup(s) as protected."
														},
														{
															"key": "prune-backups",
															"value": "keep-all=1",
															"description": "Use these retention options instead of those from the storage configuration."
														},
														{
															"key": "quiet",
															"value": "0",
															"description": "Be quiet."
														},
														{
															"key": "remove",
															"value": "1",
															"description": "Prune older backups according to 'prune-backups'."
														},
														{
															"key": "script",
															"value": "string",
															"description": "Use specified hook script."
														},
														{
															"key": "stdexcludes",
															"value": "1",
															"description": "Exclude temporary files and logs."
														},
														{
															"key": "stdout",
															"value": "true",
															"description": "Write tar to stdout, not to a file."
														},
														{
															"key": "stop",
															"value": "0",
															"description": "Stop running backup jobs on this host."
														},
														{
															"key": "stopwait",
															"value": "10",
															"description": "Maximal time to wait until a guest system is stopped (minutes)."
														},
														{
															"key": "storage",
															"value": "string",
															"description": "Store resulting file to this storage."
														},
														{
															"key": "tmpdir",
															"value": "string",
															"description": "Store temporary files to specified directory."
														},
														{
															"key": "vmid",
															"value": "string",
															"description": "The ID of the guest system you want to backup."
														},
														{
															"key": "zstd",
															"value": "1",
															"description": "Zstd threads. N=0 uses half of the available cores, if N is set to a value bigger than 0, N is used as thread count."
														}
													],
													"variable": [
														{
															"key": "node"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "string"
										}
									]
								}
							]
						},
						{
							"name": "services",
							"item": [
								{
									"name": "{service}",
									"item": [
										{
											"name": "state",
											"item": [
												{
													"name": "Read service properties",
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/services/:service/state",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"services",
																":service",
																"state"
															],
															"variable": [
																{
																	"key": "node",
																	"value": "string",
																	"description": "(Required) The cluster node name."
																},
																{
																	"key": "service",
																	"value": "sshd",
																	"description": "(Required) Service ID"
																}
															]
														},
														"description": "Read service properties"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/services/:service/state",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"services",
																		":service",
																		"state"
																	],
																	"variable": [
																		{
																			"key": "node"
																		},
																		{
																			"key": "service"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{}"
														}
													]
												}
											]
										},
										{
											"name": "start",
											"item": [
												{
													"name": "Start service.",
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/services/:service/start",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"services",
																":service",
																"start"
															],
															"variable": [
																{
																	"key": "node",
																	"value": "string",
																	"description": "(Required) The cluster node name."
																},
																{
																	"key": "service",
																	"value": "sshd",
																	"description": "(Required) Service ID"
																}
															]
														},
														"description": "Start service."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/services/:service/start",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"services",
																		":service",
																		"start"
																	],
																	"variable": [
																		{
																			"key": "node"
																		},
																		{
																			"key": "service"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "string"
														}
													]
												}
											]
										},
										{
											"name": "stop",
											"item": [
												{
													"name": "Stop service.",
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/services/:service/stop",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"services",
																":service",
																"stop"
															],
															"variable": [
																{
																	"key": "node",
																	"value": "string",
																	"description": "(Required) The cluster node name."
																},
																{
																	"key": "service",
																	"value": "sshd",
																	"description": "(Required) Service ID"
																}
															]
														},
														"description": "Stop service."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/services/:service/stop",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"services",
																		":service",
																		"stop"
																	],
																	"variable": [
																		{
																			"key": "node"
																		},
																		{
																			"key": "service"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "string"
														}
													]
												}
											]
										},
										{
											"name": "restart",
											"item": [
												{
													"name": "Hard restart service. Use reload if you want to reduce interruptions.",
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/services/:service/restart",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"services",
																":service",
																"restart"
															],
															"variable": [
																{
																	"key": "node",
																	"value": "string",
																	"description": "(Required) The cluster node name."
																},
																{
																	"key": "service",
																	"value": "sshd",
																	"description": "(Required) Service ID"
																}
															]
														},
														"description": "Hard restart service. Use reload if you want to reduce interruptions."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/services/:service/restart",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"services",
																		":service",
																		"restart"
																	],
																	"variable": [
																		{
																			"key": "node"
																		},
																		{
																			"key": "service"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "string"
														}
													]
												}
											]
										},
										{
											"name": "reload",
											"item": [
												{
													"name": "Reload service. Falls back to restart if service cannot be reloaded.",
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/services/:service/reload",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"services",
																":service",
																"reload"
															],
															"variable": [
																{
																	"key": "node",
																	"value": "string",
																	"description": "(Required) The cluster node name."
																},
																{
																	"key": "service",
																	"value": "sshd",
																	"description": "(Required) Service ID"
																}
															]
														},
														"description": "Reload service. Falls back to restart if service cannot be reloaded."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/services/:service/reload",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"services",
																		":service",
																		"reload"
																	],
																	"variable": [
																		{
																			"key": "node"
																		},
																		{
																			"key": "service"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "string"
														}
													]
												}
											]
										},
										{
											"name": "Directory index",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/services/:service",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"services",
														":service"
													],
													"variable": [
														{
															"key": "node",
															"value": "string",
															"description": "(Required) The cluster node name."
														},
														{
															"key": "service",
															"value": "sshd",
															"description": "(Required) Service ID"
														}
													]
												},
												"description": "Directory index"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/services/:service",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"services",
																":service"
															],
															"variable": [
																{
																	"key": "node"
																},
																{
																	"key": "service"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "[\n  {\n    \"subdir\": \"string\"\n  },\n  {\n    \"subdir\": \"string\"\n  }\n]"
												}
											]
										}
									]
								},
								{
									"name": "Service list.",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/nodes/:node/services",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"nodes",
												":node",
												"services"
											],
											"variable": [
												{
													"key": "node",
													"value": "string",
													"description": "(Required) The cluster node name."
												}
											]
										},
										"description": "Service list."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/services",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"services"
													],
													"variable": [
														{
															"key": "node"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[]"
										}
									]
								}
							]
						},
						{
							"name": "subscription",
							"item": [
								{
									"name": "Delete subscription key of this node.",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/nodes/:node/subscription",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"nodes",
												":node",
												"subscription"
											],
											"variable": [
												{
													"key": "node",
													"value": "string",
													"description": "(Required) The cluster node name."
												}
											]
										},
										"description": "Delete subscription key of this node."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/subscription",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"subscription"
													],
													"variable": [
														{
															"key": "node"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "null"
										}
									]
								},
								{
									"name": "Read subscription info.",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/nodes/:node/subscription",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"nodes",
												":node",
												"subscription"
											],
											"variable": [
												{
													"key": "node",
													"value": "string",
													"description": "(Required) The cluster node name."
												}
											]
										},
										"description": "Read subscription info."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/subscription",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"subscription"
													],
													"variable": [
														{
															"key": "node"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"checktime\": 2479,\n  \"key\": \"string\",\n  \"level\": \"string\",\n  \"message\": \"string\",\n  \"nextduedate\": \"string\",\n  \"productname\": \"string\",\n  \"regdate\": \"string\",\n  \"serverid\": \"string\",\n  \"signature\": \"string\",\n  \"sockets\": 3196,\n  \"status\": \"invalid\",\n  \"url\": \"string\",\n  \"key_0\": {}\n}"
										}
									]
								},
								{
									"name": "Update subscription info.",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/nodes/:node/subscription?force=0",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"nodes",
												":node",
												"subscription"
											],
											"query": [
												{
													"key": "force",
													"value": "0",
													"description": "Always connect to server, even if local cache is still valid."
												}
											],
											"variable": [
												{
													"key": "node",
													"value": "string",
													"description": "(Required) The cluster node name."
												}
											]
										},
										"description": "Update subscription info."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/subscription?force=0",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"subscription"
													],
													"query": [
														{
															"key": "force",
															"value": "0",
															"description": "Always connect to server, even if local cache is still valid."
														}
													],
													"variable": [
														{
															"key": "node"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "null"
										}
									]
								},
								{
									"name": "Set subscription key.",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/nodes/:node/subscription?key=pve8s-fd7461c6fa  ",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"nodes",
												":node",
												"subscription"
											],
											"query": [
												{
													"key": "key",
													"value": "pve8s-fd7461c6fa  ",
													"description": "(Required) Proxmox VE subscription key"
												}
											],
											"variable": [
												{
													"key": "node",
													"value": "string",
													"description": "(Required) The cluster node name."
												}
											]
										},
										"description": "Set subscription key."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/subscription?key=pve8s-fd7461c6fa  ",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"subscription"
													],
													"query": [
														{
															"key": "key",
															"value": "pve8s-fd7461c6fa  ",
															"description": "(Required) Proxmox VE subscription key"
														}
													],
													"variable": [
														{
															"key": "node"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "null"
										}
									]
								}
							]
						},
						{
							"name": "network",
							"item": [
								{
									"name": "{iface}",
									"item": [
										{
											"name": "Delete network device configuration",
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/network/:iface",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"network",
														":iface"
													],
													"variable": [
														{
															"key": "node",
															"value": "string",
															"description": "(Required) The cluster node name."
														},
														{
															"key": "iface",
															"value": "string",
															"description": "(Required) Network interface name."
														}
													]
												},
												"description": "Delete network device configuration"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/network/:iface",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"network",
																":iface"
															],
															"variable": [
																{
																	"key": "node"
																},
																{
																	"key": "iface"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "null"
												}
											]
										},
										{
											"name": "Read network device configuration",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/network/:iface",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"network",
														":iface"
													],
													"variable": [
														{
															"key": "node",
															"value": "string",
															"description": "(Required) The cluster node name."
														},
														{
															"key": "iface",
															"value": "string",
															"description": "(Required) Network interface name."
														}
													]
												},
												"description": "Read network device configuration"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/network/:iface",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"network",
																":iface"
															],
															"variable": [
																{
																	"key": "node"
																},
																{
																	"key": "iface"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"method\": \"string\",\n  \"type\": \"string\"\n}"
												}
											]
										},
										{
											"name": "Update network device configuration",
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/network/:iface?address=253.242.144.244&address6=6732:fbfd:a093:658d:9caa:14f2:50ae:881e&autostart=true&bond-primary=string&bond_mode=balance-slb&bond_xmit_hash_policy=layer3+4&bridge_ports=string&bridge_vids=string&bridge_vlan_aware=true&cidr=string&cidr6=string&comments=string&comments6=string&delete=string&gateway=253.242.144.244&gateway6=6732:fbfd:a093:658d:9caa:14f2:50ae:881e&mtu=59555&netmask=string&netmask6=38&ovs_bonds=string&ovs_bridge=string&ovs_options=string&ovs_ports=string&ovs_tag=1950&slaves=string&type=alias&vlan-id=1950&vlan-raw-device=string",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"network",
														":iface"
													],
													"query": [
														{
															"key": "address",
															"value": "253.242.144.244",
															"description": "IP address."
														},
														{
															"key": "address6",
															"value": "6732:fbfd:a093:658d:9caa:14f2:50ae:881e",
															"description": "IP address."
														},
														{
															"key": "autostart",
															"value": "true",
															"description": "Automatically start interface on boot."
														},
														{
															"key": "bond-primary",
															"value": "string",
															"description": "Specify the primary interface for active-backup bond."
														},
														{
															"key": "bond_mode",
															"value": "balance-slb",
															"description": "Bonding mode."
														},
														{
															"key": "bond_xmit_hash_policy",
															"value": "layer3+4",
															"description": "Selects the transmit hash policy to use for slave selection in balance-xor and 802.3ad modes."
														},
														{
															"key": "bridge_ports",
															"value": "string",
															"description": "Specify the interfaces you want to add to your bridge."
														},
														{
															"key": "bridge_vids",
															"value": "string",
															"description": "Specify the allowed VLANs. For example: '2 4 100-200'. Only used if the bridge is VLAN aware."
														},
														{
															"key": "bridge_vlan_aware",
															"value": "true",
															"description": "Enable bridge vlan support."
														},
														{
															"key": "cidr",
															"value": "string",
															"description": "IPv4 CIDR."
														},
														{
															"key": "cidr6",
															"value": "string",
															"description": "IPv6 CIDR."
														},
														{
															"key": "comments",
															"value": "string",
															"description": "Comments"
														},
														{
															"key": "comments6",
															"value": "string",
															"description": "Comments"
														},
														{
															"key": "delete",
															"value": "string",
															"description": "A list of settings you want to delete."
														},
														{
															"key": "gateway",
															"value": "253.242.144.244",
															"description": "Default gateway address."
														},
														{
															"key": "gateway6",
															"value": "6732:fbfd:a093:658d:9caa:14f2:50ae:881e",
															"description": "Default ipv6 gateway address."
														},
														{
															"key": "mtu",
															"value": "59555",
															"description": "MTU."
														},
														{
															"key": "netmask",
															"value": "string",
															"description": "Network mask."
														},
														{
															"key": "netmask6",
															"value": "38",
															"description": "Network mask."
														},
														{
															"key": "ovs_bonds",
															"value": "string",
															"description": "Specify the interfaces used by the bonding device."
														},
														{
															"key": "ovs_bridge",
															"value": "string",
															"description": "The OVS bridge associated with a OVS port. This is required when you create an OVS port."
														},
														{
															"key": "ovs_options",
															"value": "string",
															"description": "OVS interface options."
														},
														{
															"key": "ovs_ports",
															"value": "string",
															"description": "Specify the interfaces you want to add to your bridge."
														},
														{
															"key": "ovs_tag",
															"value": "1950",
															"description": "Specify a VLan tag (used by OVSPort, OVSIntPort, OVSBond)"
														},
														{
															"key": "slaves",
															"value": "string",
															"description": "Specify the interfaces used by the bonding device."
														},
														{
															"key": "type",
															"value": "alias",
															"description": "(Required) Network interface type"
														},
														{
															"key": "vlan-id",
															"value": "1950",
															"description": "vlan-id for a custom named vlan interface (ifupdown2 only)."
														},
														{
															"key": "vlan-raw-device",
															"value": "string",
															"description": "Specify the raw interface for the vlan interface."
														}
													],
													"variable": [
														{
															"key": "node",
															"value": "string",
															"description": "(Required) The cluster node name."
														},
														{
															"key": "iface",
															"value": "string",
															"description": "(Required) Network interface name."
														}
													]
												},
												"description": "Update network device configuration"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/network/:iface?address=253.242.144.244&address6=6732:fbfd:a093:658d:9caa:14f2:50ae:881e&autostart=true&bond-primary=string&bond_mode=balance-slb&bond_xmit_hash_policy=layer3+4&bridge_ports=string&bridge_vids=string&bridge_vlan_aware=true&cidr=string&cidr6=string&comments=string&comments6=string&delete=string&gateway=253.242.144.244&gateway6=6732:fbfd:a093:658d:9caa:14f2:50ae:881e&mtu=59555&netmask=string&netmask6=38&ovs_bonds=string&ovs_bridge=string&ovs_options=string&ovs_ports=string&ovs_tag=1950&slaves=string&type=alias&vlan-id=1950&vlan-raw-device=string",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"network",
																":iface"
															],
															"query": [
																{
																	"key": "address",
																	"value": "253.242.144.244",
																	"description": "IP address."
																},
																{
																	"key": "address6",
																	"value": "6732:fbfd:a093:658d:9caa:14f2:50ae:881e",
																	"description": "IP address."
																},
																{
																	"key": "autostart",
																	"value": "true",
																	"description": "Automatically start interface on boot."
																},
																{
																	"key": "bond-primary",
																	"value": "string",
																	"description": "Specify the primary interface for active-backup bond."
																},
																{
																	"key": "bond_mode",
																	"value": "balance-slb",
																	"description": "Bonding mode."
																},
																{
																	"key": "bond_xmit_hash_policy",
																	"value": "layer3+4",
																	"description": "Selects the transmit hash policy to use for slave selection in balance-xor and 802.3ad modes."
																},
																{
																	"key": "bridge_ports",
																	"value": "string",
																	"description": "Specify the interfaces you want to add to your bridge."
																},
																{
																	"key": "bridge_vids",
																	"value": "string",
																	"description": "Specify the allowed VLANs. For example: '2 4 100-200'. Only used if the bridge is VLAN aware."
																},
																{
																	"key": "bridge_vlan_aware",
																	"value": "true",
																	"description": "Enable bridge vlan support."
																},
																{
																	"key": "cidr",
																	"value": "string",
																	"description": "IPv4 CIDR."
																},
																{
																	"key": "cidr6",
																	"value": "string",
																	"description": "IPv6 CIDR."
																},
																{
																	"key": "comments",
																	"value": "string",
																	"description": "Comments"
																},
																{
																	"key": "comments6",
																	"value": "string",
																	"description": "Comments"
																},
																{
																	"key": "delete",
																	"value": "string",
																	"description": "A list of settings you want to delete."
																},
																{
																	"key": "gateway",
																	"value": "253.242.144.244",
																	"description": "Default gateway address."
																},
																{
																	"key": "gateway6",
																	"value": "6732:fbfd:a093:658d:9caa:14f2:50ae:881e",
																	"description": "Default ipv6 gateway address."
																},
																{
																	"key": "mtu",
																	"value": "59555",
																	"description": "MTU."
																},
																{
																	"key": "netmask",
																	"value": "string",
																	"description": "Network mask."
																},
																{
																	"key": "netmask6",
																	"value": "38",
																	"description": "Network mask."
																},
																{
																	"key": "ovs_bonds",
																	"value": "string",
																	"description": "Specify the interfaces used by the bonding device."
																},
																{
																	"key": "ovs_bridge",
																	"value": "string",
																	"description": "The OVS bridge associated with a OVS port. This is required when you create an OVS port."
																},
																{
																	"key": "ovs_options",
																	"value": "string",
																	"description": "OVS interface options."
																},
																{
																	"key": "ovs_ports",
																	"value": "string",
																	"description": "Specify the interfaces you want to add to your bridge."
																},
																{
																	"key": "ovs_tag",
																	"value": "1950",
																	"description": "Specify a VLan tag (used by OVSPort, OVSIntPort, OVSBond)"
																},
																{
																	"key": "slaves",
																	"value": "string",
																	"description": "Specify the interfaces used by the bonding device."
																},
																{
																	"key": "type",
																	"value": "alias",
																	"description": "(Required) Network interface type"
																},
																{
																	"key": "vlan-id",
																	"value": "1950",
																	"description": "vlan-id for a custom named vlan interface (ifupdown2 only)."
																},
																{
																	"key": "vlan-raw-device",
																	"value": "string",
																	"description": "Specify the raw interface for the vlan interface."
																}
															],
															"variable": [
																{
																	"key": "node"
																},
																{
																	"key": "iface"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "null"
												}
											]
										}
									]
								},
								{
									"name": "Revert network configuration changes.",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/nodes/:node/network",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"nodes",
												":node",
												"network"
											],
											"variable": [
												{
													"key": "node",
													"value": "string",
													"description": "(Required) The cluster node name."
												}
											]
										},
										"description": "Revert network configuration changes."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/network",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"network"
													],
													"variable": [
														{
															"key": "node"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "null"
										}
									]
								},
								{
									"name": "List available networks",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/nodes/:node/network?type=OVSPort",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"nodes",
												":node",
												"network"
											],
											"query": [
												{
													"key": "type",
													"value": "OVSPort",
													"description": "Only list specific interface types."
												}
											],
											"variable": [
												{
													"key": "node",
													"value": "string",
													"description": "(Required) The cluster node name."
												}
											]
										},
										"description": "List available networks"
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/network?type=OVSPort",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"network"
													],
													"query": [
														{
															"key": "type",
															"value": "OVSPort",
															"description": "Only list specific interface types."
														}
													],
													"variable": [
														{
															"key": "node"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"active\": false,\n    \"address\": \"46.71.96.95\",\n    \"address6\": \"a768:21f3:0e5e:98d7:7884:1bbd:24fd:8cca\",\n    \"autostart\": false,\n    \"bond-primary\": \"string\",\n    \"bond_mode\": \"lacp-balance-tcp\",\n    \"bond_xmit_hash_policy\": \"layer3+4\",\n    \"bridge-access\": 217,\n    \"bridge-arp-nd-suppress\": true,\n    \"bridge-learning\": true,\n    \"bridge-multicast-flood\": true,\n    \"bridge-unicast-flood\": false,\n    \"bridge_ports\": \"string\",\n    \"bridge_vids\": \"string\",\n    \"bridge_vlan_aware\": true,\n    \"cidr\": \"string\",\n    \"cidr6\": \"string\",\n    \"comments\": \"string\",\n    \"comments6\": \"string\",\n    \"exists\": true,\n    \"families\": [\n      \"inet\",\n      \"inet\"\n    ],\n    \"gateway\": \"102.205.52.144\",\n    \"gateway6\": \"311a:8439:9252:e6b4:5ccb:1597:ca8c:10b3\",\n    \"iface\": \"string\",\n    \"link-type\": \"string\",\n    \"method\": \"static\",\n    \"method6\": \"manual\",\n    \"mtu\": 11524,\n    \"netmask\": \"string\",\n    \"netmask6\": 49,\n    \"options\": [\n      \"string\",\n      \"string\"\n    ],\n    \"options6\": [\n      \"string\",\n      \"string\"\n    ],\n    \"ovs_bonds\": \"string\",\n    \"ovs_bridge\": \"string\",\n    \"ovs_options\": \"string\",\n    \"ovs_ports\": \"string\",\n    \"ovs_tag\": 400,\n    \"priority\": 6967,\n    \"slaves\": \"string\",\n    \"type\": \"eth\",\n    \"uplink-id\": \"string\",\n    \"vlan-id\": 2681,\n    \"vlan-protocol\": \"802.1ad\",\n    \"vlan-raw-device\": \"string\",\n    \"vxlan-id\": 9877,\n    \"vxlan-local-tunnelip\": \"string\",\n    \"vxlan-physdev\": \"string\",\n    \"vxlan-svcnodeip\": \"string\"\n  },\n  {\n    \"active\": true,\n    \"address\": \"40.100.115.0\",\n    \"address6\": \"c3f3:6eb1:f07a:f05d:6cfc:4e10:4d34:74fc\",\n    \"autostart\": false,\n    \"bond-primary\": \"string\",\n    \"bond_mode\": \"balance-slb\",\n    \"bond_xmit_hash_policy\": \"layer2\",\n    \"bridge-access\": 588,\n    \"bridge-arp-nd-suppress\": true,\n    \"bridge-learning\": true,\n    \"bridge-multicast-flood\": false,\n    \"bridge-unicast-flood\": false,\n    \"bridge_ports\": \"string\",\n    \"bridge_vids\": \"string\",\n    \"bridge_vlan_aware\": true,\n    \"cidr\": \"string\",\n    \"cidr6\": \"string\",\n    \"comments\": \"string\",\n    \"comments6\": \"string\",\n    \"exists\": false,\n    \"families\": [\n      \"inet\",\n      \"inet6\"\n    ],\n    \"gateway\": \"158.49.243.142\",\n    \"gateway6\": \"5360:9f09:0756:d4af:bbe2:bf1a:0410:b3de\",\n    \"iface\": \"string\",\n    \"link-type\": \"string\",\n    \"method\": \"static\",\n    \"method6\": \"auto\",\n    \"mtu\": 43853,\n    \"netmask\": \"string\",\n    \"netmask6\": 34,\n    \"options\": [\n      \"string\",\n      \"string\"\n    ],\n    \"options6\": [\n      \"string\",\n      \"string\"\n    ],\n    \"ovs_bonds\": \"string\",\n    \"ovs_bridge\": \"string\",\n    \"ovs_options\": \"string\",\n    \"ovs_ports\": \"string\",\n    \"ovs_tag\": 3023,\n    \"priority\": 1082,\n    \"slaves\": \"string\",\n    \"type\": \"eth\",\n    \"uplink-id\": \"string\",\n    \"vlan-id\": 3476,\n    \"vlan-protocol\": \"802.1q\",\n    \"vlan-raw-device\": \"string\",\n    \"vxlan-id\": 9472,\n    \"vxlan-local-tunnelip\": \"string\",\n    \"vxlan-physdev\": \"string\",\n    \"vxlan-svcnodeip\": \"string\"\n  }\n]"
										}
									]
								},
								{
									"name": "Create network device configuration",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/nodes/:node/network?address=253.242.144.244&address6=6732:fbfd:a093:658d:9caa:14f2:50ae:881e&autostart=true&bond-primary=string&bond_mode=balance-slb&bond_xmit_hash_policy=layer3+4&bridge_ports=string&bridge_vids=string&bridge_vlan_aware=true&cidr=string&cidr6=string&comments=string&comments6=string&gateway=253.242.144.244&gateway6=6732:fbfd:a093:658d:9caa:14f2:50ae:881e&iface=string&mtu=59555&netmask=string&netmask6=38&ovs_bonds=string&ovs_bridge=string&ovs_options=string&ovs_ports=string&ovs_tag=1950&slaves=string&type=alias&vlan-id=1950&vlan-raw-device=string",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"nodes",
												":node",
												"network"
											],
											"query": [
												{
													"key": "address",
													"value": "253.242.144.244",
													"description": "IP address."
												},
												{
													"key": "address6",
													"value": "6732:fbfd:a093:658d:9caa:14f2:50ae:881e",
													"description": "IP address."
												},
												{
													"key": "autostart",
													"value": "true",
													"description": "Automatically start interface on boot."
												},
												{
													"key": "bond-primary",
													"value": "string",
													"description": "Specify the primary interface for active-backup bond."
												},
												{
													"key": "bond_mode",
													"value": "balance-slb",
													"description": "Bonding mode."
												},
												{
													"key": "bond_xmit_hash_policy",
													"value": "layer3+4",
													"description": "Selects the transmit hash policy to use for slave selection in balance-xor and 802.3ad modes."
												},
												{
													"key": "bridge_ports",
													"value": "string",
													"description": "Specify the interfaces you want to add to your bridge."
												},
												{
													"key": "bridge_vids",
													"value": "string",
													"description": "Specify the allowed VLANs. For example: '2 4 100-200'. Only used if the bridge is VLAN aware."
												},
												{
													"key": "bridge_vlan_aware",
													"value": "true",
													"description": "Enable bridge vlan support."
												},
												{
													"key": "cidr",
													"value": "string",
													"description": "IPv4 CIDR."
												},
												{
													"key": "cidr6",
													"value": "string",
													"description": "IPv6 CIDR."
												},
												{
													"key": "comments",
													"value": "string",
													"description": "Comments"
												},
												{
													"key": "comments6",
													"value": "string",
													"description": "Comments"
												},
												{
													"key": "gateway",
													"value": "253.242.144.244",
													"description": "Default gateway address."
												},
												{
													"key": "gateway6",
													"value": "6732:fbfd:a093:658d:9caa:14f2:50ae:881e",
													"description": "Default ipv6 gateway address."
												},
												{
													"key": "iface",
													"value": "string",
													"description": "(Required) Network interface name."
												},
												{
													"key": "mtu",
													"value": "59555",
													"description": "MTU."
												},
												{
													"key": "netmask",
													"value": "string",
													"description": "Network mask."
												},
												{
													"key": "netmask6",
													"value": "38",
													"description": "Network mask."
												},
												{
													"key": "ovs_bonds",
													"value": "string",
													"description": "Specify the interfaces used by the bonding device."
												},
												{
													"key": "ovs_bridge",
													"value": "string",
													"description": "The OVS bridge associated with a OVS port. This is required when you create an OVS port."
												},
												{
													"key": "ovs_options",
													"value": "string",
													"description": "OVS interface options."
												},
												{
													"key": "ovs_ports",
													"value": "string",
													"description": "Specify the interfaces you want to add to your bridge."
												},
												{
													"key": "ovs_tag",
													"value": "1950",
													"description": "Specify a VLan tag (used by OVSPort, OVSIntPort, OVSBond)"
												},
												{
													"key": "slaves",
													"value": "string",
													"description": "Specify the interfaces used by the bonding device."
												},
												{
													"key": "type",
													"value": "alias",
													"description": "(Required) Network interface type"
												},
												{
													"key": "vlan-id",
													"value": "1950",
													"description": "vlan-id for a custom named vlan interface (ifupdown2 only)."
												},
												{
													"key": "vlan-raw-device",
													"value": "string",
													"description": "Specify the raw interface for the vlan interface."
												}
											],
											"variable": [
												{
													"key": "node",
													"value": "string",
													"description": "(Required) The cluster node name."
												}
											]
										},
										"description": "Create network device configuration"
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/network?address=253.242.144.244&address6=6732:fbfd:a093:658d:9caa:14f2:50ae:881e&autostart=true&bond-primary=string&bond_mode=balance-slb&bond_xmit_hash_policy=layer3+4&bridge_ports=string&bridge_vids=string&bridge_vlan_aware=true&cidr=string&cidr6=string&comments=string&comments6=string&gateway=253.242.144.244&gateway6=6732:fbfd:a093:658d:9caa:14f2:50ae:881e&iface=string&mtu=59555&netmask=string&netmask6=38&ovs_bonds=string&ovs_bridge=string&ovs_options=string&ovs_ports=string&ovs_tag=1950&slaves=string&type=alias&vlan-id=1950&vlan-raw-device=string",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"network"
													],
													"query": [
														{
															"key": "address",
															"value": "253.242.144.244",
															"description": "IP address."
														},
														{
															"key": "address6",
															"value": "6732:fbfd:a093:658d:9caa:14f2:50ae:881e",
															"description": "IP address."
														},
														{
															"key": "autostart",
															"value": "true",
															"description": "Automatically start interface on boot."
														},
														{
															"key": "bond-primary",
															"value": "string",
															"description": "Specify the primary interface for active-backup bond."
														},
														{
															"key": "bond_mode",
															"value": "balance-slb",
															"description": "Bonding mode."
														},
														{
															"key": "bond_xmit_hash_policy",
															"value": "layer3+4",
															"description": "Selects the transmit hash policy to use for slave selection in balance-xor and 802.3ad modes."
														},
														{
															"key": "bridge_ports",
															"value": "string",
															"description": "Specify the interfaces you want to add to your bridge."
														},
														{
															"key": "bridge_vids",
															"value": "string",
															"description": "Specify the allowed VLANs. For example: '2 4 100-200'. Only used if the bridge is VLAN aware."
														},
														{
															"key": "bridge_vlan_aware",
															"value": "true",
															"description": "Enable bridge vlan support."
														},
														{
															"key": "cidr",
															"value": "string",
															"description": "IPv4 CIDR."
														},
														{
															"key": "cidr6",
															"value": "string",
															"description": "IPv6 CIDR."
														},
														{
															"key": "comments",
															"value": "string",
															"description": "Comments"
														},
														{
															"key": "comments6",
															"value": "string",
															"description": "Comments"
														},
														{
															"key": "gateway",
															"value": "253.242.144.244",
															"description": "Default gateway address."
														},
														{
															"key": "gateway6",
															"value": "6732:fbfd:a093:658d:9caa:14f2:50ae:881e",
															"description": "Default ipv6 gateway address."
														},
														{
															"key": "iface",
															"value": "string",
															"description": "(Required) Network interface name."
														},
														{
															"key": "mtu",
															"value": "59555",
															"description": "MTU."
														},
														{
															"key": "netmask",
															"value": "string",
															"description": "Network mask."
														},
														{
															"key": "netmask6",
															"value": "38",
															"description": "Network mask."
														},
														{
															"key": "ovs_bonds",
															"value": "string",
															"description": "Specify the interfaces used by the bonding device."
														},
														{
															"key": "ovs_bridge",
															"value": "string",
															"description": "The OVS bridge associated with a OVS port. This is required when you create an OVS port."
														},
														{
															"key": "ovs_options",
															"value": "string",
															"description": "OVS interface options."
														},
														{
															"key": "ovs_ports",
															"value": "string",
															"description": "Specify the interfaces you want to add to your bridge."
														},
														{
															"key": "ovs_tag",
															"value": "1950",
															"description": "Specify a VLan tag (used by OVSPort, OVSIntPort, OVSBond)"
														},
														{
															"key": "slaves",
															"value": "string",
															"description": "Specify the interfaces used by the bonding device."
														},
														{
															"key": "type",
															"value": "alias",
															"description": "(Required) Network interface type"
														},
														{
															"key": "vlan-id",
															"value": "1950",
															"description": "vlan-id for a custom named vlan interface (ifupdown2 only)."
														},
														{
															"key": "vlan-raw-device",
															"value": "string",
															"description": "Specify the raw interface for the vlan interface."
														}
													],
													"variable": [
														{
															"key": "node"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "null"
										}
									]
								},
								{
									"name": "Reload network configuration",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/nodes/:node/network?regenerate-frr=0",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"nodes",
												":node",
												"network"
											],
											"query": [
												{
													"key": "regenerate-frr",
													"value": "0",
													"description": "Whether FRR config generation should get skipped or not."
												}
											],
											"variable": [
												{
													"key": "node",
													"value": "string",
													"description": "(Required) The cluster node name."
												}
											]
										},
										"description": "Reload network configuration"
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/network?regenerate-frr=0",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"network"
													],
													"query": [
														{
															"key": "regenerate-frr",
															"value": "0",
															"description": "Whether FRR config generation should get skipped or not."
														}
													],
													"variable": [
														{
															"key": "node"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "string"
										}
									]
								}
							]
						},
						{
							"name": "tasks",
							"item": [
								{
									"name": "{upid}",
									"item": [
										{
											"name": "log",
											"item": [
												{
													"name": "Read task log.",
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/tasks/:upid/log?download=true&limit=50&start=0",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"tasks",
																":upid",
																"log"
															],
															"query": [
																{
																	"key": "download",
																	"value": "true",
																	"description": "Whether the tasklog file should be downloaded. This parameter can't be used in conjunction with other parameters"
																},
																{
																	"key": "limit",
																	"value": "50",
																	"description": "The number of lines to read from the tasklog."
																},
																{
																	"key": "start",
																	"value": "0",
																	"description": "Start at this line when reading the tasklog"
																}
															],
															"variable": [
																{
																	"key": "node",
																	"value": "string",
																	"description": "(Required) The cluster node name."
																},
																{
																	"key": "upid",
																	"value": "string",
																	"description": "(Required) The task's unique ID."
																}
															]
														},
														"description": "Read task log."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/tasks/:upid/log?download=true&limit=50&start=0",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"tasks",
																		":upid",
																		"log"
																	],
																	"query": [
																		{
																			"key": "download",
																			"value": "true",
																			"description": "Whether the tasklog file should be downloaded. This parameter can't be used in conjunction with other parameters"
																		},
																		{
																			"key": "limit",
																			"value": "50",
																			"description": "The number of lines to read from the tasklog."
																		},
																		{
																			"key": "start",
																			"value": "0",
																			"description": "Start at this line when reading the tasklog"
																		}
																	],
																	"variable": [
																		{
																			"key": "node"
																		},
																		{
																			"key": "upid"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "[\n  {\n    \"n\": 6858,\n    \"t\": \"string\"\n  },\n  {\n    \"n\": 9106,\n    \"t\": \"string\"\n  }\n]"
														}
													]
												}
											]
										},
										{
											"name": "status",
											"item": [
												{
													"name": "Read task status.",
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/tasks/:upid/status",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"tasks",
																":upid",
																"status"
															],
															"variable": [
																{
																	"key": "node",
																	"value": "string",
																	"description": "(Required) The cluster node name."
																},
																{
																	"key": "upid",
																	"value": "string",
																	"description": "(Required) The task's unique ID."
																}
															]
														},
														"description": "Read task status."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/tasks/:upid/status",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"tasks",
																		":upid",
																		"status"
																	],
																	"variable": [
																		{
																			"key": "node"
																		},
																		{
																			"key": "upid"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"exitstatus\": \"string\",\n  \"id\": \"string\",\n  \"node\": \"string\",\n  \"pid\": 7683,\n  \"pstart\": 9608,\n  \"starttime\": 1840,\n  \"status\": \"stopped\",\n  \"type\": \"string\",\n  \"upid\": \"string\",\n  \"user\": \"string\"\n}"
														}
													]
												}
											]
										},
										{
											"name": "Stop a task.",
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/tasks/:upid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"tasks",
														":upid"
													],
													"variable": [
														{
															"key": "node",
															"value": "string",
															"description": "(Required) The cluster node name."
														},
														{
															"key": "upid",
															"value": "string",
															"description": "(Required) "
														}
													]
												},
												"description": "Stop a task."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/tasks/:upid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"tasks",
																":upid"
															],
															"variable": [
																{
																	"key": "node"
																},
																{
																	"key": "upid"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "null"
												}
											]
										},
										{
											"name": "/nodes/:node/tasks/:upid",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/tasks/:upid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"tasks",
														":upid"
													],
													"variable": [
														{
															"key": "node",
															"value": "string",
															"description": "(Required) The cluster node name."
														},
														{
															"key": "upid",
															"value": "string",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/tasks/:upid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"tasks",
																":upid"
															],
															"variable": [
																{
																	"key": "node"
																},
																{
																	"key": "upid"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "[]"
												}
											]
										}
									]
								},
								{
									"name": "Read task list for one node (finished tasks).",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/nodes/:node/tasks?errors=0&limit=50&since=5752&source=archive&start=0&statusfilter=string&typefilter=string&until=5752&userfilter=string&vmid=358786328",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"nodes",
												":node",
												"tasks"
											],
											"query": [
												{
													"key": "errors",
													"value": "0",
													"description": "Only list tasks with a status of ERROR."
												},
												{
													"key": "limit",
													"value": "50",
													"description": "Only list this number of tasks."
												},
												{
													"key": "since",
													"value": "5752",
													"description": "Only list tasks since this UNIX epoch."
												},
												{
													"key": "source",
													"value": "archive",
													"description": "List archived, active or all tasks."
												},
												{
													"key": "start",
													"value": "0",
													"description": "List tasks beginning from this offset."
												},
												{
													"key": "statusfilter",
													"value": "string",
													"description": "List of Task States that should be returned."
												},
												{
													"key": "typefilter",
													"value": "string",
													"description": "Only list tasks of this type (e.g., vzstart, vzdump)."
												},
												{
													"key": "until",
													"value": "5752",
													"description": "Only list tasks until this UNIX epoch."
												},
												{
													"key": "userfilter",
													"value": "string",
													"description": "Only list tasks from this user."
												},
												{
													"key": "vmid",
													"value": "358786328",
													"description": "Only list tasks for this VM."
												}
											],
											"variable": [
												{
													"key": "node",
													"value": "string",
													"description": "(Required) The cluster node name."
												}
											]
										},
										"description": "Read task list for one node (finished tasks)."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/tasks?errors=0&limit=50&since=5752&source=archive&start=0&statusfilter=string&typefilter=string&until=5752&userfilter=string&vmid=358786328",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"tasks"
													],
													"query": [
														{
															"key": "errors",
															"value": "0",
															"description": "Only list tasks with a status of ERROR."
														},
														{
															"key": "limit",
															"value": "50",
															"description": "Only list this number of tasks."
														},
														{
															"key": "since",
															"value": "5752",
															"description": "Only list tasks since this UNIX epoch."
														},
														{
															"key": "source",
															"value": "archive",
															"description": "List archived, active or all tasks."
														},
														{
															"key": "start",
															"value": "0",
															"description": "List tasks beginning from this offset."
														},
														{
															"key": "statusfilter",
															"value": "string",
															"description": "List of Task States that should be returned."
														},
														{
															"key": "typefilter",
															"value": "string",
															"description": "Only list tasks of this type (e.g., vzstart, vzdump)."
														},
														{
															"key": "until",
															"value": "5752",
															"description": "Only list tasks until this UNIX epoch."
														},
														{
															"key": "userfilter",
															"value": "string",
															"description": "Only list tasks from this user."
														},
														{
															"key": "vmid",
															"value": "358786328",
															"description": "Only list tasks for this VM."
														}
													],
													"variable": [
														{
															"key": "node"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"endtime\": 3164,\n    \"id\": \"string\",\n    \"node\": \"string\",\n    \"pid\": 6773,\n    \"pstart\": 8842,\n    \"starttime\": 1852,\n    \"status\": \"string\",\n    \"type\": \"string\",\n    \"upid\": \"string\",\n    \"user\": \"string\"\n  },\n  {\n    \"endtime\": 9670,\n    \"id\": \"string\",\n    \"node\": \"string\",\n    \"pid\": 26,\n    \"pstart\": 674,\n    \"starttime\": 726,\n    \"status\": \"string\",\n    \"type\": \"string\",\n    \"upid\": \"string\",\n    \"user\": \"string\"\n  }\n]"
										}
									]
								}
							]
						},
						{
							"name": "scan",
							"item": [
								{
									"name": "nfs",
									"item": [
										{
											"name": "Scan remote NFS server.",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/scan/nfs?server=string",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"scan",
														"nfs"
													],
													"query": [
														{
															"key": "server",
															"value": "string",
															"description": "(Required) The server address (name or IP)."
														}
													],
													"variable": [
														{
															"key": "node",
															"value": "string",
															"description": "(Required) The cluster node name."
														}
													]
												},
												"description": "Scan remote NFS server."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/scan/nfs?server=string",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"scan",
																"nfs"
															],
															"query": [
																{
																	"key": "server",
																	"value": "string",
																	"description": "(Required) The server address (name or IP)."
																}
															],
															"variable": [
																{
																	"key": "node"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "[\n  {\n    \"options\": \"string\",\n    \"path\": \"string\"\n  },\n  {\n    \"options\": \"string\",\n    \"path\": \"string\"\n  }\n]"
												}
											]
										}
									]
								},
								{
									"name": "cifs",
									"item": [
										{
											"name": "Scan remote CIFS server.",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/scan/cifs?domain=string&password=string&server=string&username=string",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"scan",
														"cifs"
													],
													"query": [
														{
															"key": "domain",
															"value": "string",
															"description": "SMB domain (Workgroup)."
														},
														{
															"key": "password",
															"value": "string",
															"description": "User password."
														},
														{
															"key": "server",
															"value": "string",
															"description": "(Required) The server address (name or IP)."
														},
														{
															"key": "username",
															"value": "string",
															"description": "User name."
														}
													],
													"variable": [
														{
															"key": "node",
															"value": "string",
															"description": "(Required) The cluster node name."
														}
													]
												},
												"description": "Scan remote CIFS server."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/scan/cifs?domain=string&password=string&server=string&username=string",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"scan",
																"cifs"
															],
															"query": [
																{
																	"key": "domain",
																	"value": "string",
																	"description": "SMB domain (Workgroup)."
																},
																{
																	"key": "password",
																	"value": "string",
																	"description": "User password."
																},
																{
																	"key": "server",
																	"value": "string",
																	"description": "(Required) The server address (name or IP)."
																},
																{
																	"key": "username",
																	"value": "string",
																	"description": "User name."
																}
															],
															"variable": [
																{
																	"key": "node"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "[\n  {\n    \"description\": \"string\",\n    \"share\": \"string\"\n  },\n  {\n    \"description\": \"string\",\n    \"share\": \"string\"\n  }\n]"
												}
											]
										}
									]
								},
								{
									"name": "pbs",
									"item": [
										{
											"name": "Scan remote Proxmox Backup Server.",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/scan/pbs?fingerprint=2b:C6:53:bd:7c:42:0f:B0:19:Cc:76:26:41:2D:4D:68:a7:8b:9a:Dd:CE:FC:1d:cb:A3:B4:49:7d:8C:eA:3F:d9&password=string&port=8007&server=string&username=string",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"scan",
														"pbs"
													],
													"query": [
														{
															"key": "fingerprint",
															"value": "2b:C6:53:bd:7c:42:0f:B0:19:Cc:76:26:41:2D:4D:68:a7:8b:9a:Dd:CE:FC:1d:cb:A3:B4:49:7d:8C:eA:3F:d9",
															"description": "Certificate SHA 256 fingerprint."
														},
														{
															"key": "password",
															"value": "string",
															"description": "(Required) User password or API token secret."
														},
														{
															"key": "port",
															"value": "8007",
															"description": "Optional port."
														},
														{
															"key": "server",
															"value": "string",
															"description": "(Required) The server address (name or IP)."
														},
														{
															"key": "username",
															"value": "string",
															"description": "(Required) User-name or API token-ID."
														}
													],
													"variable": [
														{
															"key": "node",
															"value": "string",
															"description": "(Required) The cluster node name."
														}
													]
												},
												"description": "Scan remote Proxmox Backup Server."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/scan/pbs?fingerprint=2b:C6:53:bd:7c:42:0f:B0:19:Cc:76:26:41:2D:4D:68:a7:8b:9a:Dd:CE:FC:1d:cb:A3:B4:49:7d:8C:eA:3F:d9&password=string&port=8007&server=string&username=string",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"scan",
																"pbs"
															],
															"query": [
																{
																	"key": "fingerprint",
																	"value": "2b:C6:53:bd:7c:42:0f:B0:19:Cc:76:26:41:2D:4D:68:a7:8b:9a:Dd:CE:FC:1d:cb:A3:B4:49:7d:8C:eA:3F:d9",
																	"description": "Certificate SHA 256 fingerprint."
																},
																{
																	"key": "password",
																	"value": "string",
																	"description": "(Required) User password or API token secret."
																},
																{
																	"key": "port",
																	"value": "8007",
																	"description": "Optional port."
																},
																{
																	"key": "server",
																	"value": "string",
																	"description": "(Required) The server address (name or IP)."
																},
																{
																	"key": "username",
																	"value": "string",
																	"description": "(Required) User-name or API token-ID."
																}
															],
															"variable": [
																{
																	"key": "node"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "[\n  {\n    \"comment\": \"string\",\n    \"store\": \"string\"\n  },\n  {\n    \"comment\": \"string\",\n    \"store\": \"string\"\n  }\n]"
												}
											]
										}
									]
								},
								{
									"name": "iscsi",
									"item": [
										{
											"name": "Scan remote iSCSI server.",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/scan/iscsi?portal=string",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"scan",
														"iscsi"
													],
													"query": [
														{
															"key": "portal",
															"value": "string",
															"description": "(Required) The iSCSI portal (IP or DNS name with optional port)."
														}
													],
													"variable": [
														{
															"key": "node",
															"value": "string",
															"description": "(Required) The cluster node name."
														}
													]
												},
												"description": "Scan remote iSCSI server."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/scan/iscsi?portal=string",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"scan",
																"iscsi"
															],
															"query": [
																{
																	"key": "portal",
																	"value": "string",
																	"description": "(Required) The iSCSI portal (IP or DNS name with optional port)."
																}
															],
															"variable": [
																{
																	"key": "node"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "[\n  {\n    \"portal\": \"string\",\n    \"target\": \"string\"\n  },\n  {\n    \"portal\": \"string\",\n    \"target\": \"string\"\n  }\n]"
												}
											]
										}
									]
								},
								{
									"name": "lvm",
									"item": [
										{
											"name": "List local LVM volume groups.",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/scan/lvm",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"scan",
														"lvm"
													],
													"variable": [
														{
															"key": "node",
															"value": "string",
															"description": "(Required) The cluster node name."
														}
													]
												},
												"description": "List local LVM volume groups."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/scan/lvm",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"scan",
																"lvm"
															],
															"variable": [
																{
																	"key": "node"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "[\n  {\n    \"vg\": \"string\"\n  },\n  {\n    \"vg\": \"string\"\n  }\n]"
												}
											]
										}
									]
								},
								{
									"name": "lvmthin",
									"item": [
										{
											"name": "List local LVM Thin Pools.",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/scan/lvmthin?vg=6u39j",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"scan",
														"lvmthin"
													],
													"query": [
														{
															"key": "vg",
															"value": "6u39j",
															"description": "(Required) "
														}
													],
													"variable": [
														{
															"key": "node",
															"value": "string",
															"description": "(Required) The cluster node name."
														}
													]
												},
												"description": "List local LVM Thin Pools."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/scan/lvmthin?vg=6u39j",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"scan",
																"lvmthin"
															],
															"query": [
																{
																	"key": "vg",
																	"value": "6u39j",
																	"description": "(Required) "
																}
															],
															"variable": [
																{
																	"key": "node"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "[\n  {\n    \"lv\": \"string\"\n  },\n  {\n    \"lv\": \"string\"\n  }\n]"
												}
											]
										}
									]
								},
								{
									"name": "zfs",
									"item": [
										{
											"name": "Scan zfs pool list on local node.",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/scan/zfs",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"scan",
														"zfs"
													],
													"variable": [
														{
															"key": "node",
															"value": "string",
															"description": "(Required) The cluster node name."
														}
													]
												},
												"description": "Scan zfs pool list on local node."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/scan/zfs",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"scan",
																"zfs"
															],
															"variable": [
																{
																	"key": "node"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "[\n  {\n    \"pool\": \"string\"\n  },\n  {\n    \"pool\": \"string\"\n  }\n]"
												}
											]
										}
									]
								},
								{
									"name": "Index of available scan methods",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/nodes/:node/scan",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"nodes",
												":node",
												"scan"
											],
											"variable": [
												{
													"key": "node",
													"value": "string",
													"description": "(Required) The cluster node name."
												}
											]
										},
										"description": "Index of available scan methods"
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/scan",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"scan"
													],
													"variable": [
														{
															"key": "node"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"method\": \"string\"\n  },\n  {\n    \"method\": \"string\"\n  }\n]"
										}
									]
								}
							]
						},
						{
							"name": "hardware",
							"item": [
								{
									"name": "pci",
									"item": [
										{
											"name": "{pci-id-or-mapping}",
											"item": [
												{
													"name": "mdev",
													"item": [
														{
															"name": "List mediated device types for given PCI device.",
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/hardware/pci/:pci-id-or-mapping/mdev",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"hardware",
																		"pci",
																		":pci-id-or-mapping",
																		"mdev"
																	],
																	"variable": [
																		{
																			"key": "node",
																			"value": "string",
																			"description": "(Required) The cluster node name."
																		},
																		{
																			"key": "pci-id-or-mapping",
																			"value": "ahQu",
																			"description": "(Required) The PCI ID or mapping to list the mdev types for."
																		}
																	]
																},
																"description": "List mediated device types for given PCI device."
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/nodes/:node/hardware/pci/:pci-id-or-mapping/mdev",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"nodes",
																				":node",
																				"hardware",
																				"pci",
																				":pci-id-or-mapping",
																				"mdev"
																			],
																			"variable": [
																				{
																					"key": "node"
																				},
																				{
																					"key": "pci-id-or-mapping"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "[\n  {\n    \"available\": 1650,\n    \"description\": \"string\",\n    \"name\": \"string\",\n    \"type\": \"string\"\n  },\n  {\n    \"available\": 535,\n    \"description\": \"string\",\n    \"name\": \"string\",\n    \"type\": \"string\"\n  }\n]"
																}
															]
														}
													]
												},
												{
													"name": "Index of available pci methods",
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/hardware/pci/:pci-id-or-mapping",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"hardware",
																"pci",
																":pci-id-or-mapping"
															],
															"variable": [
																{
																	"key": "node",
																	"value": "string",
																	"description": "(Required) The cluster node name."
																},
																{
																	"key": "pci-id-or-mapping",
																	"value": "ahQu",
																	"description": "(Required) "
																}
															]
														},
														"description": "Index of available pci methods"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/hardware/pci/:pci-id-or-mapping",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"hardware",
																		"pci",
																		":pci-id-or-mapping"
																	],
																	"variable": [
																		{
																			"key": "node"
																		},
																		{
																			"key": "pci-id-or-mapping"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "[\n  {\n    \"method\": \"string\"\n  },\n  {\n    \"method\": \"string\"\n  }\n]"
														}
													]
												}
											]
										},
										{
											"name": "List local PCI devices.",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/hardware/pci?pci-class-blacklist=05;06;0b&verbose=1",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"hardware",
														"pci"
													],
													"query": [
														{
															"key": "pci-class-blacklist",
															"value": "05;06;0b",
															"description": "A list of blacklisted PCI classes, which will not be returned. Following are filtered by default: Memory Controller (05), Bridge (06) and Processor (0b)."
														},
														{
															"key": "verbose",
															"value": "1",
															"description": "If disabled, does only print the PCI IDs. Otherwise, additional information like vendor and device will be returned."
														}
													],
													"variable": [
														{
															"key": "node",
															"value": "string",
															"description": "(Required) The cluster node name."
														}
													]
												},
												"description": "List local PCI devices."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/hardware/pci?pci-class-blacklist=05;06;0b&verbose=1",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"hardware",
																"pci"
															],
															"query": [
																{
																	"key": "pci-class-blacklist",
																	"value": "05;06;0b",
																	"description": "A list of blacklisted PCI classes, which will not be returned. Following are filtered by default: Memory Controller (05), Bridge (06) and Processor (0b)."
																},
																{
																	"key": "verbose",
																	"value": "1",
																	"description": "If disabled, does only print the PCI IDs. Otherwise, additional information like vendor and device will be returned."
																}
															],
															"variable": [
																{
																	"key": "node"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "[\n  {\n    \"class\": \"string\",\n    \"device\": \"string\",\n    \"device_name\": \"string\",\n    \"id\": \"string\",\n    \"iommugroup\": 2078,\n    \"mdev\": false,\n    \"subsystem_device\": \"string\",\n    \"subsystem_device_name\": \"string\",\n    \"subsystem_vendor\": \"string\",\n    \"subsystem_vendor_name\": \"string\",\n    \"vendor\": \"string\",\n    \"vendor_name\": \"string\"\n  },\n  {\n    \"class\": \"string\",\n    \"device\": \"string\",\n    \"device_name\": \"string\",\n    \"id\": \"string\",\n    \"iommugroup\": 9350,\n    \"mdev\": true,\n    \"subsystem_device\": \"string\",\n    \"subsystem_device_name\": \"string\",\n    \"subsystem_vendor\": \"string\",\n    \"subsystem_vendor_name\": \"string\",\n    \"vendor\": \"string\",\n    \"vendor_name\": \"string\"\n  }\n]"
												}
											]
										}
									]
								},
								{
									"name": "usb",
									"item": [
										{
											"name": "List local USB devices.",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/hardware/usb",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"hardware",
														"usb"
													],
													"variable": [
														{
															"key": "node",
															"value": "string",
															"description": "(Required) The cluster node name."
														}
													]
												},
												"description": "List local USB devices."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/hardware/usb",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"hardware",
																"usb"
															],
															"variable": [
																{
																	"key": "node"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "[\n  {\n    \"busnum\": 3296,\n    \"class\": 4053,\n    \"devnum\": 2669,\n    \"level\": 593,\n    \"manufacturer\": \"string\",\n    \"port\": 5346,\n    \"prodid\": \"string\",\n    \"product\": \"string\",\n    \"serial\": \"string\",\n    \"speed\": \"string\",\n    \"usbpath\": \"string\",\n    \"vendid\": \"string\"\n  },\n  {\n    \"busnum\": 9046,\n    \"class\": 5507,\n    \"devnum\": 4640,\n    \"level\": 9420,\n    \"manufacturer\": \"string\",\n    \"port\": 9940,\n    \"prodid\": \"string\",\n    \"product\": \"string\",\n    \"serial\": \"string\",\n    \"speed\": \"string\",\n    \"usbpath\": \"string\",\n    \"vendid\": \"string\"\n  }\n]"
												}
											]
										}
									]
								},
								{
									"name": "Index of hardware types",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/nodes/:node/hardware",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"nodes",
												":node",
												"hardware"
											],
											"variable": [
												{
													"key": "node",
													"value": "string",
													"description": "(Required) The cluster node name."
												}
											]
										},
										"description": "Index of hardware types"
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/hardware",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"hardware"
													],
													"variable": [
														{
															"key": "node"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"type\": \"string\"\n  },\n  {\n    \"type\": \"string\"\n  }\n]"
										}
									]
								}
							]
						},
						{
							"name": "capabilities",
							"item": [
								{
									"name": "qemu",
									"item": [
										{
											"name": "cpu",
											"item": [
												{
													"name": "List all custom and default CPU models.",
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/capabilities/qemu/cpu",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"capabilities",
																"qemu",
																"cpu"
															],
															"variable": [
																{
																	"key": "node",
																	"value": "string",
																	"description": "(Required) The cluster node name."
																}
															]
														},
														"description": "List all custom and default CPU models."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/capabilities/qemu/cpu",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"capabilities",
																		"qemu",
																		"cpu"
																	],
																	"variable": [
																		{
																			"key": "node"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "[\n  {\n    \"custom\": false,\n    \"name\": \"string\",\n    \"vendor\": \"string\"\n  },\n  {\n    \"custom\": true,\n    \"name\": \"string\",\n    \"vendor\": \"string\"\n  }\n]"
														}
													]
												}
											]
										},
										{
											"name": "machines",
											"item": [
												{
													"name": "Get available QEMU/KVM machine types.",
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/capabilities/qemu/machines",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"capabilities",
																"qemu",
																"machines"
															],
															"variable": [
																{
																	"key": "node",
																	"value": "string",
																	"description": "(Required) The cluster node name."
																}
															]
														},
														"description": "Get available QEMU/KVM machine types."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/capabilities/qemu/machines",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"capabilities",
																		"qemu",
																		"machines"
																	],
																	"variable": [
																		{
																			"key": "node"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "[\n  {\n    \"changes\": \"string\",\n    \"id\": \"string\",\n    \"type\": \"i440fx\",\n    \"version\": \"string\",\n    \"key_0\": 1\n  },\n  {\n    \"changes\": \"string\",\n    \"id\": \"string\",\n    \"type\": \"q35\",\n    \"version\": \"string\"\n  }\n]"
														}
													]
												}
											]
										},
										{
											"name": "migration",
											"item": [
												{
													"name": "Get node-specific QEMU migration capabilities of the node. Requires the 'Sys.Audit' permission on '/nodes/<node>'.",
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/capabilities/qemu/migration",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"capabilities",
																"qemu",
																"migration"
															],
															"variable": [
																{
																	"key": "node",
																	"value": "string",
																	"description": "(Required) The cluster node name."
																}
															]
														},
														"description": "Get node-specific QEMU migration capabilities of the node. Requires the 'Sys.Audit' permission on '/nodes/<node>'."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/capabilities/qemu/migration",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"capabilities",
																		"qemu",
																		"migration"
																	],
																	"variable": [
																		{
																			"key": "node"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"dbus-vmstate\": false,\n  \"key_0\": {},\n  \"key_1\": {}\n}"
														}
													]
												}
											]
										},
										{
											"name": "QEMU capabilities index.",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/capabilities/qemu",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"capabilities",
														"qemu"
													],
													"variable": [
														{
															"key": "node",
															"value": "string",
															"description": "(Required) The cluster node name."
														}
													]
												},
												"description": "QEMU capabilities index."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/capabilities/qemu",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"capabilities",
																"qemu"
															],
															"variable": [
																{
																	"key": "node"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "[]"
												}
											]
										}
									]
								},
								{
									"name": "Node capabilities index.",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/nodes/:node/capabilities",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"nodes",
												":node",
												"capabilities"
											],
											"variable": [
												{
													"key": "node",
													"value": "string",
													"description": "(Required) The cluster node name."
												}
											]
										},
										"description": "Node capabilities index."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/capabilities",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"capabilities"
													],
													"variable": [
														{
															"key": "node"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[]"
										}
									]
								}
							]
						},
						{
							"name": "storage",
							"item": [
								{
									"name": "{storage}",
									"item": [
										{
											"name": "prunebackups",
											"item": [
												{
													"name": "Prune backups. Only those using the standard naming scheme are considered.",
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/storage/:storage/prunebackups?prune-backups=string&type=lxc&vmid=358786328",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"storage",
																":storage",
																"prunebackups"
															],
															"query": [
																{
																	"key": "prune-backups",
																	"value": "string",
																	"description": "Use these retention options instead of those from the storage configuration."
																},
																{
																	"key": "type",
																	"value": "lxc",
																	"description": "Either 'qemu' or 'lxc'. Only consider backups for guests of this type."
																},
																{
																	"key": "vmid",
																	"value": "358786328",
																	"description": "Only prune backups for this VM."
																}
															],
															"variable": [
																{
																	"key": "node",
																	"value": "string",
																	"description": "(Required) The cluster node name."
																},
																{
																	"key": "storage",
																	"value": "string",
																	"description": "(Required) The storage identifier."
																}
															]
														},
														"description": "Prune backups. Only those using the standard naming scheme are considered."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/storage/:storage/prunebackups?prune-backups=string&type=lxc&vmid=358786328",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"storage",
																		":storage",
																		"prunebackups"
																	],
																	"query": [
																		{
																			"key": "prune-backups",
																			"value": "string",
																			"description": "Use these retention options instead of those from the storage configuration."
																		},
																		{
																			"key": "type",
																			"value": "lxc",
																			"description": "Either 'qemu' or 'lxc'. Only consider backups for guests of this type."
																		},
																		{
																			"key": "vmid",
																			"value": "358786328",
																			"description": "Only prune backups for this VM."
																		}
																	],
																	"variable": [
																		{
																			"key": "node"
																		},
																		{
																			"key": "storage"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "string"
														}
													]
												},
												{
													"name": "Get prune information for backups. NOTE: this is only a preview and might not be what a subsequent prune call does if backups are removed/added in the meantime.",
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/storage/:storage/prunebackups?prune-backups=string&type=lxc&vmid=358786328",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"storage",
																":storage",
																"prunebackups"
															],
															"query": [
																{
																	"key": "prune-backups",
																	"value": "string",
																	"description": "Use these retention options instead of those from the storage configuration."
																},
																{
																	"key": "type",
																	"value": "lxc",
																	"description": "Either 'qemu' or 'lxc'. Only consider backups for guests of this type."
																},
																{
																	"key": "vmid",
																	"value": "358786328",
																	"description": "Only consider backups for this guest."
																}
															],
															"variable": [
																{
																	"key": "node",
																	"value": "string",
																	"description": "(Required) The cluster node name."
																},
																{
																	"key": "storage",
																	"value": "string",
																	"description": "(Required) The storage identifier."
																}
															]
														},
														"description": "Get prune information for backups. NOTE: this is only a preview and might not be what a subsequent prune call does if backups are removed/added in the meantime."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/storage/:storage/prunebackups?prune-backups=string&type=lxc&vmid=358786328",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"storage",
																		":storage",
																		"prunebackups"
																	],
																	"query": [
																		{
																			"key": "prune-backups",
																			"value": "string",
																			"description": "Use these retention options instead of those from the storage configuration."
																		},
																		{
																			"key": "type",
																			"value": "lxc",
																			"description": "Either 'qemu' or 'lxc'. Only consider backups for guests of this type."
																		},
																		{
																			"key": "vmid",
																			"value": "358786328",
																			"description": "Only consider backups for this guest."
																		}
																	],
																	"variable": [
																		{
																			"key": "node"
																		},
																		{
																			"key": "storage"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "[\n  {\n    \"ctime\": 5046,\n    \"mark\": \"protected\",\n    \"type\": \"string\",\n    \"vmid\": 4618,\n    \"volid\": \"string\"\n  },\n  {\n    \"ctime\": 1855,\n    \"mark\": \"remove\",\n    \"type\": \"string\",\n    \"vmid\": 5082,\n    \"volid\": \"string\"\n  }\n]"
														}
													]
												}
											]
										},
										{
											"name": "content",
											"item": [
												{
													"name": "{volume}",
													"item": [
														{
															"name": "Delete volume",
															"request": {
																"method": "DELETE",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/storage/:storage/content/:volume?delay=17",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"storage",
																		":storage",
																		"content",
																		":volume"
																	],
																	"query": [
																		{
																			"key": "delay",
																			"value": "17",
																			"description": "Time to wait for the task to finish. We return 'null' if the task finish within that time."
																		}
																	],
																	"variable": [
																		{
																			"key": "node",
																			"value": "string",
																			"description": "(Required) The cluster node name."
																		},
																		{
																			"key": "storage",
																			"value": "string",
																			"description": "The storage identifier."
																		},
																		{
																			"key": "volume",
																			"value": "string",
																			"description": "(Required) Volume identifier"
																		}
																	]
																},
																"description": "Delete volume"
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "DELETE",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/nodes/:node/storage/:storage/content/:volume?delay=17",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"nodes",
																				":node",
																				"storage",
																				":storage",
																				"content",
																				":volume"
																			],
																			"query": [
																				{
																					"key": "delay",
																					"value": "17",
																					"description": "Time to wait for the task to finish. We return 'null' if the task finish within that time."
																				}
																			],
																			"variable": [
																				{
																					"key": "node"
																				},
																				{
																					"key": "storage"
																				},
																				{
																					"key": "volume"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "string"
																}
															]
														},
														{
															"name": "Get volume attributes",
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/storage/:storage/content/:volume",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"storage",
																		":storage",
																		"content",
																		":volume"
																	],
																	"variable": [
																		{
																			"key": "node",
																			"value": "string",
																			"description": "(Required) The cluster node name."
																		},
																		{
																			"key": "storage",
																			"value": "string",
																			"description": "The storage identifier."
																		},
																		{
																			"key": "volume",
																			"value": "string",
																			"description": "(Required) Volume identifier"
																		}
																	]
																},
																"description": "Get volume attributes"
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/nodes/:node/storage/:storage/content/:volume",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"nodes",
																				":node",
																				"storage",
																				":storage",
																				"content",
																				":volume"
																			],
																			"variable": [
																				{
																					"key": "node"
																				},
																				{
																					"key": "storage"
																				},
																				{
																					"key": "volume"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"format\": \"string\",\n  \"notes\": \"string\",\n  \"path\": \"string\",\n  \"protected\": false,\n  \"size\": 6089,\n  \"used\": 6790\n}"
																}
															]
														},
														{
															"name": "Copy a volume. This is experimental code - do not use.",
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/storage/:storage/content/:volume?target=string&target_node=string",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"storage",
																		":storage",
																		"content",
																		":volume"
																	],
																	"query": [
																		{
																			"key": "target",
																			"value": "string",
																			"description": "(Required) Target volume identifier"
																		},
																		{
																			"key": "target_node",
																			"value": "string",
																			"description": "Target node. Default is local node."
																		}
																	],
																	"variable": [
																		{
																			"key": "node",
																			"value": "string",
																			"description": "(Required) The cluster node name."
																		},
																		{
																			"key": "storage",
																			"value": "string",
																			"description": "The storage identifier."
																		},
																		{
																			"key": "volume",
																			"value": "string",
																			"description": "(Required) Source volume identifier"
																		}
																	]
																},
																"description": "Copy a volume. This is experimental code - do not use."
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/nodes/:node/storage/:storage/content/:volume?target=string&target_node=string",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"nodes",
																				":node",
																				"storage",
																				":storage",
																				"content",
																				":volume"
																			],
																			"query": [
																				{
																					"key": "target",
																					"value": "string",
																					"description": "(Required) Target volume identifier"
																				},
																				{
																					"key": "target_node",
																					"value": "string",
																					"description": "Target node. Default is local node."
																				}
																			],
																			"variable": [
																				{
																					"key": "node"
																				},
																				{
																					"key": "storage"
																				},
																				{
																					"key": "volume"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "string"
																}
															]
														},
														{
															"name": "Update volume attributes",
															"request": {
																"method": "PUT",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/storage/:storage/content/:volume?notes=string&protected=true",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"storage",
																		":storage",
																		"content",
																		":volume"
																	],
																	"query": [
																		{
																			"key": "notes",
																			"value": "string",
																			"description": "The new notes."
																		},
																		{
																			"key": "protected",
																			"value": "true",
																			"description": "Protection status. Currently only supported for backups."
																		}
																	],
																	"variable": [
																		{
																			"key": "node",
																			"value": "string",
																			"description": "(Required) The cluster node name."
																		},
																		{
																			"key": "storage",
																			"value": "string",
																			"description": "The storage identifier."
																		},
																		{
																			"key": "volume",
																			"value": "string",
																			"description": "(Required) Volume identifier"
																		}
																	]
																},
																"description": "Update volume attributes"
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "PUT",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/nodes/:node/storage/:storage/content/:volume?notes=string&protected=true",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"nodes",
																				":node",
																				"storage",
																				":storage",
																				"content",
																				":volume"
																			],
																			"query": [
																				{
																					"key": "notes",
																					"value": "string",
																					"description": "The new notes."
																				},
																				{
																					"key": "protected",
																					"value": "true",
																					"description": "Protection status. Currently only supported for backups."
																				}
																			],
																			"variable": [
																				{
																					"key": "node"
																				},
																				{
																					"key": "storage"
																				},
																				{
																					"key": "volume"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "null"
																}
															]
														}
													]
												},
												{
													"name": "List storage content.",
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/storage/:storage/content?content=string&vmid=358786328",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"storage",
																":storage",
																"content"
															],
															"query": [
																{
																	"key": "content",
																	"value": "string",
																	"description": "Only list content of this type."
																},
																{
																	"key": "vmid",
																	"value": "358786328",
																	"description": "Only list images for this VM"
																}
															],
															"variable": [
																{
																	"key": "node",
																	"value": "string",
																	"description": "(Required) The cluster node name."
																},
																{
																	"key": "storage",
																	"value": "string",
																	"description": "(Required) The storage identifier."
																}
															]
														},
														"description": "List storage content."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/storage/:storage/content?content=string&vmid=358786328",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"storage",
																		":storage",
																		"content"
																	],
																	"query": [
																		{
																			"key": "content",
																			"value": "string",
																			"description": "Only list content of this type."
																		},
																		{
																			"key": "vmid",
																			"value": "358786328",
																			"description": "Only list images for this VM"
																		}
																	],
																	"variable": [
																		{
																			"key": "node"
																		},
																		{
																			"key": "storage"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "[\n  {\n    \"ctime\": 908,\n    \"encrypted\": \"string\",\n    \"format\": \"string\",\n    \"notes\": \"string\",\n    \"parent\": \"string\",\n    \"protected\": true,\n    \"size\": 8381,\n    \"used\": 1762,\n    \"verification\": {\n      \"state\": \"string\",\n      \"upid\": \"string\"\n    },\n    \"vmid\": 903,\n    \"volid\": \"string\"\n  },\n  {\n    \"ctime\": 2904,\n    \"encrypted\": \"string\",\n    \"format\": \"string\",\n    \"notes\": \"string\",\n    \"parent\": \"string\",\n    \"protected\": true,\n    \"size\": 7647,\n    \"used\": 1227,\n    \"verification\": {\n      \"state\": \"string\",\n      \"upid\": \"string\"\n    },\n    \"vmid\": 3747,\n    \"volid\": \"string\"\n  }\n]"
														}
													]
												},
												{
													"name": "Allocate disk images.",
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/storage/:storage/content?filename=string&format=qcow2&size=013&vmid=358786328",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"storage",
																":storage",
																"content"
															],
															"query": [
																{
																	"key": "filename",
																	"value": "string",
																	"description": "(Required) The name of the file to create."
																},
																{
																	"key": "format",
																	"value": "qcow2",
																	"description": "Format of the image."
																},
																{
																	"key": "size",
																	"value": "013",
																	"description": "(Required) Size in kilobyte (1024 bytes). Optional suffixes 'M' (megabyte, 1024K) and 'G' (gigabyte, 1024M)"
																},
																{
																	"key": "vmid",
																	"value": "358786328",
																	"description": "(Required) Specify owner VM"
																}
															],
															"variable": [
																{
																	"key": "node",
																	"value": "string",
																	"description": "(Required) The cluster node name."
																},
																{
																	"key": "storage",
																	"value": "string",
																	"description": "(Required) The storage identifier."
																}
															]
														},
														"description": "Allocate disk images."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/storage/:storage/content?filename=string&format=qcow2&size=013&vmid=358786328",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"storage",
																		":storage",
																		"content"
																	],
																	"query": [
																		{
																			"key": "filename",
																			"value": "string",
																			"description": "(Required) The name of the file to create."
																		},
																		{
																			"key": "format",
																			"value": "qcow2",
																			"description": "Format of the image."
																		},
																		{
																			"key": "size",
																			"value": "013",
																			"description": "(Required) Size in kilobyte (1024 bytes). Optional suffixes 'M' (megabyte, 1024K) and 'G' (gigabyte, 1024M)"
																		},
																		{
																			"key": "vmid",
																			"value": "358786328",
																			"description": "(Required) Specify owner VM"
																		}
																	],
																	"variable": [
																		{
																			"key": "node"
																		},
																		{
																			"key": "storage"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "string"
														}
													]
												}
											]
										},
										{
											"name": "file-restore",
											"item": [
												{
													"name": "list",
													"item": [
														{
															"name": "List files and directories for single file restore under the given path.",
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/storage/:storage/file-restore/list?filepath=string&volume=string",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"storage",
																		":storage",
																		"file-restore",
																		"list"
																	],
																	"query": [
																		{
																			"key": "filepath",
																			"value": "string",
																			"description": "(Required) base64-path to the directory or file being listed, or \"/\"."
																		},
																		{
																			"key": "volume",
																			"value": "string",
																			"description": "(Required) Backup volume ID or name. Currently only PBS snapshots are supported."
																		}
																	],
																	"variable": [
																		{
																			"key": "node",
																			"value": "string",
																			"description": "(Required) The cluster node name."
																		},
																		{
																			"key": "storage",
																			"value": "string",
																			"description": "(Required) The storage identifier."
																		}
																	]
																},
																"description": "List files and directories for single file restore under the given path."
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/nodes/:node/storage/:storage/file-restore/list?filepath=string&volume=string",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"nodes",
																				":node",
																				"storage",
																				":storage",
																				"file-restore",
																				"list"
																			],
																			"query": [
																				{
																					"key": "filepath",
																					"value": "string",
																					"description": "(Required) base64-path to the directory or file being listed, or \"/\"."
																				},
																				{
																					"key": "volume",
																					"value": "string",
																					"description": "(Required) Backup volume ID or name. Currently only PBS snapshots are supported."
																				}
																			],
																			"variable": [
																				{
																					"key": "node"
																				},
																				{
																					"key": "storage"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "[\n  {\n    \"filepath\": \"string\",\n    \"leaf\": false,\n    \"mtime\": 6780,\n    \"size\": 7352,\n    \"text\": \"string\",\n    \"type\": \"string\"\n  },\n  {\n    \"filepath\": \"string\",\n    \"leaf\": false,\n    \"mtime\": 4945,\n    \"size\": 9347,\n    \"text\": \"string\",\n    \"type\": \"string\"\n  }\n]"
																}
															]
														}
													]
												},
												{
													"name": "download",
													"item": [
														{
															"name": "Extract a file or directory (as zip archive) from a PBS backup.",
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/storage/:storage/file-restore/download?filepath=string&tar=0&volume=string",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"storage",
																		":storage",
																		"file-restore",
																		"download"
																	],
																	"query": [
																		{
																			"key": "filepath",
																			"value": "string",
																			"description": "(Required) base64-path to the directory or file to download."
																		},
																		{
																			"key": "tar",
																			"value": "0",
																			"description": "Download dirs as 'tar.zst' instead of 'zip'."
																		},
																		{
																			"key": "volume",
																			"value": "string",
																			"description": "(Required) Backup volume ID or name. Currently only PBS snapshots are supported."
																		}
																	],
																	"variable": [
																		{
																			"key": "node",
																			"value": "string",
																			"description": "(Required) The cluster node name."
																		},
																		{
																			"key": "storage",
																			"value": "string",
																			"description": "(Required) The storage identifier."
																		}
																	]
																},
																"description": "Extract a file or directory (as zip archive) from a PBS backup."
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/nodes/:node/storage/:storage/file-restore/download?filepath=string&tar=0&volume=string",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"nodes",
																				":node",
																				"storage",
																				":storage",
																				"file-restore",
																				"download"
																			],
																			"query": [
																				{
																					"key": "filepath",
																					"value": "string",
																					"description": "(Required) base64-path to the directory or file to download."
																				},
																				{
																					"key": "tar",
																					"value": "0",
																					"description": "Download dirs as 'tar.zst' instead of 'zip'."
																				},
																				{
																					"key": "volume",
																					"value": "string",
																					"description": "(Required) Backup volume ID or name. Currently only PBS snapshots are supported."
																				}
																			],
																			"variable": [
																				{
																					"key": "node"
																				},
																				{
																					"key": "storage"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "null"
																}
															]
														}
													]
												}
											]
										},
										{
											"name": "status",
											"item": [
												{
													"name": "Read storage status.",
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/storage/:storage/status",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"storage",
																":storage",
																"status"
															],
															"variable": [
																{
																	"key": "node",
																	"value": "string",
																	"description": "(Required) The cluster node name."
																},
																{
																	"key": "storage",
																	"value": "string",
																	"description": "(Required) The storage identifier."
																}
															]
														},
														"description": "Read storage status."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/storage/:storage/status",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"storage",
																		":storage",
																		"status"
																	],
																	"variable": [
																		{
																			"key": "node"
																		},
																		{
																			"key": "storage"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{}"
														}
													]
												}
											]
										},
										{
											"name": "rrd",
											"item": [
												{
													"name": "Read storage RRD statistics (returns PNG).",
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/storage/:storage/rrd?cf=MAX&ds=string&timeframe=hour",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"storage",
																":storage",
																"rrd"
															],
															"query": [
																{
																	"key": "cf",
																	"value": "MAX",
																	"description": "The RRD consolidation function"
																},
																{
																	"key": "ds",
																	"value": "string",
																	"description": "(Required) The list of datasources you want to display."
																},
																{
																	"key": "timeframe",
																	"value": "hour",
																	"description": "(Required) Specify the time frame you are interested in."
																}
															],
															"variable": [
																{
																	"key": "node",
																	"value": "string",
																	"description": "(Required) The cluster node name."
																},
																{
																	"key": "storage",
																	"value": "string",
																	"description": "(Required) The storage identifier."
																}
															]
														},
														"description": "Read storage RRD statistics (returns PNG)."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/storage/:storage/rrd?cf=MAX&ds=string&timeframe=hour",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"storage",
																		":storage",
																		"rrd"
																	],
																	"query": [
																		{
																			"key": "cf",
																			"value": "MAX",
																			"description": "The RRD consolidation function"
																		},
																		{
																			"key": "ds",
																			"value": "string",
																			"description": "(Required) The list of datasources you want to display."
																		},
																		{
																			"key": "timeframe",
																			"value": "hour",
																			"description": "(Required) Specify the time frame you are interested in."
																		}
																	],
																	"variable": [
																		{
																			"key": "node"
																		},
																		{
																			"key": "storage"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"filename\": \"string\"\n}"
														}
													]
												}
											]
										},
										{
											"name": "rrddata",
											"item": [
												{
													"name": "Read storage RRD statistics.",
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/storage/:storage/rrddata?cf=MAX&timeframe=hour",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"storage",
																":storage",
																"rrddata"
															],
															"query": [
																{
																	"key": "cf",
																	"value": "MAX",
																	"description": "The RRD consolidation function"
																},
																{
																	"key": "timeframe",
																	"value": "hour",
																	"description": "(Required) Specify the time frame you are interested in."
																}
															],
															"variable": [
																{
																	"key": "node",
																	"value": "string",
																	"description": "(Required) The cluster node name."
																},
																{
																	"key": "storage",
																	"value": "string",
																	"description": "(Required) The storage identifier."
																}
															]
														},
														"description": "Read storage RRD statistics."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/storage/:storage/rrddata?cf=MAX&timeframe=hour",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"storage",
																		":storage",
																		"rrddata"
																	],
																	"query": [
																		{
																			"key": "cf",
																			"value": "MAX",
																			"description": "The RRD consolidation function"
																		},
																		{
																			"key": "timeframe",
																			"value": "hour",
																			"description": "(Required) Specify the time frame you are interested in."
																		}
																	],
																	"variable": [
																		{
																			"key": "node"
																		},
																		{
																			"key": "storage"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "[]"
														}
													]
												}
											]
										},
										{
											"name": "upload",
											"item": [
												{
													"name": "Upload templates, ISO images, OVAs and VM images.",
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/storage/:storage/upload?checksum=string&checksum-algorithm=md5&content=vztmpl&filename=string&tmpfilename=/var/tmp/pveupload-e033118",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"storage",
																":storage",
																"upload"
															],
															"query": [
																{
																	"key": "checksum",
																	"value": "string",
																	"description": "The expected checksum of the file."
																},
																{
																	"key": "checksum-algorithm",
																	"value": "md5",
																	"description": "The algorithm to calculate the checksum of the file."
																},
																{
																	"key": "content",
																	"value": "vztmpl",
																	"description": "(Required) Content type."
																},
																{
																	"key": "filename",
																	"value": "string",
																	"description": "(Required) The name of the file to create. Caution: This will be normalized!"
																},
																{
																	"key": "tmpfilename",
																	"value": "/var/tmp/pveupload-e033118",
																	"description": "The source file name. This parameter is usually set by the REST handler. You can only overwrite it when connecting to the trusted port on localhost."
																}
															],
															"variable": [
																{
																	"key": "node",
																	"value": "string",
																	"description": "(Required) The cluster node name."
																},
																{
																	"key": "storage",
																	"value": "string",
																	"description": "(Required) The storage identifier."
																}
															]
														},
														"description": "Upload templates, ISO images, OVAs and VM images."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/storage/:storage/upload?checksum=string&checksum-algorithm=md5&content=vztmpl&filename=string&tmpfilename=/var/tmp/pveupload-e033118",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"storage",
																		":storage",
																		"upload"
																	],
																	"query": [
																		{
																			"key": "checksum",
																			"value": "string",
																			"description": "The expected checksum of the file."
																		},
																		{
																			"key": "checksum-algorithm",
																			"value": "md5",
																			"description": "The algorithm to calculate the checksum of the file."
																		},
																		{
																			"key": "content",
																			"value": "vztmpl",
																			"description": "(Required) Content type."
																		},
																		{
																			"key": "filename",
																			"value": "string",
																			"description": "(Required) The name of the file to create. Caution: This will be normalized!"
																		},
																		{
																			"key": "tmpfilename",
																			"value": "/var/tmp/pveupload-e033118",
																			"description": "The source file name. This parameter is usually set by the REST handler. You can only overwrite it when connecting to the trusted port on localhost."
																		}
																	],
																	"variable": [
																		{
																			"key": "node"
																		},
																		{
																			"key": "storage"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "string"
														}
													]
												}
											]
										},
										{
											"name": "download-url",
											"item": [
												{
													"name": "Download templates, ISO images, OVAs and VM images by using an URL.",
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/storage/:storage/download-url?checksum=string&checksum-algorithm=md5&compression=string&content=vztmpl&filename=string&url=https://Q=a&verify-certificates=1",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"storage",
																":storage",
																"download-url"
															],
															"query": [
																{
																	"key": "checksum",
																	"value": "string",
																	"description": "The expected checksum of the file."
																},
																{
																	"key": "checksum-algorithm",
																	"value": "md5",
																	"description": "The algorithm to calculate the checksum of the file."
																},
																{
																	"key": "compression",
																	"value": "string",
																	"description": "Decompress the downloaded file using the specified compression algorithm."
																},
																{
																	"key": "content",
																	"value": "vztmpl",
																	"description": "(Required) Content type."
																},
																{
																	"key": "filename",
																	"value": "string",
																	"description": "(Required) The name of the file to create. Caution: This will be normalized!"
																},
																{
																	"key": "url",
																	"value": "https://Q=a",
																	"description": "(Required) The URL to download the file from."
																},
																{
																	"key": "verify-certificates",
																	"value": "1",
																	"description": "If false, no SSL/TLS certificates will be verified."
																}
															],
															"variable": [
																{
																	"key": "node",
																	"value": "string",
																	"description": "(Required) The cluster node name."
																},
																{
																	"key": "storage",
																	"value": "string",
																	"description": "(Required) The storage identifier."
																}
															]
														},
														"description": "Download templates, ISO images, OVAs and VM images by using an URL."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/storage/:storage/download-url?checksum=string&checksum-algorithm=md5&compression=string&content=vztmpl&filename=string&url=https://Q=a&verify-certificates=1",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"storage",
																		":storage",
																		"download-url"
																	],
																	"query": [
																		{
																			"key": "checksum",
																			"value": "string",
																			"description": "The expected checksum of the file."
																		},
																		{
																			"key": "checksum-algorithm",
																			"value": "md5",
																			"description": "The algorithm to calculate the checksum of the file."
																		},
																		{
																			"key": "compression",
																			"value": "string",
																			"description": "Decompress the downloaded file using the specified compression algorithm."
																		},
																		{
																			"key": "content",
																			"value": "vztmpl",
																			"description": "(Required) Content type."
																		},
																		{
																			"key": "filename",
																			"value": "string",
																			"description": "(Required) The name of the file to create. Caution: This will be normalized!"
																		},
																		{
																			"key": "url",
																			"value": "https://Q=a",
																			"description": "(Required) The URL to download the file from."
																		},
																		{
																			"key": "verify-certificates",
																			"value": "1",
																			"description": "If false, no SSL/TLS certificates will be verified."
																		}
																	],
																	"variable": [
																		{
																			"key": "node"
																		},
																		{
																			"key": "storage"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "string"
														}
													]
												}
											]
										},
										{
											"name": "import-metadata",
											"item": [
												{
													"name": "Get the base parameters for creating a guest which imports data from a foreign importable guest, like an ESXi VM",
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/storage/:storage/import-metadata?volume=string",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"storage",
																":storage",
																"import-metadata"
															],
															"query": [
																{
																	"key": "volume",
																	"value": "string",
																	"description": "(Required) Volume identifier for the guest archive/entry."
																}
															],
															"variable": [
																{
																	"key": "node",
																	"value": "string",
																	"description": "(Required) The cluster node name."
																},
																{
																	"key": "storage",
																	"value": "string",
																	"description": "(Required) The storage identifier."
																}
															]
														},
														"description": "Get the base parameters for creating a guest which imports data from a foreign importable guest, like an ESXi VM"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/storage/:storage/import-metadata?volume=string",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"storage",
																		":storage",
																		"import-metadata"
																	],
																	"query": [
																		{
																			"key": "volume",
																			"value": "string",
																			"description": "(Required) Volume identifier for the guest archive/entry."
																		}
																	],
																	"variable": [
																		{
																			"key": "node"
																		},
																		{
																			"key": "storage"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"create-args\": {\n    \"key_0\": 1\n  },\n  \"disks\": {\n    \"key_0\": 1\n  },\n  \"net\": {\n    \"key_0\": 1,\n    \"key_1\": 1,\n    \"key_2\": 1,\n    \"key_3\": 1\n  },\n  \"source\": \"esxi\",\n  \"type\": \"vm\",\n  \"warnings\": [\n    {\n      \"key\": \"string\",\n      \"type\": \"serial-port-socket-only\",\n      \"value\": \"string\",\n      \"key_0\": 1\n    },\n    {\n      \"key\": \"string\",\n      \"type\": \"ovmf-with-lsi-unsupported\",\n      \"value\": \"string\",\n      \"key_0\": 1,\n      \"key_1\": 1\n    }\n  ]\n}"
														}
													]
												}
											]
										},
										{
											"name": "/nodes/:node/storage/:storage",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/storage/:storage",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"storage",
														":storage"
													],
													"variable": [
														{
															"key": "node",
															"value": "string",
															"description": "(Required) The cluster node name."
														},
														{
															"key": "storage",
															"value": "string",
															"description": "(Required) The storage identifier."
														}
													]
												}
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/storage/:storage",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"storage",
																":storage"
															],
															"variable": [
																{
																	"key": "node"
																},
																{
																	"key": "storage"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "[\n  {\n    \"subdir\": \"string\"\n  },\n  {\n    \"subdir\": \"string\"\n  }\n]"
												}
											]
										}
									]
								},
								{
									"name": "Get status for all datastores.",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/nodes/:node/storage?content=string&enabled=0&format=0&storage=string&target=string",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"nodes",
												":node",
												"storage"
											],
											"query": [
												{
													"key": "content",
													"value": "string",
													"description": "Only list stores which support this content type."
												},
												{
													"key": "enabled",
													"value": "0",
													"description": "Only list stores which are enabled (not disabled in config)."
												},
												{
													"key": "format",
													"value": "0",
													"description": "Include information about formats"
												},
												{
													"key": "storage",
													"value": "string",
													"description": "Only list status for  specified storage"
												},
												{
													"key": "target",
													"value": "string",
													"description": "If target is different to 'node', we only lists shared storages which content is accessible on this 'node' and the specified 'target' node."
												}
											],
											"variable": [
												{
													"key": "node",
													"value": "string",
													"description": "(Required) The cluster node name."
												}
											]
										},
										"description": "Get status for all datastores."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/storage?content=string&enabled=0&format=0&storage=string&target=string",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"storage"
													],
													"query": [
														{
															"key": "content",
															"value": "string",
															"description": "Only list stores which support this content type."
														},
														{
															"key": "enabled",
															"value": "0",
															"description": "Only list stores which are enabled (not disabled in config)."
														},
														{
															"key": "format",
															"value": "0",
															"description": "Include information about formats"
														},
														{
															"key": "storage",
															"value": "string",
															"description": "Only list status for  specified storage"
														},
														{
															"key": "target",
															"value": "string",
															"description": "If target is different to 'node', we only lists shared storages which content is accessible on this 'node' and the specified 'target' node."
														}
													],
													"variable": [
														{
															"key": "node"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"active\": false,\n    \"avail\": 1678,\n    \"content\": \"string\",\n    \"enabled\": false,\n    \"shared\": true,\n    \"storage\": \"string\",\n    \"total\": 1139,\n    \"type\": \"string\",\n    \"used\": 3902,\n    \"used_fraction\": 2463.5445128754263\n  },\n  {\n    \"active\": true,\n    \"avail\": 6848,\n    \"content\": \"string\",\n    \"enabled\": false,\n    \"shared\": false,\n    \"storage\": \"string\",\n    \"total\": 9486,\n    \"type\": \"string\",\n    \"used\": 4098,\n    \"used_fraction\": 6301.322450317508\n  }\n]"
										}
									]
								}
							]
						},
						{
							"name": "disks",
							"item": [
								{
									"name": "lvm",
									"item": [
										{
											"name": "{name}",
											"item": [
												{
													"name": "Remove an LVM Volume Group.",
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/disks/lvm/:name?cleanup-config=0&cleanup-disks=0",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"disks",
																"lvm",
																":name"
															],
															"query": [
																{
																	"key": "cleanup-config",
																	"value": "0",
																	"description": "Marks associated storage(s) as not available on this node anymore or removes them from the configuration (if configured for this node only)."
																},
																{
																	"key": "cleanup-disks",
																	"value": "0",
																	"description": "Also wipe disks so they can be repurposed afterwards."
																}
															],
															"variable": [
																{
																	"key": "node",
																	"value": "string",
																	"description": "(Required) The cluster node name."
																},
																{
																	"key": "name",
																	"value": "string",
																	"description": "(Required) The storage identifier."
																}
															]
														},
														"description": "Remove an LVM Volume Group."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/disks/lvm/:name?cleanup-config=0&cleanup-disks=0",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"disks",
																		"lvm",
																		":name"
																	],
																	"query": [
																		{
																			"key": "cleanup-config",
																			"value": "0",
																			"description": "Marks associated storage(s) as not available on this node anymore or removes them from the configuration (if configured for this node only)."
																		},
																		{
																			"key": "cleanup-disks",
																			"value": "0",
																			"description": "Also wipe disks so they can be repurposed afterwards."
																		}
																	],
																	"variable": [
																		{
																			"key": "node"
																		},
																		{
																			"key": "name"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "string"
														}
													]
												}
											]
										},
										{
											"name": "List LVM Volume Groups",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/disks/lvm",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"disks",
														"lvm"
													],
													"variable": [
														{
															"key": "node",
															"value": "string",
															"description": "(Required) The cluster node name."
														}
													]
												},
												"description": "List LVM Volume Groups"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/disks/lvm",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"disks",
																"lvm"
															],
															"variable": [
																{
																	"key": "node"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"children\": [\n    {\n      \"children\": [\n        {\n          \"free\": 7445,\n          \"leaf\": true,\n          \"name\": \"string\",\n          \"size\": 5823\n        },\n        {\n          \"free\": 723,\n          \"leaf\": false,\n          \"name\": \"string\",\n          \"size\": 4191\n        }\n      ],\n      \"free\": 14,\n      \"leaf\": true,\n      \"name\": \"string\",\n      \"size\": 3276\n    },\n    {\n      \"children\": [\n        {\n          \"free\": 3728,\n          \"leaf\": false,\n          \"name\": \"string\",\n          \"size\": 7359\n        },\n        {\n          \"free\": 1949,\n          \"leaf\": true,\n          \"name\": \"string\",\n          \"size\": 4141\n        }\n      ],\n      \"free\": 5823,\n      \"leaf\": false,\n      \"name\": \"string\",\n      \"size\": 1044\n    }\n  ],\n  \"leaf\": true\n}"
												}
											]
										},
										{
											"name": "Create an LVM Volume Group",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/disks/lvm?add_storage=0&device=string&name=string",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"disks",
														"lvm"
													],
													"query": [
														{
															"key": "add_storage",
															"value": "0",
															"description": "Configure storage using the Volume Group"
														},
														{
															"key": "device",
															"value": "string",
															"description": "(Required) The block device you want to create the volume group on"
														},
														{
															"key": "name",
															"value": "string",
															"description": "(Required) The storage identifier."
														}
													],
													"variable": [
														{
															"key": "node",
															"value": "string",
															"description": "(Required) The cluster node name."
														}
													]
												},
												"description": "Create an LVM Volume Group"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/disks/lvm?add_storage=0&device=string&name=string",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"disks",
																"lvm"
															],
															"query": [
																{
																	"key": "add_storage",
																	"value": "0",
																	"description": "Configure storage using the Volume Group"
																},
																{
																	"key": "device",
																	"value": "string",
																	"description": "(Required) The block device you want to create the volume group on"
																},
																{
																	"key": "name",
																	"value": "string",
																	"description": "(Required) The storage identifier."
																}
															],
															"variable": [
																{
																	"key": "node"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "string"
												}
											]
										}
									]
								},
								{
									"name": "lvmthin",
									"item": [
										{
											"name": "{name}",
											"item": [
												{
													"name": "Remove an LVM thin pool.",
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/disks/lvmthin/:name?cleanup-config=0&cleanup-disks=0&volume-group=string",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"disks",
																"lvmthin",
																":name"
															],
															"query": [
																{
																	"key": "cleanup-config",
																	"value": "0",
																	"description": "Marks associated storage(s) as not available on this node anymore or removes them from the configuration (if configured for this node only)."
																},
																{
																	"key": "cleanup-disks",
																	"value": "0",
																	"description": "Also wipe disks so they can be repurposed afterwards."
																},
																{
																	"key": "volume-group",
																	"value": "string",
																	"description": "(Required) The storage identifier."
																}
															],
															"variable": [
																{
																	"key": "node",
																	"value": "string",
																	"description": "(Required) The cluster node name."
																},
																{
																	"key": "name",
																	"value": "string",
																	"description": "(Required) The storage identifier."
																}
															]
														},
														"description": "Remove an LVM thin pool."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/disks/lvmthin/:name?cleanup-config=0&cleanup-disks=0&volume-group=string",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"disks",
																		"lvmthin",
																		":name"
																	],
																	"query": [
																		{
																			"key": "cleanup-config",
																			"value": "0",
																			"description": "Marks associated storage(s) as not available on this node anymore or removes them from the configuration (if configured for this node only)."
																		},
																		{
																			"key": "cleanup-disks",
																			"value": "0",
																			"description": "Also wipe disks so they can be repurposed afterwards."
																		},
																		{
																			"key": "volume-group",
																			"value": "string",
																			"description": "(Required) The storage identifier."
																		}
																	],
																	"variable": [
																		{
																			"key": "node"
																		},
																		{
																			"key": "name"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "string"
														}
													]
												}
											]
										},
										{
											"name": "List LVM thinpools",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/disks/lvmthin",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"disks",
														"lvmthin"
													],
													"variable": [
														{
															"key": "node",
															"value": "string",
															"description": "(Required) The cluster node name."
														}
													]
												},
												"description": "List LVM thinpools"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/disks/lvmthin",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"disks",
																"lvmthin"
															],
															"variable": [
																{
																	"key": "node"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "[\n  {\n    \"lv\": \"string\",\n    \"lv_size\": 3787,\n    \"metadata_size\": 4317,\n    \"metadata_used\": 4562,\n    \"used\": 396,\n    \"vg\": \"string\"\n  },\n  {\n    \"lv\": \"string\",\n    \"lv_size\": 8041,\n    \"metadata_size\": 2764,\n    \"metadata_used\": 3,\n    \"used\": 8076,\n    \"vg\": \"string\"\n  }\n]"
												}
											]
										},
										{
											"name": "Create an LVM thinpool",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/disks/lvmthin?add_storage=0&device=string&name=string",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"disks",
														"lvmthin"
													],
													"query": [
														{
															"key": "add_storage",
															"value": "0",
															"description": "Configure storage using the thinpool."
														},
														{
															"key": "device",
															"value": "string",
															"description": "(Required) The block device you want to create the thinpool on."
														},
														{
															"key": "name",
															"value": "string",
															"description": "(Required) The storage identifier."
														}
													],
													"variable": [
														{
															"key": "node",
															"value": "string",
															"description": "(Required) The cluster node name."
														}
													]
												},
												"description": "Create an LVM thinpool"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/disks/lvmthin?add_storage=0&device=string&name=string",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"disks",
																"lvmthin"
															],
															"query": [
																{
																	"key": "add_storage",
																	"value": "0",
																	"description": "Configure storage using the thinpool."
																},
																{
																	"key": "device",
																	"value": "string",
																	"description": "(Required) The block device you want to create the thinpool on."
																},
																{
																	"key": "name",
																	"value": "string",
																	"description": "(Required) The storage identifier."
																}
															],
															"variable": [
																{
																	"key": "node"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "string"
												}
											]
										}
									]
								},
								{
									"name": "directory",
									"item": [
										{
											"name": "{name}",
											"item": [
												{
													"name": "Unmounts the storage and removes the mount unit.",
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/disks/directory/:name?cleanup-config=0&cleanup-disks=0",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"disks",
																"directory",
																":name"
															],
															"query": [
																{
																	"key": "cleanup-config",
																	"value": "0",
																	"description": "Marks associated storage(s) as not available on this node anymore or removes them from the configuration (if configured for this node only)."
																},
																{
																	"key": "cleanup-disks",
																	"value": "0",
																	"description": "Also wipe disk so it can be repurposed afterwards."
																}
															],
															"variable": [
																{
																	"key": "node",
																	"value": "string",
																	"description": "(Required) The cluster node name."
																},
																{
																	"key": "name",
																	"value": "string",
																	"description": "(Required) The storage identifier."
																}
															]
														},
														"description": "Unmounts the storage and removes the mount unit."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/disks/directory/:name?cleanup-config=0&cleanup-disks=0",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"disks",
																		"directory",
																		":name"
																	],
																	"query": [
																		{
																			"key": "cleanup-config",
																			"value": "0",
																			"description": "Marks associated storage(s) as not available on this node anymore or removes them from the configuration (if configured for this node only)."
																		},
																		{
																			"key": "cleanup-disks",
																			"value": "0",
																			"description": "Also wipe disk so it can be repurposed afterwards."
																		}
																	],
																	"variable": [
																		{
																			"key": "node"
																		},
																		{
																			"key": "name"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "string"
														}
													]
												}
											]
										},
										{
											"name": "PVE Managed Directory storages.",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/disks/directory",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"disks",
														"directory"
													],
													"variable": [
														{
															"key": "node",
															"value": "string",
															"description": "(Required) The cluster node name."
														}
													]
												},
												"description": "PVE Managed Directory storages."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/disks/directory",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"disks",
																"directory"
															],
															"variable": [
																{
																	"key": "node"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "[\n  {\n    \"device\": \"string\",\n    \"options\": \"string\",\n    \"path\": \"string\",\n    \"type\": \"string\",\n    \"unitfile\": \"string\"\n  },\n  {\n    \"device\": \"string\",\n    \"options\": \"string\",\n    \"path\": \"string\",\n    \"type\": \"string\",\n    \"unitfile\": \"string\"\n  }\n]"
												}
											]
										},
										{
											"name": "Create a Filesystem on an unused disk. Will be mounted under '/mnt/pve/NAME'.",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/disks/directory?add_storage=0&device=string&filesystem=ext4&name=string",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"disks",
														"directory"
													],
													"query": [
														{
															"key": "add_storage",
															"value": "0",
															"description": "Configure storage using the directory."
														},
														{
															"key": "device",
															"value": "string",
															"description": "(Required) The block device you want to create the filesystem on."
														},
														{
															"key": "filesystem",
															"value": "ext4",
															"description": "The desired filesystem."
														},
														{
															"key": "name",
															"value": "string",
															"description": "(Required) The storage identifier."
														}
													],
													"variable": [
														{
															"key": "node",
															"value": "string",
															"description": "(Required) The cluster node name."
														}
													]
												},
												"description": "Create a Filesystem on an unused disk. Will be mounted under '/mnt/pve/NAME'."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/disks/directory?add_storage=0&device=string&filesystem=ext4&name=string",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"disks",
																"directory"
															],
															"query": [
																{
																	"key": "add_storage",
																	"value": "0",
																	"description": "Configure storage using the directory."
																},
																{
																	"key": "device",
																	"value": "string",
																	"description": "(Required) The block device you want to create the filesystem on."
																},
																{
																	"key": "filesystem",
																	"value": "ext4",
																	"description": "The desired filesystem."
																},
																{
																	"key": "name",
																	"value": "string",
																	"description": "(Required) The storage identifier."
																}
															],
															"variable": [
																{
																	"key": "node"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "string"
												}
											]
										}
									]
								},
								{
									"name": "zfs",
									"item": [
										{
											"name": "{name}",
											"item": [
												{
													"name": "Destroy a ZFS pool.",
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/disks/zfs/:name?cleanup-config=0&cleanup-disks=0",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"disks",
																"zfs",
																":name"
															],
															"query": [
																{
																	"key": "cleanup-config",
																	"value": "0",
																	"description": "Marks associated storage(s) as not available on this node anymore or removes them from the configuration (if configured for this node only)."
																},
																{
																	"key": "cleanup-disks",
																	"value": "0",
																	"description": "Also wipe disks so they can be repurposed afterwards."
																}
															],
															"variable": [
																{
																	"key": "node",
																	"value": "string",
																	"description": "(Required) The cluster node name."
																},
																{
																	"key": "name",
																	"value": "string",
																	"description": "(Required) The storage identifier."
																}
															]
														},
														"description": "Destroy a ZFS pool."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/disks/zfs/:name?cleanup-config=0&cleanup-disks=0",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"disks",
																		"zfs",
																		":name"
																	],
																	"query": [
																		{
																			"key": "cleanup-config",
																			"value": "0",
																			"description": "Marks associated storage(s) as not available on this node anymore or removes them from the configuration (if configured for this node only)."
																		},
																		{
																			"key": "cleanup-disks",
																			"value": "0",
																			"description": "Also wipe disks so they can be repurposed afterwards."
																		}
																	],
																	"variable": [
																		{
																			"key": "node"
																		},
																		{
																			"key": "name"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "string"
														}
													]
												},
												{
													"name": "Get details about a zpool.",
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/disks/zfs/:name",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"disks",
																"zfs",
																":name"
															],
															"variable": [
																{
																	"key": "node",
																	"value": "string",
																	"description": "(Required) The cluster node name."
																},
																{
																	"key": "name",
																	"value": "string",
																	"description": "(Required) The storage identifier."
																}
															]
														},
														"description": "Get details about a zpool."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/disks/zfs/:name",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"disks",
																		"zfs",
																		":name"
																	],
																	"variable": [
																		{
																			"key": "node"
																		},
																		{
																			"key": "name"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"action\": \"string\",\n  \"children\": [\n    {\n      \"cksum\": 7189.438096904241,\n      \"msg\": \"string\",\n      \"name\": \"string\",\n      \"read\": 2531.158649464027,\n      \"state\": \"string\",\n      \"write\": 2701.283259001275\n    },\n    {\n      \"cksum\": 172.51086244536307,\n      \"msg\": \"string\",\n      \"name\": \"string\",\n      \"read\": 9403.525992498024,\n      \"state\": \"string\",\n      \"write\": 3220.043387100031\n    }\n  ],\n  \"errors\": \"string\",\n  \"name\": \"string\",\n  \"scan\": \"string\",\n  \"state\": \"string\",\n  \"status\": \"string\"\n}"
														}
													]
												}
											]
										},
										{
											"name": "List Zpools.",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/disks/zfs",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"disks",
														"zfs"
													],
													"variable": [
														{
															"key": "node",
															"value": "string",
															"description": "(Required) The cluster node name."
														}
													]
												},
												"description": "List Zpools."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/disks/zfs",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"disks",
																"zfs"
															],
															"variable": [
																{
																	"key": "node"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "[\n  {\n    \"alloc\": 7392,\n    \"dedup\": 6052.38646861761,\n    \"frag\": 8873,\n    \"free\": 2619,\n    \"health\": \"string\",\n    \"name\": \"string\",\n    \"size\": 6966\n  },\n  {\n    \"alloc\": 2005,\n    \"dedup\": 8656.467602261786,\n    \"frag\": 4433,\n    \"free\": 7977,\n    \"health\": \"string\",\n    \"name\": \"string\",\n    \"size\": 5303\n  }\n]"
												}
											]
										},
										{
											"name": "Create a ZFS pool.",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/disks/zfs?add_storage=0&ashift=12&compression=on&devices=string&draid-config=string&name=string&raidlevel=draid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"disks",
														"zfs"
													],
													"query": [
														{
															"key": "add_storage",
															"value": "0",
															"description": "Configure storage using the zpool."
														},
														{
															"key": "ashift",
															"value": "12",
															"description": "Pool sector size exponent."
														},
														{
															"key": "compression",
															"value": "on",
															"description": "The compression algorithm to use."
														},
														{
															"key": "devices",
															"value": "string",
															"description": "(Required) The block devices you want to create the zpool on."
														},
														{
															"key": "draid-config",
															"value": "string"
														},
														{
															"key": "name",
															"value": "string",
															"description": "(Required) The storage identifier."
														},
														{
															"key": "raidlevel",
															"value": "draid",
															"description": "(Required) The RAID level to use."
														}
													],
													"variable": [
														{
															"key": "node",
															"value": "string",
															"description": "(Required) The cluster node name."
														}
													]
												},
												"description": "Create a ZFS pool."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/disks/zfs?add_storage=0&ashift=12&compression=on&devices=string&draid-config=string&name=string&raidlevel=draid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"disks",
																"zfs"
															],
															"query": [
																{
																	"key": "add_storage",
																	"value": "0",
																	"description": "Configure storage using the zpool."
																},
																{
																	"key": "ashift",
																	"value": "12",
																	"description": "Pool sector size exponent."
																},
																{
																	"key": "compression",
																	"value": "on",
																	"description": "The compression algorithm to use."
																},
																{
																	"key": "devices",
																	"value": "string",
																	"description": "(Required) The block devices you want to create the zpool on."
																},
																{
																	"key": "draid-config",
																	"value": "string"
																},
																{
																	"key": "name",
																	"value": "string",
																	"description": "(Required) The storage identifier."
																},
																{
																	"key": "raidlevel",
																	"value": "draid",
																	"description": "(Required) The RAID level to use."
																}
															],
															"variable": [
																{
																	"key": "node"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "string"
												}
											]
										}
									]
								},
								{
									"name": "list",
									"item": [
										{
											"name": "List local disks.",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/disks/list?include-partitions=0&skipsmart=0&type=journal_disks",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"disks",
														"list"
													],
													"query": [
														{
															"key": "include-partitions",
															"value": "0",
															"description": "Also include partitions."
														},
														{
															"key": "skipsmart",
															"value": "0",
															"description": "Skip smart checks."
														},
														{
															"key": "type",
															"value": "journal_disks",
															"description": "Only list specific types of disks."
														}
													],
													"variable": [
														{
															"key": "node",
															"value": "string",
															"description": "(Required) The cluster node name."
														}
													]
												},
												"description": "List local disks."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/disks/list?include-partitions=0&skipsmart=0&type=journal_disks",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"disks",
																"list"
															],
															"query": [
																{
																	"key": "include-partitions",
																	"value": "0",
																	"description": "Also include partitions."
																},
																{
																	"key": "skipsmart",
																	"value": "0",
																	"description": "Skip smart checks."
																},
																{
																	"key": "type",
																	"value": "journal_disks",
																	"description": "Only list specific types of disks."
																}
															],
															"variable": [
																{
																	"key": "node"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "[\n  {\n    \"devpath\": \"string\",\n    \"gpt\": true,\n    \"health\": \"string\",\n    \"model\": \"string\",\n    \"mounted\": false,\n    \"osdid\": 288,\n    \"osdid-list\": [\n      5598,\n      6042\n    ],\n    \"parent\": \"string\",\n    \"serial\": \"string\",\n    \"size\": 9939,\n    \"used\": \"string\",\n    \"vendor\": \"string\",\n    \"wwn\": \"string\"\n  },\n  {\n    \"devpath\": \"string\",\n    \"gpt\": false,\n    \"health\": \"string\",\n    \"model\": \"string\",\n    \"mounted\": true,\n    \"osdid\": 5131,\n    \"osdid-list\": [\n      1409,\n      4070\n    ],\n    \"parent\": \"string\",\n    \"serial\": \"string\",\n    \"size\": 2887,\n    \"used\": \"string\",\n    \"vendor\": \"string\",\n    \"wwn\": \"string\"\n  }\n]"
												}
											]
										}
									]
								},
								{
									"name": "smart",
									"item": [
										{
											"name": "Get SMART Health of a disk.",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/disks/smart?disk=/dev//kP9WmkmeA&healthonly=true",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"disks",
														"smart"
													],
													"query": [
														{
															"key": "disk",
															"value": "/dev//kP9WmkmeA",
															"description": "(Required) Block device name"
														},
														{
															"key": "healthonly",
															"value": "true",
															"description": "If true returns only the health status"
														}
													],
													"variable": [
														{
															"key": "node",
															"value": "string",
															"description": "(Required) The cluster node name."
														}
													]
												},
												"description": "Get SMART Health of a disk."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/disks/smart?disk=/dev//kP9WmkmeA&healthonly=true",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"disks",
																"smart"
															],
															"query": [
																{
																	"key": "disk",
																	"value": "/dev//kP9WmkmeA",
																	"description": "(Required) Block device name"
																},
																{
																	"key": "healthonly",
																	"value": "true",
																	"description": "If true returns only the health status"
																}
															],
															"variable": [
																{
																	"key": "node"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"health\": \"string\",\n  \"text\": \"string\",\n  \"type\": \"string\"\n}"
												}
											]
										}
									]
								},
								{
									"name": "initgpt",
									"item": [
										{
											"name": "Initialize Disk with GPT",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/disks/initgpt?disk=/dev//kP9WmkmeA&uuid=f5d76-eAebd",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"disks",
														"initgpt"
													],
													"query": [
														{
															"key": "disk",
															"value": "/dev//kP9WmkmeA",
															"description": "(Required) Block device name"
														},
														{
															"key": "uuid",
															"value": "f5d76-eAebd",
															"description": "UUID for the GPT table"
														}
													],
													"variable": [
														{
															"key": "node",
															"value": "string",
															"description": "(Required) The cluster node name."
														}
													]
												},
												"description": "Initialize Disk with GPT"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/disks/initgpt?disk=/dev//kP9WmkmeA&uuid=f5d76-eAebd",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"disks",
																"initgpt"
															],
															"query": [
																{
																	"key": "disk",
																	"value": "/dev//kP9WmkmeA",
																	"description": "(Required) Block device name"
																},
																{
																	"key": "uuid",
																	"value": "f5d76-eAebd",
																	"description": "UUID for the GPT table"
																}
															],
															"variable": [
																{
																	"key": "node"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "string"
												}
											]
										}
									]
								},
								{
									"name": "wipedisk",
									"item": [
										{
											"name": "Wipe a disk or partition.",
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/disks/wipedisk?disk=/dev//kP9WmkmeA",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"disks",
														"wipedisk"
													],
													"query": [
														{
															"key": "disk",
															"value": "/dev//kP9WmkmeA",
															"description": "(Required) Block device name"
														}
													],
													"variable": [
														{
															"key": "node",
															"value": "string",
															"description": "(Required) The cluster node name."
														}
													]
												},
												"description": "Wipe a disk or partition."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/disks/wipedisk?disk=/dev//kP9WmkmeA",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"disks",
																"wipedisk"
															],
															"query": [
																{
																	"key": "disk",
																	"value": "/dev//kP9WmkmeA",
																	"description": "(Required) Block device name"
																}
															],
															"variable": [
																{
																	"key": "node"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "string"
												}
											]
										}
									]
								},
								{
									"name": "Node index.",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/nodes/:node/disks",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"nodes",
												":node",
												"disks"
											],
											"variable": [
												{
													"key": "node",
													"value": "string",
													"description": "(Required) The cluster node name."
												}
											]
										},
										"description": "Node index."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/disks",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"disks"
													],
													"variable": [
														{
															"key": "node"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[]"
										}
									]
								}
							]
						},
						{
							"name": "apt",
							"item": [
								{
									"name": "update",
									"item": [
										{
											"name": "List available updates.",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/apt/update",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"apt",
														"update"
													],
													"variable": [
														{
															"key": "node",
															"value": "string",
															"description": "(Required) The cluster node name."
														}
													]
												},
												"description": "List available updates."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/apt/update",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"apt",
																"update"
															],
															"variable": [
																{
																	"key": "node"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "[\n  {\n    \"Arch\": \"string\",\n    \"Description\": \"string\",\n    \"NotifyStatus\": \"string\",\n    \"OldVersion\": \"string\",\n    \"Origin\": \"string\",\n    \"Package\": \"string\",\n    \"Priority\": \"string\",\n    \"Section\": \"string\",\n    \"Title\": \"string\",\n    \"Version\": \"string\"\n  },\n  {\n    \"Arch\": \"string\",\n    \"Description\": \"string\",\n    \"NotifyStatus\": \"string\",\n    \"OldVersion\": \"string\",\n    \"Origin\": \"string\",\n    \"Package\": \"string\",\n    \"Priority\": \"string\",\n    \"Section\": \"string\",\n    \"Title\": \"string\",\n    \"Version\": \"string\"\n  }\n]"
												}
											]
										},
										{
											"name": "This is used to resynchronize the package index files from their sources (apt-get update).",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/apt/update?notify=0&quiet=0",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"apt",
														"update"
													],
													"query": [
														{
															"key": "notify",
															"value": "0",
															"description": "Send notification about new packages."
														},
														{
															"key": "quiet",
															"value": "0",
															"description": "Only produces output suitable for logging, omitting progress indicators."
														}
													],
													"variable": [
														{
															"key": "node",
															"value": "string",
															"description": "(Required) The cluster node name."
														}
													]
												},
												"description": "This is used to resynchronize the package index files from their sources (apt-get update)."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/apt/update?notify=0&quiet=0",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"apt",
																"update"
															],
															"query": [
																{
																	"key": "notify",
																	"value": "0",
																	"description": "Send notification about new packages."
																},
																{
																	"key": "quiet",
																	"value": "0",
																	"description": "Only produces output suitable for logging, omitting progress indicators."
																}
															],
															"variable": [
																{
																	"key": "node"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "string"
												}
											]
										}
									]
								},
								{
									"name": "changelog",
									"item": [
										{
											"name": "Get package changelogs.",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/apt/changelog?name=string&version=string",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"apt",
														"changelog"
													],
													"query": [
														{
															"key": "name",
															"value": "string",
															"description": "(Required) Package name."
														},
														{
															"key": "version",
															"value": "string",
															"description": "Package version."
														}
													],
													"variable": [
														{
															"key": "node",
															"value": "string",
															"description": "(Required) The cluster node name."
														}
													]
												},
												"description": "Get package changelogs."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/apt/changelog?name=string&version=string",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"apt",
																"changelog"
															],
															"query": [
																{
																	"key": "name",
																	"value": "string",
																	"description": "(Required) Package name."
																},
																{
																	"key": "version",
																	"value": "string",
																	"description": "Package version."
																}
															],
															"variable": [
																{
																	"key": "node"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "string"
												}
											]
										}
									]
								},
								{
									"name": "repositories",
									"item": [
										{
											"name": "Get APT repository information.",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/apt/repositories",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"apt",
														"repositories"
													],
													"variable": [
														{
															"key": "node",
															"value": "string",
															"description": "(Required) The cluster node name."
														}
													]
												},
												"description": "Get APT repository information."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/apt/repositories",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"apt",
																"repositories"
															],
															"variable": [
																{
																	"key": "node"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"digest\": \"string\",\n  \"errors\": [\n    {\n      \"error\": \"string\",\n      \"path\": \"string\"\n    },\n    {\n      \"error\": \"string\",\n      \"path\": \"string\"\n    }\n  ],\n  \"files\": [\n    {\n      \"digest\": [\n        8949,\n        5913\n      ],\n      \"file-type\": \"sources\",\n      \"path\": \"string\",\n      \"repositories\": [\n        {\n          \"Comment\": \"string\",\n          \"Components\": [\n            \"string\",\n            \"string\"\n          ],\n          \"Enabled\": false,\n          \"FileType\": \"list\",\n          \"Options\": [\n            {\n              \"Key\": \"string\",\n              \"Values\": [\n                \"string\",\n                \"string\"\n              ]\n            },\n            {\n              \"Key\": \"string\",\n              \"Values\": [\n                \"string\",\n                \"string\"\n              ]\n            }\n          ],\n          \"Suites\": [\n            \"string\",\n            \"string\"\n          ],\n          \"Types\": [\n            \"deb\",\n            \"deb\"\n          ],\n          \"URIs\": [\n            \"string\",\n            \"string\"\n          ]\n        },\n        {\n          \"Comment\": \"string\",\n          \"Components\": [\n            \"string\",\n            \"string\"\n          ],\n          \"Enabled\": false,\n          \"FileType\": \"list\",\n          \"Options\": [\n            {\n              \"Key\": \"string\",\n              \"Values\": [\n                \"string\",\n                \"string\"\n              ]\n            },\n            {\n              \"Key\": \"string\",\n              \"Values\": [\n                \"string\",\n                \"string\"\n              ]\n            }\n          ],\n          \"Suites\": [\n            \"string\",\n            \"string\"\n          ],\n          \"Types\": [\n            \"deb\",\n            \"deb-src\"\n          ],\n          \"URIs\": [\n            \"string\",\n            \"string\"\n          ]\n        }\n      ]\n    },\n    {\n      \"digest\": [\n        7324,\n        3447\n      ],\n      \"file-type\": \"list\",\n      \"path\": \"string\",\n      \"repositories\": [\n        {\n          \"Comment\": \"string\",\n          \"Components\": [\n            \"string\",\n            \"string\"\n          ],\n          \"Enabled\": true,\n          \"FileType\": \"list\",\n          \"Options\": [\n            {\n              \"Key\": \"string\",\n              \"Values\": [\n                \"string\",\n                \"string\"\n              ]\n            },\n            {\n              \"Key\": \"string\",\n              \"Values\": [\n                \"string\",\n                \"string\"\n              ]\n            }\n          ],\n          \"Suites\": [\n            \"string\",\n            \"string\"\n          ],\n          \"Types\": [\n            \"deb\",\n            \"deb-src\"\n          ],\n          \"URIs\": [\n            \"string\",\n            \"string\"\n          ]\n        },\n        {\n          \"Comment\": \"string\",\n          \"Components\": [\n            \"string\",\n            \"string\"\n          ],\n          \"Enabled\": true,\n          \"FileType\": \"list\",\n          \"Options\": [\n            {\n              \"Key\": \"string\",\n              \"Values\": [\n                \"string\",\n                \"string\"\n              ]\n            },\n            {\n              \"Key\": \"string\",\n              \"Values\": [\n                \"string\",\n                \"string\"\n              ]\n            }\n          ],\n          \"Suites\": [\n            \"string\",\n            \"string\"\n          ],\n          \"Types\": [\n            \"deb\",\n            \"deb-src\"\n          ],\n          \"URIs\": [\n            \"string\",\n            \"string\"\n          ]\n        }\n      ]\n    }\n  ],\n  \"infos\": [\n    {\n      \"index\": \"string\",\n      \"kind\": \"string\",\n      \"message\": \"string\",\n      \"path\": \"string\",\n      \"property\": \"string\"\n    },\n    {\n      \"index\": \"string\",\n      \"kind\": \"string\",\n      \"message\": \"string\",\n      \"path\": \"string\",\n      \"property\": \"string\"\n    }\n  ],\n  \"standard-repos\": [\n    {\n      \"handle\": \"string\",\n      \"name\": \"string\",\n      \"status\": true\n    },\n    {\n      \"handle\": \"string\",\n      \"name\": \"string\",\n      \"status\": true\n    }\n  ]\n}"
												}
											]
										},
										{
											"name": "Change the properties of a repository. Currently only allows enabling/disabling.",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/apt/repositories?digest=string&enabled=true&index=5752&path=string",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"apt",
														"repositories"
													],
													"query": [
														{
															"key": "digest",
															"value": "string",
															"description": "Digest to detect modifications."
														},
														{
															"key": "enabled",
															"value": "true",
															"description": "Whether the repository should be enabled or not."
														},
														{
															"key": "index",
															"value": "5752",
															"description": "(Required) Index within the file (starting from 0)."
														},
														{
															"key": "path",
															"value": "string",
															"description": "(Required) Path to the containing file."
														}
													],
													"variable": [
														{
															"key": "node",
															"value": "string",
															"description": "(Required) The cluster node name."
														}
													]
												},
												"description": "Change the properties of a repository. Currently only allows enabling/disabling."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/apt/repositories?digest=string&enabled=true&index=5752&path=string",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"apt",
																"repositories"
															],
															"query": [
																{
																	"key": "digest",
																	"value": "string",
																	"description": "Digest to detect modifications."
																},
																{
																	"key": "enabled",
																	"value": "true",
																	"description": "Whether the repository should be enabled or not."
																},
																{
																	"key": "index",
																	"value": "5752",
																	"description": "(Required) Index within the file (starting from 0)."
																},
																{
																	"key": "path",
																	"value": "string",
																	"description": "(Required) Path to the containing file."
																}
															],
															"variable": [
																{
																	"key": "node"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "null"
												}
											]
										},
										{
											"name": "Add a standard repository to the configuration",
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/apt/repositories?digest=string&handle=string",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"apt",
														"repositories"
													],
													"query": [
														{
															"key": "digest",
															"value": "string",
															"description": "Digest to detect modifications."
														},
														{
															"key": "handle",
															"value": "string",
															"description": "(Required) Handle that identifies a repository."
														}
													],
													"variable": [
														{
															"key": "node",
															"value": "string",
															"description": "(Required) The cluster node name."
														}
													]
												},
												"description": "Add a standard repository to the configuration"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/apt/repositories?digest=string&handle=string",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"apt",
																"repositories"
															],
															"query": [
																{
																	"key": "digest",
																	"value": "string",
																	"description": "Digest to detect modifications."
																},
																{
																	"key": "handle",
																	"value": "string",
																	"description": "(Required) Handle that identifies a repository."
																}
															],
															"variable": [
																{
																	"key": "node"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "null"
												}
											]
										}
									]
								},
								{
									"name": "versions",
									"item": [
										{
											"name": "Get package information for important Proxmox packages.",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/apt/versions",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"apt",
														"versions"
													],
													"variable": [
														{
															"key": "node",
															"value": "string",
															"description": "(Required) The cluster node name."
														}
													]
												},
												"description": "Get package information for important Proxmox packages."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/apt/versions",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"apt",
																"versions"
															],
															"variable": [
																{
																	"key": "node"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "[]"
												}
											]
										}
									]
								},
								{
									"name": "Directory index for apt (Advanced Package Tool).",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/nodes/:node/apt",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"nodes",
												":node",
												"apt"
											],
											"variable": [
												{
													"key": "node",
													"value": "string",
													"description": "(Required) The cluster node name."
												}
											]
										},
										"description": "Directory index for apt (Advanced Package Tool)."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/apt",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"apt"
													],
													"variable": [
														{
															"key": "node"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"id\": \"string\"\n  },\n  {\n    \"id\": \"string\"\n  }\n]"
										}
									]
								}
							]
						},
						{
							"name": "firewall",
							"item": [
								{
									"name": "rules",
									"item": [
										{
											"name": "{pos}",
											"item": [
												{
													"name": "Delete rule.",
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/firewall/rules/:pos?digest=string",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"firewall",
																"rules",
																":pos"
															],
															"query": [
																{
																	"key": "digest",
																	"value": "string",
																	"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
																}
															],
															"variable": [
																{
																	"key": "node",
																	"value": "string",
																	"description": "(Required) The cluster node name."
																},
																{
																	"key": "pos",
																	"value": "8248",
																	"description": "Update rule at position <pos>."
																}
															]
														},
														"description": "Delete rule."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/firewall/rules/:pos?digest=string",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"firewall",
																		"rules",
																		":pos"
																	],
																	"query": [
																		{
																			"key": "digest",
																			"value": "string",
																			"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
																		}
																	],
																	"variable": [
																		{
																			"key": "node"
																		},
																		{
																			"key": "pos"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "null"
														}
													]
												},
												{
													"name": "Get single rule data.",
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/firewall/rules/:pos",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"firewall",
																"rules",
																":pos"
															],
															"variable": [
																{
																	"key": "node",
																	"value": "string",
																	"description": "(Required) The cluster node name."
																},
																{
																	"key": "pos",
																	"value": "8248",
																	"description": "Update rule at position <pos>."
																}
															]
														},
														"description": "Get single rule data."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/firewall/rules/:pos",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"firewall",
																		"rules",
																		":pos"
																	],
																	"variable": [
																		{
																			"key": "node"
																		},
																		{
																			"key": "pos"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"action\": \"string\",\n  \"comment\": \"string\",\n  \"dest\": \"string\",\n  \"dport\": \"string\",\n  \"enable\": 7351,\n  \"icmp-type\": \"string\",\n  \"iface\": \"string\",\n  \"ipversion\": 3130,\n  \"log\": \"debug\",\n  \"macro\": \"string\",\n  \"pos\": 4146,\n  \"proto\": \"string\",\n  \"source\": \"string\",\n  \"sport\": \"string\",\n  \"type\": \"string\"\n}"
														}
													]
												},
												{
													"name": "Modify rule data.",
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/firewall/rules/:pos?action=wrF&comment=string&delete=string&dest=string&digest=string&dport=string&enable=8248&icmp-type=string&iface=string&log=crit&macro=string&moveto=8248&proto=string&source=string&sport=string&type=forward",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"firewall",
																"rules",
																":pos"
															],
															"query": [
																{
																	"key": "action",
																	"value": "wrF",
																	"description": "Rule action ('ACCEPT', 'DROP', 'REJECT') or security group name."
																},
																{
																	"key": "comment",
																	"value": "string",
																	"description": "Descriptive comment."
																},
																{
																	"key": "delete",
																	"value": "string",
																	"description": "A list of settings you want to delete."
																},
																{
																	"key": "dest",
																	"value": "string",
																	"description": "Restrict packet destination address. This can refer to a single IP address, an IP set ('+ipsetname') or an IP alias definition. You can also specify an address range like '20.34.101.207-201.3.9.99', or a list of IP addresses and networks (entries are separated by comma). Please do not mix IPv4 and IPv6 addresses inside such lists."
																},
																{
																	"key": "digest",
																	"value": "string",
																	"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
																},
																{
																	"key": "dport",
																	"value": "string",
																	"description": "Restrict TCP/UDP destination port. You can use service names or simple numbers (0-65535), as defined in '/etc/services'. Port ranges can be specified with '\\d+:\\d+', for example '80:85', and you can use comma separated list to match several ports or ranges."
																},
																{
																	"key": "enable",
																	"value": "8248",
																	"description": "Flag to enable/disable a rule."
																},
																{
																	"key": "icmp-type",
																	"value": "string",
																	"description": "Specify icmp-type. Only valid if proto equals 'icmp' or 'icmpv6'/'ipv6-icmp'."
																},
																{
																	"key": "iface",
																	"value": "string",
																	"description": "Network interface name. You have to use network configuration key names for VMs and containers ('net\\d+'). Host related rules can use arbitrary strings."
																},
																{
																	"key": "log",
																	"value": "crit",
																	"description": "Log level for firewall rule."
																},
																{
																	"key": "macro",
																	"value": "string",
																	"description": "Use predefined standard macro."
																},
																{
																	"key": "moveto",
																	"value": "8248",
																	"description": "Move rule to new position <moveto>. Other arguments are ignored."
																},
																{
																	"key": "proto",
																	"value": "string",
																	"description": "IP protocol. You can use protocol names ('tcp'/'udp') or simple numbers, as defined in '/etc/protocols'."
																},
																{
																	"key": "source",
																	"value": "string",
																	"description": "Restrict packet source address. This can refer to a single IP address, an IP set ('+ipsetname') or an IP alias definition. You can also specify an address range like '20.34.101.207-201.3.9.99', or a list of IP addresses and networks (entries are separated by comma). Please do not mix IPv4 and IPv6 addresses inside such lists."
																},
																{
																	"key": "sport",
																	"value": "string",
																	"description": "Restrict TCP/UDP source port. You can use service names or simple numbers (0-65535), as defined in '/etc/services'. Port ranges can be specified with '\\d+:\\d+', for example '80:85', and you can use comma separated list to match several ports or ranges."
																},
																{
																	"key": "type",
																	"value": "forward",
																	"description": "Rule type."
																}
															],
															"variable": [
																{
																	"key": "node",
																	"value": "string",
																	"description": "(Required) The cluster node name."
																},
																{
																	"key": "pos",
																	"value": "8248",
																	"description": "Update rule at position <pos>."
																}
															]
														},
														"description": "Modify rule data."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/firewall/rules/:pos?action=wrF&comment=string&delete=string&dest=string&digest=string&dport=string&enable=8248&icmp-type=string&iface=string&log=crit&macro=string&moveto=8248&proto=string&source=string&sport=string&type=forward",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"firewall",
																		"rules",
																		":pos"
																	],
																	"query": [
																		{
																			"key": "action",
																			"value": "wrF",
																			"description": "Rule action ('ACCEPT', 'DROP', 'REJECT') or security group name."
																		},
																		{
																			"key": "comment",
																			"value": "string",
																			"description": "Descriptive comment."
																		},
																		{
																			"key": "delete",
																			"value": "string",
																			"description": "A list of settings you want to delete."
																		},
																		{
																			"key": "dest",
																			"value": "string",
																			"description": "Restrict packet destination address. This can refer to a single IP address, an IP set ('+ipsetname') or an IP alias definition. You can also specify an address range like '20.34.101.207-201.3.9.99', or a list of IP addresses and networks (entries are separated by comma). Please do not mix IPv4 and IPv6 addresses inside such lists."
																		},
																		{
																			"key": "digest",
																			"value": "string",
																			"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
																		},
																		{
																			"key": "dport",
																			"value": "string",
																			"description": "Restrict TCP/UDP destination port. You can use service names or simple numbers (0-65535), as defined in '/etc/services'. Port ranges can be specified with '\\d+:\\d+', for example '80:85', and you can use comma separated list to match several ports or ranges."
																		},
																		{
																			"key": "enable",
																			"value": "8248",
																			"description": "Flag to enable/disable a rule."
																		},
																		{
																			"key": "icmp-type",
																			"value": "string",
																			"description": "Specify icmp-type. Only valid if proto equals 'icmp' or 'icmpv6'/'ipv6-icmp'."
																		},
																		{
																			"key": "iface",
																			"value": "string",
																			"description": "Network interface name. You have to use network configuration key names for VMs and containers ('net\\d+'). Host related rules can use arbitrary strings."
																		},
																		{
																			"key": "log",
																			"value": "crit",
																			"description": "Log level for firewall rule."
																		},
																		{
																			"key": "macro",
																			"value": "string",
																			"description": "Use predefined standard macro."
																		},
																		{
																			"key": "moveto",
																			"value": "8248",
																			"description": "Move rule to new position <moveto>. Other arguments are ignored."
																		},
																		{
																			"key": "proto",
																			"value": "string",
																			"description": "IP protocol. You can use protocol names ('tcp'/'udp') or simple numbers, as defined in '/etc/protocols'."
																		},
																		{
																			"key": "source",
																			"value": "string",
																			"description": "Restrict packet source address. This can refer to a single IP address, an IP set ('+ipsetname') or an IP alias definition. You can also specify an address range like '20.34.101.207-201.3.9.99', or a list of IP addresses and networks (entries are separated by comma). Please do not mix IPv4 and IPv6 addresses inside such lists."
																		},
																		{
																			"key": "sport",
																			"value": "string",
																			"description": "Restrict TCP/UDP source port. You can use service names or simple numbers (0-65535), as defined in '/etc/services'. Port ranges can be specified with '\\d+:\\d+', for example '80:85', and you can use comma separated list to match several ports or ranges."
																		},
																		{
																			"key": "type",
																			"value": "forward",
																			"description": "Rule type."
																		}
																	],
																	"variable": [
																		{
																			"key": "node"
																		},
																		{
																			"key": "pos"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "null"
														}
													]
												}
											]
										},
										{
											"name": "List rules.",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/firewall/rules",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"firewall",
														"rules"
													],
													"variable": [
														{
															"key": "node",
															"value": "string",
															"description": "(Required) The cluster node name."
														}
													]
												},
												"description": "List rules."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/firewall/rules",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"firewall",
																"rules"
															],
															"variable": [
																{
																	"key": "node"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "[\n  {\n    \"pos\": 2798\n  },\n  {\n    \"pos\": 6715\n  }\n]"
												}
											]
										},
										{
											"name": "Create new rule.",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/firewall/rules?action=wrF&comment=string&dest=string&digest=string&dport=string&enable=8248&icmp-type=string&iface=string&log=crit&macro=string&pos=8248&proto=string&source=string&sport=string&type=forward",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"firewall",
														"rules"
													],
													"query": [
														{
															"key": "action",
															"value": "wrF",
															"description": "(Required) Rule action ('ACCEPT', 'DROP', 'REJECT') or security group name."
														},
														{
															"key": "comment",
															"value": "string",
															"description": "Descriptive comment."
														},
														{
															"key": "dest",
															"value": "string",
															"description": "Restrict packet destination address. This can refer to a single IP address, an IP set ('+ipsetname') or an IP alias definition. You can also specify an address range like '20.34.101.207-201.3.9.99', or a list of IP addresses and networks (entries are separated by comma). Please do not mix IPv4 and IPv6 addresses inside such lists."
														},
														{
															"key": "digest",
															"value": "string",
															"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
														},
														{
															"key": "dport",
															"value": "string",
															"description": "Restrict TCP/UDP destination port. You can use service names or simple numbers (0-65535), as defined in '/etc/services'. Port ranges can be specified with '\\d+:\\d+', for example '80:85', and you can use comma separated list to match several ports or ranges."
														},
														{
															"key": "enable",
															"value": "8248",
															"description": "Flag to enable/disable a rule."
														},
														{
															"key": "icmp-type",
															"value": "string",
															"description": "Specify icmp-type. Only valid if proto equals 'icmp' or 'icmpv6'/'ipv6-icmp'."
														},
														{
															"key": "iface",
															"value": "string",
															"description": "Network interface name. You have to use network configuration key names for VMs and containers ('net\\d+'). Host related rules can use arbitrary strings."
														},
														{
															"key": "log",
															"value": "crit",
															"description": "Log level for firewall rule."
														},
														{
															"key": "macro",
															"value": "string",
															"description": "Use predefined standard macro."
														},
														{
															"key": "pos",
															"value": "8248",
															"description": "Update rule at position <pos>."
														},
														{
															"key": "proto",
															"value": "string",
															"description": "IP protocol. You can use protocol names ('tcp'/'udp') or simple numbers, as defined in '/etc/protocols'."
														},
														{
															"key": "source",
															"value": "string",
															"description": "Restrict packet source address. This can refer to a single IP address, an IP set ('+ipsetname') or an IP alias definition. You can also specify an address range like '20.34.101.207-201.3.9.99', or a list of IP addresses and networks (entries are separated by comma). Please do not mix IPv4 and IPv6 addresses inside such lists."
														},
														{
															"key": "sport",
															"value": "string",
															"description": "Restrict TCP/UDP source port. You can use service names or simple numbers (0-65535), as defined in '/etc/services'. Port ranges can be specified with '\\d+:\\d+', for example '80:85', and you can use comma separated list to match several ports or ranges."
														},
														{
															"key": "type",
															"value": "forward",
															"description": "(Required) Rule type."
														}
													],
													"variable": [
														{
															"key": "node",
															"value": "string",
															"description": "(Required) The cluster node name."
														}
													]
												},
												"description": "Create new rule."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/firewall/rules?action=wrF&comment=string&dest=string&digest=string&dport=string&enable=8248&icmp-type=string&iface=string&log=crit&macro=string&pos=8248&proto=string&source=string&sport=string&type=forward",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"firewall",
																"rules"
															],
															"query": [
																{
																	"key": "action",
																	"value": "wrF",
																	"description": "(Required) Rule action ('ACCEPT', 'DROP', 'REJECT') or security group name."
																},
																{
																	"key": "comment",
																	"value": "string",
																	"description": "Descriptive comment."
																},
																{
																	"key": "dest",
																	"value": "string",
																	"description": "Restrict packet destination address. This can refer to a single IP address, an IP set ('+ipsetname') or an IP alias definition. You can also specify an address range like '20.34.101.207-201.3.9.99', or a list of IP addresses and networks (entries are separated by comma). Please do not mix IPv4 and IPv6 addresses inside such lists."
																},
																{
																	"key": "digest",
																	"value": "string",
																	"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
																},
																{
																	"key": "dport",
																	"value": "string",
																	"description": "Restrict TCP/UDP destination port. You can use service names or simple numbers (0-65535), as defined in '/etc/services'. Port ranges can be specified with '\\d+:\\d+', for example '80:85', and you can use comma separated list to match several ports or ranges."
																},
																{
																	"key": "enable",
																	"value": "8248",
																	"description": "Flag to enable/disable a rule."
																},
																{
																	"key": "icmp-type",
																	"value": "string",
																	"description": "Specify icmp-type. Only valid if proto equals 'icmp' or 'icmpv6'/'ipv6-icmp'."
																},
																{
																	"key": "iface",
																	"value": "string",
																	"description": "Network interface name. You have to use network configuration key names for VMs and containers ('net\\d+'). Host related rules can use arbitrary strings."
																},
																{
																	"key": "log",
																	"value": "crit",
																	"description": "Log level for firewall rule."
																},
																{
																	"key": "macro",
																	"value": "string",
																	"description": "Use predefined standard macro."
																},
																{
																	"key": "pos",
																	"value": "8248",
																	"description": "Update rule at position <pos>."
																},
																{
																	"key": "proto",
																	"value": "string",
																	"description": "IP protocol. You can use protocol names ('tcp'/'udp') or simple numbers, as defined in '/etc/protocols'."
																},
																{
																	"key": "source",
																	"value": "string",
																	"description": "Restrict packet source address. This can refer to a single IP address, an IP set ('+ipsetname') or an IP alias definition. You can also specify an address range like '20.34.101.207-201.3.9.99', or a list of IP addresses and networks (entries are separated by comma). Please do not mix IPv4 and IPv6 addresses inside such lists."
																},
																{
																	"key": "sport",
																	"value": "string",
																	"description": "Restrict TCP/UDP source port. You can use service names or simple numbers (0-65535), as defined in '/etc/services'. Port ranges can be specified with '\\d+:\\d+', for example '80:85', and you can use comma separated list to match several ports or ranges."
																},
																{
																	"key": "type",
																	"value": "forward",
																	"description": "(Required) Rule type."
																}
															],
															"variable": [
																{
																	"key": "node"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "null"
												}
											]
										}
									]
								},
								{
									"name": "options",
									"item": [
										{
											"name": "Get host firewall options.",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/firewall/options",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"firewall",
														"options"
													],
													"variable": [
														{
															"key": "node",
															"value": "string",
															"description": "(Required) The cluster node name."
														}
													]
												},
												"description": "Get host firewall options."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/firewall/options",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"firewall",
																"options"
															],
															"variable": [
																{
																	"key": "node"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"enable\": true,\n  \"log_level_forward\": \"emerg\",\n  \"log_level_in\": \"emerg\",\n  \"log_level_out\": \"info\",\n  \"log_nf_conntrack\": 0,\n  \"ndp\": 0,\n  \"nf_conntrack_allow_invalid\": 0,\n  \"nf_conntrack_helpers\": \"\",\n  \"nf_conntrack_max\": 262144,\n  \"nf_conntrack_tcp_timeout_established\": 432000,\n  \"nf_conntrack_tcp_timeout_syn_recv\": 60,\n  \"nftables\": 0,\n  \"nosmurfs\": false,\n  \"protection_synflood\": 0,\n  \"protection_synflood_burst\": 1000,\n  \"protection_synflood_rate\": 200,\n  \"smurf_log_level\": \"err\",\n  \"tcp_flags_log_level\": \"emerg\",\n  \"tcpflags\": 0\n}"
												}
											]
										},
										{
											"name": "Set Firewall options.",
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/firewall/options?delete=string&digest=string&enable=true&log_level_forward=crit&log_level_in=crit&log_level_out=crit&log_nf_conntrack=0&ndp=0&nf_conntrack_allow_invalid=0&nf_conntrack_helpers=&nf_conntrack_max=262144&nf_conntrack_tcp_timeout_established=432000&nf_conntrack_tcp_timeout_syn_recv=60&nftables=0&nosmurfs=true&protection_synflood=0&protection_synflood_burst=1000&protection_synflood_rate=200&smurf_log_level=crit&tcp_flags_log_level=crit&tcpflags=0",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"firewall",
														"options"
													],
													"query": [
														{
															"key": "delete",
															"value": "string",
															"description": "A list of settings you want to delete."
														},
														{
															"key": "digest",
															"value": "string",
															"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
														},
														{
															"key": "enable",
															"value": "true",
															"description": "Enable host firewall rules."
														},
														{
															"key": "log_level_forward",
															"value": "crit",
															"description": "Log level for forwarded traffic."
														},
														{
															"key": "log_level_in",
															"value": "crit",
															"description": "Log level for incoming traffic."
														},
														{
															"key": "log_level_out",
															"value": "crit",
															"description": "Log level for outgoing traffic."
														},
														{
															"key": "log_nf_conntrack",
															"value": "0",
															"description": "Enable logging of conntrack information."
														},
														{
															"key": "ndp",
															"value": "0",
															"description": "Enable NDP (Neighbor Discovery Protocol)."
														},
														{
															"key": "nf_conntrack_allow_invalid",
															"value": "0",
															"description": "Allow invalid packets on connection tracking."
														},
														{
															"key": "nf_conntrack_helpers",
															"value": "",
															"description": "Enable conntrack helpers for specific protocols. Supported protocols: amanda, ftp, irc, netbios-ns, pptp, sane, sip, snmp, tftp"
														},
														{
															"key": "nf_conntrack_max",
															"value": "262144",
															"description": "Maximum number of tracked connections."
														},
														{
															"key": "nf_conntrack_tcp_timeout_established",
															"value": "432000",
															"description": "Conntrack established timeout."
														},
														{
															"key": "nf_conntrack_tcp_timeout_syn_recv",
															"value": "60",
															"description": "Conntrack syn recv timeout."
														},
														{
															"key": "nftables",
															"value": "0",
															"description": "Enable nftables based firewall (tech preview)"
														},
														{
															"key": "nosmurfs",
															"value": "true",
															"description": "Enable SMURFS filter."
														},
														{
															"key": "protection_synflood",
															"value": "0",
															"description": "Enable synflood protection"
														},
														{
															"key": "protection_synflood_burst",
															"value": "1000",
															"description": "Synflood protection rate burst by ip src."
														},
														{
															"key": "protection_synflood_rate",
															"value": "200",
															"description": "Synflood protection rate syn/sec by ip src."
														},
														{
															"key": "smurf_log_level",
															"value": "crit",
															"description": "Log level for SMURFS filter."
														},
														{
															"key": "tcp_flags_log_level",
															"value": "crit",
															"description": "Log level for illegal tcp flags filter."
														},
														{
															"key": "tcpflags",
															"value": "0",
															"description": "Filter illegal combinations of TCP flags."
														}
													],
													"variable": [
														{
															"key": "node",
															"value": "string",
															"description": "(Required) The cluster node name."
														}
													]
												},
												"description": "Set Firewall options."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/firewall/options?delete=string&digest=string&enable=true&log_level_forward=crit&log_level_in=crit&log_level_out=crit&log_nf_conntrack=0&ndp=0&nf_conntrack_allow_invalid=0&nf_conntrack_helpers=&nf_conntrack_max=262144&nf_conntrack_tcp_timeout_established=432000&nf_conntrack_tcp_timeout_syn_recv=60&nftables=0&nosmurfs=true&protection_synflood=0&protection_synflood_burst=1000&protection_synflood_rate=200&smurf_log_level=crit&tcp_flags_log_level=crit&tcpflags=0",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"firewall",
																"options"
															],
															"query": [
																{
																	"key": "delete",
																	"value": "string",
																	"description": "A list of settings you want to delete."
																},
																{
																	"key": "digest",
																	"value": "string",
																	"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
																},
																{
																	"key": "enable",
																	"value": "true",
																	"description": "Enable host firewall rules."
																},
																{
																	"key": "log_level_forward",
																	"value": "crit",
																	"description": "Log level for forwarded traffic."
																},
																{
																	"key": "log_level_in",
																	"value": "crit",
																	"description": "Log level for incoming traffic."
																},
																{
																	"key": "log_level_out",
																	"value": "crit",
																	"description": "Log level for outgoing traffic."
																},
																{
																	"key": "log_nf_conntrack",
																	"value": "0",
																	"description": "Enable logging of conntrack information."
																},
																{
																	"key": "ndp",
																	"value": "0",
																	"description": "Enable NDP (Neighbor Discovery Protocol)."
																},
																{
																	"key": "nf_conntrack_allow_invalid",
																	"value": "0",
																	"description": "Allow invalid packets on connection tracking."
																},
																{
																	"key": "nf_conntrack_helpers",
																	"value": "",
																	"description": "Enable conntrack helpers for specific protocols. Supported protocols: amanda, ftp, irc, netbios-ns, pptp, sane, sip, snmp, tftp"
																},
																{
																	"key": "nf_conntrack_max",
																	"value": "262144",
																	"description": "Maximum number of tracked connections."
																},
																{
																	"key": "nf_conntrack_tcp_timeout_established",
																	"value": "432000",
																	"description": "Conntrack established timeout."
																},
																{
																	"key": "nf_conntrack_tcp_timeout_syn_recv",
																	"value": "60",
																	"description": "Conntrack syn recv timeout."
																},
																{
																	"key": "nftables",
																	"value": "0",
																	"description": "Enable nftables based firewall (tech preview)"
																},
																{
																	"key": "nosmurfs",
																	"value": "true",
																	"description": "Enable SMURFS filter."
																},
																{
																	"key": "protection_synflood",
																	"value": "0",
																	"description": "Enable synflood protection"
																},
																{
																	"key": "protection_synflood_burst",
																	"value": "1000",
																	"description": "Synflood protection rate burst by ip src."
																},
																{
																	"key": "protection_synflood_rate",
																	"value": "200",
																	"description": "Synflood protection rate syn/sec by ip src."
																},
																{
																	"key": "smurf_log_level",
																	"value": "crit",
																	"description": "Log level for SMURFS filter."
																},
																{
																	"key": "tcp_flags_log_level",
																	"value": "crit",
																	"description": "Log level for illegal tcp flags filter."
																},
																{
																	"key": "tcpflags",
																	"value": "0",
																	"description": "Filter illegal combinations of TCP flags."
																}
															],
															"variable": [
																{
																	"key": "node"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "null"
												}
											]
										}
									]
								},
								{
									"name": "log",
									"item": [
										{
											"name": "Read firewall log",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/firewall/log?limit=8248&since=8248&start=8248&until=8248",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"firewall",
														"log"
													],
													"query": [
														{
															"key": "limit",
															"value": "8248"
														},
														{
															"key": "since",
															"value": "8248",
															"description": "Display log since this UNIX epoch."
														},
														{
															"key": "start",
															"value": "8248"
														},
														{
															"key": "until",
															"value": "8248",
															"description": "Display log until this UNIX epoch."
														}
													],
													"variable": [
														{
															"key": "node",
															"value": "string",
															"description": "(Required) The cluster node name."
														}
													]
												},
												"description": "Read firewall log"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/firewall/log?limit=8248&since=8248&start=8248&until=8248",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"firewall",
																"log"
															],
															"query": [
																{
																	"key": "limit",
																	"value": "8248"
																},
																{
																	"key": "since",
																	"value": "8248",
																	"description": "Display log since this UNIX epoch."
																},
																{
																	"key": "start",
																	"value": "8248"
																},
																{
																	"key": "until",
																	"value": "8248",
																	"description": "Display log until this UNIX epoch."
																}
															],
															"variable": [
																{
																	"key": "node"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "[\n  {\n    \"n\": 6858,\n    \"t\": \"string\"\n  },\n  {\n    \"n\": 9106,\n    \"t\": \"string\"\n  }\n]"
												}
											]
										}
									]
								},
								{
									"name": "Directory index.",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/nodes/:node/firewall",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"nodes",
												":node",
												"firewall"
											],
											"variable": [
												{
													"key": "node",
													"value": "string",
													"description": "(Required) The cluster node name."
												}
											]
										},
										"description": "Directory index."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/firewall",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"firewall"
													],
													"variable": [
														{
															"key": "node"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[]"
										}
									]
								}
							]
						},
						{
							"name": "replication",
							"item": [
								{
									"name": "{id}",
									"item": [
										{
											"name": "status",
											"item": [
												{
													"name": "Get replication job status.",
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/replication/:id/status",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"replication",
																":id",
																"status"
															],
															"variable": [
																{
																	"key": "node",
																	"value": "string",
																	"description": "(Required) The cluster node name."
																},
																{
																	"key": "id",
																	"value": "82646-597475",
																	"description": "(Required) Replication Job ID. The ID is composed of a Guest ID and a job number, separated by a hyphen, i.e. '<GUEST>-<JOBNUM>'."
																}
															]
														},
														"description": "Get replication job status."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/replication/:id/status",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"replication",
																		":id",
																		"status"
																	],
																	"variable": [
																		{
																			"key": "node"
																		},
																		{
																			"key": "id"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{}"
														}
													]
												}
											]
										},
										{
											"name": "log",
											"item": [
												{
													"name": "Read replication job log.",
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/replication/:id/log?limit=8248&start=8248",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"replication",
																":id",
																"log"
															],
															"query": [
																{
																	"key": "limit",
																	"value": "8248"
																},
																{
																	"key": "start",
																	"value": "8248"
																}
															],
															"variable": [
																{
																	"key": "node",
																	"value": "string",
																	"description": "(Required) The cluster node name."
																},
																{
																	"key": "id",
																	"value": "82646-597475",
																	"description": "(Required) Replication Job ID. The ID is composed of a Guest ID and a job number, separated by a hyphen, i.e. '<GUEST>-<JOBNUM>'."
																}
															]
														},
														"description": "Read replication job log."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/replication/:id/log?limit=8248&start=8248",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"replication",
																		":id",
																		"log"
																	],
																	"query": [
																		{
																			"key": "limit",
																			"value": "8248"
																		},
																		{
																			"key": "start",
																			"value": "8248"
																		}
																	],
																	"variable": [
																		{
																			"key": "node"
																		},
																		{
																			"key": "id"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "[\n  {\n    \"n\": 6858,\n    \"t\": \"string\"\n  },\n  {\n    \"n\": 9106,\n    \"t\": \"string\"\n  }\n]"
														}
													]
												}
											]
										},
										{
											"name": "schedule_now",
											"item": [
												{
													"name": "Schedule replication job to start as soon as possible.",
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/replication/:id/schedule_now",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"replication",
																":id",
																"schedule_now"
															],
															"variable": [
																{
																	"key": "node",
																	"value": "string",
																	"description": "(Required) The cluster node name."
																},
																{
																	"key": "id",
																	"value": "82646-597475",
																	"description": "(Required) Replication Job ID. The ID is composed of a Guest ID and a job number, separated by a hyphen, i.e. '<GUEST>-<JOBNUM>'."
																}
															]
														},
														"description": "Schedule replication job to start as soon as possible."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/replication/:id/schedule_now",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"replication",
																		":id",
																		"schedule_now"
																	],
																	"variable": [
																		{
																			"key": "node"
																		},
																		{
																			"key": "id"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "string"
														}
													]
												}
											]
										},
										{
											"name": "Directory index.",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/replication/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"replication",
														":id"
													],
													"variable": [
														{
															"key": "node",
															"value": "string",
															"description": "(Required) The cluster node name."
														},
														{
															"key": "id",
															"value": "82646-597475",
															"description": "(Required) Replication Job ID. The ID is composed of a Guest ID and a job number, separated by a hyphen, i.e. '<GUEST>-<JOBNUM>'."
														}
													]
												},
												"description": "Directory index."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/replication/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"replication",
																":id"
															],
															"variable": [
																{
																	"key": "node"
																},
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "[]"
												}
											]
										}
									]
								},
								{
									"name": "List status of all replication jobs on this node.",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/nodes/:node/replication?guest=358786328",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"nodes",
												":node",
												"replication"
											],
											"query": [
												{
													"key": "guest",
													"value": "358786328",
													"description": "Only list replication jobs for this guest."
												}
											],
											"variable": [
												{
													"key": "node",
													"value": "string",
													"description": "(Required) The cluster node name."
												}
											]
										},
										"description": "List status of all replication jobs on this node."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/replication?guest=358786328",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"replication"
													],
													"query": [
														{
															"key": "guest",
															"value": "358786328",
															"description": "Only list replication jobs for this guest."
														}
													],
													"variable": [
														{
															"key": "node"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"id\": \"string\"\n  },\n  {\n    \"id\": \"string\"\n  }\n]"
										}
									]
								}
							]
						},
						{
							"name": "certificates",
							"item": [
								{
									"name": "acme",
									"item": [
										{
											"name": "certificate",
											"item": [
												{
													"name": "Revoke existing certificate from CA.",
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/certificates/acme/certificate",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"certificates",
																"acme",
																"certificate"
															],
															"variable": [
																{
																	"key": "node",
																	"value": "string",
																	"description": "(Required) The cluster node name."
																}
															]
														},
														"description": "Revoke existing certificate from CA."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/certificates/acme/certificate",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"certificates",
																		"acme",
																		"certificate"
																	],
																	"variable": [
																		{
																			"key": "node"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "string"
														}
													]
												},
												{
													"name": "Order a new certificate from ACME-compatible CA.",
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/certificates/acme/certificate?force=0",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"certificates",
																"acme",
																"certificate"
															],
															"query": [
																{
																	"key": "force",
																	"value": "0",
																	"description": "Overwrite existing custom certificate."
																}
															],
															"variable": [
																{
																	"key": "node",
																	"value": "string",
																	"description": "(Required) The cluster node name."
																}
															]
														},
														"description": "Order a new certificate from ACME-compatible CA."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/certificates/acme/certificate?force=0",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"certificates",
																		"acme",
																		"certificate"
																	],
																	"query": [
																		{
																			"key": "force",
																			"value": "0",
																			"description": "Overwrite existing custom certificate."
																		}
																	],
																	"variable": [
																		{
																			"key": "node"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "string"
														}
													]
												},
												{
													"name": "Renew existing certificate from CA.",
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/certificates/acme/certificate?force=0",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"certificates",
																"acme",
																"certificate"
															],
															"query": [
																{
																	"key": "force",
																	"value": "0",
																	"description": "Force renewal even if expiry is more than 30 days away."
																}
															],
															"variable": [
																{
																	"key": "node",
																	"value": "string",
																	"description": "(Required) The cluster node name."
																}
															]
														},
														"description": "Renew existing certificate from CA."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/certificates/acme/certificate?force=0",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"certificates",
																		"acme",
																		"certificate"
																	],
																	"query": [
																		{
																			"key": "force",
																			"value": "0",
																			"description": "Force renewal even if expiry is more than 30 days away."
																		}
																	],
																	"variable": [
																		{
																			"key": "node"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "string"
														}
													]
												}
											]
										},
										{
											"name": "ACME index.",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/certificates/acme",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"certificates",
														"acme"
													],
													"variable": [
														{
															"key": "node",
															"value": "string",
															"description": "(Required) The cluster node name."
														}
													]
												},
												"description": "ACME index."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/certificates/acme",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"certificates",
																"acme"
															],
															"variable": [
																{
																	"key": "node"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "[]"
												}
											]
										}
									]
								},
								{
									"name": "info",
									"item": [
										{
											"name": "Get information about node's certificates.",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/certificates/info",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"certificates",
														"info"
													],
													"variable": [
														{
															"key": "node",
															"value": "string",
															"description": "(Required) The cluster node name."
														}
													]
												},
												"description": "Get information about node's certificates."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/certificates/info",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"certificates",
																"info"
															],
															"variable": [
																{
																	"key": "node"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "[\n  {\n    \"filename\": \"string\",\n    \"fingerprint\": \"69:8f:cE:A3:dA:9b:CB:D5:Dc:1D:eC:F6:2b:33:df:f4:28:fD:E7:ed:db:83:0a:0e:86:8e:00:E3:16:cd:b8:DD\",\n    \"issuer\": \"string\",\n    \"notafter\": 9403,\n    \"notbefore\": 2668,\n    \"pem\": \"string\",\n    \"public-key-bits\": 8772,\n    \"public-key-type\": \"string\",\n    \"san\": [\n      \"string\",\n      \"string\"\n    ],\n    \"subject\": \"string\"\n  },\n  {\n    \"filename\": \"string\",\n    \"fingerprint\": \"98:A6:E6:c3:ba:FB:27:4a:4c:4b:d3:ee:1D:a5:bd:4E:2D:cD:Ba:6E:FA:38:33:9E:C0:Da:F7:BB:bc:aD:32:2b\",\n    \"issuer\": \"string\",\n    \"notafter\": 6450,\n    \"notbefore\": 5257,\n    \"pem\": \"string\",\n    \"public-key-bits\": 1268,\n    \"public-key-type\": \"string\",\n    \"san\": [\n      \"string\",\n      \"string\"\n    ],\n    \"subject\": \"string\"\n  }\n]"
												}
											]
										}
									]
								},
								{
									"name": "custom",
									"item": [
										{
											"name": "DELETE custom certificate chain and key.",
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/certificates/custom?restart=0",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"certificates",
														"custom"
													],
													"query": [
														{
															"key": "restart",
															"value": "0",
															"description": "Restart pveproxy."
														}
													],
													"variable": [
														{
															"key": "node",
															"value": "string",
															"description": "(Required) The cluster node name."
														}
													]
												},
												"description": "DELETE custom certificate chain and key."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/certificates/custom?restart=0",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"certificates",
																"custom"
															],
															"query": [
																{
																	"key": "restart",
																	"value": "0",
																	"description": "Restart pveproxy."
																}
															],
															"variable": [
																{
																	"key": "node"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "null"
												}
											]
										},
										{
											"name": "Upload or update custom certificate chain and key.",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/certificates/custom?certificates=string&force=0&key=string&restart=0",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"certificates",
														"custom"
													],
													"query": [
														{
															"key": "certificates",
															"value": "string",
															"description": "(Required) PEM encoded certificate (chain)."
														},
														{
															"key": "force",
															"value": "0",
															"description": "Overwrite existing custom or ACME certificate files."
														},
														{
															"key": "key",
															"value": "string",
															"description": "PEM encoded private key."
														},
														{
															"key": "restart",
															"value": "0",
															"description": "Restart pveproxy."
														}
													],
													"variable": [
														{
															"key": "node",
															"value": "string",
															"description": "(Required) The cluster node name."
														}
													]
												},
												"description": "Upload or update custom certificate chain and key."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/certificates/custom?certificates=string&force=0&key=string&restart=0",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"certificates",
																"custom"
															],
															"query": [
																{
																	"key": "certificates",
																	"value": "string",
																	"description": "(Required) PEM encoded certificate (chain)."
																},
																{
																	"key": "force",
																	"value": "0",
																	"description": "Overwrite existing custom or ACME certificate files."
																},
																{
																	"key": "key",
																	"value": "string",
																	"description": "PEM encoded private key."
																},
																{
																	"key": "restart",
																	"value": "0",
																	"description": "Restart pveproxy."
																}
															],
															"variable": [
																{
																	"key": "node"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"filename\": \"string\",\n  \"fingerprint\": \"0a:cA:2f:3E:16:b5:8a:b4:c2:24:c9:a8:52:2f:7C:A2:D3:Ee:1B:9a:D6:1a:e7:9D:94:cF:2c:a9:58:7E:82:6d\",\n  \"issuer\": \"string\",\n  \"notafter\": 3726,\n  \"notbefore\": 7537,\n  \"pem\": \"string\",\n  \"public-key-bits\": 6812,\n  \"public-key-type\": \"string\",\n  \"san\": [\n    \"string\",\n    \"string\"\n  ],\n  \"subject\": \"string\"\n}"
												}
											]
										}
									]
								},
								{
									"name": "Node index.",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/nodes/:node/certificates",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"nodes",
												":node",
												"certificates"
											],
											"variable": [
												{
													"key": "node",
													"value": "string",
													"description": "(Required) The cluster node name."
												}
											]
										},
										"description": "Node index."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/certificates",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"certificates"
													],
													"variable": [
														{
															"key": "node"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[]"
										}
									]
								}
							]
						},
						{
							"name": "config",
							"item": [
								{
									"name": "Get node configuration options.",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/nodes/:node/config?property=all",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"nodes",
												":node",
												"config"
											],
											"query": [
												{
													"key": "property",
													"value": "all",
													"description": "Return only a specific property from the node configuration."
												}
											],
											"variable": [
												{
													"key": "node",
													"value": "string",
													"description": "(Required) The cluster node name."
												}
											]
										},
										"description": "Get node configuration options."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/config?property=all",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"config"
													],
													"query": [
														{
															"key": "property",
															"value": "all",
															"description": "Return only a specific property from the node configuration."
														}
													],
													"variable": [
														{
															"key": "node"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"acme\": \"string\",\n  \"acmedomain[n]\": \"string\",\n  \"ballooning-target\": 80,\n  \"description\": \"string\",\n  \"digest\": \"string\",\n  \"startall-onboot-delay\": 0,\n  \"wakeonlan\": \"string\"\n}"
										}
									]
								},
								{
									"name": "Set node configuration options.",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/nodes/:node/config?acme=string&acmedomain[n]=string&ballooning-target=80&delete=string&description=string&digest=string&startall-onboot-delay=0&wakeonlan=string",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"nodes",
												":node",
												"config"
											],
											"query": [
												{
													"key": "acme",
													"value": "string",
													"description": "Node specific ACME settings."
												},
												{
													"key": "acmedomain[n]",
													"value": "string",
													"description": "ACME domain and validation plugin"
												},
												{
													"key": "ballooning-target",
													"value": "80",
													"description": "RAM usage target for ballooning (in percent of total memory)"
												},
												{
													"key": "delete",
													"value": "string",
													"description": "A list of settings you want to delete."
												},
												{
													"key": "description",
													"value": "string",
													"description": "Description for the Node. Shown in the web-interface node notes panel. This is saved as comment inside the configuration file."
												},
												{
													"key": "digest",
													"value": "string",
													"description": "Prevent changes if current configuration file has different SHA1 digest. This can be used to prevent concurrent modifications."
												},
												{
													"key": "startall-onboot-delay",
													"value": "0",
													"description": "Initial delay in seconds, before starting all the Virtual Guests with on-boot enabled."
												},
												{
													"key": "wakeonlan",
													"value": "string",
													"description": "Node specific wake on LAN settings."
												}
											],
											"variable": [
												{
													"key": "node",
													"value": "string",
													"description": "(Required) The cluster node name."
												}
											]
										},
										"description": "Set node configuration options."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/config?acme=string&acmedomain[n]=string&ballooning-target=80&delete=string&description=string&digest=string&startall-onboot-delay=0&wakeonlan=string",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"config"
													],
													"query": [
														{
															"key": "acme",
															"value": "string",
															"description": "Node specific ACME settings."
														},
														{
															"key": "acmedomain[n]",
															"value": "string",
															"description": "ACME domain and validation plugin"
														},
														{
															"key": "ballooning-target",
															"value": "80",
															"description": "RAM usage target for ballooning (in percent of total memory)"
														},
														{
															"key": "delete",
															"value": "string",
															"description": "A list of settings you want to delete."
														},
														{
															"key": "description",
															"value": "string",
															"description": "Description for the Node. Shown in the web-interface node notes panel. This is saved as comment inside the configuration file."
														},
														{
															"key": "digest",
															"value": "string",
															"description": "Prevent changes if current configuration file has different SHA1 digest. This can be used to prevent concurrent modifications."
														},
														{
															"key": "startall-onboot-delay",
															"value": "0",
															"description": "Initial delay in seconds, before starting all the Virtual Guests with on-boot enabled."
														},
														{
															"key": "wakeonlan",
															"value": "string",
															"description": "Node specific wake on LAN settings."
														}
													],
													"variable": [
														{
															"key": "node"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "null"
										}
									]
								}
							]
						},
						{
							"name": "sdn",
							"item": [
								{
									"name": "zones",
									"item": [
										{
											"name": "{zone}",
											"item": [
												{
													"name": "content",
													"item": [
														{
															"name": "List zone content.",
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/sdn/zones/:zone/content",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"sdn",
																		"zones",
																		":zone",
																		"content"
																	],
																	"variable": [
																		{
																			"key": "node",
																			"value": "string",
																			"description": "(Required) The cluster node name."
																		},
																		{
																			"key": "zone",
																			"value": "string",
																			"description": "(Required) The SDN zone object identifier."
																		}
																	]
																},
																"description": "List zone content."
															},
															"response": [
																{
																	"name": "successful operation",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/nodes/:node/sdn/zones/:zone/content",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"nodes",
																				":node",
																				"sdn",
																				"zones",
																				":zone",
																				"content"
																			],
																			"variable": [
																				{
																					"key": "node"
																				},
																				{
																					"key": "zone"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "[\n  {\n    \"status\": \"string\",\n    \"statusmsg\": \"string\",\n    \"vnet\": \"string\"\n  },\n  {\n    \"status\": \"string\",\n    \"statusmsg\": \"string\",\n    \"vnet\": \"string\"\n  }\n]"
																}
															]
														}
													]
												},
												{
													"name": "/nodes/:node/sdn/zones/:zone",
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/sdn/zones/:zone",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"sdn",
																"zones",
																":zone"
															],
															"variable": [
																{
																	"key": "node",
																	"value": "string",
																	"description": "(Required) The cluster node name."
																},
																{
																	"key": "zone",
																	"value": "string",
																	"description": "(Required) The SDN zone object identifier."
																}
															]
														}
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/nodes/:node/sdn/zones/:zone",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"nodes",
																		":node",
																		"sdn",
																		"zones",
																		":zone"
																	],
																	"variable": [
																		{
																			"key": "node"
																		},
																		{
																			"key": "zone"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "[\n  {\n    \"subdir\": \"string\"\n  },\n  {\n    \"subdir\": \"string\"\n  }\n]"
														}
													]
												}
											]
										},
										{
											"name": "Get status for all zones.",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/sdn/zones",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"sdn",
														"zones"
													],
													"variable": [
														{
															"key": "node",
															"value": "string",
															"description": "(Required) The cluster node name."
														}
													]
												},
												"description": "Get status for all zones."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/nodes/:node/sdn/zones",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"nodes",
																":node",
																"sdn",
																"zones"
															],
															"variable": [
																{
																	"key": "node"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "[\n  {\n    \"status\": \"pending\",\n    \"zone\": \"string\"\n  },\n  {\n    \"status\": \"pending\",\n    \"zone\": \"string\"\n  }\n]"
												}
											]
										}
									]
								},
								{
									"name": "SDN index.",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/nodes/:node/sdn",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"nodes",
												":node",
												"sdn"
											],
											"variable": [
												{
													"key": "node",
													"value": "string",
													"description": "(Required) The cluster node name."
												}
											]
										},
										"description": "SDN index."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/sdn",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"sdn"
													],
													"variable": [
														{
															"key": "node"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[]"
										}
									]
								}
							]
						},
						{
							"name": "version",
							"item": [
								{
									"name": "API version details",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/nodes/:node/version",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"nodes",
												":node",
												"version"
											],
											"variable": [
												{
													"key": "node",
													"value": "string",
													"description": "(Required) The cluster node name."
												}
											]
										},
										"description": "API version details"
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/version",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"version"
													],
													"variable": [
														{
															"key": "node"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"release\": \"string\",\n  \"repoid\": \"string\",\n  \"version\": \"string\"\n}"
										}
									]
								}
							]
						},
						{
							"name": "status",
							"item": [
								{
									"name": "Read node status",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/nodes/:node/status",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"nodes",
												":node",
												"status"
											],
											"variable": [
												{
													"key": "node",
													"value": "string",
													"description": "(Required) The cluster node name."
												}
											]
										},
										"description": "Read node status"
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/status",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"status"
													],
													"variable": [
														{
															"key": "node"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"boot-info\": {\n    \"mode\": \"efi\",\n    \"secureboot\": true\n  },\n  \"cpu\": 615.4332547441932,\n  \"cpuinfo\": {\n    \"cores\": 6905,\n    \"cpus\": 2964,\n    \"model\": \"string\",\n    \"sockets\": 8962\n  },\n  \"current-kernel\": {\n    \"machine\": \"string\",\n    \"release\": \"string\",\n    \"sysname\": \"string\",\n    \"version\": \"string\"\n  },\n  \"loadavg\": [\n    \"string\",\n    \"string\"\n  ],\n  \"memory\": {\n    \"available\": 3688,\n    \"free\": 4643,\n    \"total\": 2706,\n    \"used\": 5254\n  },\n  \"pveversion\": \"string\",\n  \"rootfs\": {\n    \"avail\": 4852,\n    \"free\": 2231,\n    \"total\": 7933,\n    \"used\": 5643\n  }\n}"
										}
									]
								},
								{
									"name": "Reboot or shutdown a node.",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/nodes/:node/status?command=reboot",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"nodes",
												":node",
												"status"
											],
											"query": [
												{
													"key": "command",
													"value": "reboot",
													"description": "(Required) Specify the command."
												}
											],
											"variable": [
												{
													"key": "node",
													"value": "string",
													"description": "(Required) The cluster node name."
												}
											]
										},
										"description": "Reboot or shutdown a node."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/status?command=reboot",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"status"
													],
													"query": [
														{
															"key": "command",
															"value": "reboot",
															"description": "(Required) Specify the command."
														}
													],
													"variable": [
														{
															"key": "node"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "null"
										}
									]
								}
							]
						},
						{
							"name": "netstat",
							"item": [
								{
									"name": "Read tap/vm network device interface counters",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/nodes/:node/netstat",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"nodes",
												":node",
												"netstat"
											],
											"variable": [
												{
													"key": "node",
													"value": "string",
													"description": "(Required) The cluster node name."
												}
											]
										},
										"description": "Read tap/vm network device interface counters"
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/netstat",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"netstat"
													],
													"variable": [
														{
															"key": "node"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[]"
										}
									]
								}
							]
						},
						{
							"name": "execute",
							"item": [
								{
									"name": "Execute multiple commands in order, root only.",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/nodes/:node/execute?commands=string",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"nodes",
												":node",
												"execute"
											],
											"query": [
												{
													"key": "commands",
													"value": "string",
													"description": "(Required) JSON encoded array of commands."
												}
											],
											"variable": [
												{
													"key": "node",
													"value": "string",
													"description": "(Required) The cluster node name."
												}
											]
										},
										"description": "Execute multiple commands in order, root only."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/execute?commands=string",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"execute"
													],
													"query": [
														{
															"key": "commands",
															"value": "string",
															"description": "(Required) JSON encoded array of commands."
														}
													],
													"variable": [
														{
															"key": "node"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[]"
										}
									]
								}
							]
						},
						{
							"name": "wakeonlan",
							"item": [
								{
									"name": "Try to wake a node via 'wake on LAN' network packet.",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/nodes/:node/wakeonlan",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"nodes",
												":node",
												"wakeonlan"
											],
											"variable": [
												{
													"key": "node",
													"value": "string",
													"description": "(Required) target node for wake on LAN packet"
												}
											]
										},
										"description": "Try to wake a node via 'wake on LAN' network packet."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/wakeonlan",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"wakeonlan"
													],
													"variable": [
														{
															"key": "node"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "string"
										}
									]
								}
							]
						},
						{
							"name": "rrd",
							"item": [
								{
									"name": "Read node RRD statistics (returns PNG)",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/nodes/:node/rrd?cf=MAX&ds=string&timeframe=month",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"nodes",
												":node",
												"rrd"
											],
											"query": [
												{
													"key": "cf",
													"value": "MAX",
													"description": "The RRD consolidation function"
												},
												{
													"key": "ds",
													"value": "string",
													"description": "(Required) The list of datasources you want to display."
												},
												{
													"key": "timeframe",
													"value": "month",
													"description": "(Required) Specify the time frame you are interested in."
												}
											],
											"variable": [
												{
													"key": "node",
													"value": "string",
													"description": "(Required) The cluster node name."
												}
											]
										},
										"description": "Read node RRD statistics (returns PNG)"
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/rrd?cf=MAX&ds=string&timeframe=month",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"rrd"
													],
													"query": [
														{
															"key": "cf",
															"value": "MAX",
															"description": "The RRD consolidation function"
														},
														{
															"key": "ds",
															"value": "string",
															"description": "(Required) The list of datasources you want to display."
														},
														{
															"key": "timeframe",
															"value": "month",
															"description": "(Required) Specify the time frame you are interested in."
														}
													],
													"variable": [
														{
															"key": "node"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"filename\": \"string\"\n}"
										}
									]
								}
							]
						},
						{
							"name": "rrddata",
							"item": [
								{
									"name": "Read node RRD statistics",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/nodes/:node/rrddata?cf=MAX&timeframe=month",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"nodes",
												":node",
												"rrddata"
											],
											"query": [
												{
													"key": "cf",
													"value": "MAX",
													"description": "The RRD consolidation function"
												},
												{
													"key": "timeframe",
													"value": "month",
													"description": "(Required) Specify the time frame you are interested in."
												}
											],
											"variable": [
												{
													"key": "node",
													"value": "string",
													"description": "(Required) The cluster node name."
												}
											]
										},
										"description": "Read node RRD statistics"
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/rrddata?cf=MAX&timeframe=month",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"rrddata"
													],
													"query": [
														{
															"key": "cf",
															"value": "MAX",
															"description": "The RRD consolidation function"
														},
														{
															"key": "timeframe",
															"value": "month",
															"description": "(Required) Specify the time frame you are interested in."
														}
													],
													"variable": [
														{
															"key": "node"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[]"
										}
									]
								}
							]
						},
						{
							"name": "syslog",
							"item": [
								{
									"name": "Read system log",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/nodes/:node/syslog?limit=8248&service=string&since=3889-44-66 91:79:97&start=8248&until=3889-44-66 91:79:97",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"nodes",
												":node",
												"syslog"
											],
											"query": [
												{
													"key": "limit",
													"value": "8248"
												},
												{
													"key": "service",
													"value": "string",
													"description": "Service ID"
												},
												{
													"key": "since",
													"value": "3889-44-66 91:79:97",
													"description": "Display all log since this date-time string."
												},
												{
													"key": "start",
													"value": "8248"
												},
												{
													"key": "until",
													"value": "3889-44-66 91:79:97",
													"description": "Display all log until this date-time string."
												}
											],
											"variable": [
												{
													"key": "node",
													"value": "string",
													"description": "(Required) The cluster node name."
												}
											]
										},
										"description": "Read system log"
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/syslog?limit=8248&service=string&since=3889-44-66 91:79:97&start=8248&until=3889-44-66 91:79:97",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"syslog"
													],
													"query": [
														{
															"key": "limit",
															"value": "8248"
														},
														{
															"key": "service",
															"value": "string",
															"description": "Service ID"
														},
														{
															"key": "since",
															"value": "3889-44-66 91:79:97",
															"description": "Display all log since this date-time string."
														},
														{
															"key": "start",
															"value": "8248"
														},
														{
															"key": "until",
															"value": "3889-44-66 91:79:97",
															"description": "Display all log until this date-time string."
														}
													],
													"variable": [
														{
															"key": "node"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"n\": 6858,\n    \"t\": \"string\"\n  },\n  {\n    \"n\": 9106,\n    \"t\": \"string\"\n  }\n]"
										}
									]
								}
							]
						},
						{
							"name": "journal",
							"item": [
								{
									"name": "Read Journal",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/nodes/:node/journal?endcursor=string&lastentries=8248&since=8248&startcursor=string&until=8248",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"nodes",
												":node",
												"journal"
											],
											"query": [
												{
													"key": "endcursor",
													"value": "string",
													"description": "End before the given Cursor. Conflicts with 'until'"
												},
												{
													"key": "lastentries",
													"value": "8248",
													"description": "Limit to the last X lines. Conflicts with a range."
												},
												{
													"key": "since",
													"value": "8248",
													"description": "Display all log since this UNIX epoch. Conflicts with 'startcursor'."
												},
												{
													"key": "startcursor",
													"value": "string",
													"description": "Start after the given Cursor. Conflicts with 'since'"
												},
												{
													"key": "until",
													"value": "8248",
													"description": "Display all log until this UNIX epoch. Conflicts with 'endcursor'."
												}
											],
											"variable": [
												{
													"key": "node",
													"value": "string",
													"description": "(Required) The cluster node name."
												}
											]
										},
										"description": "Read Journal"
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/journal?endcursor=string&lastentries=8248&since=8248&startcursor=string&until=8248",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"journal"
													],
													"query": [
														{
															"key": "endcursor",
															"value": "string",
															"description": "End before the given Cursor. Conflicts with 'until'"
														},
														{
															"key": "lastentries",
															"value": "8248",
															"description": "Limit to the last X lines. Conflicts with a range."
														},
														{
															"key": "since",
															"value": "8248",
															"description": "Display all log since this UNIX epoch. Conflicts with 'startcursor'."
														},
														{
															"key": "startcursor",
															"value": "string",
															"description": "Start after the given Cursor. Conflicts with 'since'"
														},
														{
															"key": "until",
															"value": "8248",
															"description": "Display all log until this UNIX epoch. Conflicts with 'endcursor'."
														}
													],
													"variable": [
														{
															"key": "node"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n  \"string\",\n  \"string\"\n]"
										}
									]
								}
							]
						},
						{
							"name": "vncshell",
							"item": [
								{
									"name": "Creates a VNC Shell proxy.",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/nodes/:node/vncshell?cmd=login&cmd-opts=&height=741&websocket=true&width=880",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"nodes",
												":node",
												"vncshell"
											],
											"query": [
												{
													"key": "cmd",
													"value": "login",
													"description": "Run specific command or default to login (requires 'root@pam')"
												},
												{
													"key": "cmd-opts",
													"value": "",
													"description": "Add parameters to a command. Encoded as null terminated strings."
												},
												{
													"key": "height",
													"value": "741",
													"description": "sets the height of the console in pixels."
												},
												{
													"key": "websocket",
													"value": "true",
													"description": "use websocket instead of standard vnc."
												},
												{
													"key": "width",
													"value": "880",
													"description": "sets the width of the console in pixels."
												}
											],
											"variable": [
												{
													"key": "node",
													"value": "string",
													"description": "(Required) The cluster node name."
												}
											]
										},
										"description": "Creates a VNC Shell proxy."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/vncshell?cmd=login&cmd-opts=&height=741&websocket=true&width=880",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"vncshell"
													],
													"query": [
														{
															"key": "cmd",
															"value": "login",
															"description": "Run specific command or default to login (requires 'root@pam')"
														},
														{
															"key": "cmd-opts",
															"value": "",
															"description": "Add parameters to a command. Encoded as null terminated strings."
														},
														{
															"key": "height",
															"value": "741",
															"description": "sets the height of the console in pixels."
														},
														{
															"key": "websocket",
															"value": "true",
															"description": "use websocket instead of standard vnc."
														},
														{
															"key": "width",
															"value": "880",
															"description": "sets the width of the console in pixels."
														}
													],
													"variable": [
														{
															"key": "node"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"cert\": \"string\",\n  \"port\": 5394,\n  \"ticket\": \"string\",\n  \"upid\": \"string\",\n  \"user\": \"string\"\n}"
										}
									]
								}
							]
						},
						{
							"name": "termproxy",
							"item": [
								{
									"name": "Creates a VNC Shell proxy.",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/nodes/:node/termproxy?cmd=login&cmd-opts=",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"nodes",
												":node",
												"termproxy"
											],
											"query": [
												{
													"key": "cmd",
													"value": "login",
													"description": "Run specific command or default to login (requires 'root@pam')"
												},
												{
													"key": "cmd-opts",
													"value": "",
													"description": "Add parameters to a command. Encoded as null terminated strings."
												}
											],
											"variable": [
												{
													"key": "node",
													"value": "string",
													"description": "(Required) The cluster node name."
												}
											]
										},
										"description": "Creates a VNC Shell proxy."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/termproxy?cmd=login&cmd-opts=",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"termproxy"
													],
													"query": [
														{
															"key": "cmd",
															"value": "login",
															"description": "Run specific command or default to login (requires 'root@pam')"
														},
														{
															"key": "cmd-opts",
															"value": "",
															"description": "Add parameters to a command. Encoded as null terminated strings."
														}
													],
													"variable": [
														{
															"key": "node"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"port\": 1613,\n  \"ticket\": \"string\",\n  \"upid\": \"string\",\n  \"user\": \"string\"\n}"
										}
									]
								}
							]
						},
						{
							"name": "vncwebsocket",
							"item": [
								{
									"name": "Opens a websocket for VNC traffic.",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/nodes/:node/vncwebsocket?port=5902&vncticket=string",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"nodes",
												":node",
												"vncwebsocket"
											],
											"query": [
												{
													"key": "port",
													"value": "5902",
													"description": "(Required) Port number returned by previous vncproxy call."
												},
												{
													"key": "vncticket",
													"value": "string",
													"description": "(Required) Ticket from previous call to vncproxy."
												}
											],
											"variable": [
												{
													"key": "node",
													"value": "string",
													"description": "(Required) The cluster node name."
												}
											]
										},
										"description": "Opens a websocket for VNC traffic."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/vncwebsocket?port=5902&vncticket=string",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"vncwebsocket"
													],
													"query": [
														{
															"key": "port",
															"value": "5902",
															"description": "(Required) Port number returned by previous vncproxy call."
														},
														{
															"key": "vncticket",
															"value": "string",
															"description": "(Required) Ticket from previous call to vncproxy."
														}
													],
													"variable": [
														{
															"key": "node"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"port\": \"string\"\n}"
										}
									]
								}
							]
						},
						{
							"name": "spiceshell",
							"item": [
								{
									"name": "Creates a SPICE shell.",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/nodes/:node/spiceshell?cmd=login&cmd-opts=&proxy=string",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"nodes",
												":node",
												"spiceshell"
											],
											"query": [
												{
													"key": "cmd",
													"value": "login",
													"description": "Run specific command or default to login (requires 'root@pam')"
												},
												{
													"key": "cmd-opts",
													"value": "",
													"description": "Add parameters to a command. Encoded as null terminated strings."
												},
												{
													"key": "proxy",
													"value": "string",
													"description": "SPICE proxy server. This can be used by the client to specify the proxy server. All nodes in a cluster runs 'spiceproxy', so it is up to the client to choose one. By default, we return the node where the VM is currently running. As reasonable setting is to use same node you use to connect to the API (This is window.location.hostname for the JS GUI)."
												}
											],
											"variable": [
												{
													"key": "node",
													"value": "string",
													"description": "(Required) The cluster node name."
												}
											]
										},
										"description": "Creates a SPICE shell."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/spiceshell?cmd=login&cmd-opts=&proxy=string",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"spiceshell"
													],
													"query": [
														{
															"key": "cmd",
															"value": "login",
															"description": "Run specific command or default to login (requires 'root@pam')"
														},
														{
															"key": "cmd-opts",
															"value": "",
															"description": "Add parameters to a command. Encoded as null terminated strings."
														},
														{
															"key": "proxy",
															"value": "string",
															"description": "SPICE proxy server. This can be used by the client to specify the proxy server. All nodes in a cluster runs 'spiceproxy', so it is up to the client to choose one. By default, we return the node where the VM is currently running. As reasonable setting is to use same node you use to connect to the API (This is window.location.hostname for the JS GUI)."
														}
													],
													"variable": [
														{
															"key": "node"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"host\": \"string\",\n  \"password\": \"string\",\n  \"proxy\": \"string\",\n  \"tls-port\": 4012,\n  \"type\": \"string\"\n}"
										}
									]
								}
							]
						},
						{
							"name": "dns",
							"item": [
								{
									"name": "Read DNS settings.",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/nodes/:node/dns",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"nodes",
												":node",
												"dns"
											],
											"variable": [
												{
													"key": "node",
													"value": "string",
													"description": "(Required) The cluster node name."
												}
											]
										},
										"description": "Read DNS settings."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/dns",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"dns"
													],
													"variable": [
														{
															"key": "node"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"dns1\": \"string\",\n  \"dns2\": \"string\",\n  \"dns3\": \"string\",\n  \"search\": \"string\"\n}"
										}
									]
								},
								{
									"name": "Write DNS settings.",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/nodes/:node/dns?dns1=string&dns2=string&dns3=string&search=string",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"nodes",
												":node",
												"dns"
											],
											"query": [
												{
													"key": "dns1",
													"value": "string",
													"description": "First name server IP address."
												},
												{
													"key": "dns2",
													"value": "string",
													"description": "Second name server IP address."
												},
												{
													"key": "dns3",
													"value": "string",
													"description": "Third name server IP address."
												},
												{
													"key": "search",
													"value": "string",
													"description": "(Required) Search domain for host-name lookup."
												}
											],
											"variable": [
												{
													"key": "node",
													"value": "string",
													"description": "(Required) The cluster node name."
												}
											]
										},
										"description": "Write DNS settings."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/dns?dns1=string&dns2=string&dns3=string&search=string",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"dns"
													],
													"query": [
														{
															"key": "dns1",
															"value": "string",
															"description": "First name server IP address."
														},
														{
															"key": "dns2",
															"value": "string",
															"description": "Second name server IP address."
														},
														{
															"key": "dns3",
															"value": "string",
															"description": "Third name server IP address."
														},
														{
															"key": "search",
															"value": "string",
															"description": "(Required) Search domain for host-name lookup."
														}
													],
													"variable": [
														{
															"key": "node"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "null"
										}
									]
								}
							]
						},
						{
							"name": "time",
							"item": [
								{
									"name": "Read server time and time zone settings.",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/nodes/:node/time",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"nodes",
												":node",
												"time"
											],
											"variable": [
												{
													"key": "node",
													"value": "string",
													"description": "(Required) The cluster node name."
												}
											]
										},
										"description": "Read server time and time zone settings."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/time",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"time"
													],
													"variable": [
														{
															"key": "node"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"localtime\": null,\n  \"time\": null,\n  \"timezone\": \"string\"\n}"
										}
									]
								},
								{
									"name": "Set time zone.",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/nodes/:node/time?timezone=string",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"nodes",
												":node",
												"time"
											],
											"query": [
												{
													"key": "timezone",
													"value": "string",
													"description": "(Required) Time zone. The file '/usr/share/zoneinfo/zone.tab' contains the list of valid names."
												}
											],
											"variable": [
												{
													"key": "node",
													"value": "string",
													"description": "(Required) The cluster node name."
												}
											]
										},
										"description": "Set time zone."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/time?timezone=string",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"time"
													],
													"query": [
														{
															"key": "timezone",
															"value": "string",
															"description": "(Required) Time zone. The file '/usr/share/zoneinfo/zone.tab' contains the list of valid names."
														}
													],
													"variable": [
														{
															"key": "node"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "null"
										}
									]
								}
							]
						},
						{
							"name": "aplinfo",
							"item": [
								{
									"name": "Get list of appliances.",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/nodes/:node/aplinfo",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"nodes",
												":node",
												"aplinfo"
											],
											"variable": [
												{
													"key": "node",
													"value": "string",
													"description": "(Required) The cluster node name."
												}
											]
										},
										"description": "Get list of appliances."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/aplinfo",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"aplinfo"
													],
													"variable": [
														{
															"key": "node"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[]"
										}
									]
								},
								{
									"name": "Download appliance templates.",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/nodes/:node/aplinfo?storage=string&template=string",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"nodes",
												":node",
												"aplinfo"
											],
											"query": [
												{
													"key": "storage",
													"value": "string",
													"description": "(Required) The storage where the template will be stored"
												},
												{
													"key": "template",
													"value": "string",
													"description": "(Required) The template which will downloaded"
												}
											],
											"variable": [
												{
													"key": "node",
													"value": "string",
													"description": "(Required) The cluster node name."
												}
											]
										},
										"description": "Download appliance templates."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/aplinfo?storage=string&template=string",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"aplinfo"
													],
													"query": [
														{
															"key": "storage",
															"value": "string",
															"description": "(Required) The storage where the template will be stored"
														},
														{
															"key": "template",
															"value": "string",
															"description": "(Required) The template which will downloaded"
														}
													],
													"variable": [
														{
															"key": "node"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "string"
										}
									]
								}
							]
						},
						{
							"name": "query-url-metadata",
							"item": [
								{
									"name": "Query metadata of an URL: file size, file name and mime type.",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/nodes/:node/query-url-metadata?url=https://Q=a&verify-certificates=1",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"nodes",
												":node",
												"query-url-metadata"
											],
											"query": [
												{
													"key": "url",
													"value": "https://Q=a",
													"description": "(Required) The URL to query the metadata from."
												},
												{
													"key": "verify-certificates",
													"value": "1",
													"description": "If false, no SSL/TLS certificates will be verified."
												}
											],
											"variable": [
												{
													"key": "node",
													"value": "string",
													"description": "(Required) The cluster node name."
												}
											]
										},
										"description": "Query metadata of an URL: file size, file name and mime type."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/query-url-metadata?url=https://Q=a&verify-certificates=1",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"query-url-metadata"
													],
													"query": [
														{
															"key": "url",
															"value": "https://Q=a",
															"description": "(Required) The URL to query the metadata from."
														},
														{
															"key": "verify-certificates",
															"value": "1",
															"description": "If false, no SSL/TLS certificates will be verified."
														}
													],
													"variable": [
														{
															"key": "node"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"filename\": \"string\",\n  \"mimetype\": \"string\",\n  \"size\": 7413\n}"
										}
									]
								}
							]
						},
						{
							"name": "report",
							"item": [
								{
									"name": "Gather various systems information about a node",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/nodes/:node/report",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"nodes",
												":node",
												"report"
											],
											"variable": [
												{
													"key": "node",
													"value": "string",
													"description": "(Required) The cluster node name."
												}
											]
										},
										"description": "Gather various systems information about a node"
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/report",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"report"
													],
													"variable": [
														{
															"key": "node"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "string"
										}
									]
								}
							]
						},
						{
							"name": "startall",
							"item": [
								{
									"name": "Start all VMs and containers located on this node (by default only those with onboot=1).",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/nodes/:node/startall?force=off&vms=string",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"nodes",
												":node",
												"startall"
											],
											"query": [
												{
													"key": "force",
													"value": "off",
													"description": "Issue start command even if virtual guest have 'onboot' not set or set to off."
												},
												{
													"key": "vms",
													"value": "string",
													"description": "Only consider guests from this comma separated list of VMIDs."
												}
											],
											"variable": [
												{
													"key": "node",
													"value": "string",
													"description": "(Required) The cluster node name."
												}
											]
										},
										"description": "Start all VMs and containers located on this node (by default only those with onboot=1)."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/startall?force=off&vms=string",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"startall"
													],
													"query": [
														{
															"key": "force",
															"value": "off",
															"description": "Issue start command even if virtual guest have 'onboot' not set or set to off."
														},
														{
															"key": "vms",
															"value": "string",
															"description": "Only consider guests from this comma separated list of VMIDs."
														}
													],
													"variable": [
														{
															"key": "node"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "string"
										}
									]
								}
							]
						},
						{
							"name": "stopall",
							"item": [
								{
									"name": "Stop all VMs and Containers.",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/nodes/:node/stopall?force-stop=1&timeout=180&vms=string",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"nodes",
												":node",
												"stopall"
											],
											"query": [
												{
													"key": "force-stop",
													"value": "1",
													"description": "Force a hard-stop after the timeout."
												},
												{
													"key": "timeout",
													"value": "180",
													"description": "Timeout for each guest shutdown task. Depending on `force-stop`, the shutdown gets then simply aborted or a hard-stop is forced."
												},
												{
													"key": "vms",
													"value": "string",
													"description": "Only consider Guests with these IDs."
												}
											],
											"variable": [
												{
													"key": "node",
													"value": "string",
													"description": "(Required) The cluster node name."
												}
											]
										},
										"description": "Stop all VMs and Containers."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/stopall?force-stop=1&timeout=180&vms=string",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"stopall"
													],
													"query": [
														{
															"key": "force-stop",
															"value": "1",
															"description": "Force a hard-stop after the timeout."
														},
														{
															"key": "timeout",
															"value": "180",
															"description": "Timeout for each guest shutdown task. Depending on `force-stop`, the shutdown gets then simply aborted or a hard-stop is forced."
														},
														{
															"key": "vms",
															"value": "string",
															"description": "Only consider Guests with these IDs."
														}
													],
													"variable": [
														{
															"key": "node"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "string"
										}
									]
								}
							]
						},
						{
							"name": "suspendall",
							"item": [
								{
									"name": "Suspend all VMs.",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/nodes/:node/suspendall?vms=string",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"nodes",
												":node",
												"suspendall"
											],
											"query": [
												{
													"key": "vms",
													"value": "string",
													"description": "Only consider Guests with these IDs."
												}
											],
											"variable": [
												{
													"key": "node",
													"value": "string",
													"description": "(Required) The cluster node name."
												}
											]
										},
										"description": "Suspend all VMs."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/suspendall?vms=string",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"suspendall"
													],
													"query": [
														{
															"key": "vms",
															"value": "string",
															"description": "Only consider Guests with these IDs."
														}
													],
													"variable": [
														{
															"key": "node"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "string"
										}
									]
								}
							]
						},
						{
							"name": "migrateall",
							"item": [
								{
									"name": "Migrate all VMs and Containers.",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/nodes/:node/migrateall?maxworkers=5741&target=string&vms=string&with-local-disks=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"nodes",
												":node",
												"migrateall"
											],
											"query": [
												{
													"key": "maxworkers",
													"value": "5741",
													"description": "Maximal number of parallel migration job. If not set, uses'max_workers' from datacenter.cfg. One of both must be set!"
												},
												{
													"key": "target",
													"value": "string",
													"description": "(Required) Target node."
												},
												{
													"key": "vms",
													"value": "string",
													"description": "Only consider Guests with these IDs."
												},
												{
													"key": "with-local-disks",
													"value": "true",
													"description": "Enable live storage migration for local disk"
												}
											],
											"variable": [
												{
													"key": "node",
													"value": "string",
													"description": "(Required) The cluster node name."
												}
											]
										},
										"description": "Migrate all VMs and Containers."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/migrateall?maxworkers=5741&target=string&vms=string&with-local-disks=true",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"migrateall"
													],
													"query": [
														{
															"key": "maxworkers",
															"value": "5741",
															"description": "Maximal number of parallel migration job. If not set, uses'max_workers' from datacenter.cfg. One of both must be set!"
														},
														{
															"key": "target",
															"value": "string",
															"description": "(Required) Target node."
														},
														{
															"key": "vms",
															"value": "string",
															"description": "Only consider Guests with these IDs."
														},
														{
															"key": "with-local-disks",
															"value": "true",
															"description": "Enable live storage migration for local disk"
														}
													],
													"variable": [
														{
															"key": "node"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "string"
										}
									]
								}
							]
						},
						{
							"name": "hosts",
							"item": [
								{
									"name": "Get the content of /etc/hosts.",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/nodes/:node/hosts",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"nodes",
												":node",
												"hosts"
											],
											"variable": [
												{
													"key": "node",
													"value": "string",
													"description": "(Required) The cluster node name."
												}
											]
										},
										"description": "Get the content of /etc/hosts."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/hosts",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"hosts"
													],
													"variable": [
														{
															"key": "node"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"data\": \"string\",\n  \"digest\": \"string\"\n}"
										}
									]
								},
								{
									"name": "Write /etc/hosts.",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/nodes/:node/hosts?data=string&digest=string",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"nodes",
												":node",
												"hosts"
											],
											"query": [
												{
													"key": "data",
													"value": "string",
													"description": "(Required) The target content of /etc/hosts."
												},
												{
													"key": "digest",
													"value": "string",
													"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
												}
											],
											"variable": [
												{
													"key": "node",
													"value": "string",
													"description": "(Required) The cluster node name."
												}
											]
										},
										"description": "Write /etc/hosts."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/nodes/:node/hosts?data=string&digest=string",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"nodes",
														":node",
														"hosts"
													],
													"query": [
														{
															"key": "data",
															"value": "string",
															"description": "(Required) The target content of /etc/hosts."
														},
														{
															"key": "digest",
															"value": "string",
															"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
														}
													],
													"variable": [
														{
															"key": "node"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "null"
										}
									]
								}
							]
						},
						{
							"name": "Node index.",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/nodes/:node",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"nodes",
										":node"
									],
									"variable": [
										{
											"key": "node",
											"value": "string",
											"description": "(Required) The cluster node name."
										}
									]
								},
								"description": "Node index."
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/nodes/:node",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"nodes",
												":node"
											],
											"variable": [
												{
													"key": "node"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[]"
								}
							]
						}
					]
				},
				{
					"name": "Cluster node index.",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/nodes",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"nodes"
							]
						},
						"description": "Cluster node index."
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/nodes",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"nodes"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n  {\n    \"cpu\": 4455.1291341187025,\n    \"level\": \"string\",\n    \"maxcpu\": 2708,\n    \"maxmem\": 5280,\n    \"mem\": 6649,\n    \"node\": \"string\",\n    \"ssl_fingerprint\": \"string\",\n    \"status\": \"online\",\n    \"uptime\": 9975\n  },\n  {\n    \"cpu\": 8565.643822097476,\n    \"level\": \"string\",\n    \"maxcpu\": 7108,\n    \"maxmem\": 1380,\n    \"mem\": 3423,\n    \"node\": \"string\",\n    \"ssl_fingerprint\": \"string\",\n    \"status\": \"offline\",\n    \"uptime\": 7746\n  }\n]"
						}
					]
				}
			]
		},
		{
			"name": "storage",
			"item": [
				{
					"name": "{storage}",
					"item": [
						{
							"name": "Delete storage configuration.",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/storage/:storage",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"storage",
										":storage"
									],
									"variable": [
										{
											"key": "storage",
											"value": "string",
											"description": "(Required) The storage identifier."
										}
									]
								},
								"description": "Delete storage configuration."
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/storage/:storage",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"storage",
												":storage"
											],
											"variable": [
												{
													"key": "storage"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "null"
								}
							]
						},
						{
							"name": "Read storage configuration.",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/storage/:storage",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"storage",
										":storage"
									],
									"variable": [
										{
											"key": "storage",
											"value": "string",
											"description": "(Required) The storage identifier."
										}
									]
								},
								"description": "Read storage configuration."
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/storage/:storage",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"storage",
												":storage"
											],
											"variable": [
												{
													"key": "storage"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{}"
								}
							]
						},
						{
							"name": "Update storage configuration.",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/storage/:storage?blocksize=string&bwlimit=string&comstar_hg=string&comstar_tg=string&content=string&content-dirs=string&create-base-path=yes&create-subdirs=yes&data-pool=string&delete=string&digest=string&disable=true&domain=string&encryption-key=string&fingerprint=2b:C6:53:bd:7c:42:0f:B0:19:Cc:76:26:41:2D:4D:68:a7:8b:9a:Dd:CE:FC:1d:cb:A3:B4:49:7d:8C:eA:3F:d9&format=qcow2&fs-name=string&fuse=true&is_mountpoint=no&keyring=string&krbd=0&lio_tpg=string&master-pubkey=string&max-protected-backups=Unlimited for users with Datastore.Allocate privilege, 5 for other users&mkdir=yes&monhost=string&mountpoint=string&namespace=string&nocow=0&nodes=string&nowritecache=true&options=string&password=string&pool=string&port=27761&preallocation=metadata&prune-backups=string&saferemove=true&saferemove_throughput=string&server=string&shared=true&skip-cert-verification=false&smbversion=default&snapshot-as-volume-chain=0&sparse=true&subdir=string&tagged_only=true&username=string&zfs-base-path=string",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"storage",
										":storage"
									],
									"query": [
										{
											"key": "blocksize",
											"value": "string",
											"description": "block size"
										},
										{
											"key": "bwlimit",
											"value": "string",
											"description": "Set I/O bandwidth limit for various operations (in KiB/s)."
										},
										{
											"key": "comstar_hg",
											"value": "string",
											"description": "host group for comstar views"
										},
										{
											"key": "comstar_tg",
											"value": "string",
											"description": "target group for comstar views"
										},
										{
											"key": "content",
											"value": "string",
											"description": "Allowed content types.\n\nNOTE: the value 'rootdir' is used for Containers, and value 'images' for VMs.\n"
										},
										{
											"key": "content-dirs",
											"value": "string",
											"description": "Overrides for default content type directories."
										},
										{
											"key": "create-base-path",
											"value": "yes",
											"description": "Create the base directory if it doesn't exist."
										},
										{
											"key": "create-subdirs",
											"value": "yes",
											"description": "Populate the directory with the default structure."
										},
										{
											"key": "data-pool",
											"value": "string",
											"description": "Data Pool (for erasure coding only)"
										},
										{
											"key": "delete",
											"value": "string",
											"description": "A list of settings you want to delete."
										},
										{
											"key": "digest",
											"value": "string",
											"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
										},
										{
											"key": "disable",
											"value": "true",
											"description": "Flag to disable the storage."
										},
										{
											"key": "domain",
											"value": "string",
											"description": "CIFS domain."
										},
										{
											"key": "encryption-key",
											"value": "string",
											"description": "Encryption key. Use 'autogen' to generate one automatically without passphrase."
										},
										{
											"key": "fingerprint",
											"value": "2b:C6:53:bd:7c:42:0f:B0:19:Cc:76:26:41:2D:4D:68:a7:8b:9a:Dd:CE:FC:1d:cb:A3:B4:49:7d:8C:eA:3F:d9",
											"description": "Certificate SHA 256 fingerprint."
										},
										{
											"key": "format",
											"value": "qcow2",
											"description": "Default image format."
										},
										{
											"key": "fs-name",
											"value": "string",
											"description": "The Ceph filesystem name."
										},
										{
											"key": "fuse",
											"value": "true",
											"description": "Mount CephFS through FUSE."
										},
										{
											"key": "is_mountpoint",
											"value": "no",
											"description": "Assume the given path is an externally managed mountpoint and consider the storage offline if it is not mounted. Using a boolean (yes/no) value serves as a shortcut to using the target path in this field."
										},
										{
											"key": "keyring",
											"value": "string",
											"description": "Client keyring contents (for external clusters)."
										},
										{
											"key": "krbd",
											"value": "0",
											"description": "Always access rbd through krbd kernel module."
										},
										{
											"key": "lio_tpg",
											"value": "string",
											"description": "target portal group for Linux LIO targets"
										},
										{
											"key": "master-pubkey",
											"value": "string",
											"description": "Base64-encoded, PEM-formatted public RSA key. Used to encrypt a copy of the encryption-key which will be added to each encrypted backup."
										},
										{
											"key": "max-protected-backups",
											"value": "Unlimited for users with Datastore.Allocate privilege, 5 for other users",
											"description": "Maximal number of protected backups per guest. Use '-1' for unlimited."
										},
										{
											"key": "mkdir",
											"value": "yes",
											"description": "Create the directory if it doesn't exist and populate it with default sub-dirs. NOTE: Deprecated, use the 'create-base-path' and 'create-subdirs' options instead."
										},
										{
											"key": "monhost",
											"value": "string",
											"description": "IP addresses of monitors (for external clusters)."
										},
										{
											"key": "mountpoint",
											"value": "string",
											"description": "mount point"
										},
										{
											"key": "namespace",
											"value": "string",
											"description": "Namespace."
										},
										{
											"key": "nocow",
											"value": "0",
											"description": "Set the NOCOW flag on files. Disables data checksumming and causes data errors to be unrecoverable from while allowing direct I/O. Only use this if data does not need to be any more safe than on a single ext4 formatted disk with no underlying raid system."
										},
										{
											"key": "nodes",
											"value": "string",
											"description": "List of nodes for which the storage configuration applies."
										},
										{
											"key": "nowritecache",
											"value": "true",
											"description": "disable write caching on the target"
										},
										{
											"key": "options",
											"value": "string",
											"description": "NFS/CIFS mount options (see 'man nfs' or 'man mount.cifs')"
										},
										{
											"key": "password",
											"value": "string",
											"description": "Password for accessing the share/datastore."
										},
										{
											"key": "pool",
											"value": "string",
											"description": "Pool."
										},
										{
											"key": "port",
											"value": "27761",
											"description": "Use this port to connect to the storage instead of the default one (for example, with PBS or ESXi). For NFS and CIFS, use the 'options' option to configure the port via the mount options."
										},
										{
											"key": "preallocation",
											"value": "metadata",
											"description": "Preallocation mode for raw and qcow2 images. Using 'metadata' on raw images results in preallocation=off."
										},
										{
											"key": "prune-backups",
											"value": "string",
											"description": "The retention options with shorter intervals are processed first with --keep-last being the very first one. Each option covers a specific period of time. We say that backups within this period are covered by this option. The next option does not take care of already covered backups and only considers older backups."
										},
										{
											"key": "saferemove",
											"value": "true",
											"description": "Zero-out data when removing LVs."
										},
										{
											"key": "saferemove_throughput",
											"value": "string",
											"description": "Wipe throughput (cstream -t parameter value)."
										},
										{
											"key": "server",
											"value": "string",
											"description": "Server IP or DNS name."
										},
										{
											"key": "shared",
											"value": "true",
											"description": "Indicate that this is a single storage with the same contents on all nodes (or all listed in the 'nodes' option). It will not make the contents of a local storage automatically accessible to other nodes, it just marks an already shared storage as such!"
										},
										{
											"key": "skip-cert-verification",
											"value": "false",
											"description": "Disable TLS certificate verification, only enable on fully trusted networks!"
										},
										{
											"key": "smbversion",
											"value": "default",
											"description": "SMB protocol version. 'default' if not set, negotiates the highest SMB2+ version supported by both the client and server."
										},
										{
											"key": "snapshot-as-volume-chain",
											"value": "0",
											"description": "Enable support for creating storage-vendor agnostic snapshot through volume backing-chains."
										},
										{
											"key": "sparse",
											"value": "true",
											"description": "use sparse volumes"
										},
										{
											"key": "subdir",
											"value": "string",
											"description": "Subdir to mount."
										},
										{
											"key": "tagged_only",
											"value": "true",
											"description": "Only use logical volumes tagged with 'pve-vm-ID'."
										},
										{
											"key": "username",
											"value": "string",
											"description": "RBD Id."
										},
										{
											"key": "zfs-base-path",
											"value": "string",
											"description": "Base path where to look for the created ZFS block devices. Set automatically during creation if not specified. Usually '/dev/zvol'."
										}
									],
									"variable": [
										{
											"key": "storage",
											"value": "string",
											"description": "(Required) The storage identifier."
										}
									]
								},
								"description": "Update storage configuration."
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/storage/:storage?blocksize=string&bwlimit=string&comstar_hg=string&comstar_tg=string&content=string&content-dirs=string&create-base-path=yes&create-subdirs=yes&data-pool=string&delete=string&digest=string&disable=true&domain=string&encryption-key=string&fingerprint=2b:C6:53:bd:7c:42:0f:B0:19:Cc:76:26:41:2D:4D:68:a7:8b:9a:Dd:CE:FC:1d:cb:A3:B4:49:7d:8C:eA:3F:d9&format=qcow2&fs-name=string&fuse=true&is_mountpoint=no&keyring=string&krbd=0&lio_tpg=string&master-pubkey=string&max-protected-backups=Unlimited for users with Datastore.Allocate privilege, 5 for other users&mkdir=yes&monhost=string&mountpoint=string&namespace=string&nocow=0&nodes=string&nowritecache=true&options=string&password=string&pool=string&port=27761&preallocation=metadata&prune-backups=string&saferemove=true&saferemove_throughput=string&server=string&shared=true&skip-cert-verification=false&smbversion=default&snapshot-as-volume-chain=0&sparse=true&subdir=string&tagged_only=true&username=string&zfs-base-path=string",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"storage",
												":storage"
											],
											"query": [
												{
													"key": "blocksize",
													"value": "string",
													"description": "block size"
												},
												{
													"key": "bwlimit",
													"value": "string",
													"description": "Set I/O bandwidth limit for various operations (in KiB/s)."
												},
												{
													"key": "comstar_hg",
													"value": "string",
													"description": "host group for comstar views"
												},
												{
													"key": "comstar_tg",
													"value": "string",
													"description": "target group for comstar views"
												},
												{
													"key": "content",
													"value": "string",
													"description": "Allowed content types.\n\nNOTE: the value 'rootdir' is used for Containers, and value 'images' for VMs.\n"
												},
												{
													"key": "content-dirs",
													"value": "string",
													"description": "Overrides for default content type directories."
												},
												{
													"key": "create-base-path",
													"value": "yes",
													"description": "Create the base directory if it doesn't exist."
												},
												{
													"key": "create-subdirs",
													"value": "yes",
													"description": "Populate the directory with the default structure."
												},
												{
													"key": "data-pool",
													"value": "string",
													"description": "Data Pool (for erasure coding only)"
												},
												{
													"key": "delete",
													"value": "string",
													"description": "A list of settings you want to delete."
												},
												{
													"key": "digest",
													"value": "string",
													"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
												},
												{
													"key": "disable",
													"value": "true",
													"description": "Flag to disable the storage."
												},
												{
													"key": "domain",
													"value": "string",
													"description": "CIFS domain."
												},
												{
													"key": "encryption-key",
													"value": "string",
													"description": "Encryption key. Use 'autogen' to generate one automatically without passphrase."
												},
												{
													"key": "fingerprint",
													"value": "2b:C6:53:bd:7c:42:0f:B0:19:Cc:76:26:41:2D:4D:68:a7:8b:9a:Dd:CE:FC:1d:cb:A3:B4:49:7d:8C:eA:3F:d9",
													"description": "Certificate SHA 256 fingerprint."
												},
												{
													"key": "format",
													"value": "qcow2",
													"description": "Default image format."
												},
												{
													"key": "fs-name",
													"value": "string",
													"description": "The Ceph filesystem name."
												},
												{
													"key": "fuse",
													"value": "true",
													"description": "Mount CephFS through FUSE."
												},
												{
													"key": "is_mountpoint",
													"value": "no",
													"description": "Assume the given path is an externally managed mountpoint and consider the storage offline if it is not mounted. Using a boolean (yes/no) value serves as a shortcut to using the target path in this field."
												},
												{
													"key": "keyring",
													"value": "string",
													"description": "Client keyring contents (for external clusters)."
												},
												{
													"key": "krbd",
													"value": "0",
													"description": "Always access rbd through krbd kernel module."
												},
												{
													"key": "lio_tpg",
													"value": "string",
													"description": "target portal group for Linux LIO targets"
												},
												{
													"key": "master-pubkey",
													"value": "string",
													"description": "Base64-encoded, PEM-formatted public RSA key. Used to encrypt a copy of the encryption-key which will be added to each encrypted backup."
												},
												{
													"key": "max-protected-backups",
													"value": "Unlimited for users with Datastore.Allocate privilege, 5 for other users",
													"description": "Maximal number of protected backups per guest. Use '-1' for unlimited."
												},
												{
													"key": "mkdir",
													"value": "yes",
													"description": "Create the directory if it doesn't exist and populate it with default sub-dirs. NOTE: Deprecated, use the 'create-base-path' and 'create-subdirs' options instead."
												},
												{
													"key": "monhost",
													"value": "string",
													"description": "IP addresses of monitors (for external clusters)."
												},
												{
													"key": "mountpoint",
													"value": "string",
													"description": "mount point"
												},
												{
													"key": "namespace",
													"value": "string",
													"description": "Namespace."
												},
												{
													"key": "nocow",
													"value": "0",
													"description": "Set the NOCOW flag on files. Disables data checksumming and causes data errors to be unrecoverable from while allowing direct I/O. Only use this if data does not need to be any more safe than on a single ext4 formatted disk with no underlying raid system."
												},
												{
													"key": "nodes",
													"value": "string",
													"description": "List of nodes for which the storage configuration applies."
												},
												{
													"key": "nowritecache",
													"value": "true",
													"description": "disable write caching on the target"
												},
												{
													"key": "options",
													"value": "string",
													"description": "NFS/CIFS mount options (see 'man nfs' or 'man mount.cifs')"
												},
												{
													"key": "password",
													"value": "string",
													"description": "Password for accessing the share/datastore."
												},
												{
													"key": "pool",
													"value": "string",
													"description": "Pool."
												},
												{
													"key": "port",
													"value": "27761",
													"description": "Use this port to connect to the storage instead of the default one (for example, with PBS or ESXi). For NFS and CIFS, use the 'options' option to configure the port via the mount options."
												},
												{
													"key": "preallocation",
													"value": "metadata",
													"description": "Preallocation mode for raw and qcow2 images. Using 'metadata' on raw images results in preallocation=off."
												},
												{
													"key": "prune-backups",
													"value": "string",
													"description": "The retention options with shorter intervals are processed first with --keep-last being the very first one. Each option covers a specific period of time. We say that backups within this period are covered by this option. The next option does not take care of already covered backups and only considers older backups."
												},
												{
													"key": "saferemove",
													"value": "true",
													"description": "Zero-out data when removing LVs."
												},
												{
													"key": "saferemove_throughput",
													"value": "string",
													"description": "Wipe throughput (cstream -t parameter value)."
												},
												{
													"key": "server",
													"value": "string",
													"description": "Server IP or DNS name."
												},
												{
													"key": "shared",
													"value": "true",
													"description": "Indicate that this is a single storage with the same contents on all nodes (or all listed in the 'nodes' option). It will not make the contents of a local storage automatically accessible to other nodes, it just marks an already shared storage as such!"
												},
												{
													"key": "skip-cert-verification",
													"value": "false",
													"description": "Disable TLS certificate verification, only enable on fully trusted networks!"
												},
												{
													"key": "smbversion",
													"value": "default",
													"description": "SMB protocol version. 'default' if not set, negotiates the highest SMB2+ version supported by both the client and server."
												},
												{
													"key": "snapshot-as-volume-chain",
													"value": "0",
													"description": "Enable support for creating storage-vendor agnostic snapshot through volume backing-chains."
												},
												{
													"key": "sparse",
													"value": "true",
													"description": "use sparse volumes"
												},
												{
													"key": "subdir",
													"value": "string",
													"description": "Subdir to mount."
												},
												{
													"key": "tagged_only",
													"value": "true",
													"description": "Only use logical volumes tagged with 'pve-vm-ID'."
												},
												{
													"key": "username",
													"value": "string",
													"description": "RBD Id."
												},
												{
													"key": "zfs-base-path",
													"value": "string",
													"description": "Base path where to look for the created ZFS block devices. Set automatically during creation if not specified. Usually '/dev/zvol'."
												}
											],
											"variable": [
												{
													"key": "storage"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"config\": {\n    \"encryption-key\": \"string\"\n  },\n  \"storage\": \"string\",\n  \"type\": \"iscsidirect\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "Storage index.",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/storage?type=nfs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"storage"
							],
							"query": [
								{
									"key": "type",
									"value": "nfs",
									"description": "Only list storage of specific type"
								}
							]
						},
						"description": "Storage index."
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/storage?type=nfs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"storage"
									],
									"query": [
										{
											"key": "type",
											"value": "nfs",
											"description": "Only list storage of specific type"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n  {\n    \"storage\": \"string\"\n  },\n  {\n    \"storage\": \"string\"\n  }\n]"
						}
					]
				},
				{
					"name": "Create a new storage.",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/storage?authsupported=string&base=string&blocksize=string&bwlimit=string&comstar_hg=string&comstar_tg=string&content=string&content-dirs=string&create-base-path=yes&create-subdirs=yes&data-pool=string&datastore=string&disable=true&domain=string&encryption-key=string&export=string&fingerprint=2b:C6:53:bd:7c:42:0f:B0:19:Cc:76:26:41:2D:4D:68:a7:8b:9a:Dd:CE:FC:1d:cb:A3:B4:49:7d:8C:eA:3F:d9&format=qcow2&fs-name=string&fuse=true&is_mountpoint=no&iscsiprovider=string&keyring=string&krbd=0&lio_tpg=string&master-pubkey=string&max-protected-backups=Unlimited for users with Datastore.Allocate privilege, 5 for other users&mkdir=yes&monhost=string&mountpoint=string&namespace=string&nocow=0&nodes=string&nowritecache=true&options=string&password=string&path=string&pool=string&port=27761&portal=string&preallocation=metadata&prune-backups=string&saferemove=true&saferemove_throughput=string&server=string&share=string&shared=true&skip-cert-verification=false&smbversion=default&snapshot-as-volume-chain=0&sparse=true&storage=string&subdir=string&tagged_only=true&target=string&thinpool=string&type=nfs&username=string&vgname=string&zfs-base-path=string",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"storage"
							],
							"query": [
								{
									"key": "authsupported",
									"value": "string",
									"description": "Authsupported."
								},
								{
									"key": "base",
									"value": "string",
									"description": "Base volume. This volume is automatically activated."
								},
								{
									"key": "blocksize",
									"value": "string",
									"description": "block size"
								},
								{
									"key": "bwlimit",
									"value": "string",
									"description": "Set I/O bandwidth limit for various operations (in KiB/s)."
								},
								{
									"key": "comstar_hg",
									"value": "string",
									"description": "host group for comstar views"
								},
								{
									"key": "comstar_tg",
									"value": "string",
									"description": "target group for comstar views"
								},
								{
									"key": "content",
									"value": "string",
									"description": "Allowed content types.\n\nNOTE: the value 'rootdir' is used for Containers, and value 'images' for VMs.\n"
								},
								{
									"key": "content-dirs",
									"value": "string",
									"description": "Overrides for default content type directories."
								},
								{
									"key": "create-base-path",
									"value": "yes",
									"description": "Create the base directory if it doesn't exist."
								},
								{
									"key": "create-subdirs",
									"value": "yes",
									"description": "Populate the directory with the default structure."
								},
								{
									"key": "data-pool",
									"value": "string",
									"description": "Data Pool (for erasure coding only)"
								},
								{
									"key": "datastore",
									"value": "string",
									"description": "Proxmox Backup Server datastore name."
								},
								{
									"key": "disable",
									"value": "true",
									"description": "Flag to disable the storage."
								},
								{
									"key": "domain",
									"value": "string",
									"description": "CIFS domain."
								},
								{
									"key": "encryption-key",
									"value": "string",
									"description": "Encryption key. Use 'autogen' to generate one automatically without passphrase."
								},
								{
									"key": "export",
									"value": "string",
									"description": "NFS export path."
								},
								{
									"key": "fingerprint",
									"value": "2b:C6:53:bd:7c:42:0f:B0:19:Cc:76:26:41:2D:4D:68:a7:8b:9a:Dd:CE:FC:1d:cb:A3:B4:49:7d:8C:eA:3F:d9",
									"description": "Certificate SHA 256 fingerprint."
								},
								{
									"key": "format",
									"value": "qcow2",
									"description": "Default image format."
								},
								{
									"key": "fs-name",
									"value": "string",
									"description": "The Ceph filesystem name."
								},
								{
									"key": "fuse",
									"value": "true",
									"description": "Mount CephFS through FUSE."
								},
								{
									"key": "is_mountpoint",
									"value": "no",
									"description": "Assume the given path is an externally managed mountpoint and consider the storage offline if it is not mounted. Using a boolean (yes/no) value serves as a shortcut to using the target path in this field."
								},
								{
									"key": "iscsiprovider",
									"value": "string",
									"description": "iscsi provider"
								},
								{
									"key": "keyring",
									"value": "string",
									"description": "Client keyring contents (for external clusters)."
								},
								{
									"key": "krbd",
									"value": "0",
									"description": "Always access rbd through krbd kernel module."
								},
								{
									"key": "lio_tpg",
									"value": "string",
									"description": "target portal group for Linux LIO targets"
								},
								{
									"key": "master-pubkey",
									"value": "string",
									"description": "Base64-encoded, PEM-formatted public RSA key. Used to encrypt a copy of the encryption-key which will be added to each encrypted backup."
								},
								{
									"key": "max-protected-backups",
									"value": "Unlimited for users with Datastore.Allocate privilege, 5 for other users",
									"description": "Maximal number of protected backups per guest. Use '-1' for unlimited."
								},
								{
									"key": "mkdir",
									"value": "yes",
									"description": "Create the directory if it doesn't exist and populate it with default sub-dirs. NOTE: Deprecated, use the 'create-base-path' and 'create-subdirs' options instead."
								},
								{
									"key": "monhost",
									"value": "string",
									"description": "IP addresses of monitors (for external clusters)."
								},
								{
									"key": "mountpoint",
									"value": "string",
									"description": "mount point"
								},
								{
									"key": "namespace",
									"value": "string",
									"description": "Namespace."
								},
								{
									"key": "nocow",
									"value": "0",
									"description": "Set the NOCOW flag on files. Disables data checksumming and causes data errors to be unrecoverable from while allowing direct I/O. Only use this if data does not need to be any more safe than on a single ext4 formatted disk with no underlying raid system."
								},
								{
									"key": "nodes",
									"value": "string",
									"description": "List of nodes for which the storage configuration applies."
								},
								{
									"key": "nowritecache",
									"value": "true",
									"description": "disable write caching on the target"
								},
								{
									"key": "options",
									"value": "string",
									"description": "NFS/CIFS mount options (see 'man nfs' or 'man mount.cifs')"
								},
								{
									"key": "password",
									"value": "string",
									"description": "Password for accessing the share/datastore."
								},
								{
									"key": "path",
									"value": "string",
									"description": "File system path."
								},
								{
									"key": "pool",
									"value": "string",
									"description": "Pool."
								},
								{
									"key": "port",
									"value": "27761",
									"description": "Use this port to connect to the storage instead of the default one (for example, with PBS or ESXi). For NFS and CIFS, use the 'options' option to configure the port via the mount options."
								},
								{
									"key": "portal",
									"value": "string",
									"description": "iSCSI portal (IP or DNS name with optional port)."
								},
								{
									"key": "preallocation",
									"value": "metadata",
									"description": "Preallocation mode for raw and qcow2 images. Using 'metadata' on raw images results in preallocation=off."
								},
								{
									"key": "prune-backups",
									"value": "string",
									"description": "The retention options with shorter intervals are processed first with --keep-last being the very first one. Each option covers a specific period of time. We say that backups within this period are covered by this option. The next option does not take care of already covered backups and only considers older backups."
								},
								{
									"key": "saferemove",
									"value": "true",
									"description": "Zero-out data when removing LVs."
								},
								{
									"key": "saferemove_throughput",
									"value": "string",
									"description": "Wipe throughput (cstream -t parameter value)."
								},
								{
									"key": "server",
									"value": "string",
									"description": "Server IP or DNS name."
								},
								{
									"key": "share",
									"value": "string",
									"description": "CIFS share."
								},
								{
									"key": "shared",
									"value": "true",
									"description": "Indicate that this is a single storage with the same contents on all nodes (or all listed in the 'nodes' option). It will not make the contents of a local storage automatically accessible to other nodes, it just marks an already shared storage as such!"
								},
								{
									"key": "skip-cert-verification",
									"value": "false",
									"description": "Disable TLS certificate verification, only enable on fully trusted networks!"
								},
								{
									"key": "smbversion",
									"value": "default",
									"description": "SMB protocol version. 'default' if not set, negotiates the highest SMB2+ version supported by both the client and server."
								},
								{
									"key": "snapshot-as-volume-chain",
									"value": "0",
									"description": "Enable support for creating storage-vendor agnostic snapshot through volume backing-chains."
								},
								{
									"key": "sparse",
									"value": "true",
									"description": "use sparse volumes"
								},
								{
									"key": "storage",
									"value": "string",
									"description": "(Required) The storage identifier."
								},
								{
									"key": "subdir",
									"value": "string",
									"description": "Subdir to mount."
								},
								{
									"key": "tagged_only",
									"value": "true",
									"description": "Only use logical volumes tagged with 'pve-vm-ID'."
								},
								{
									"key": "target",
									"value": "string",
									"description": "iSCSI target."
								},
								{
									"key": "thinpool",
									"value": "string",
									"description": "LVM thin pool LV name."
								},
								{
									"key": "type",
									"value": "nfs",
									"description": "(Required) Storage type."
								},
								{
									"key": "username",
									"value": "string",
									"description": "RBD Id."
								},
								{
									"key": "vgname",
									"value": "string",
									"description": "Volume group name."
								},
								{
									"key": "zfs-base-path",
									"value": "string",
									"description": "Base path where to look for the created ZFS block devices. Set automatically during creation if not specified. Usually '/dev/zvol'."
								}
							]
						},
						"description": "Create a new storage."
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/storage?authsupported=string&base=string&blocksize=string&bwlimit=string&comstar_hg=string&comstar_tg=string&content=string&content-dirs=string&create-base-path=yes&create-subdirs=yes&data-pool=string&datastore=string&disable=true&domain=string&encryption-key=string&export=string&fingerprint=2b:C6:53:bd:7c:42:0f:B0:19:Cc:76:26:41:2D:4D:68:a7:8b:9a:Dd:CE:FC:1d:cb:A3:B4:49:7d:8C:eA:3F:d9&format=qcow2&fs-name=string&fuse=true&is_mountpoint=no&iscsiprovider=string&keyring=string&krbd=0&lio_tpg=string&master-pubkey=string&max-protected-backups=Unlimited for users with Datastore.Allocate privilege, 5 for other users&mkdir=yes&monhost=string&mountpoint=string&namespace=string&nocow=0&nodes=string&nowritecache=true&options=string&password=string&path=string&pool=string&port=27761&portal=string&preallocation=metadata&prune-backups=string&saferemove=true&saferemove_throughput=string&server=string&share=string&shared=true&skip-cert-verification=false&smbversion=default&snapshot-as-volume-chain=0&sparse=true&storage=string&subdir=string&tagged_only=true&target=string&thinpool=string&type=nfs&username=string&vgname=string&zfs-base-path=string",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"storage"
									],
									"query": [
										{
											"key": "authsupported",
											"value": "string",
											"description": "Authsupported."
										},
										{
											"key": "base",
											"value": "string",
											"description": "Base volume. This volume is automatically activated."
										},
										{
											"key": "blocksize",
											"value": "string",
											"description": "block size"
										},
										{
											"key": "bwlimit",
											"value": "string",
											"description": "Set I/O bandwidth limit for various operations (in KiB/s)."
										},
										{
											"key": "comstar_hg",
											"value": "string",
											"description": "host group for comstar views"
										},
										{
											"key": "comstar_tg",
											"value": "string",
											"description": "target group for comstar views"
										},
										{
											"key": "content",
											"value": "string",
											"description": "Allowed content types.\n\nNOTE: the value 'rootdir' is used for Containers, and value 'images' for VMs.\n"
										},
										{
											"key": "content-dirs",
											"value": "string",
											"description": "Overrides for default content type directories."
										},
										{
											"key": "create-base-path",
											"value": "yes",
											"description": "Create the base directory if it doesn't exist."
										},
										{
											"key": "create-subdirs",
											"value": "yes",
											"description": "Populate the directory with the default structure."
										},
										{
											"key": "data-pool",
											"value": "string",
											"description": "Data Pool (for erasure coding only)"
										},
										{
											"key": "datastore",
											"value": "string",
											"description": "Proxmox Backup Server datastore name."
										},
										{
											"key": "disable",
											"value": "true",
											"description": "Flag to disable the storage."
										},
										{
											"key": "domain",
											"value": "string",
											"description": "CIFS domain."
										},
										{
											"key": "encryption-key",
											"value": "string",
											"description": "Encryption key. Use 'autogen' to generate one automatically without passphrase."
										},
										{
											"key": "export",
											"value": "string",
											"description": "NFS export path."
										},
										{
											"key": "fingerprint",
											"value": "2b:C6:53:bd:7c:42:0f:B0:19:Cc:76:26:41:2D:4D:68:a7:8b:9a:Dd:CE:FC:1d:cb:A3:B4:49:7d:8C:eA:3F:d9",
											"description": "Certificate SHA 256 fingerprint."
										},
										{
											"key": "format",
											"value": "qcow2",
											"description": "Default image format."
										},
										{
											"key": "fs-name",
											"value": "string",
											"description": "The Ceph filesystem name."
										},
										{
											"key": "fuse",
											"value": "true",
											"description": "Mount CephFS through FUSE."
										},
										{
											"key": "is_mountpoint",
											"value": "no",
											"description": "Assume the given path is an externally managed mountpoint and consider the storage offline if it is not mounted. Using a boolean (yes/no) value serves as a shortcut to using the target path in this field."
										},
										{
											"key": "iscsiprovider",
											"value": "string",
											"description": "iscsi provider"
										},
										{
											"key": "keyring",
											"value": "string",
											"description": "Client keyring contents (for external clusters)."
										},
										{
											"key": "krbd",
											"value": "0",
											"description": "Always access rbd through krbd kernel module."
										},
										{
											"key": "lio_tpg",
											"value": "string",
											"description": "target portal group for Linux LIO targets"
										},
										{
											"key": "master-pubkey",
											"value": "string",
											"description": "Base64-encoded, PEM-formatted public RSA key. Used to encrypt a copy of the encryption-key which will be added to each encrypted backup."
										},
										{
											"key": "max-protected-backups",
											"value": "Unlimited for users with Datastore.Allocate privilege, 5 for other users",
											"description": "Maximal number of protected backups per guest. Use '-1' for unlimited."
										},
										{
											"key": "mkdir",
											"value": "yes",
											"description": "Create the directory if it doesn't exist and populate it with default sub-dirs. NOTE: Deprecated, use the 'create-base-path' and 'create-subdirs' options instead."
										},
										{
											"key": "monhost",
											"value": "string",
											"description": "IP addresses of monitors (for external clusters)."
										},
										{
											"key": "mountpoint",
											"value": "string",
											"description": "mount point"
										},
										{
											"key": "namespace",
											"value": "string",
											"description": "Namespace."
										},
										{
											"key": "nocow",
											"value": "0",
											"description": "Set the NOCOW flag on files. Disables data checksumming and causes data errors to be unrecoverable from while allowing direct I/O. Only use this if data does not need to be any more safe than on a single ext4 formatted disk with no underlying raid system."
										},
										{
											"key": "nodes",
											"value": "string",
											"description": "List of nodes for which the storage configuration applies."
										},
										{
											"key": "nowritecache",
											"value": "true",
											"description": "disable write caching on the target"
										},
										{
											"key": "options",
											"value": "string",
											"description": "NFS/CIFS mount options (see 'man nfs' or 'man mount.cifs')"
										},
										{
											"key": "password",
											"value": "string",
											"description": "Password for accessing the share/datastore."
										},
										{
											"key": "path",
											"value": "string",
											"description": "File system path."
										},
										{
											"key": "pool",
											"value": "string",
											"description": "Pool."
										},
										{
											"key": "port",
											"value": "27761",
											"description": "Use this port to connect to the storage instead of the default one (for example, with PBS or ESXi). For NFS and CIFS, use the 'options' option to configure the port via the mount options."
										},
										{
											"key": "portal",
											"value": "string",
											"description": "iSCSI portal (IP or DNS name with optional port)."
										},
										{
											"key": "preallocation",
											"value": "metadata",
											"description": "Preallocation mode for raw and qcow2 images. Using 'metadata' on raw images results in preallocation=off."
										},
										{
											"key": "prune-backups",
											"value": "string",
											"description": "The retention options with shorter intervals are processed first with --keep-last being the very first one. Each option covers a specific period of time. We say that backups within this period are covered by this option. The next option does not take care of already covered backups and only considers older backups."
										},
										{
											"key": "saferemove",
											"value": "true",
											"description": "Zero-out data when removing LVs."
										},
										{
											"key": "saferemove_throughput",
											"value": "string",
											"description": "Wipe throughput (cstream -t parameter value)."
										},
										{
											"key": "server",
											"value": "string",
											"description": "Server IP or DNS name."
										},
										{
											"key": "share",
											"value": "string",
											"description": "CIFS share."
										},
										{
											"key": "shared",
											"value": "true",
											"description": "Indicate that this is a single storage with the same contents on all nodes (or all listed in the 'nodes' option). It will not make the contents of a local storage automatically accessible to other nodes, it just marks an already shared storage as such!"
										},
										{
											"key": "skip-cert-verification",
											"value": "false",
											"description": "Disable TLS certificate verification, only enable on fully trusted networks!"
										},
										{
											"key": "smbversion",
											"value": "default",
											"description": "SMB protocol version. 'default' if not set, negotiates the highest SMB2+ version supported by both the client and server."
										},
										{
											"key": "snapshot-as-volume-chain",
											"value": "0",
											"description": "Enable support for creating storage-vendor agnostic snapshot through volume backing-chains."
										},
										{
											"key": "sparse",
											"value": "true",
											"description": "use sparse volumes"
										},
										{
											"key": "storage",
											"value": "string",
											"description": "(Required) The storage identifier."
										},
										{
											"key": "subdir",
											"value": "string",
											"description": "Subdir to mount."
										},
										{
											"key": "tagged_only",
											"value": "true",
											"description": "Only use logical volumes tagged with 'pve-vm-ID'."
										},
										{
											"key": "target",
											"value": "string",
											"description": "iSCSI target."
										},
										{
											"key": "thinpool",
											"value": "string",
											"description": "LVM thin pool LV name."
										},
										{
											"key": "type",
											"value": "nfs",
											"description": "(Required) Storage type."
										},
										{
											"key": "username",
											"value": "string",
											"description": "RBD Id."
										},
										{
											"key": "vgname",
											"value": "string",
											"description": "Volume group name."
										},
										{
											"key": "zfs-base-path",
											"value": "string",
											"description": "Base path where to look for the created ZFS block devices. Set automatically during creation if not specified. Usually '/dev/zvol'."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"config\": {\n    \"encryption-key\": \"string\"\n  },\n  \"storage\": \"string\",\n  \"type\": \"iscsidirect\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "access",
			"item": [
				{
					"name": "users",
					"item": [
						{
							"name": "{userid}",
							"item": [
								{
									"name": "tfa",
									"item": [
										{
											"name": "Get user TFA types (Personal and Realm).",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/access/users/:userid/tfa?multiple=0",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"access",
														"users",
														":userid",
														"tfa"
													],
													"query": [
														{
															"key": "multiple",
															"value": "0",
															"description": "Request all entries as an array."
														}
													],
													"variable": [
														{
															"key": "userid",
															"value": "string",
															"description": "(Required) Full User ID, in the `name@realm` format."
														}
													]
												},
												"description": "Get user TFA types (Personal and Realm)."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/access/users/:userid/tfa?multiple=0",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"access",
																"users",
																":userid",
																"tfa"
															],
															"query": [
																{
																	"key": "multiple",
																	"value": "0",
																	"description": "Request all entries as an array."
																}
															],
															"variable": [
																{
																	"key": "userid"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"realm\": \"yubico\",\n  \"types\": [\n    \"totp\",\n    \"u2f\"\n  ],\n  \"user\": \"oath\"\n}"
												}
											]
										}
									]
								},
								{
									"name": "unlock-tfa",
									"item": [
										{
											"name": "Unlock a user's TFA authentication.",
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/access/users/:userid/unlock-tfa",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"access",
														"users",
														":userid",
														"unlock-tfa"
													],
													"variable": [
														{
															"key": "userid",
															"value": "string",
															"description": "(Required) Full User ID, in the `name@realm` format."
														}
													]
												},
												"description": "Unlock a user's TFA authentication."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/access/users/:userid/unlock-tfa",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"access",
																"users",
																":userid",
																"unlock-tfa"
															],
															"variable": [
																{
																	"key": "userid"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "true"
												}
											]
										}
									]
								},
								{
									"name": "token",
									"item": [
										{
											"name": "{tokenid}",
											"item": [
												{
													"name": "Remove API token for a specific user.",
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/access/users/:userid/token/:tokenid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"access",
																"users",
																":userid",
																"token",
																":tokenid"
															],
															"variable": [
																{
																	"key": "userid",
																	"value": "string",
																	"description": "(Required) Full User ID, in the `name@realm` format."
																},
																{
																	"key": "tokenid",
																	"value": "",
																	"description": "(Required) User-specific token identifier."
																}
															]
														},
														"description": "Remove API token for a specific user."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "DELETE",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/access/users/:userid/token/:tokenid",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"access",
																		"users",
																		":userid",
																		"token",
																		":tokenid"
																	],
																	"variable": [
																		{
																			"key": "userid"
																		},
																		{
																			"key": "tokenid"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "null"
														}
													]
												},
												{
													"name": "Get specific API token information.",
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/access/users/:userid/token/:tokenid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"access",
																"users",
																":userid",
																"token",
																":tokenid"
															],
															"variable": [
																{
																	"key": "userid",
																	"value": "string",
																	"description": "(Required) Full User ID, in the `name@realm` format."
																},
																{
																	"key": "tokenid",
																	"value": "",
																	"description": "(Required) User-specific token identifier."
																}
															]
														},
														"description": "Get specific API token information."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/access/users/:userid/token/:tokenid",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"access",
																		"users",
																		":userid",
																		"token",
																		":tokenid"
																	],
																	"variable": [
																		{
																			"key": "userid"
																		},
																		{
																			"key": "tokenid"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"comment\": \"string\",\n  \"expire\": \"same as user\",\n  \"privsep\": 1\n}"
														}
													]
												},
												{
													"name": "Generate a new API token for a specific user. NOTE: returns API token value, which needs to be stored as it cannot be retrieved afterwards!",
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/access/users/:userid/token/:tokenid?comment=string&expire=same as user&privsep=1",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"access",
																"users",
																":userid",
																"token",
																":tokenid"
															],
															"query": [
																{
																	"key": "comment",
																	"value": "string"
																},
																{
																	"key": "expire",
																	"value": "same as user",
																	"description": "API token expiration date (seconds since epoch). '0' means no expiration date."
																},
																{
																	"key": "privsep",
																	"value": "1",
																	"description": "Restrict API token privileges with separate ACLs (default), or give full privileges of corresponding user."
																}
															],
															"variable": [
																{
																	"key": "userid",
																	"value": "string",
																	"description": "(Required) Full User ID, in the `name@realm` format."
																},
																{
																	"key": "tokenid",
																	"value": "",
																	"description": "(Required) User-specific token identifier."
																}
															]
														},
														"description": "Generate a new API token for a specific user. NOTE: returns API token value, which needs to be stored as it cannot be retrieved afterwards!"
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/access/users/:userid/token/:tokenid?comment=string&expire=same as user&privsep=1",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"access",
																		"users",
																		":userid",
																		"token",
																		":tokenid"
																	],
																	"query": [
																		{
																			"key": "comment",
																			"value": "string"
																		},
																		{
																			"key": "expire",
																			"value": "same as user",
																			"description": "API token expiration date (seconds since epoch). '0' means no expiration date."
																		},
																		{
																			"key": "privsep",
																			"value": "1",
																			"description": "Restrict API token privileges with separate ACLs (default), or give full privileges of corresponding user."
																		}
																	],
																	"variable": [
																		{
																			"key": "userid"
																		},
																		{
																			"key": "tokenid"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"full-tokenid\": \"string\",\n  \"info\": {\n    \"comment\": \"string\",\n    \"expire\": \"same as user\",\n    \"privsep\": 1\n  },\n  \"value\": \"string\",\n  \"key_0\": {},\n  \"key_1\": {}\n}"
														}
													]
												},
												{
													"name": "Update API token for a specific user.",
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/access/users/:userid/token/:tokenid?comment=string&expire=same as user&privsep=1",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"access",
																"users",
																":userid",
																"token",
																":tokenid"
															],
															"query": [
																{
																	"key": "comment",
																	"value": "string"
																},
																{
																	"key": "expire",
																	"value": "same as user",
																	"description": "API token expiration date (seconds since epoch). '0' means no expiration date."
																},
																{
																	"key": "privsep",
																	"value": "1",
																	"description": "Restrict API token privileges with separate ACLs (default), or give full privileges of corresponding user."
																}
															],
															"variable": [
																{
																	"key": "userid",
																	"value": "string",
																	"description": "(Required) Full User ID, in the `name@realm` format."
																},
																{
																	"key": "tokenid",
																	"value": "",
																	"description": "(Required) User-specific token identifier."
																}
															]
														},
														"description": "Update API token for a specific user."
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/access/users/:userid/token/:tokenid?comment=string&expire=same as user&privsep=1",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"access",
																		"users",
																		":userid",
																		"token",
																		":tokenid"
																	],
																	"query": [
																		{
																			"key": "comment",
																			"value": "string"
																		},
																		{
																			"key": "expire",
																			"value": "same as user",
																			"description": "API token expiration date (seconds since epoch). '0' means no expiration date."
																		},
																		{
																			"key": "privsep",
																			"value": "1",
																			"description": "Restrict API token privileges with separate ACLs (default), or give full privileges of corresponding user."
																		}
																	],
																	"variable": [
																		{
																			"key": "userid"
																		},
																		{
																			"key": "tokenid"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"comment\": \"string\",\n  \"expire\": \"same as user\",\n  \"privsep\": 1\n}"
														}
													]
												}
											]
										},
										{
											"name": "Get user API tokens.",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/access/users/:userid/token",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"access",
														"users",
														":userid",
														"token"
													],
													"variable": [
														{
															"key": "userid",
															"value": "string",
															"description": "(Required) Full User ID, in the `name@realm` format."
														}
													]
												},
												"description": "Get user API tokens."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/access/users/:userid/token",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"access",
																"users",
																":userid",
																"token"
															],
															"variable": [
																{
																	"key": "userid"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "null"
												}
											]
										}
									]
								},
								{
									"name": "Delete user.",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/access/users/:userid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"access",
												"users",
												":userid"
											],
											"variable": [
												{
													"key": "userid",
													"value": "string",
													"description": "(Required) Full User ID, in the `name@realm` format."
												}
											]
										},
										"description": "Delete user."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/access/users/:userid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"access",
														"users",
														":userid"
													],
													"variable": [
														{
															"key": "userid"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "null"
										}
									]
								},
								{
									"name": "Get user configuration.",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/access/users/:userid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"access",
												"users",
												":userid"
											],
											"variable": [
												{
													"key": "userid",
													"value": "string",
													"description": "(Required) Full User ID, in the `name@realm` format."
												}
											]
										},
										"description": "Get user configuration."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/access/users/:userid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"access",
														"users",
														":userid"
													],
													"variable": [
														{
															"key": "userid"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"comment\": \"string\",\n  \"email\": \"string\",\n  \"enable\": 1,\n  \"expire\": 5187,\n  \"firstname\": \"string\",\n  \"groups\": [\n    \"string\",\n    \"string\"\n  ],\n  \"keys\": \"yiRS!lAztFx3X1vxbHJe3EDAh2tIh8g2o4u36K8ki2VRY1V!pf80Si=MiYuaguia8rzRghTX6L=D9wTZqFGxMdNgbMv6byyozjTx2AEYUuw3xIIqxNq3icTxjEbpKC=678b0QIiML2JGuyZErvuzoOTMta1uVvxQSSJa8pKNeHvgC9rBg0IPS5UTBhmJWJfF3liOQIsm3hQGgdW11bpaGPJWgtzX1TJzeVlEWKCf15E49yf2wn7wpdKi=FsRC8pk==Sj7AlC9=FIIX2xio9KGAyIZCWUWb2RX985IKEe0xnz5vClr=Ru5MxR4w5XikE7PjtedXE0xy0xRY9u4HA9CO!MG9u7GzllpjlRA4q73ixDoxRBDszRuzuroaj7rLce2zENyGSCmbH71YaE7FfFAIs420ZRwD=dOIsHa1Vn8jzqo4AkLo9AgrBfR9F4lqkbQy3A4Slw3m3OwgesFk7waGVJufOnClopLA!RctAdW1VZwgMwhcUojr!cNsiD35TDNItoYXsm9IfxGZDWZJjyTyjgTnO9MmbNXj7wqP4J2r76Ytvq!3tJeNaczsW9IaMwT82TULv8wOvGIk=oSzosSXDdeHASkV52ZmQ1Ww3qz=gOqqbwxrZ0M0DV=30IA7=q4UYU0vmrzhUFH54OEZ6hyu3HES6Vwq0mkVwpqje3ObnnYxGMl=OUyXpeHYttDNPrwo7qBlr5CyiEbf74BHp8p0d4=EX!P5t6R0gijs0tMQFYS6jAiS9F4skFFHu5fl6e2EUQXGkqMifYjwFkWTDvqGJR0n7=XlfbZ69Kzx6VaPZcN2bb85=ePgXVP=Bw51acisu1z7djdB9mMtw9pgs1sqYae1ezkS!ExrKuHFFO4c=Rh7=PlTOxlDjeD3yYldFgw4ficI3pkWsU!W9pg0jflzZb36QkPBg3z!HwQ1T5vNRS4gIjkTE=oMkk!qgqMyiItOzFh4Te9gP7W5asClHj78jV7=!aoJ3Nhb6pIQj0CvgV2cTx0XecZAQoIjSwVfHgmAcwxlgQ76PhfjPLqrhYx8o7UE0CtebEbOG8s=qxqJvJ0hNjMu1F=cyFrGun=QnuV!TF7NAcXmSzU607oXjZ7MWTo=apxb=oo9oySrxDH0moxb4=2kg2lx6=gPhVWkZeilZU=1lVZKF8AW4W4YFeOTfDuaRdbvZdzoxaBkruqJpSyXOOsfg3E7DxqAIMDra0r7l=TGszds6IMz1YFP15ADUs6hoBhRny43JuLlbSJTfGCCgHt4rQQC4AY9kBREEGa3gwQfNRo3GOjn8ojn76Bh1GLEsN08gGqFCFz2o5cpP7VDce8zNh5bmmFOkiOh7DNCooIXtUxrmW21IyVtD8c7BoIYlaVJ59ixeennCPOlPlFRTLlX6JcJiawnsKMcV8mHHBj9ac6k4JD3Fs3rpIV5ZicGbFGFiz5XLGGPdJPy1V8HKNp6Cblp2Kz3YVwhe3l!Zt9SW06vgZl2y04tnTEb5YvzO=koR3=fnLa01mKcBIZ0FmBOfKwb3E9VUXH=wWpErl29WT6tsNbqP7YjGWjpdrbAy2Z!XTt6aZL!2Y2G8bqKLMmmbmIXshfTalOEq2z5JMsmnGGaDSSQVRmwGBI59cREy07=WfAWDA\",\n  \"lastname\": \"string\",\n  \"tokens\": {\n    \"key_0\": {\n      \"comment\": \"string\",\n      \"expire\": \"same as user\",\n      \"privsep\": 1\n    },\n    \"key_1\": {\n      \"comment\": \"string\",\n      \"expire\": \"same as user\",\n      \"privsep\": 1\n    },\n    \"key_2\": {\n      \"comment\": \"string\",\n      \"expire\": \"same as user\",\n      \"privsep\": 1\n    },\n    \"key_3\": {\n      \"comment\": \"string\",\n      \"expire\": \"same as user\",\n      \"privsep\": 1\n    }\n  },\n  \"key_0\": {}\n}"
										}
									]
								},
								{
									"name": "Update user configuration.",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/access/users/:userid?append=true&comment=string&email=string&enable=1&expire=8248&firstname=string&groups=string&keys=MnRAgB5okvS5N3n3n7cU10QaXEPUy2uLn1F6p9N1HOrmlhH7=eyK9Q!UjUH7NklMFjIESnsBwK63iQeCmx=KeioiQUOZgyVp3dDQ9aV1p=QblyacNERQplfS6H8qq6vU!LFFL0lHChezgw!hZWaSZo!rNoEfhijO=0mfdDR8A855BX!7yvE04ccoepSyCbdQrj47lm=8p28dOmecEJ8Tkh9fYwLgVBQ58blcSw3Nlau2GowgQoQ!y4zduuMvGYZw4qv1lWNhxR1jwacIHzYcQQuWPJNaMwuzseTDw!=n1QT4qktDbKBES31RIy5aMjw9av8BjhlVu35ixg!uDNOSg=fmKUmg00Ayp9low5Aofue1xuYev8qtaK7FHlMWDJZ=suYiavjkKMVhi9ajOm38msDvRzJnLWn7sCdPtYra1mZyOKEtTgAFCseZGYboEx4ZLAMCP41osu!=gxjX4v28LMn=7eiwHct9jNnkh4JzmQoURXACAqK13P7rEkuJW9CpiXASHwxMSvRfBsyI!FUFDZp2iVkmccOoL3y0VjMdiaq4UFIVcrqhGzoPJ06yY5!so08xDgYZZB0CP1uvpa=IYqD9Fpl06HSFMagsZmJFBpTOkoU!GrRwlMCLz=2qjv1oGkkw7yipJiEpDkVdfz1X2VH5WWXaZhBlyh5Wt7Qvmck6ZhV!7yfAnd2fdT5pL5!PQykVNwBzP2zPUhtCEA63jvCe8w2uyx!ljXKA0YuEAN1Ddx50k=Bjr7eeHZ1iLWZaT7GeXTKMNJwzrKkfLygWLdJ9pPwzDb9x!RX=E4i4DqTN1BFVbe8qTbmhh=5jGrrUE7d4J9AwHyyY6U=vncRlPcwmrC13Uf!=cYLnZL2vONFu5uJZTeJrtpsxCau2jPRE6pHL9QPhr!VB0F1DpzcEpxZC9f9lc3GGNRlr4KMh9kzjNDA9h5BXecVQuGfn2FSfSh6uz3ega1ozI2800QBQKEWN0jA46BJ6x=dsyjf=YP3c4hNgcGBt0zR8f4v2OiX!j!oxzvuf=0oJX702EWYJFxyzF1N0Fsd1ACUtGJPA74r3r6GC4V3xkldkG1HKgsMXUggrvs3jzNe2JNXJOnzC13rAyZkTxkFUAkoG2DhbqnJQB!Jk0OyTOo0Q1A02V3o!BRY8kBkxFVz8nKujYryeG7VIQb2TZvIVA7KGqDG068DHq!=93cVKqXhCA5h5PcijXAboejJbz=Wu0!dEbEgT2shk7F3bCnGdfAK0mgjw5ss5ggDiuRTzvXhkoITRgulJsUQGsZJUdJqVqqS!mDa2YhgQJFODfkcAAJ8qvGs2Kp0BtEyDStkEhxYVFGpk0sI!Wy5w7XL!1QHoeiwqz3GyrJsgtjvMwWhMHDlAhaRMaewcrqPH0ZaFJ0iHtLApOjpB2YaLyl9=3L5b4eBJsYZy19f20pLhdHf8Tikvy7=0attogYiDYgAni55s2iusOKkQkrlvI9SmnDNnEW1nKHqYe4S4UmNJ=82HOTx6sMK614iG=LilFuF9xAN=OHC7GDhTo8YBOiPwLnmcAWQ!au9Fs3BOrRzYbpSrGwUuOmfVaeaNqsFXyzThRLJ3TFwKYmyv5g9R5QfWj2Mf5i3l!zaAFoy!=S1TLbb7QVR8o3fgv0KoL7z!jLj3a7p=Nw4g4YeiXTU1w=AeNYrnkDWSQHx8bKB8=Vx1Eyd=Bl0XORcfRo2GB7Ybt2rxGwY9GA7E!hbIYYdS0s6cJPXgMDs2t!MVehQV8GlX!4QAf0ss4VaVn!R9KswlEt9JQ4uunYYNcesrFDXP23hUoxxBBm!02kdCyIPimAMwAD2C6gc1=MoiHMBpbb4zb6TJGLdflM8WOVfO!xwoEOVQDybPE7JrHxSwcF6sQacM03=Hf0JdRG9LFykMcwwKLHJOEQDlKlKXhixrOHijWv65TX94YSlI1Ml48vCute1vstvBZ9qnrD!8mpMV8KUEQ7LLKX5fxo!9ZNH2!d!2eaIx9gMLmGvXh6z354y6Mmc4=DUUzfvkLV2TyAdf1OBvr99h9o1nK3OvkVHMyLBtkHB5LPAvGEzIeM=JMXrdEq!ev2smoTpz5Q3o0FriJ2TRJNP=A=5I49K2B!zg92uqo1anspN7uH1xFJQg6pVuAwdycEHgu0HM2tUtuPnilo3sOGu6pr7LlraumOKTBvnbvKBi5ifq8dim0ohEyps91QuIzcE8ehUrxYNwnLF6vnki4W3dSLfl2JFHFPSM43AUb9MbNQxA28D1lq9HnouwSjAUW9Ezc=48XO2TbDUL8unEqvkTkci0HRlpDpRTDYARZrnpEkBn66=W!RdX0PpeWVGMEBK1dHJYWhM8KfuBehcs=!LSJUDZZK!P6ZUBYFAXFwMDZ8X1CRajS2nKAWIjvZkMCcCM9L6zhiqXrocy9BGKW01Egxsm3oIETbjbcBpRxfdB5sGsMyD0U5P6wPiy=ISjWWU2K9pTTz9FtGE9TRaUbdU5hXGGGduuJ41mafTbW!0W3hr=lHUDuP1wXuZsZNVedkakDhw=j1D3Wa=kGWljVTX8Ny=zQHU!C=gcq4Q9jtuUjn!aP1v!eQ4U5X1U0gLJ60HF=tgJkMBJPsbnmDdWsWH0go3n7Wj=F8R4oLqGJ9VZQ9r4PfWtGPLrHtkmMbuIwVl9y1dwXysNv8yd3uqo9rMd8Tq5MYIV1Cder!uhL4orxjouuTGxK5uiQi5LwVZ1cwLV156!6gE5vhldfRBzFMmplvgbmYRIwPnuVIqgGVi5rhXI5tHJPZteBQTkLf54OCOQuYIGtzM8vj3g8!UrZWswlN3nS8sKvW5Dk0!P2=GR3LVkdZaDh1D8UFyRCX!=MBDuDgp2DQT3CiqTWGU02oHbjdvyL5Sad9kWvTRa5ueRsuFd2NQ2JUJz2US1DXopuMGP3LWJUVBKvoQzbHnDs=kfyGOKRBet9wyci2bnfUyRSmcT9tYoBrYu9s1tvZgvFXaM3bfnoIzIHRAqHoFzH!u5Q=KPk=U8cPQ5SNMeAHSNBl6EQcbxKBufyzA4=!jeYe53Wo=SInO1B7s84mhMUa!4v6Ib=O3eaaAUMTaK3NLDC!rijxhwVn5YL3gcF121armNQ9OvZFhSQiN!NrudZ!SyIWny1tsDGxmbxRrXQk9zat9gnsom20Wqxy58RnwPIRPitRT=rxnejXTvHMFqbANsm6PkTyLeQj9N2S1onNj13Nt!2Lstfgo5zqb0neRYhjLOVDI5ZWLwYMddEL0AMnucUBMbyb1b=!NpJu3QOHQbMnjbjDaiiYdNby6WBd4v9DI4UI9AYcZjPGVOmSs7k6160nmmXylqCITtmoBR!QcRl702dkWsKQIi58xb6P=B=jqFYPmTa9W5jt4gQbNLNlLseTMM6TWUzQjitjX!NyYaCYk!aRF4WMXQVRUap5wvm1MKF2N!l8=dVWyxYS2nbFbYqRhRQ1TdrXEACAaxJF2p8uu!qm3u3OA6vskUBgMFQcS2b2A4OsIB3LMxT9cviISly&lastname=string",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"access",
												"users",
												":userid"
											],
											"query": [
												{
													"key": "append",
													"value": "true"
												},
												{
													"key": "comment",
													"value": "string"
												},
												{
													"key": "email",
													"value": "string"
												},
												{
													"key": "enable",
													"value": "1",
													"description": "Enable the account (default). You can set this to '0' to disable the account"
												},
												{
													"key": "expire",
													"value": "8248",
													"description": "Account expiration date (seconds since epoch). '0' means no expiration date."
												},
												{
													"key": "firstname",
													"value": "string"
												},
												{
													"key": "groups",
													"value": "string"
												},
												{
													"key": "keys",
													"value": "MnRAgB5okvS5N3n3n7cU10QaXEPUy2uLn1F6p9N1HOrmlhH7=eyK9Q!UjUH7NklMFjIESnsBwK63iQeCmx=KeioiQUOZgyVp3dDQ9aV1p=QblyacNERQplfS6H8qq6vU!LFFL0lHChezgw!hZWaSZo!rNoEfhijO=0mfdDR8A855BX!7yvE04ccoepSyCbdQrj47lm=8p28dOmecEJ8Tkh9fYwLgVBQ58blcSw3Nlau2GowgQoQ!y4zduuMvGYZw4qv1lWNhxR1jwacIHzYcQQuWPJNaMwuzseTDw!=n1QT4qktDbKBES31RIy5aMjw9av8BjhlVu35ixg!uDNOSg=fmKUmg00Ayp9low5Aofue1xuYev8qtaK7FHlMWDJZ=suYiavjkKMVhi9ajOm38msDvRzJnLWn7sCdPtYra1mZyOKEtTgAFCseZGYboEx4ZLAMCP41osu!=gxjX4v28LMn=7eiwHct9jNnkh4JzmQoURXACAqK13P7rEkuJW9CpiXASHwxMSvRfBsyI!FUFDZp2iVkmccOoL3y0VjMdiaq4UFIVcrqhGzoPJ06yY5!so08xDgYZZB0CP1uvpa=IYqD9Fpl06HSFMagsZmJFBpTOkoU!GrRwlMCLz=2qjv1oGkkw7yipJiEpDkVdfz1X2VH5WWXaZhBlyh5Wt7Qvmck6ZhV!7yfAnd2fdT5pL5!PQykVNwBzP2zPUhtCEA63jvCe8w2uyx!ljXKA0YuEAN1Ddx50k=Bjr7eeHZ1iLWZaT7GeXTKMNJwzrKkfLygWLdJ9pPwzDb9x!RX=E4i4DqTN1BFVbe8qTbmhh=5jGrrUE7d4J9AwHyyY6U=vncRlPcwmrC13Uf!=cYLnZL2vONFu5uJZTeJrtpsxCau2jPRE6pHL9QPhr!VB0F1DpzcEpxZC9f9lc3GGNRlr4KMh9kzjNDA9h5BXecVQuGfn2FSfSh6uz3ega1ozI2800QBQKEWN0jA46BJ6x=dsyjf=YP3c4hNgcGBt0zR8f4v2OiX!j!oxzvuf=0oJX702EWYJFxyzF1N0Fsd1ACUtGJPA74r3r6GC4V3xkldkG1HKgsMXUggrvs3jzNe2JNXJOnzC13rAyZkTxkFUAkoG2DhbqnJQB!Jk0OyTOo0Q1A02V3o!BRY8kBkxFVz8nKujYryeG7VIQb2TZvIVA7KGqDG068DHq!=93cVKqXhCA5h5PcijXAboejJbz=Wu0!dEbEgT2shk7F3bCnGdfAK0mgjw5ss5ggDiuRTzvXhkoITRgulJsUQGsZJUdJqVqqS!mDa2YhgQJFODfkcAAJ8qvGs2Kp0BtEyDStkEhxYVFGpk0sI!Wy5w7XL!1QHoeiwqz3GyrJsgtjvMwWhMHDlAhaRMaewcrqPH0ZaFJ0iHtLApOjpB2YaLyl9=3L5b4eBJsYZy19f20pLhdHf8Tikvy7=0attogYiDYgAni55s2iusOKkQkrlvI9SmnDNnEW1nKHqYe4S4UmNJ=82HOTx6sMK614iG=LilFuF9xAN=OHC7GDhTo8YBOiPwLnmcAWQ!au9Fs3BOrRzYbpSrGwUuOmfVaeaNqsFXyzThRLJ3TFwKYmyv5g9R5QfWj2Mf5i3l!zaAFoy!=S1TLbb7QVR8o3fgv0KoL7z!jLj3a7p=Nw4g4YeiXTU1w=AeNYrnkDWSQHx8bKB8=Vx1Eyd=Bl0XORcfRo2GB7Ybt2rxGwY9GA7E!hbIYYdS0s6cJPXgMDs2t!MVehQV8GlX!4QAf0ss4VaVn!R9KswlEt9JQ4uunYYNcesrFDXP23hUoxxBBm!02kdCyIPimAMwAD2C6gc1=MoiHMBpbb4zb6TJGLdflM8WOVfO!xwoEOVQDybPE7JrHxSwcF6sQacM03=Hf0JdRG9LFykMcwwKLHJOEQDlKlKXhixrOHijWv65TX94YSlI1Ml48vCute1vstvBZ9qnrD!8mpMV8KUEQ7LLKX5fxo!9ZNH2!d!2eaIx9gMLmGvXh6z354y6Mmc4=DUUzfvkLV2TyAdf1OBvr99h9o1nK3OvkVHMyLBtkHB5LPAvGEzIeM=JMXrdEq!ev2smoTpz5Q3o0FriJ2TRJNP=A=5I49K2B!zg92uqo1anspN7uH1xFJQg6pVuAwdycEHgu0HM2tUtuPnilo3sOGu6pr7LlraumOKTBvnbvKBi5ifq8dim0ohEyps91QuIzcE8ehUrxYNwnLF6vnki4W3dSLfl2JFHFPSM43AUb9MbNQxA28D1lq9HnouwSjAUW9Ezc=48XO2TbDUL8unEqvkTkci0HRlpDpRTDYARZrnpEkBn66=W!RdX0PpeWVGMEBK1dHJYWhM8KfuBehcs=!LSJUDZZK!P6ZUBYFAXFwMDZ8X1CRajS2nKAWIjvZkMCcCM9L6zhiqXrocy9BGKW01Egxsm3oIETbjbcBpRxfdB5sGsMyD0U5P6wPiy=ISjWWU2K9pTTz9FtGE9TRaUbdU5hXGGGduuJ41mafTbW!0W3hr=lHUDuP1wXuZsZNVedkakDhw=j1D3Wa=kGWljVTX8Ny=zQHU!C=gcq4Q9jtuUjn!aP1v!eQ4U5X1U0gLJ60HF=tgJkMBJPsbnmDdWsWH0go3n7Wj=F8R4oLqGJ9VZQ9r4PfWtGPLrHtkmMbuIwVl9y1dwXysNv8yd3uqo9rMd8Tq5MYIV1Cder!uhL4orxjouuTGxK5uiQi5LwVZ1cwLV156!6gE5vhldfRBzFMmplvgbmYRIwPnuVIqgGVi5rhXI5tHJPZteBQTkLf54OCOQuYIGtzM8vj3g8!UrZWswlN3nS8sKvW5Dk0!P2=GR3LVkdZaDh1D8UFyRCX!=MBDuDgp2DQT3CiqTWGU02oHbjdvyL5Sad9kWvTRa5ueRsuFd2NQ2JUJz2US1DXopuMGP3LWJUVBKvoQzbHnDs=kfyGOKRBet9wyci2bnfUyRSmcT9tYoBrYu9s1tvZgvFXaM3bfnoIzIHRAqHoFzH!u5Q=KPk=U8cPQ5SNMeAHSNBl6EQcbxKBufyzA4=!jeYe53Wo=SInO1B7s84mhMUa!4v6Ib=O3eaaAUMTaK3NLDC!rijxhwVn5YL3gcF121armNQ9OvZFhSQiN!NrudZ!SyIWny1tsDGxmbxRrXQk9zat9gnsom20Wqxy58RnwPIRPitRT=rxnejXTvHMFqbANsm6PkTyLeQj9N2S1onNj13Nt!2Lstfgo5zqb0neRYhjLOVDI5ZWLwYMddEL0AMnucUBMbyb1b=!NpJu3QOHQbMnjbjDaiiYdNby6WBd4v9DI4UI9AYcZjPGVOmSs7k6160nmmXylqCITtmoBR!QcRl702dkWsKQIi58xb6P=B=jqFYPmTa9W5jt4gQbNLNlLseTMM6TWUzQjitjX!NyYaCYk!aRF4WMXQVRUap5wvm1MKF2N!l8=dVWyxYS2nbFbYqRhRQ1TdrXEACAaxJF2p8uu!qm3u3OA6vskUBgMFQcS2b2A4OsIB3LMxT9cviISly",
													"description": "Keys for two factor auth (yubico)."
												},
												{
													"key": "lastname",
													"value": "string"
												}
											],
											"variable": [
												{
													"key": "userid",
													"value": "string",
													"description": "(Required) Full User ID, in the `name@realm` format."
												}
											]
										},
										"description": "Update user configuration."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/access/users/:userid?append=true&comment=string&email=string&enable=1&expire=8248&firstname=string&groups=string&keys=MnRAgB5okvS5N3n3n7cU10QaXEPUy2uLn1F6p9N1HOrmlhH7=eyK9Q!UjUH7NklMFjIESnsBwK63iQeCmx=KeioiQUOZgyVp3dDQ9aV1p=QblyacNERQplfS6H8qq6vU!LFFL0lHChezgw!hZWaSZo!rNoEfhijO=0mfdDR8A855BX!7yvE04ccoepSyCbdQrj47lm=8p28dOmecEJ8Tkh9fYwLgVBQ58blcSw3Nlau2GowgQoQ!y4zduuMvGYZw4qv1lWNhxR1jwacIHzYcQQuWPJNaMwuzseTDw!=n1QT4qktDbKBES31RIy5aMjw9av8BjhlVu35ixg!uDNOSg=fmKUmg00Ayp9low5Aofue1xuYev8qtaK7FHlMWDJZ=suYiavjkKMVhi9ajOm38msDvRzJnLWn7sCdPtYra1mZyOKEtTgAFCseZGYboEx4ZLAMCP41osu!=gxjX4v28LMn=7eiwHct9jNnkh4JzmQoURXACAqK13P7rEkuJW9CpiXASHwxMSvRfBsyI!FUFDZp2iVkmccOoL3y0VjMdiaq4UFIVcrqhGzoPJ06yY5!so08xDgYZZB0CP1uvpa=IYqD9Fpl06HSFMagsZmJFBpTOkoU!GrRwlMCLz=2qjv1oGkkw7yipJiEpDkVdfz1X2VH5WWXaZhBlyh5Wt7Qvmck6ZhV!7yfAnd2fdT5pL5!PQykVNwBzP2zPUhtCEA63jvCe8w2uyx!ljXKA0YuEAN1Ddx50k=Bjr7eeHZ1iLWZaT7GeXTKMNJwzrKkfLygWLdJ9pPwzDb9x!RX=E4i4DqTN1BFVbe8qTbmhh=5jGrrUE7d4J9AwHyyY6U=vncRlPcwmrC13Uf!=cYLnZL2vONFu5uJZTeJrtpsxCau2jPRE6pHL9QPhr!VB0F1DpzcEpxZC9f9lc3GGNRlr4KMh9kzjNDA9h5BXecVQuGfn2FSfSh6uz3ega1ozI2800QBQKEWN0jA46BJ6x=dsyjf=YP3c4hNgcGBt0zR8f4v2OiX!j!oxzvuf=0oJX702EWYJFxyzF1N0Fsd1ACUtGJPA74r3r6GC4V3xkldkG1HKgsMXUggrvs3jzNe2JNXJOnzC13rAyZkTxkFUAkoG2DhbqnJQB!Jk0OyTOo0Q1A02V3o!BRY8kBkxFVz8nKujYryeG7VIQb2TZvIVA7KGqDG068DHq!=93cVKqXhCA5h5PcijXAboejJbz=Wu0!dEbEgT2shk7F3bCnGdfAK0mgjw5ss5ggDiuRTzvXhkoITRgulJsUQGsZJUdJqVqqS!mDa2YhgQJFODfkcAAJ8qvGs2Kp0BtEyDStkEhxYVFGpk0sI!Wy5w7XL!1QHoeiwqz3GyrJsgtjvMwWhMHDlAhaRMaewcrqPH0ZaFJ0iHtLApOjpB2YaLyl9=3L5b4eBJsYZy19f20pLhdHf8Tikvy7=0attogYiDYgAni55s2iusOKkQkrlvI9SmnDNnEW1nKHqYe4S4UmNJ=82HOTx6sMK614iG=LilFuF9xAN=OHC7GDhTo8YBOiPwLnmcAWQ!au9Fs3BOrRzYbpSrGwUuOmfVaeaNqsFXyzThRLJ3TFwKYmyv5g9R5QfWj2Mf5i3l!zaAFoy!=S1TLbb7QVR8o3fgv0KoL7z!jLj3a7p=Nw4g4YeiXTU1w=AeNYrnkDWSQHx8bKB8=Vx1Eyd=Bl0XORcfRo2GB7Ybt2rxGwY9GA7E!hbIYYdS0s6cJPXgMDs2t!MVehQV8GlX!4QAf0ss4VaVn!R9KswlEt9JQ4uunYYNcesrFDXP23hUoxxBBm!02kdCyIPimAMwAD2C6gc1=MoiHMBpbb4zb6TJGLdflM8WOVfO!xwoEOVQDybPE7JrHxSwcF6sQacM03=Hf0JdRG9LFykMcwwKLHJOEQDlKlKXhixrOHijWv65TX94YSlI1Ml48vCute1vstvBZ9qnrD!8mpMV8KUEQ7LLKX5fxo!9ZNH2!d!2eaIx9gMLmGvXh6z354y6Mmc4=DUUzfvkLV2TyAdf1OBvr99h9o1nK3OvkVHMyLBtkHB5LPAvGEzIeM=JMXrdEq!ev2smoTpz5Q3o0FriJ2TRJNP=A=5I49K2B!zg92uqo1anspN7uH1xFJQg6pVuAwdycEHgu0HM2tUtuPnilo3sOGu6pr7LlraumOKTBvnbvKBi5ifq8dim0ohEyps91QuIzcE8ehUrxYNwnLF6vnki4W3dSLfl2JFHFPSM43AUb9MbNQxA28D1lq9HnouwSjAUW9Ezc=48XO2TbDUL8unEqvkTkci0HRlpDpRTDYARZrnpEkBn66=W!RdX0PpeWVGMEBK1dHJYWhM8KfuBehcs=!LSJUDZZK!P6ZUBYFAXFwMDZ8X1CRajS2nKAWIjvZkMCcCM9L6zhiqXrocy9BGKW01Egxsm3oIETbjbcBpRxfdB5sGsMyD0U5P6wPiy=ISjWWU2K9pTTz9FtGE9TRaUbdU5hXGGGduuJ41mafTbW!0W3hr=lHUDuP1wXuZsZNVedkakDhw=j1D3Wa=kGWljVTX8Ny=zQHU!C=gcq4Q9jtuUjn!aP1v!eQ4U5X1U0gLJ60HF=tgJkMBJPsbnmDdWsWH0go3n7Wj=F8R4oLqGJ9VZQ9r4PfWtGPLrHtkmMbuIwVl9y1dwXysNv8yd3uqo9rMd8Tq5MYIV1Cder!uhL4orxjouuTGxK5uiQi5LwVZ1cwLV156!6gE5vhldfRBzFMmplvgbmYRIwPnuVIqgGVi5rhXI5tHJPZteBQTkLf54OCOQuYIGtzM8vj3g8!UrZWswlN3nS8sKvW5Dk0!P2=GR3LVkdZaDh1D8UFyRCX!=MBDuDgp2DQT3CiqTWGU02oHbjdvyL5Sad9kWvTRa5ueRsuFd2NQ2JUJz2US1DXopuMGP3LWJUVBKvoQzbHnDs=kfyGOKRBet9wyci2bnfUyRSmcT9tYoBrYu9s1tvZgvFXaM3bfnoIzIHRAqHoFzH!u5Q=KPk=U8cPQ5SNMeAHSNBl6EQcbxKBufyzA4=!jeYe53Wo=SInO1B7s84mhMUa!4v6Ib=O3eaaAUMTaK3NLDC!rijxhwVn5YL3gcF121armNQ9OvZFhSQiN!NrudZ!SyIWny1tsDGxmbxRrXQk9zat9gnsom20Wqxy58RnwPIRPitRT=rxnejXTvHMFqbANsm6PkTyLeQj9N2S1onNj13Nt!2Lstfgo5zqb0neRYhjLOVDI5ZWLwYMddEL0AMnucUBMbyb1b=!NpJu3QOHQbMnjbjDaiiYdNby6WBd4v9DI4UI9AYcZjPGVOmSs7k6160nmmXylqCITtmoBR!QcRl702dkWsKQIi58xb6P=B=jqFYPmTa9W5jt4gQbNLNlLseTMM6TWUzQjitjX!NyYaCYk!aRF4WMXQVRUap5wvm1MKF2N!l8=dVWyxYS2nbFbYqRhRQ1TdrXEACAaxJF2p8uu!qm3u3OA6vskUBgMFQcS2b2A4OsIB3LMxT9cviISly&lastname=string",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"access",
														"users",
														":userid"
													],
													"query": [
														{
															"key": "append",
															"value": "true"
														},
														{
															"key": "comment",
															"value": "string"
														},
														{
															"key": "email",
															"value": "string"
														},
														{
															"key": "enable",
															"value": "1",
															"description": "Enable the account (default). You can set this to '0' to disable the account"
														},
														{
															"key": "expire",
															"value": "8248",
															"description": "Account expiration date (seconds since epoch). '0' means no expiration date."
														},
														{
															"key": "firstname",
															"value": "string"
														},
														{
															"key": "groups",
															"value": "string"
														},
														{
															"key": "keys",
															"value": "MnRAgB5okvS5N3n3n7cU10QaXEPUy2uLn1F6p9N1HOrmlhH7=eyK9Q!UjUH7NklMFjIESnsBwK63iQeCmx=KeioiQUOZgyVp3dDQ9aV1p=QblyacNERQplfS6H8qq6vU!LFFL0lHChezgw!hZWaSZo!rNoEfhijO=0mfdDR8A855BX!7yvE04ccoepSyCbdQrj47lm=8p28dOmecEJ8Tkh9fYwLgVBQ58blcSw3Nlau2GowgQoQ!y4zduuMvGYZw4qv1lWNhxR1jwacIHzYcQQuWPJNaMwuzseTDw!=n1QT4qktDbKBES31RIy5aMjw9av8BjhlVu35ixg!uDNOSg=fmKUmg00Ayp9low5Aofue1xuYev8qtaK7FHlMWDJZ=suYiavjkKMVhi9ajOm38msDvRzJnLWn7sCdPtYra1mZyOKEtTgAFCseZGYboEx4ZLAMCP41osu!=gxjX4v28LMn=7eiwHct9jNnkh4JzmQoURXACAqK13P7rEkuJW9CpiXASHwxMSvRfBsyI!FUFDZp2iVkmccOoL3y0VjMdiaq4UFIVcrqhGzoPJ06yY5!so08xDgYZZB0CP1uvpa=IYqD9Fpl06HSFMagsZmJFBpTOkoU!GrRwlMCLz=2qjv1oGkkw7yipJiEpDkVdfz1X2VH5WWXaZhBlyh5Wt7Qvmck6ZhV!7yfAnd2fdT5pL5!PQykVNwBzP2zPUhtCEA63jvCe8w2uyx!ljXKA0YuEAN1Ddx50k=Bjr7eeHZ1iLWZaT7GeXTKMNJwzrKkfLygWLdJ9pPwzDb9x!RX=E4i4DqTN1BFVbe8qTbmhh=5jGrrUE7d4J9AwHyyY6U=vncRlPcwmrC13Uf!=cYLnZL2vONFu5uJZTeJrtpsxCau2jPRE6pHL9QPhr!VB0F1DpzcEpxZC9f9lc3GGNRlr4KMh9kzjNDA9h5BXecVQuGfn2FSfSh6uz3ega1ozI2800QBQKEWN0jA46BJ6x=dsyjf=YP3c4hNgcGBt0zR8f4v2OiX!j!oxzvuf=0oJX702EWYJFxyzF1N0Fsd1ACUtGJPA74r3r6GC4V3xkldkG1HKgsMXUggrvs3jzNe2JNXJOnzC13rAyZkTxkFUAkoG2DhbqnJQB!Jk0OyTOo0Q1A02V3o!BRY8kBkxFVz8nKujYryeG7VIQb2TZvIVA7KGqDG068DHq!=93cVKqXhCA5h5PcijXAboejJbz=Wu0!dEbEgT2shk7F3bCnGdfAK0mgjw5ss5ggDiuRTzvXhkoITRgulJsUQGsZJUdJqVqqS!mDa2YhgQJFODfkcAAJ8qvGs2Kp0BtEyDStkEhxYVFGpk0sI!Wy5w7XL!1QHoeiwqz3GyrJsgtjvMwWhMHDlAhaRMaewcrqPH0ZaFJ0iHtLApOjpB2YaLyl9=3L5b4eBJsYZy19f20pLhdHf8Tikvy7=0attogYiDYgAni55s2iusOKkQkrlvI9SmnDNnEW1nKHqYe4S4UmNJ=82HOTx6sMK614iG=LilFuF9xAN=OHC7GDhTo8YBOiPwLnmcAWQ!au9Fs3BOrRzYbpSrGwUuOmfVaeaNqsFXyzThRLJ3TFwKYmyv5g9R5QfWj2Mf5i3l!zaAFoy!=S1TLbb7QVR8o3fgv0KoL7z!jLj3a7p=Nw4g4YeiXTU1w=AeNYrnkDWSQHx8bKB8=Vx1Eyd=Bl0XORcfRo2GB7Ybt2rxGwY9GA7E!hbIYYdS0s6cJPXgMDs2t!MVehQV8GlX!4QAf0ss4VaVn!R9KswlEt9JQ4uunYYNcesrFDXP23hUoxxBBm!02kdCyIPimAMwAD2C6gc1=MoiHMBpbb4zb6TJGLdflM8WOVfO!xwoEOVQDybPE7JrHxSwcF6sQacM03=Hf0JdRG9LFykMcwwKLHJOEQDlKlKXhixrOHijWv65TX94YSlI1Ml48vCute1vstvBZ9qnrD!8mpMV8KUEQ7LLKX5fxo!9ZNH2!d!2eaIx9gMLmGvXh6z354y6Mmc4=DUUzfvkLV2TyAdf1OBvr99h9o1nK3OvkVHMyLBtkHB5LPAvGEzIeM=JMXrdEq!ev2smoTpz5Q3o0FriJ2TRJNP=A=5I49K2B!zg92uqo1anspN7uH1xFJQg6pVuAwdycEHgu0HM2tUtuPnilo3sOGu6pr7LlraumOKTBvnbvKBi5ifq8dim0ohEyps91QuIzcE8ehUrxYNwnLF6vnki4W3dSLfl2JFHFPSM43AUb9MbNQxA28D1lq9HnouwSjAUW9Ezc=48XO2TbDUL8unEqvkTkci0HRlpDpRTDYARZrnpEkBn66=W!RdX0PpeWVGMEBK1dHJYWhM8KfuBehcs=!LSJUDZZK!P6ZUBYFAXFwMDZ8X1CRajS2nKAWIjvZkMCcCM9L6zhiqXrocy9BGKW01Egxsm3oIETbjbcBpRxfdB5sGsMyD0U5P6wPiy=ISjWWU2K9pTTz9FtGE9TRaUbdU5hXGGGduuJ41mafTbW!0W3hr=lHUDuP1wXuZsZNVedkakDhw=j1D3Wa=kGWljVTX8Ny=zQHU!C=gcq4Q9jtuUjn!aP1v!eQ4U5X1U0gLJ60HF=tgJkMBJPsbnmDdWsWH0go3n7Wj=F8R4oLqGJ9VZQ9r4PfWtGPLrHtkmMbuIwVl9y1dwXysNv8yd3uqo9rMd8Tq5MYIV1Cder!uhL4orxjouuTGxK5uiQi5LwVZ1cwLV156!6gE5vhldfRBzFMmplvgbmYRIwPnuVIqgGVi5rhXI5tHJPZteBQTkLf54OCOQuYIGtzM8vj3g8!UrZWswlN3nS8sKvW5Dk0!P2=GR3LVkdZaDh1D8UFyRCX!=MBDuDgp2DQT3CiqTWGU02oHbjdvyL5Sad9kWvTRa5ueRsuFd2NQ2JUJz2US1DXopuMGP3LWJUVBKvoQzbHnDs=kfyGOKRBet9wyci2bnfUyRSmcT9tYoBrYu9s1tvZgvFXaM3bfnoIzIHRAqHoFzH!u5Q=KPk=U8cPQ5SNMeAHSNBl6EQcbxKBufyzA4=!jeYe53Wo=SInO1B7s84mhMUa!4v6Ib=O3eaaAUMTaK3NLDC!rijxhwVn5YL3gcF121armNQ9OvZFhSQiN!NrudZ!SyIWny1tsDGxmbxRrXQk9zat9gnsom20Wqxy58RnwPIRPitRT=rxnejXTvHMFqbANsm6PkTyLeQj9N2S1onNj13Nt!2Lstfgo5zqb0neRYhjLOVDI5ZWLwYMddEL0AMnucUBMbyb1b=!NpJu3QOHQbMnjbjDaiiYdNby6WBd4v9DI4UI9AYcZjPGVOmSs7k6160nmmXylqCITtmoBR!QcRl702dkWsKQIi58xb6P=B=jqFYPmTa9W5jt4gQbNLNlLseTMM6TWUzQjitjX!NyYaCYk!aRF4WMXQVRUap5wvm1MKF2N!l8=dVWyxYS2nbFbYqRhRQ1TdrXEACAaxJF2p8uu!qm3u3OA6vskUBgMFQcS2b2A4OsIB3LMxT9cviISly",
															"description": "Keys for two factor auth (yubico)."
														},
														{
															"key": "lastname",
															"value": "string"
														}
													],
													"variable": [
														{
															"key": "userid"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "null"
										}
									]
								}
							]
						},
						{
							"name": "User index.",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/access/users?enabled=true&full=0",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"access",
										"users"
									],
									"query": [
										{
											"key": "enabled",
											"value": "true",
											"description": "Optional filter for enable property."
										},
										{
											"key": "full",
											"value": "0",
											"description": "Include group and token information."
										}
									]
								},
								"description": "User index."
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/access/users?enabled=true&full=0",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"access",
												"users"
											],
											"query": [
												{
													"key": "enabled",
													"value": "true",
													"description": "Optional filter for enable property."
												},
												{
													"key": "full",
													"value": "0",
													"description": "Include group and token information."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "null"
								}
							]
						},
						{
							"name": "Create new user.",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/access/users?comment=string&email=string&enable=1&expire=8248&firstname=string&groups=string&keys=MnRAgB5okvS5N3n3n7cU10QaXEPUy2uLn1F6p9N1HOrmlhH7=eyK9Q!UjUH7NklMFjIESnsBwK63iQeCmx=KeioiQUOZgyVp3dDQ9aV1p=QblyacNERQplfS6H8qq6vU!LFFL0lHChezgw!hZWaSZo!rNoEfhijO=0mfdDR8A855BX!7yvE04ccoepSyCbdQrj47lm=8p28dOmecEJ8Tkh9fYwLgVBQ58blcSw3Nlau2GowgQoQ!y4zduuMvGYZw4qv1lWNhxR1jwacIHzYcQQuWPJNaMwuzseTDw!=n1QT4qktDbKBES31RIy5aMjw9av8BjhlVu35ixg!uDNOSg=fmKUmg00Ayp9low5Aofue1xuYev8qtaK7FHlMWDJZ=suYiavjkKMVhi9ajOm38msDvRzJnLWn7sCdPtYra1mZyOKEtTgAFCseZGYboEx4ZLAMCP41osu!=gxjX4v28LMn=7eiwHct9jNnkh4JzmQoURXACAqK13P7rEkuJW9CpiXASHwxMSvRfBsyI!FUFDZp2iVkmccOoL3y0VjMdiaq4UFIVcrqhGzoPJ06yY5!so08xDgYZZB0CP1uvpa=IYqD9Fpl06HSFMagsZmJFBpTOkoU!GrRwlMCLz=2qjv1oGkkw7yipJiEpDkVdfz1X2VH5WWXaZhBlyh5Wt7Qvmck6ZhV!7yfAnd2fdT5pL5!PQykVNwBzP2zPUhtCEA63jvCe8w2uyx!ljXKA0YuEAN1Ddx50k=Bjr7eeHZ1iLWZaT7GeXTKMNJwzrKkfLygWLdJ9pPwzDb9x!RX=E4i4DqTN1BFVbe8qTbmhh=5jGrrUE7d4J9AwHyyY6U=vncRlPcwmrC13Uf!=cYLnZL2vONFu5uJZTeJrtpsxCau2jPRE6pHL9QPhr!VB0F1DpzcEpxZC9f9lc3GGNRlr4KMh9kzjNDA9h5BXecVQuGfn2FSfSh6uz3ega1ozI2800QBQKEWN0jA46BJ6x=dsyjf=YP3c4hNgcGBt0zR8f4v2OiX!j!oxzvuf=0oJX702EWYJFxyzF1N0Fsd1ACUtGJPA74r3r6GC4V3xkldkG1HKgsMXUggrvs3jzNe2JNXJOnzC13rAyZkTxkFUAkoG2DhbqnJQB!Jk0OyTOo0Q1A02V3o!BRY8kBkxFVz8nKujYryeG7VIQb2TZvIVA7KGqDG068DHq!=93cVKqXhCA5h5PcijXAboejJbz=Wu0!dEbEgT2shk7F3bCnGdfAK0mgjw5ss5ggDiuRTzvXhkoITRgulJsUQGsZJUdJqVqqS!mDa2YhgQJFODfkcAAJ8qvGs2Kp0BtEyDStkEhxYVFGpk0sI!Wy5w7XL!1QHoeiwqz3GyrJsgtjvMwWhMHDlAhaRMaewcrqPH0ZaFJ0iHtLApOjpB2YaLyl9=3L5b4eBJsYZy19f20pLhdHf8Tikvy7=0attogYiDYgAni55s2iusOKkQkrlvI9SmnDNnEW1nKHqYe4S4UmNJ=82HOTx6sMK614iG=LilFuF9xAN=OHC7GDhTo8YBOiPwLnmcAWQ!au9Fs3BOrRzYbpSrGwUuOmfVaeaNqsFXyzThRLJ3TFwKYmyv5g9R5QfWj2Mf5i3l!zaAFoy!=S1TLbb7QVR8o3fgv0KoL7z!jLj3a7p=Nw4g4YeiXTU1w=AeNYrnkDWSQHx8bKB8=Vx1Eyd=Bl0XORcfRo2GB7Ybt2rxGwY9GA7E!hbIYYdS0s6cJPXgMDs2t!MVehQV8GlX!4QAf0ss4VaVn!R9KswlEt9JQ4uunYYNcesrFDXP23hUoxxBBm!02kdCyIPimAMwAD2C6gc1=MoiHMBpbb4zb6TJGLdflM8WOVfO!xwoEOVQDybPE7JrHxSwcF6sQacM03=Hf0JdRG9LFykMcwwKLHJOEQDlKlKXhixrOHijWv65TX94YSlI1Ml48vCute1vstvBZ9qnrD!8mpMV8KUEQ7LLKX5fxo!9ZNH2!d!2eaIx9gMLmGvXh6z354y6Mmc4=DUUzfvkLV2TyAdf1OBvr99h9o1nK3OvkVHMyLBtkHB5LPAvGEzIeM=JMXrdEq!ev2smoTpz5Q3o0FriJ2TRJNP=A=5I49K2B!zg92uqo1anspN7uH1xFJQg6pVuAwdycEHgu0HM2tUtuPnilo3sOGu6pr7LlraumOKTBvnbvKBi5ifq8dim0ohEyps91QuIzcE8ehUrxYNwnLF6vnki4W3dSLfl2JFHFPSM43AUb9MbNQxA28D1lq9HnouwSjAUW9Ezc=48XO2TbDUL8unEqvkTkci0HRlpDpRTDYARZrnpEkBn66=W!RdX0PpeWVGMEBK1dHJYWhM8KfuBehcs=!LSJUDZZK!P6ZUBYFAXFwMDZ8X1CRajS2nKAWIjvZkMCcCM9L6zhiqXrocy9BGKW01Egxsm3oIETbjbcBpRxfdB5sGsMyD0U5P6wPiy=ISjWWU2K9pTTz9FtGE9TRaUbdU5hXGGGduuJ41mafTbW!0W3hr=lHUDuP1wXuZsZNVedkakDhw=j1D3Wa=kGWljVTX8Ny=zQHU!C=gcq4Q9jtuUjn!aP1v!eQ4U5X1U0gLJ60HF=tgJkMBJPsbnmDdWsWH0go3n7Wj=F8R4oLqGJ9VZQ9r4PfWtGPLrHtkmMbuIwVl9y1dwXysNv8yd3uqo9rMd8Tq5MYIV1Cder!uhL4orxjouuTGxK5uiQi5LwVZ1cwLV156!6gE5vhldfRBzFMmplvgbmYRIwPnuVIqgGVi5rhXI5tHJPZteBQTkLf54OCOQuYIGtzM8vj3g8!UrZWswlN3nS8sKvW5Dk0!P2=GR3LVkdZaDh1D8UFyRCX!=MBDuDgp2DQT3CiqTWGU02oHbjdvyL5Sad9kWvTRa5ueRsuFd2NQ2JUJz2US1DXopuMGP3LWJUVBKvoQzbHnDs=kfyGOKRBet9wyci2bnfUyRSmcT9tYoBrYu9s1tvZgvFXaM3bfnoIzIHRAqHoFzH!u5Q=KPk=U8cPQ5SNMeAHSNBl6EQcbxKBufyzA4=!jeYe53Wo=SInO1B7s84mhMUa!4v6Ib=O3eaaAUMTaK3NLDC!rijxhwVn5YL3gcF121armNQ9OvZFhSQiN!NrudZ!SyIWny1tsDGxmbxRrXQk9zat9gnsom20Wqxy58RnwPIRPitRT=rxnejXTvHMFqbANsm6PkTyLeQj9N2S1onNj13Nt!2Lstfgo5zqb0neRYhjLOVDI5ZWLwYMddEL0AMnucUBMbyb1b=!NpJu3QOHQbMnjbjDaiiYdNby6WBd4v9DI4UI9AYcZjPGVOmSs7k6160nmmXylqCITtmoBR!QcRl702dkWsKQIi58xb6P=B=jqFYPmTa9W5jt4gQbNLNlLseTMM6TWUzQjitjX!NyYaCYk!aRF4WMXQVRUap5wvm1MKF2N!l8=dVWyxYS2nbFbYqRhRQ1TdrXEACAaxJF2p8uu!qm3u3OA6vskUBgMFQcS2b2A4OsIB3LMxT9cviISly&lastname=string&password=string&userid=string",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"access",
										"users"
									],
									"query": [
										{
											"key": "comment",
											"value": "string"
										},
										{
											"key": "email",
											"value": "string"
										},
										{
											"key": "enable",
											"value": "1",
											"description": "Enable the account (default). You can set this to '0' to disable the account"
										},
										{
											"key": "expire",
											"value": "8248",
											"description": "Account expiration date (seconds since epoch). '0' means no expiration date."
										},
										{
											"key": "firstname",
											"value": "string"
										},
										{
											"key": "groups",
											"value": "string"
										},
										{
											"key": "keys",
											"value": "MnRAgB5okvS5N3n3n7cU10QaXEPUy2uLn1F6p9N1HOrmlhH7=eyK9Q!UjUH7NklMFjIESnsBwK63iQeCmx=KeioiQUOZgyVp3dDQ9aV1p=QblyacNERQplfS6H8qq6vU!LFFL0lHChezgw!hZWaSZo!rNoEfhijO=0mfdDR8A855BX!7yvE04ccoepSyCbdQrj47lm=8p28dOmecEJ8Tkh9fYwLgVBQ58blcSw3Nlau2GowgQoQ!y4zduuMvGYZw4qv1lWNhxR1jwacIHzYcQQuWPJNaMwuzseTDw!=n1QT4qktDbKBES31RIy5aMjw9av8BjhlVu35ixg!uDNOSg=fmKUmg00Ayp9low5Aofue1xuYev8qtaK7FHlMWDJZ=suYiavjkKMVhi9ajOm38msDvRzJnLWn7sCdPtYra1mZyOKEtTgAFCseZGYboEx4ZLAMCP41osu!=gxjX4v28LMn=7eiwHct9jNnkh4JzmQoURXACAqK13P7rEkuJW9CpiXASHwxMSvRfBsyI!FUFDZp2iVkmccOoL3y0VjMdiaq4UFIVcrqhGzoPJ06yY5!so08xDgYZZB0CP1uvpa=IYqD9Fpl06HSFMagsZmJFBpTOkoU!GrRwlMCLz=2qjv1oGkkw7yipJiEpDkVdfz1X2VH5WWXaZhBlyh5Wt7Qvmck6ZhV!7yfAnd2fdT5pL5!PQykVNwBzP2zPUhtCEA63jvCe8w2uyx!ljXKA0YuEAN1Ddx50k=Bjr7eeHZ1iLWZaT7GeXTKMNJwzrKkfLygWLdJ9pPwzDb9x!RX=E4i4DqTN1BFVbe8qTbmhh=5jGrrUE7d4J9AwHyyY6U=vncRlPcwmrC13Uf!=cYLnZL2vONFu5uJZTeJrtpsxCau2jPRE6pHL9QPhr!VB0F1DpzcEpxZC9f9lc3GGNRlr4KMh9kzjNDA9h5BXecVQuGfn2FSfSh6uz3ega1ozI2800QBQKEWN0jA46BJ6x=dsyjf=YP3c4hNgcGBt0zR8f4v2OiX!j!oxzvuf=0oJX702EWYJFxyzF1N0Fsd1ACUtGJPA74r3r6GC4V3xkldkG1HKgsMXUggrvs3jzNe2JNXJOnzC13rAyZkTxkFUAkoG2DhbqnJQB!Jk0OyTOo0Q1A02V3o!BRY8kBkxFVz8nKujYryeG7VIQb2TZvIVA7KGqDG068DHq!=93cVKqXhCA5h5PcijXAboejJbz=Wu0!dEbEgT2shk7F3bCnGdfAK0mgjw5ss5ggDiuRTzvXhkoITRgulJsUQGsZJUdJqVqqS!mDa2YhgQJFODfkcAAJ8qvGs2Kp0BtEyDStkEhxYVFGpk0sI!Wy5w7XL!1QHoeiwqz3GyrJsgtjvMwWhMHDlAhaRMaewcrqPH0ZaFJ0iHtLApOjpB2YaLyl9=3L5b4eBJsYZy19f20pLhdHf8Tikvy7=0attogYiDYgAni55s2iusOKkQkrlvI9SmnDNnEW1nKHqYe4S4UmNJ=82HOTx6sMK614iG=LilFuF9xAN=OHC7GDhTo8YBOiPwLnmcAWQ!au9Fs3BOrRzYbpSrGwUuOmfVaeaNqsFXyzThRLJ3TFwKYmyv5g9R5QfWj2Mf5i3l!zaAFoy!=S1TLbb7QVR8o3fgv0KoL7z!jLj3a7p=Nw4g4YeiXTU1w=AeNYrnkDWSQHx8bKB8=Vx1Eyd=Bl0XORcfRo2GB7Ybt2rxGwY9GA7E!hbIYYdS0s6cJPXgMDs2t!MVehQV8GlX!4QAf0ss4VaVn!R9KswlEt9JQ4uunYYNcesrFDXP23hUoxxBBm!02kdCyIPimAMwAD2C6gc1=MoiHMBpbb4zb6TJGLdflM8WOVfO!xwoEOVQDybPE7JrHxSwcF6sQacM03=Hf0JdRG9LFykMcwwKLHJOEQDlKlKXhixrOHijWv65TX94YSlI1Ml48vCute1vstvBZ9qnrD!8mpMV8KUEQ7LLKX5fxo!9ZNH2!d!2eaIx9gMLmGvXh6z354y6Mmc4=DUUzfvkLV2TyAdf1OBvr99h9o1nK3OvkVHMyLBtkHB5LPAvGEzIeM=JMXrdEq!ev2smoTpz5Q3o0FriJ2TRJNP=A=5I49K2B!zg92uqo1anspN7uH1xFJQg6pVuAwdycEHgu0HM2tUtuPnilo3sOGu6pr7LlraumOKTBvnbvKBi5ifq8dim0ohEyps91QuIzcE8ehUrxYNwnLF6vnki4W3dSLfl2JFHFPSM43AUb9MbNQxA28D1lq9HnouwSjAUW9Ezc=48XO2TbDUL8unEqvkTkci0HRlpDpRTDYARZrnpEkBn66=W!RdX0PpeWVGMEBK1dHJYWhM8KfuBehcs=!LSJUDZZK!P6ZUBYFAXFwMDZ8X1CRajS2nKAWIjvZkMCcCM9L6zhiqXrocy9BGKW01Egxsm3oIETbjbcBpRxfdB5sGsMyD0U5P6wPiy=ISjWWU2K9pTTz9FtGE9TRaUbdU5hXGGGduuJ41mafTbW!0W3hr=lHUDuP1wXuZsZNVedkakDhw=j1D3Wa=kGWljVTX8Ny=zQHU!C=gcq4Q9jtuUjn!aP1v!eQ4U5X1U0gLJ60HF=tgJkMBJPsbnmDdWsWH0go3n7Wj=F8R4oLqGJ9VZQ9r4PfWtGPLrHtkmMbuIwVl9y1dwXysNv8yd3uqo9rMd8Tq5MYIV1Cder!uhL4orxjouuTGxK5uiQi5LwVZ1cwLV156!6gE5vhldfRBzFMmplvgbmYRIwPnuVIqgGVi5rhXI5tHJPZteBQTkLf54OCOQuYIGtzM8vj3g8!UrZWswlN3nS8sKvW5Dk0!P2=GR3LVkdZaDh1D8UFyRCX!=MBDuDgp2DQT3CiqTWGU02oHbjdvyL5Sad9kWvTRa5ueRsuFd2NQ2JUJz2US1DXopuMGP3LWJUVBKvoQzbHnDs=kfyGOKRBet9wyci2bnfUyRSmcT9tYoBrYu9s1tvZgvFXaM3bfnoIzIHRAqHoFzH!u5Q=KPk=U8cPQ5SNMeAHSNBl6EQcbxKBufyzA4=!jeYe53Wo=SInO1B7s84mhMUa!4v6Ib=O3eaaAUMTaK3NLDC!rijxhwVn5YL3gcF121armNQ9OvZFhSQiN!NrudZ!SyIWny1tsDGxmbxRrXQk9zat9gnsom20Wqxy58RnwPIRPitRT=rxnejXTvHMFqbANsm6PkTyLeQj9N2S1onNj13Nt!2Lstfgo5zqb0neRYhjLOVDI5ZWLwYMddEL0AMnucUBMbyb1b=!NpJu3QOHQbMnjbjDaiiYdNby6WBd4v9DI4UI9AYcZjPGVOmSs7k6160nmmXylqCITtmoBR!QcRl702dkWsKQIi58xb6P=B=jqFYPmTa9W5jt4gQbNLNlLseTMM6TWUzQjitjX!NyYaCYk!aRF4WMXQVRUap5wvm1MKF2N!l8=dVWyxYS2nbFbYqRhRQ1TdrXEACAaxJF2p8uu!qm3u3OA6vskUBgMFQcS2b2A4OsIB3LMxT9cviISly",
											"description": "Keys for two factor auth (yubico)."
										},
										{
											"key": "lastname",
											"value": "string"
										},
										{
											"key": "password",
											"value": "string",
											"description": "Initial password."
										},
										{
											"key": "userid",
											"value": "string",
											"description": "(Required) Full User ID, in the `name@realm` format."
										}
									]
								},
								"description": "Create new user."
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/access/users?comment=string&email=string&enable=1&expire=8248&firstname=string&groups=string&keys=MnRAgB5okvS5N3n3n7cU10QaXEPUy2uLn1F6p9N1HOrmlhH7=eyK9Q!UjUH7NklMFjIESnsBwK63iQeCmx=KeioiQUOZgyVp3dDQ9aV1p=QblyacNERQplfS6H8qq6vU!LFFL0lHChezgw!hZWaSZo!rNoEfhijO=0mfdDR8A855BX!7yvE04ccoepSyCbdQrj47lm=8p28dOmecEJ8Tkh9fYwLgVBQ58blcSw3Nlau2GowgQoQ!y4zduuMvGYZw4qv1lWNhxR1jwacIHzYcQQuWPJNaMwuzseTDw!=n1QT4qktDbKBES31RIy5aMjw9av8BjhlVu35ixg!uDNOSg=fmKUmg00Ayp9low5Aofue1xuYev8qtaK7FHlMWDJZ=suYiavjkKMVhi9ajOm38msDvRzJnLWn7sCdPtYra1mZyOKEtTgAFCseZGYboEx4ZLAMCP41osu!=gxjX4v28LMn=7eiwHct9jNnkh4JzmQoURXACAqK13P7rEkuJW9CpiXASHwxMSvRfBsyI!FUFDZp2iVkmccOoL3y0VjMdiaq4UFIVcrqhGzoPJ06yY5!so08xDgYZZB0CP1uvpa=IYqD9Fpl06HSFMagsZmJFBpTOkoU!GrRwlMCLz=2qjv1oGkkw7yipJiEpDkVdfz1X2VH5WWXaZhBlyh5Wt7Qvmck6ZhV!7yfAnd2fdT5pL5!PQykVNwBzP2zPUhtCEA63jvCe8w2uyx!ljXKA0YuEAN1Ddx50k=Bjr7eeHZ1iLWZaT7GeXTKMNJwzrKkfLygWLdJ9pPwzDb9x!RX=E4i4DqTN1BFVbe8qTbmhh=5jGrrUE7d4J9AwHyyY6U=vncRlPcwmrC13Uf!=cYLnZL2vONFu5uJZTeJrtpsxCau2jPRE6pHL9QPhr!VB0F1DpzcEpxZC9f9lc3GGNRlr4KMh9kzjNDA9h5BXecVQuGfn2FSfSh6uz3ega1ozI2800QBQKEWN0jA46BJ6x=dsyjf=YP3c4hNgcGBt0zR8f4v2OiX!j!oxzvuf=0oJX702EWYJFxyzF1N0Fsd1ACUtGJPA74r3r6GC4V3xkldkG1HKgsMXUggrvs3jzNe2JNXJOnzC13rAyZkTxkFUAkoG2DhbqnJQB!Jk0OyTOo0Q1A02V3o!BRY8kBkxFVz8nKujYryeG7VIQb2TZvIVA7KGqDG068DHq!=93cVKqXhCA5h5PcijXAboejJbz=Wu0!dEbEgT2shk7F3bCnGdfAK0mgjw5ss5ggDiuRTzvXhkoITRgulJsUQGsZJUdJqVqqS!mDa2YhgQJFODfkcAAJ8qvGs2Kp0BtEyDStkEhxYVFGpk0sI!Wy5w7XL!1QHoeiwqz3GyrJsgtjvMwWhMHDlAhaRMaewcrqPH0ZaFJ0iHtLApOjpB2YaLyl9=3L5b4eBJsYZy19f20pLhdHf8Tikvy7=0attogYiDYgAni55s2iusOKkQkrlvI9SmnDNnEW1nKHqYe4S4UmNJ=82HOTx6sMK614iG=LilFuF9xAN=OHC7GDhTo8YBOiPwLnmcAWQ!au9Fs3BOrRzYbpSrGwUuOmfVaeaNqsFXyzThRLJ3TFwKYmyv5g9R5QfWj2Mf5i3l!zaAFoy!=S1TLbb7QVR8o3fgv0KoL7z!jLj3a7p=Nw4g4YeiXTU1w=AeNYrnkDWSQHx8bKB8=Vx1Eyd=Bl0XORcfRo2GB7Ybt2rxGwY9GA7E!hbIYYdS0s6cJPXgMDs2t!MVehQV8GlX!4QAf0ss4VaVn!R9KswlEt9JQ4uunYYNcesrFDXP23hUoxxBBm!02kdCyIPimAMwAD2C6gc1=MoiHMBpbb4zb6TJGLdflM8WOVfO!xwoEOVQDybPE7JrHxSwcF6sQacM03=Hf0JdRG9LFykMcwwKLHJOEQDlKlKXhixrOHijWv65TX94YSlI1Ml48vCute1vstvBZ9qnrD!8mpMV8KUEQ7LLKX5fxo!9ZNH2!d!2eaIx9gMLmGvXh6z354y6Mmc4=DUUzfvkLV2TyAdf1OBvr99h9o1nK3OvkVHMyLBtkHB5LPAvGEzIeM=JMXrdEq!ev2smoTpz5Q3o0FriJ2TRJNP=A=5I49K2B!zg92uqo1anspN7uH1xFJQg6pVuAwdycEHgu0HM2tUtuPnilo3sOGu6pr7LlraumOKTBvnbvKBi5ifq8dim0ohEyps91QuIzcE8ehUrxYNwnLF6vnki4W3dSLfl2JFHFPSM43AUb9MbNQxA28D1lq9HnouwSjAUW9Ezc=48XO2TbDUL8unEqvkTkci0HRlpDpRTDYARZrnpEkBn66=W!RdX0PpeWVGMEBK1dHJYWhM8KfuBehcs=!LSJUDZZK!P6ZUBYFAXFwMDZ8X1CRajS2nKAWIjvZkMCcCM9L6zhiqXrocy9BGKW01Egxsm3oIETbjbcBpRxfdB5sGsMyD0U5P6wPiy=ISjWWU2K9pTTz9FtGE9TRaUbdU5hXGGGduuJ41mafTbW!0W3hr=lHUDuP1wXuZsZNVedkakDhw=j1D3Wa=kGWljVTX8Ny=zQHU!C=gcq4Q9jtuUjn!aP1v!eQ4U5X1U0gLJ60HF=tgJkMBJPsbnmDdWsWH0go3n7Wj=F8R4oLqGJ9VZQ9r4PfWtGPLrHtkmMbuIwVl9y1dwXysNv8yd3uqo9rMd8Tq5MYIV1Cder!uhL4orxjouuTGxK5uiQi5LwVZ1cwLV156!6gE5vhldfRBzFMmplvgbmYRIwPnuVIqgGVi5rhXI5tHJPZteBQTkLf54OCOQuYIGtzM8vj3g8!UrZWswlN3nS8sKvW5Dk0!P2=GR3LVkdZaDh1D8UFyRCX!=MBDuDgp2DQT3CiqTWGU02oHbjdvyL5Sad9kWvTRa5ueRsuFd2NQ2JUJz2US1DXopuMGP3LWJUVBKvoQzbHnDs=kfyGOKRBet9wyci2bnfUyRSmcT9tYoBrYu9s1tvZgvFXaM3bfnoIzIHRAqHoFzH!u5Q=KPk=U8cPQ5SNMeAHSNBl6EQcbxKBufyzA4=!jeYe53Wo=SInO1B7s84mhMUa!4v6Ib=O3eaaAUMTaK3NLDC!rijxhwVn5YL3gcF121armNQ9OvZFhSQiN!NrudZ!SyIWny1tsDGxmbxRrXQk9zat9gnsom20Wqxy58RnwPIRPitRT=rxnejXTvHMFqbANsm6PkTyLeQj9N2S1onNj13Nt!2Lstfgo5zqb0neRYhjLOVDI5ZWLwYMddEL0AMnucUBMbyb1b=!NpJu3QOHQbMnjbjDaiiYdNby6WBd4v9DI4UI9AYcZjPGVOmSs7k6160nmmXylqCITtmoBR!QcRl702dkWsKQIi58xb6P=B=jqFYPmTa9W5jt4gQbNLNlLseTMM6TWUzQjitjX!NyYaCYk!aRF4WMXQVRUap5wvm1MKF2N!l8=dVWyxYS2nbFbYqRhRQ1TdrXEACAaxJF2p8uu!qm3u3OA6vskUBgMFQcS2b2A4OsIB3LMxT9cviISly&lastname=string&password=string&userid=string",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"access",
												"users"
											],
											"query": [
												{
													"key": "comment",
													"value": "string"
												},
												{
													"key": "email",
													"value": "string"
												},
												{
													"key": "enable",
													"value": "1",
													"description": "Enable the account (default). You can set this to '0' to disable the account"
												},
												{
													"key": "expire",
													"value": "8248",
													"description": "Account expiration date (seconds since epoch). '0' means no expiration date."
												},
												{
													"key": "firstname",
													"value": "string"
												},
												{
													"key": "groups",
													"value": "string"
												},
												{
													"key": "keys",
													"value": "MnRAgB5okvS5N3n3n7cU10QaXEPUy2uLn1F6p9N1HOrmlhH7=eyK9Q!UjUH7NklMFjIESnsBwK63iQeCmx=KeioiQUOZgyVp3dDQ9aV1p=QblyacNERQplfS6H8qq6vU!LFFL0lHChezgw!hZWaSZo!rNoEfhijO=0mfdDR8A855BX!7yvE04ccoepSyCbdQrj47lm=8p28dOmecEJ8Tkh9fYwLgVBQ58blcSw3Nlau2GowgQoQ!y4zduuMvGYZw4qv1lWNhxR1jwacIHzYcQQuWPJNaMwuzseTDw!=n1QT4qktDbKBES31RIy5aMjw9av8BjhlVu35ixg!uDNOSg=fmKUmg00Ayp9low5Aofue1xuYev8qtaK7FHlMWDJZ=suYiavjkKMVhi9ajOm38msDvRzJnLWn7sCdPtYra1mZyOKEtTgAFCseZGYboEx4ZLAMCP41osu!=gxjX4v28LMn=7eiwHct9jNnkh4JzmQoURXACAqK13P7rEkuJW9CpiXASHwxMSvRfBsyI!FUFDZp2iVkmccOoL3y0VjMdiaq4UFIVcrqhGzoPJ06yY5!so08xDgYZZB0CP1uvpa=IYqD9Fpl06HSFMagsZmJFBpTOkoU!GrRwlMCLz=2qjv1oGkkw7yipJiEpDkVdfz1X2VH5WWXaZhBlyh5Wt7Qvmck6ZhV!7yfAnd2fdT5pL5!PQykVNwBzP2zPUhtCEA63jvCe8w2uyx!ljXKA0YuEAN1Ddx50k=Bjr7eeHZ1iLWZaT7GeXTKMNJwzrKkfLygWLdJ9pPwzDb9x!RX=E4i4DqTN1BFVbe8qTbmhh=5jGrrUE7d4J9AwHyyY6U=vncRlPcwmrC13Uf!=cYLnZL2vONFu5uJZTeJrtpsxCau2jPRE6pHL9QPhr!VB0F1DpzcEpxZC9f9lc3GGNRlr4KMh9kzjNDA9h5BXecVQuGfn2FSfSh6uz3ega1ozI2800QBQKEWN0jA46BJ6x=dsyjf=YP3c4hNgcGBt0zR8f4v2OiX!j!oxzvuf=0oJX702EWYJFxyzF1N0Fsd1ACUtGJPA74r3r6GC4V3xkldkG1HKgsMXUggrvs3jzNe2JNXJOnzC13rAyZkTxkFUAkoG2DhbqnJQB!Jk0OyTOo0Q1A02V3o!BRY8kBkxFVz8nKujYryeG7VIQb2TZvIVA7KGqDG068DHq!=93cVKqXhCA5h5PcijXAboejJbz=Wu0!dEbEgT2shk7F3bCnGdfAK0mgjw5ss5ggDiuRTzvXhkoITRgulJsUQGsZJUdJqVqqS!mDa2YhgQJFODfkcAAJ8qvGs2Kp0BtEyDStkEhxYVFGpk0sI!Wy5w7XL!1QHoeiwqz3GyrJsgtjvMwWhMHDlAhaRMaewcrqPH0ZaFJ0iHtLApOjpB2YaLyl9=3L5b4eBJsYZy19f20pLhdHf8Tikvy7=0attogYiDYgAni55s2iusOKkQkrlvI9SmnDNnEW1nKHqYe4S4UmNJ=82HOTx6sMK614iG=LilFuF9xAN=OHC7GDhTo8YBOiPwLnmcAWQ!au9Fs3BOrRzYbpSrGwUuOmfVaeaNqsFXyzThRLJ3TFwKYmyv5g9R5QfWj2Mf5i3l!zaAFoy!=S1TLbb7QVR8o3fgv0KoL7z!jLj3a7p=Nw4g4YeiXTU1w=AeNYrnkDWSQHx8bKB8=Vx1Eyd=Bl0XORcfRo2GB7Ybt2rxGwY9GA7E!hbIYYdS0s6cJPXgMDs2t!MVehQV8GlX!4QAf0ss4VaVn!R9KswlEt9JQ4uunYYNcesrFDXP23hUoxxBBm!02kdCyIPimAMwAD2C6gc1=MoiHMBpbb4zb6TJGLdflM8WOVfO!xwoEOVQDybPE7JrHxSwcF6sQacM03=Hf0JdRG9LFykMcwwKLHJOEQDlKlKXhixrOHijWv65TX94YSlI1Ml48vCute1vstvBZ9qnrD!8mpMV8KUEQ7LLKX5fxo!9ZNH2!d!2eaIx9gMLmGvXh6z354y6Mmc4=DUUzfvkLV2TyAdf1OBvr99h9o1nK3OvkVHMyLBtkHB5LPAvGEzIeM=JMXrdEq!ev2smoTpz5Q3o0FriJ2TRJNP=A=5I49K2B!zg92uqo1anspN7uH1xFJQg6pVuAwdycEHgu0HM2tUtuPnilo3sOGu6pr7LlraumOKTBvnbvKBi5ifq8dim0ohEyps91QuIzcE8ehUrxYNwnLF6vnki4W3dSLfl2JFHFPSM43AUb9MbNQxA28D1lq9HnouwSjAUW9Ezc=48XO2TbDUL8unEqvkTkci0HRlpDpRTDYARZrnpEkBn66=W!RdX0PpeWVGMEBK1dHJYWhM8KfuBehcs=!LSJUDZZK!P6ZUBYFAXFwMDZ8X1CRajS2nKAWIjvZkMCcCM9L6zhiqXrocy9BGKW01Egxsm3oIETbjbcBpRxfdB5sGsMyD0U5P6wPiy=ISjWWU2K9pTTz9FtGE9TRaUbdU5hXGGGduuJ41mafTbW!0W3hr=lHUDuP1wXuZsZNVedkakDhw=j1D3Wa=kGWljVTX8Ny=zQHU!C=gcq4Q9jtuUjn!aP1v!eQ4U5X1U0gLJ60HF=tgJkMBJPsbnmDdWsWH0go3n7Wj=F8R4oLqGJ9VZQ9r4PfWtGPLrHtkmMbuIwVl9y1dwXysNv8yd3uqo9rMd8Tq5MYIV1Cder!uhL4orxjouuTGxK5uiQi5LwVZ1cwLV156!6gE5vhldfRBzFMmplvgbmYRIwPnuVIqgGVi5rhXI5tHJPZteBQTkLf54OCOQuYIGtzM8vj3g8!UrZWswlN3nS8sKvW5Dk0!P2=GR3LVkdZaDh1D8UFyRCX!=MBDuDgp2DQT3CiqTWGU02oHbjdvyL5Sad9kWvTRa5ueRsuFd2NQ2JUJz2US1DXopuMGP3LWJUVBKvoQzbHnDs=kfyGOKRBet9wyci2bnfUyRSmcT9tYoBrYu9s1tvZgvFXaM3bfnoIzIHRAqHoFzH!u5Q=KPk=U8cPQ5SNMeAHSNBl6EQcbxKBufyzA4=!jeYe53Wo=SInO1B7s84mhMUa!4v6Ib=O3eaaAUMTaK3NLDC!rijxhwVn5YL3gcF121armNQ9OvZFhSQiN!NrudZ!SyIWny1tsDGxmbxRrXQk9zat9gnsom20Wqxy58RnwPIRPitRT=rxnejXTvHMFqbANsm6PkTyLeQj9N2S1onNj13Nt!2Lstfgo5zqb0neRYhjLOVDI5ZWLwYMddEL0AMnucUBMbyb1b=!NpJu3QOHQbMnjbjDaiiYdNby6WBd4v9DI4UI9AYcZjPGVOmSs7k6160nmmXylqCITtmoBR!QcRl702dkWsKQIi58xb6P=B=jqFYPmTa9W5jt4gQbNLNlLseTMM6TWUzQjitjX!NyYaCYk!aRF4WMXQVRUap5wvm1MKF2N!l8=dVWyxYS2nbFbYqRhRQ1TdrXEACAaxJF2p8uu!qm3u3OA6vskUBgMFQcS2b2A4OsIB3LMxT9cviISly",
													"description": "Keys for two factor auth (yubico)."
												},
												{
													"key": "lastname",
													"value": "string"
												},
												{
													"key": "password",
													"value": "string",
													"description": "Initial password."
												},
												{
													"key": "userid",
													"value": "string",
													"description": "(Required) Full User ID, in the `name@realm` format."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "null"
								}
							]
						}
					]
				},
				{
					"name": "groups",
					"item": [
						{
							"name": "{groupid}",
							"item": [
								{
									"name": "Delete group.",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/access/groups/:groupid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"access",
												"groups",
												":groupid"
											],
											"variable": [
												{
													"key": "groupid",
													"value": "string",
													"description": "(Required) "
												}
											]
										},
										"description": "Delete group."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/access/groups/:groupid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"access",
														"groups",
														":groupid"
													],
													"variable": [
														{
															"key": "groupid"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "null"
										}
									]
								},
								{
									"name": "Get group configuration.",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/access/groups/:groupid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"access",
												"groups",
												":groupid"
											],
											"variable": [
												{
													"key": "groupid",
													"value": "string",
													"description": "(Required) "
												}
											]
										},
										"description": "Get group configuration."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/access/groups/:groupid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"access",
														"groups",
														":groupid"
													],
													"variable": [
														{
															"key": "groupid"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"comment\": \"string\",\n  \"members\": [\n    \"string\",\n    \"string\"\n  ]\n}"
										}
									]
								},
								{
									"name": "Update group data.",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/access/groups/:groupid?comment=string",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"access",
												"groups",
												":groupid"
											],
											"query": [
												{
													"key": "comment",
													"value": "string"
												}
											],
											"variable": [
												{
													"key": "groupid",
													"value": "string",
													"description": "(Required) "
												}
											]
										},
										"description": "Update group data."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/access/groups/:groupid?comment=string",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"access",
														"groups",
														":groupid"
													],
													"query": [
														{
															"key": "comment",
															"value": "string"
														}
													],
													"variable": [
														{
															"key": "groupid"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "null"
										}
									]
								}
							]
						},
						{
							"name": "Group index.",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/access/groups",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"access",
										"groups"
									]
								},
								"description": "Group index."
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/access/groups",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"access",
												"groups"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"comment\": \"string\",\n    \"groupid\": \"string\",\n    \"users\": \"string\"\n  },\n  {\n    \"comment\": \"string\",\n    \"groupid\": \"string\",\n    \"users\": \"string\"\n  }\n]"
								}
							]
						},
						{
							"name": "Create new group.",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/access/groups?comment=string&groupid=string",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"access",
										"groups"
									],
									"query": [
										{
											"key": "comment",
											"value": "string"
										},
										{
											"key": "groupid",
											"value": "string",
											"description": "(Required) "
										}
									]
								},
								"description": "Create new group."
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/access/groups?comment=string&groupid=string",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"access",
												"groups"
											],
											"query": [
												{
													"key": "comment",
													"value": "string"
												},
												{
													"key": "groupid",
													"value": "string",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "null"
								}
							]
						}
					]
				},
				{
					"name": "roles",
					"item": [
						{
							"name": "{roleid}",
							"item": [
								{
									"name": "Delete role.",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/access/roles/:roleid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"access",
												"roles",
												":roleid"
											],
											"variable": [
												{
													"key": "roleid",
													"value": "string",
													"description": "(Required) "
												}
											]
										},
										"description": "Delete role."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/access/roles/:roleid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"access",
														"roles",
														":roleid"
													],
													"variable": [
														{
															"key": "roleid"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "null"
										}
									]
								},
								{
									"name": "Get role configuration.",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/access/roles/:roleid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"access",
												"roles",
												":roleid"
											],
											"variable": [
												{
													"key": "roleid",
													"value": "string",
													"description": "(Required) "
												}
											]
										},
										"description": "Get role configuration."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/access/roles/:roleid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"access",
														"roles",
														":roleid"
													],
													"variable": [
														{
															"key": "roleid"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"Datastore.Allocate\": true,\n  \"Datastore.AllocateSpace\": false,\n  \"Datastore.AllocateTemplate\": true,\n  \"Datastore.Audit\": false,\n  \"Group.Allocate\": false,\n  \"Mapping.Audit\": true,\n  \"Mapping.Modify\": false,\n  \"Mapping.Use\": true,\n  \"Permissions.Modify\": true,\n  \"Pool.Allocate\": true,\n  \"Pool.Audit\": false,\n  \"Realm.Allocate\": true,\n  \"Realm.AllocateUser\": false,\n  \"SDN.Allocate\": true,\n  \"SDN.Audit\": true,\n  \"SDN.Use\": false,\n  \"Sys.AccessNetwork\": false,\n  \"Sys.Audit\": false,\n  \"Sys.Console\": true,\n  \"Sys.Incoming\": true,\n  \"Sys.Modify\": false,\n  \"Sys.PowerMgmt\": false,\n  \"Sys.Syslog\": true,\n  \"User.Modify\": true,\n  \"VM.Allocate\": true,\n  \"VM.Audit\": false,\n  \"VM.Backup\": true,\n  \"VM.Clone\": false,\n  \"VM.Config.CDROM\": false,\n  \"VM.Config.CPU\": false,\n  \"VM.Config.Cloudinit\": false,\n  \"VM.Config.Disk\": true,\n  \"VM.Config.HWType\": true,\n  \"VM.Config.Memory\": false,\n  \"VM.Config.Network\": true,\n  \"VM.Config.Options\": false,\n  \"VM.Console\": false,\n  \"VM.GuestAgent.Audit\": true,\n  \"VM.GuestAgent.FileRead\": true,\n  \"VM.GuestAgent.FileSystemMgmt\": true,\n  \"VM.GuestAgent.FileWrite\": true,\n  \"VM.GuestAgent.Unrestricted\": true,\n  \"VM.Migrate\": false,\n  \"VM.PowerMgmt\": false,\n  \"VM.Replicate\": true,\n  \"VM.Snapshot\": false,\n  \"VM.Snapshot.Rollback\": false\n}"
										}
									]
								},
								{
									"name": "Update an existing role.",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/access/roles/:roleid?append=true&privs=string",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"access",
												"roles",
												":roleid"
											],
											"query": [
												{
													"key": "append",
													"value": "true"
												},
												{
													"key": "privs",
													"value": "string"
												}
											],
											"variable": [
												{
													"key": "roleid",
													"value": "string",
													"description": "(Required) "
												}
											]
										},
										"description": "Update an existing role."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/access/roles/:roleid?append=true&privs=string",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"access",
														"roles",
														":roleid"
													],
													"query": [
														{
															"key": "append",
															"value": "true"
														},
														{
															"key": "privs",
															"value": "string"
														}
													],
													"variable": [
														{
															"key": "roleid"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "null"
										}
									]
								}
							]
						},
						{
							"name": "Role index.",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/access/roles",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"access",
										"roles"
									]
								},
								"description": "Role index."
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/access/roles",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"access",
												"roles"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"privs\": \"string\",\n    \"roleid\": \"string\",\n    \"special\": 0\n  },\n  {\n    \"privs\": \"string\",\n    \"roleid\": \"string\",\n    \"special\": 0\n  }\n]"
								}
							]
						},
						{
							"name": "Create new role.",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/access/roles?privs=string&roleid=string",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"access",
										"roles"
									],
									"query": [
										{
											"key": "privs",
											"value": "string"
										},
										{
											"key": "roleid",
											"value": "string",
											"description": "(Required) "
										}
									]
								},
								"description": "Create new role."
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/access/roles?privs=string&roleid=string",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"access",
												"roles"
											],
											"query": [
												{
													"key": "privs",
													"value": "string"
												},
												{
													"key": "roleid",
													"value": "string",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "null"
								}
							]
						}
					]
				},
				{
					"name": "acl",
					"item": [
						{
							"name": "Get Access Control List (ACLs).",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/access/acl",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"access",
										"acl"
									]
								},
								"description": "Get Access Control List (ACLs)."
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/access/acl",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"access",
												"acl"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"path\": \"string\",\n    \"propagate\": 1,\n    \"roleid\": \"string\",\n    \"type\": \"token\",\n    \"ugid\": \"string\"\n  },\n  {\n    \"path\": \"string\",\n    \"propagate\": 1,\n    \"roleid\": \"string\",\n    \"type\": \"group\",\n    \"ugid\": \"string\"\n  }\n]"
								}
							]
						},
						{
							"name": "Update Access Control List (add or remove permissions).",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/access/acl?delete=true&groups=string&path=string&propagate=1&roles=string&tokens=string&users=string",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"access",
										"acl"
									],
									"query": [
										{
											"key": "delete",
											"value": "true",
											"description": "Remove permissions (instead of adding it)."
										},
										{
											"key": "groups",
											"value": "string",
											"description": "List of groups."
										},
										{
											"key": "path",
											"value": "string",
											"description": "(Required) Access control path"
										},
										{
											"key": "propagate",
											"value": "1",
											"description": "Allow to propagate (inherit) permissions."
										},
										{
											"key": "roles",
											"value": "string",
											"description": "(Required) List of roles."
										},
										{
											"key": "tokens",
											"value": "string",
											"description": "List of API tokens."
										},
										{
											"key": "users",
											"value": "string",
											"description": "List of users."
										}
									]
								},
								"description": "Update Access Control List (add or remove permissions)."
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/access/acl?delete=true&groups=string&path=string&propagate=1&roles=string&tokens=string&users=string",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"access",
												"acl"
											],
											"query": [
												{
													"key": "delete",
													"value": "true",
													"description": "Remove permissions (instead of adding it)."
												},
												{
													"key": "groups",
													"value": "string",
													"description": "List of groups."
												},
												{
													"key": "path",
													"value": "string",
													"description": "(Required) Access control path"
												},
												{
													"key": "propagate",
													"value": "1",
													"description": "Allow to propagate (inherit) permissions."
												},
												{
													"key": "roles",
													"value": "string",
													"description": "(Required) List of roles."
												},
												{
													"key": "tokens",
													"value": "string",
													"description": "List of API tokens."
												},
												{
													"key": "users",
													"value": "string",
													"description": "List of users."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "null"
								}
							]
						}
					]
				},
				{
					"name": "domains",
					"item": [
						{
							"name": "{realm}",
							"item": [
								{
									"name": "sync",
									"item": [
										{
											"name": "Syncs users and/or groups from the configured LDAP to user.cfg. NOTE: Synced groups will have the name 'name-$realm', so make sure those groups do not exist to prevent overwriting.",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/access/domains/:realm/sync?dry-run=0&enable-new=1&full=true&purge=true&remove-vanished=none&scope=both",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"access",
														"domains",
														":realm",
														"sync"
													],
													"query": [
														{
															"key": "dry-run",
															"value": "0",
															"description": "If set, does not write anything."
														},
														{
															"key": "enable-new",
															"value": "1",
															"description": "Enable newly synced users immediately."
														},
														{
															"key": "full",
															"value": "true",
															"description": "DEPRECATED: use 'remove-vanished' instead. If set, uses the LDAP Directory as source of truth, deleting users or groups not returned from the sync and removing all locally modified properties of synced users. If not set, only syncs information which is present in the synced data, and does not delete or modify anything else."
														},
														{
															"key": "purge",
															"value": "true",
															"description": "DEPRECATED: use 'remove-vanished' instead. Remove ACLs for users or groups which were removed from the config during a sync."
														},
														{
															"key": "remove-vanished",
															"value": "none",
															"description": "A semicolon-separated list of things to remove when they or the user vanishes during a sync. The following values are possible: 'entry' removes the user/group when not returned from the sync. 'properties' removes the set properties on existing user/group that do not appear in the source (even custom ones). 'acl' removes acls when the user/group is not returned from the sync. Instead of a list it also can be 'none' (the default)."
														},
														{
															"key": "scope",
															"value": "both",
															"description": "Select what to sync."
														}
													],
													"variable": [
														{
															"key": "realm",
															"value": "string",
															"description": "(Required) Authentication domain ID"
														}
													]
												},
												"description": "Syncs users and/or groups from the configured LDAP to user.cfg. NOTE: Synced groups will have the name 'name-$realm', so make sure those groups do not exist to prevent overwriting."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/access/domains/:realm/sync?dry-run=0&enable-new=1&full=true&purge=true&remove-vanished=none&scope=both",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"access",
																"domains",
																":realm",
																"sync"
															],
															"query": [
																{
																	"key": "dry-run",
																	"value": "0",
																	"description": "If set, does not write anything."
																},
																{
																	"key": "enable-new",
																	"value": "1",
																	"description": "Enable newly synced users immediately."
																},
																{
																	"key": "full",
																	"value": "true",
																	"description": "DEPRECATED: use 'remove-vanished' instead. If set, uses the LDAP Directory as source of truth, deleting users or groups not returned from the sync and removing all locally modified properties of synced users. If not set, only syncs information which is present in the synced data, and does not delete or modify anything else."
																},
																{
																	"key": "purge",
																	"value": "true",
																	"description": "DEPRECATED: use 'remove-vanished' instead. Remove ACLs for users or groups which were removed from the config during a sync."
																},
																{
																	"key": "remove-vanished",
																	"value": "none",
																	"description": "A semicolon-separated list of things to remove when they or the user vanishes during a sync. The following values are possible: 'entry' removes the user/group when not returned from the sync. 'properties' removes the set properties on existing user/group that do not appear in the source (even custom ones). 'acl' removes acls when the user/group is not returned from the sync. Instead of a list it also can be 'none' (the default)."
																},
																{
																	"key": "scope",
																	"value": "both",
																	"description": "Select what to sync."
																}
															],
															"variable": [
																{
																	"key": "realm"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "string"
												}
											]
										}
									]
								},
								{
									"name": "Delete an authentication server.",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/access/domains/:realm",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"access",
												"domains",
												":realm"
											],
											"variable": [
												{
													"key": "realm",
													"value": "string",
													"description": "(Required) Authentication domain ID"
												}
											]
										},
										"description": "Delete an authentication server."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/access/domains/:realm",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"access",
														"domains",
														":realm"
													],
													"variable": [
														{
															"key": "realm"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "null"
										}
									]
								},
								{
									"name": "Get auth server configuration.",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/access/domains/:realm",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"access",
												"domains",
												":realm"
											],
											"variable": [
												{
													"key": "realm",
													"value": "string",
													"description": "(Required) Authentication domain ID"
												}
											]
										},
										"description": "Get auth server configuration."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/access/domains/:realm",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"access",
														"domains",
														":realm"
													],
													"variable": [
														{
															"key": "realm"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{}"
										}
									]
								},
								{
									"name": "Update authentication server settings.",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/access/domains/:realm?acr-values=%26@.g=w&autocreate=0&base_dn=string&bind_dn=string&capath=/etc/ssl/certs&case-sensitive=1&cert=string&certkey=string&check-connection=0&client-id=string&client-key=string&comment=string&default=true&delete=string&digest=string&domain=\\'&filter=string&group_classes=groupOfNames, group, univentionGroup, ipausergroup&group_dn=string&group_filter=string&group_name_attr=string&groups-autocreate=0&groups-claim=&groups-overwrite=0&issuer-url=string&mode=ldap&password=string&port=27761&prompt=login&query-userinfo=1&scopes=email profile&secure=true&server1=string&server2=string&sslversion=tlsv1_1&sync-defaults-options=string&sync_attributes=WUYp=WC,          b37aqII=~^NPhK,  \u000b   \r᠎  oFGwq=H&tfa=string&user_attr=tJT&user_classes=inetorgperson, posixaccount, person, user&verify=0",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"access",
												"domains",
												":realm"
											],
											"query": [
												{
													"key": "acr-values",
													"value": "&@.g=w",
													"description": "Specifies the Authentication Context Class Reference values that theAuthorization Server is being requested to use for the Auth Request."
												},
												{
													"key": "autocreate",
													"value": "0",
													"description": "Automatically create users if they do not exist."
												},
												{
													"key": "base_dn",
													"value": "string",
													"description": "LDAP base domain name"
												},
												{
													"key": "bind_dn",
													"value": "string",
													"description": "LDAP bind domain name"
												},
												{
													"key": "capath",
													"value": "/etc/ssl/certs",
													"description": "Path to the CA certificate store"
												},
												{
													"key": "case-sensitive",
													"value": "1",
													"description": "username is case-sensitive"
												},
												{
													"key": "cert",
													"value": "string",
													"description": "Path to the client certificate"
												},
												{
													"key": "certkey",
													"value": "string",
													"description": "Path to the client certificate key"
												},
												{
													"key": "check-connection",
													"value": "0",
													"description": "Check bind connection to the server."
												},
												{
													"key": "client-id",
													"value": "string",
													"description": "OpenID Client ID"
												},
												{
													"key": "client-key",
													"value": "string",
													"description": "OpenID Client Key"
												},
												{
													"key": "comment",
													"value": "string",
													"description": "Description."
												},
												{
													"key": "default",
													"value": "true",
													"description": "Use this as default realm"
												},
												{
													"key": "delete",
													"value": "string",
													"description": "A list of settings you want to delete."
												},
												{
													"key": "digest",
													"value": "string",
													"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
												},
												{
													"key": "domain",
													"value": "\\'",
													"description": "AD domain name"
												},
												{
													"key": "filter",
													"value": "string",
													"description": "LDAP filter for user sync."
												},
												{
													"key": "group_classes",
													"value": "groupOfNames, group, univentionGroup, ipausergroup",
													"description": "The objectclasses for groups."
												},
												{
													"key": "group_dn",
													"value": "string",
													"description": "LDAP base domain name for group sync. If not set, the base_dn will be used."
												},
												{
													"key": "group_filter",
													"value": "string",
													"description": "LDAP filter for group sync."
												},
												{
													"key": "group_name_attr",
													"value": "string",
													"description": "LDAP attribute representing a groups name. If not set or found, the first value of the DN will be used as name."
												},
												{
													"key": "groups-autocreate",
													"value": "0",
													"description": "Automatically create groups if they do not exist."
												},
												{
													"key": "groups-claim",
													"value": "",
													"description": "OpenID claim used to retrieve groups with."
												},
												{
													"key": "groups-overwrite",
													"value": "0",
													"description": "All groups will be overwritten for the user on login."
												},
												{
													"key": "issuer-url",
													"value": "string",
													"description": "OpenID Issuer Url"
												},
												{
													"key": "mode",
													"value": "ldap",
													"description": "LDAP protocol mode."
												},
												{
													"key": "password",
													"value": "string",
													"description": "LDAP bind password. Will be stored in '/etc/pve/priv/realm/<REALM>.pw'."
												},
												{
													"key": "port",
													"value": "27761",
													"description": "Server port."
												},
												{
													"key": "prompt",
													"value": "login",
													"description": "Specifies whether the Authorization Server prompts the End-User for reauthentication and consent."
												},
												{
													"key": "query-userinfo",
													"value": "1",
													"description": "Enables querying the userinfo endpoint for claims values."
												},
												{
													"key": "scopes",
													"value": "email profile",
													"description": "Specifies the scopes (user details) that should be authorized and returned, for example 'email' or 'profile'."
												},
												{
													"key": "secure",
													"value": "true",
													"description": "Use secure LDAPS protocol. DEPRECATED: use 'mode' instead."
												},
												{
													"key": "server1",
													"value": "string",
													"description": "Server IP address (or DNS name)"
												},
												{
													"key": "server2",
													"value": "string",
													"description": "Fallback Server IP address (or DNS name)"
												},
												{
													"key": "sslversion",
													"value": "tlsv1_1",
													"description": "LDAPS TLS/SSL version. It's not recommended to use version older than 1.2!"
												},
												{
													"key": "sync-defaults-options",
													"value": "string",
													"description": "The default options for behavior of synchronizations."
												},
												{
													"key": "sync_attributes",
													"value": "WUYp=WC,          b37aqII=~^NPhK,  \u000b   \r᠎  oFGwq=H",
													"description": "Comma separated list of key=value pairs for specifying which LDAP attributes map to which PVE user field. For example, to map the LDAP attribute 'mail' to PVEs 'email', write  'email=mail'. By default, each PVE user field is represented  by an LDAP attribute of the same name."
												},
												{
													"key": "tfa",
													"value": "string",
													"description": "Use Two-factor authentication."
												},
												{
													"key": "user_attr",
													"value": "tJT",
													"description": "LDAP user attribute name"
												},
												{
													"key": "user_classes",
													"value": "inetorgperson, posixaccount, person, user",
													"description": "The objectclasses for users."
												},
												{
													"key": "verify",
													"value": "0",
													"description": "Verify the server's SSL certificate"
												}
											],
											"variable": [
												{
													"key": "realm",
													"value": "string",
													"description": "(Required) Authentication domain ID"
												}
											]
										},
										"description": "Update authentication server settings."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/access/domains/:realm?acr-values=%26@.g=w&autocreate=0&base_dn=string&bind_dn=string&capath=/etc/ssl/certs&case-sensitive=1&cert=string&certkey=string&check-connection=0&client-id=string&client-key=string&comment=string&default=true&delete=string&digest=string&domain=\\'&filter=string&group_classes=groupOfNames, group, univentionGroup, ipausergroup&group_dn=string&group_filter=string&group_name_attr=string&groups-autocreate=0&groups-claim=&groups-overwrite=0&issuer-url=string&mode=ldap&password=string&port=27761&prompt=login&query-userinfo=1&scopes=email profile&secure=true&server1=string&server2=string&sslversion=tlsv1_1&sync-defaults-options=string&sync_attributes=WUYp=WC,          b37aqII=~^NPhK,  \u000b   \r᠎  oFGwq=H&tfa=string&user_attr=tJT&user_classes=inetorgperson, posixaccount, person, user&verify=0",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"access",
														"domains",
														":realm"
													],
													"query": [
														{
															"key": "acr-values",
															"value": "&@.g=w",
															"description": "Specifies the Authentication Context Class Reference values that theAuthorization Server is being requested to use for the Auth Request."
														},
														{
															"key": "autocreate",
															"value": "0",
															"description": "Automatically create users if they do not exist."
														},
														{
															"key": "base_dn",
															"value": "string",
															"description": "LDAP base domain name"
														},
														{
															"key": "bind_dn",
															"value": "string",
															"description": "LDAP bind domain name"
														},
														{
															"key": "capath",
															"value": "/etc/ssl/certs",
															"description": "Path to the CA certificate store"
														},
														{
															"key": "case-sensitive",
															"value": "1",
															"description": "username is case-sensitive"
														},
														{
															"key": "cert",
															"value": "string",
															"description": "Path to the client certificate"
														},
														{
															"key": "certkey",
															"value": "string",
															"description": "Path to the client certificate key"
														},
														{
															"key": "check-connection",
															"value": "0",
															"description": "Check bind connection to the server."
														},
														{
															"key": "client-id",
															"value": "string",
															"description": "OpenID Client ID"
														},
														{
															"key": "client-key",
															"value": "string",
															"description": "OpenID Client Key"
														},
														{
															"key": "comment",
															"value": "string",
															"description": "Description."
														},
														{
															"key": "default",
															"value": "true",
															"description": "Use this as default realm"
														},
														{
															"key": "delete",
															"value": "string",
															"description": "A list of settings you want to delete."
														},
														{
															"key": "digest",
															"value": "string",
															"description": "Prevent changes if current configuration file has a different digest. This can be used to prevent concurrent modifications."
														},
														{
															"key": "domain",
															"value": "\\'",
															"description": "AD domain name"
														},
														{
															"key": "filter",
															"value": "string",
															"description": "LDAP filter for user sync."
														},
														{
															"key": "group_classes",
															"value": "groupOfNames, group, univentionGroup, ipausergroup",
															"description": "The objectclasses for groups."
														},
														{
															"key": "group_dn",
															"value": "string",
															"description": "LDAP base domain name for group sync. If not set, the base_dn will be used."
														},
														{
															"key": "group_filter",
															"value": "string",
															"description": "LDAP filter for group sync."
														},
														{
															"key": "group_name_attr",
															"value": "string",
															"description": "LDAP attribute representing a groups name. If not set or found, the first value of the DN will be used as name."
														},
														{
															"key": "groups-autocreate",
															"value": "0",
															"description": "Automatically create groups if they do not exist."
														},
														{
															"key": "groups-claim",
															"value": "",
															"description": "OpenID claim used to retrieve groups with."
														},
														{
															"key": "groups-overwrite",
															"value": "0",
															"description": "All groups will be overwritten for the user on login."
														},
														{
															"key": "issuer-url",
															"value": "string",
															"description": "OpenID Issuer Url"
														},
														{
															"key": "mode",
															"value": "ldap",
															"description": "LDAP protocol mode."
														},
														{
															"key": "password",
															"value": "string",
															"description": "LDAP bind password. Will be stored in '/etc/pve/priv/realm/<REALM>.pw'."
														},
														{
															"key": "port",
															"value": "27761",
															"description": "Server port."
														},
														{
															"key": "prompt",
															"value": "login",
															"description": "Specifies whether the Authorization Server prompts the End-User for reauthentication and consent."
														},
														{
															"key": "query-userinfo",
															"value": "1",
															"description": "Enables querying the userinfo endpoint for claims values."
														},
														{
															"key": "scopes",
															"value": "email profile",
															"description": "Specifies the scopes (user details) that should be authorized and returned, for example 'email' or 'profile'."
														},
														{
															"key": "secure",
															"value": "true",
															"description": "Use secure LDAPS protocol. DEPRECATED: use 'mode' instead."
														},
														{
															"key": "server1",
															"value": "string",
															"description": "Server IP address (or DNS name)"
														},
														{
															"key": "server2",
															"value": "string",
															"description": "Fallback Server IP address (or DNS name)"
														},
														{
															"key": "sslversion",
															"value": "tlsv1_1",
															"description": "LDAPS TLS/SSL version. It's not recommended to use version older than 1.2!"
														},
														{
															"key": "sync-defaults-options",
															"value": "string",
															"description": "The default options for behavior of synchronizations."
														},
														{
															"key": "sync_attributes",
															"value": "WUYp=WC,          b37aqII=~^NPhK,  \u000b   \r᠎  oFGwq=H",
															"description": "Comma separated list of key=value pairs for specifying which LDAP attributes map to which PVE user field. For example, to map the LDAP attribute 'mail' to PVEs 'email', write  'email=mail'. By default, each PVE user field is represented  by an LDAP attribute of the same name."
														},
														{
															"key": "tfa",
															"value": "string",
															"description": "Use Two-factor authentication."
														},
														{
															"key": "user_attr",
															"value": "tJT",
															"description": "LDAP user attribute name"
														},
														{
															"key": "user_classes",
															"value": "inetorgperson, posixaccount, person, user",
															"description": "The objectclasses for users."
														},
														{
															"key": "verify",
															"value": "0",
															"description": "Verify the server's SSL certificate"
														}
													],
													"variable": [
														{
															"key": "realm"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "null"
										}
									]
								}
							]
						},
						{
							"name": "Authentication domain index.",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/access/domains",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"access",
										"domains"
									]
								},
								"description": "Authentication domain index."
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/access/domains",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"access",
												"domains"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"comment\": \"string\",\n    \"realm\": \"string\",\n    \"tfa\": \"oath\",\n    \"type\": \"string\"\n  },\n  {\n    \"comment\": \"string\",\n    \"realm\": \"string\",\n    \"tfa\": \"yubico\",\n    \"type\": \"string\"\n  }\n]"
								}
							]
						},
						{
							"name": "Add an authentication server.",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/access/domains?acr-values=%26@.g=w&autocreate=0&base_dn=string&bind_dn=string&capath=/etc/ssl/certs&case-sensitive=1&cert=string&certkey=string&check-connection=0&client-id=string&client-key=string&comment=string&default=true&domain=\\'&filter=string&group_classes=groupOfNames, group, univentionGroup, ipausergroup&group_dn=string&group_filter=string&group_name_attr=string&groups-autocreate=0&groups-claim=&groups-overwrite=0&issuer-url=string&mode=ldap&password=string&port=27761&prompt=login&query-userinfo=1&realm=string&scopes=email profile&secure=true&server1=string&server2=string&sslversion=tlsv1_1&sync-defaults-options=string&sync_attributes=WUYp=WC,          b37aqII=~^NPhK,  \u000b   \r᠎  oFGwq=H&tfa=string&type=ldap&user_attr=tJT&user_classes=inetorgperson, posixaccount, person, user&username-claim=string&verify=0",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"access",
										"domains"
									],
									"query": [
										{
											"key": "acr-values",
											"value": "&@.g=w",
											"description": "Specifies the Authentication Context Class Reference values that theAuthorization Server is being requested to use for the Auth Request."
										},
										{
											"key": "autocreate",
											"value": "0",
											"description": "Automatically create users if they do not exist."
										},
										{
											"key": "base_dn",
											"value": "string",
											"description": "LDAP base domain name"
										},
										{
											"key": "bind_dn",
											"value": "string",
											"description": "LDAP bind domain name"
										},
										{
											"key": "capath",
											"value": "/etc/ssl/certs",
											"description": "Path to the CA certificate store"
										},
										{
											"key": "case-sensitive",
											"value": "1",
											"description": "username is case-sensitive"
										},
										{
											"key": "cert",
											"value": "string",
											"description": "Path to the client certificate"
										},
										{
											"key": "certkey",
											"value": "string",
											"description": "Path to the client certificate key"
										},
										{
											"key": "check-connection",
											"value": "0",
											"description": "Check bind connection to the server."
										},
										{
											"key": "client-id",
											"value": "string",
											"description": "OpenID Client ID"
										},
										{
											"key": "client-key",
											"value": "string",
											"description": "OpenID Client Key"
										},
										{
											"key": "comment",
											"value": "string",
											"description": "Description."
										},
										{
											"key": "default",
											"value": "true",
											"description": "Use this as default realm"
										},
										{
											"key": "domain",
											"value": "\\'",
											"description": "AD domain name"
										},
										{
											"key": "filter",
											"value": "string",
											"description": "LDAP filter for user sync."
										},
										{
											"key": "group_classes",
											"value": "groupOfNames, group, univentionGroup, ipausergroup",
											"description": "The objectclasses for groups."
										},
										{
											"key": "group_dn",
											"value": "string",
											"description": "LDAP base domain name for group sync. If not set, the base_dn will be used."
										},
										{
											"key": "group_filter",
											"value": "string",
											"description": "LDAP filter for group sync."
										},
										{
											"key": "group_name_attr",
											"value": "string",
											"description": "LDAP attribute representing a groups name. If not set or found, the first value of the DN will be used as name."
										},
										{
											"key": "groups-autocreate",
											"value": "0",
											"description": "Automatically create groups if they do not exist."
										},
										{
											"key": "groups-claim",
											"value": "",
											"description": "OpenID claim used to retrieve groups with."
										},
										{
											"key": "groups-overwrite",
											"value": "0",
											"description": "All groups will be overwritten for the user on login."
										},
										{
											"key": "issuer-url",
											"value": "string",
											"description": "OpenID Issuer Url"
										},
										{
											"key": "mode",
											"value": "ldap",
											"description": "LDAP protocol mode."
										},
										{
											"key": "password",
											"value": "string",
											"description": "LDAP bind password. Will be stored in '/etc/pve/priv/realm/<REALM>.pw'."
										},
										{
											"key": "port",
											"value": "27761",
											"description": "Server port."
										},
										{
											"key": "prompt",
											"value": "login",
											"description": "Specifies whether the Authorization Server prompts the End-User for reauthentication and consent."
										},
										{
											"key": "query-userinfo",
											"value": "1",
											"description": "Enables querying the userinfo endpoint for claims values."
										},
										{
											"key": "realm",
											"value": "string",
											"description": "(Required) Authentication domain ID"
										},
										{
											"key": "scopes",
											"value": "email profile",
											"description": "Specifies the scopes (user details) that should be authorized and returned, for example 'email' or 'profile'."
										},
										{
											"key": "secure",
											"value": "true",
											"description": "Use secure LDAPS protocol. DEPRECATED: use 'mode' instead."
										},
										{
											"key": "server1",
											"value": "string",
											"description": "Server IP address (or DNS name)"
										},
										{
											"key": "server2",
											"value": "string",
											"description": "Fallback Server IP address (or DNS name)"
										},
										{
											"key": "sslversion",
											"value": "tlsv1_1",
											"description": "LDAPS TLS/SSL version. It's not recommended to use version older than 1.2!"
										},
										{
											"key": "sync-defaults-options",
											"value": "string",
											"description": "The default options for behavior of synchronizations."
										},
										{
											"key": "sync_attributes",
											"value": "WUYp=WC,          b37aqII=~^NPhK,  \u000b   \r᠎  oFGwq=H",
											"description": "Comma separated list of key=value pairs for specifying which LDAP attributes map to which PVE user field. For example, to map the LDAP attribute 'mail' to PVEs 'email', write  'email=mail'. By default, each PVE user field is represented  by an LDAP attribute of the same name."
										},
										{
											"key": "tfa",
											"value": "string",
											"description": "Use Two-factor authentication."
										},
										{
											"key": "type",
											"value": "ldap",
											"description": "(Required) Realm type."
										},
										{
											"key": "user_attr",
											"value": "tJT",
											"description": "LDAP user attribute name"
										},
										{
											"key": "user_classes",
											"value": "inetorgperson, posixaccount, person, user",
											"description": "The objectclasses for users."
										},
										{
											"key": "username-claim",
											"value": "string",
											"description": "OpenID claim used to generate the unique username."
										},
										{
											"key": "verify",
											"value": "0",
											"description": "Verify the server's SSL certificate"
										}
									]
								},
								"description": "Add an authentication server."
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/access/domains?acr-values=%26@.g=w&autocreate=0&base_dn=string&bind_dn=string&capath=/etc/ssl/certs&case-sensitive=1&cert=string&certkey=string&check-connection=0&client-id=string&client-key=string&comment=string&default=true&domain=\\'&filter=string&group_classes=groupOfNames, group, univentionGroup, ipausergroup&group_dn=string&group_filter=string&group_name_attr=string&groups-autocreate=0&groups-claim=&groups-overwrite=0&issuer-url=string&mode=ldap&password=string&port=27761&prompt=login&query-userinfo=1&realm=string&scopes=email profile&secure=true&server1=string&server2=string&sslversion=tlsv1_1&sync-defaults-options=string&sync_attributes=WUYp=WC,          b37aqII=~^NPhK,  \u000b   \r᠎  oFGwq=H&tfa=string&type=ldap&user_attr=tJT&user_classes=inetorgperson, posixaccount, person, user&username-claim=string&verify=0",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"access",
												"domains"
											],
											"query": [
												{
													"key": "acr-values",
													"value": "&@.g=w",
													"description": "Specifies the Authentication Context Class Reference values that theAuthorization Server is being requested to use for the Auth Request."
												},
												{
													"key": "autocreate",
													"value": "0",
													"description": "Automatically create users if they do not exist."
												},
												{
													"key": "base_dn",
													"value": "string",
													"description": "LDAP base domain name"
												},
												{
													"key": "bind_dn",
													"value": "string",
													"description": "LDAP bind domain name"
												},
												{
													"key": "capath",
													"value": "/etc/ssl/certs",
													"description": "Path to the CA certificate store"
												},
												{
													"key": "case-sensitive",
													"value": "1",
													"description": "username is case-sensitive"
												},
												{
													"key": "cert",
													"value": "string",
													"description": "Path to the client certificate"
												},
												{
													"key": "certkey",
													"value": "string",
													"description": "Path to the client certificate key"
												},
												{
													"key": "check-connection",
													"value": "0",
													"description": "Check bind connection to the server."
												},
												{
													"key": "client-id",
													"value": "string",
													"description": "OpenID Client ID"
												},
												{
													"key": "client-key",
													"value": "string",
													"description": "OpenID Client Key"
												},
												{
													"key": "comment",
													"value": "string",
													"description": "Description."
												},
												{
													"key": "default",
													"value": "true",
													"description": "Use this as default realm"
												},
												{
													"key": "domain",
													"value": "\\'",
													"description": "AD domain name"
												},
												{
													"key": "filter",
													"value": "string",
													"description": "LDAP filter for user sync."
												},
												{
													"key": "group_classes",
													"value": "groupOfNames, group, univentionGroup, ipausergroup",
													"description": "The objectclasses for groups."
												},
												{
													"key": "group_dn",
													"value": "string",
													"description": "LDAP base domain name for group sync. If not set, the base_dn will be used."
												},
												{
													"key": "group_filter",
													"value": "string",
													"description": "LDAP filter for group sync."
												},
												{
													"key": "group_name_attr",
													"value": "string",
													"description": "LDAP attribute representing a groups name. If not set or found, the first value of the DN will be used as name."
												},
												{
													"key": "groups-autocreate",
													"value": "0",
													"description": "Automatically create groups if they do not exist."
												},
												{
													"key": "groups-claim",
													"value": "",
													"description": "OpenID claim used to retrieve groups with."
												},
												{
													"key": "groups-overwrite",
													"value": "0",
													"description": "All groups will be overwritten for the user on login."
												},
												{
													"key": "issuer-url",
													"value": "string",
													"description": "OpenID Issuer Url"
												},
												{
													"key": "mode",
													"value": "ldap",
													"description": "LDAP protocol mode."
												},
												{
													"key": "password",
													"value": "string",
													"description": "LDAP bind password. Will be stored in '/etc/pve/priv/realm/<REALM>.pw'."
												},
												{
													"key": "port",
													"value": "27761",
													"description": "Server port."
												},
												{
													"key": "prompt",
													"value": "login",
													"description": "Specifies whether the Authorization Server prompts the End-User for reauthentication and consent."
												},
												{
													"key": "query-userinfo",
													"value": "1",
													"description": "Enables querying the userinfo endpoint for claims values."
												},
												{
													"key": "realm",
													"value": "string",
													"description": "(Required) Authentication domain ID"
												},
												{
													"key": "scopes",
													"value": "email profile",
													"description": "Specifies the scopes (user details) that should be authorized and returned, for example 'email' or 'profile'."
												},
												{
													"key": "secure",
													"value": "true",
													"description": "Use secure LDAPS protocol. DEPRECATED: use 'mode' instead."
												},
												{
													"key": "server1",
													"value": "string",
													"description": "Server IP address (or DNS name)"
												},
												{
													"key": "server2",
													"value": "string",
													"description": "Fallback Server IP address (or DNS name)"
												},
												{
													"key": "sslversion",
													"value": "tlsv1_1",
													"description": "LDAPS TLS/SSL version. It's not recommended to use version older than 1.2!"
												},
												{
													"key": "sync-defaults-options",
													"value": "string",
													"description": "The default options for behavior of synchronizations."
												},
												{
													"key": "sync_attributes",
													"value": "WUYp=WC,          b37aqII=~^NPhK,  \u000b   \r᠎  oFGwq=H",
													"description": "Comma separated list of key=value pairs for specifying which LDAP attributes map to which PVE user field. For example, to map the LDAP attribute 'mail' to PVEs 'email', write  'email=mail'. By default, each PVE user field is represented  by an LDAP attribute of the same name."
												},
												{
													"key": "tfa",
													"value": "string",
													"description": "Use Two-factor authentication."
												},
												{
													"key": "type",
													"value": "ldap",
													"description": "(Required) Realm type."
												},
												{
													"key": "user_attr",
													"value": "tJT",
													"description": "LDAP user attribute name"
												},
												{
													"key": "user_classes",
													"value": "inetorgperson, posixaccount, person, user",
													"description": "The objectclasses for users."
												},
												{
													"key": "username-claim",
													"value": "string",
													"description": "OpenID claim used to generate the unique username."
												},
												{
													"key": "verify",
													"value": "0",
													"description": "Verify the server's SSL certificate"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "null"
								}
							]
						}
					]
				},
				{
					"name": "openid",
					"item": [
						{
							"name": "auth-url",
							"item": [
								{
									"name": "Get the OpenId Authorization Url for the specified realm.",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/access/openid/auth-url?realm=string&redirect-url=string",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"access",
												"openid",
												"auth-url"
											],
											"query": [
												{
													"key": "realm",
													"value": "string",
													"description": "(Required) Authentication domain ID"
												},
												{
													"key": "redirect-url",
													"value": "string",
													"description": "(Required) Redirection Url. The client should set this to the used server url (location.origin)."
												}
											]
										},
										"description": "Get the OpenId Authorization Url for the specified realm."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/access/openid/auth-url?realm=string&redirect-url=string",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"access",
														"openid",
														"auth-url"
													],
													"query": [
														{
															"key": "realm",
															"value": "string",
															"description": "(Required) Authentication domain ID"
														},
														{
															"key": "redirect-url",
															"value": "string",
															"description": "(Required) Redirection Url. The client should set this to the used server url (location.origin)."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "string"
										}
									]
								}
							]
						},
						{
							"name": "login",
							"item": [
								{
									"name": " Verify OpenID authorization code and create a ticket.",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/access/openid/login?code=string&redirect-url=string&state=string",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"access",
												"openid",
												"login"
											],
											"query": [
												{
													"key": "code",
													"value": "string",
													"description": "(Required) OpenId authorization code."
												},
												{
													"key": "redirect-url",
													"value": "string",
													"description": "(Required) Redirection Url. The client should set this to the used server url (location.origin)."
												},
												{
													"key": "state",
													"value": "string",
													"description": "(Required) OpenId state."
												}
											]
										},
										"description": " Verify OpenID authorization code and create a ticket."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/access/openid/login?code=string&redirect-url=string&state=string",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"access",
														"openid",
														"login"
													],
													"query": [
														{
															"key": "code",
															"value": "string",
															"description": "(Required) OpenId authorization code."
														},
														{
															"key": "redirect-url",
															"value": "string",
															"description": "(Required) Redirection Url. The client should set this to the used server url (location.origin)."
														},
														{
															"key": "state",
															"value": "string",
															"description": "(Required) OpenId state."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"CSRFPreventionToken\": \"string\",\n  \"cap\": {},\n  \"clustername\": \"string\",\n  \"ticket\": \"string\",\n  \"username\": \"string\"\n}"
										}
									]
								}
							]
						},
						{
							"name": "Directory index.",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/access/openid",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"access",
										"openid"
									]
								},
								"description": "Directory index."
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/access/openid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"access",
												"openid"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"subdir\": \"string\"\n  },\n  {\n    \"subdir\": \"string\"\n  }\n]"
								}
							]
						}
					]
				},
				{
					"name": "tfa",
					"item": [
						{
							"name": "{userid}",
							"item": [
								{
									"name": "{id}",
									"item": [
										{
											"name": "Delete a TFA entry by ID.",
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/access/tfa/:userid/:id?password=string",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"access",
														"tfa",
														":userid",
														":id"
													],
													"query": [
														{
															"key": "password",
															"value": "string",
															"description": "The current password of the user performing the change."
														}
													],
													"variable": [
														{
															"key": "userid",
															"value": "string",
															"description": "(Required) Full User ID, in the `name@realm` format."
														},
														{
															"key": "id",
															"value": "string",
															"description": "(Required) A TFA entry id."
														}
													]
												},
												"description": "Delete a TFA entry by ID."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/access/tfa/:userid/:id?password=string",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"access",
																"tfa",
																":userid",
																":id"
															],
															"query": [
																{
																	"key": "password",
																	"value": "string",
																	"description": "The current password of the user performing the change."
																}
															],
															"variable": [
																{
																	"key": "userid"
																},
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "null"
												}
											]
										},
										{
											"name": "Fetch a requested TFA entry if present.",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/access/tfa/:userid/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"access",
														"tfa",
														":userid",
														":id"
													],
													"variable": [
														{
															"key": "userid",
															"value": "string",
															"description": "(Required) Full User ID, in the `name@realm` format."
														},
														{
															"key": "id",
															"value": "string",
															"description": "(Required) A TFA entry id."
														}
													]
												},
												"description": "Fetch a requested TFA entry if present."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/access/tfa/:userid/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"access",
																"tfa",
																":userid",
																":id"
															],
															"variable": [
																{
																	"key": "userid"
																},
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"created\": 6079,\n  \"description\": \"string\",\n  \"enable\": 1,\n  \"id\": \"string\",\n  \"type\": \"webauthn\"\n}"
												}
											]
										},
										{
											"name": "Add a TFA entry for a user.",
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/access/tfa/:userid/:id?description=string&enable=true&password=string",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"access",
														"tfa",
														":userid",
														":id"
													],
													"query": [
														{
															"key": "description",
															"value": "string",
															"description": "A description to distinguish multiple entries from one another"
														},
														{
															"key": "enable",
															"value": "true",
															"description": "Whether the entry should be enabled for login."
														},
														{
															"key": "password",
															"value": "string",
															"description": "The current password of the user performing the change."
														}
													],
													"variable": [
														{
															"key": "userid",
															"value": "string",
															"description": "(Required) Full User ID, in the `name@realm` format."
														},
														{
															"key": "id",
															"value": "string",
															"description": "(Required) A TFA entry id."
														}
													]
												},
												"description": "Add a TFA entry for a user."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/access/tfa/:userid/:id?description=string&enable=true&password=string",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"access",
																"tfa",
																":userid",
																":id"
															],
															"query": [
																{
																	"key": "description",
																	"value": "string",
																	"description": "A description to distinguish multiple entries from one another"
																},
																{
																	"key": "enable",
																	"value": "true",
																	"description": "Whether the entry should be enabled for login."
																},
																{
																	"key": "password",
																	"value": "string",
																	"description": "The current password of the user performing the change."
																}
															],
															"variable": [
																{
																	"key": "userid"
																},
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "null"
												}
											]
										}
									]
								},
								{
									"name": "List TFA configurations of users.",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/access/tfa/:userid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"access",
												"tfa",
												":userid"
											],
											"variable": [
												{
													"key": "userid",
													"value": "string",
													"description": "(Required) Full User ID, in the `name@realm` format."
												}
											]
										},
										"description": "List TFA configurations of users."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/access/tfa/:userid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"access",
														"tfa",
														":userid"
													],
													"variable": [
														{
															"key": "userid"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"created\": 1189,\n    \"description\": \"string\",\n    \"enable\": 1,\n    \"id\": \"string\",\n    \"type\": \"recovery\"\n  },\n  {\n    \"created\": 3958,\n    \"description\": \"string\",\n    \"enable\": 1,\n    \"id\": \"string\",\n    \"type\": \"totp\"\n  }\n]"
										}
									]
								},
								{
									"name": "Add a TFA entry for a user.",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/access/tfa/:userid?challenge=string&description=string&password=string&totp=string&type=totp&value=string",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"access",
												"tfa",
												":userid"
											],
											"query": [
												{
													"key": "challenge",
													"value": "string",
													"description": "When responding to a u2f challenge: the original challenge string"
												},
												{
													"key": "description",
													"value": "string",
													"description": "A description to distinguish multiple entries from one another"
												},
												{
													"key": "password",
													"value": "string",
													"description": "The current password of the user performing the change."
												},
												{
													"key": "totp",
													"value": "string",
													"description": "A totp URI."
												},
												{
													"key": "type",
													"value": "totp",
													"description": "(Required) TFA Entry Type."
												},
												{
													"key": "value",
													"value": "string",
													"description": "The current value for the provided totp URI, or a Webauthn/U2F challenge response"
												}
											],
											"variable": [
												{
													"key": "userid",
													"value": "string",
													"description": "(Required) Full User ID, in the `name@realm` format."
												}
											]
										},
										"description": "Add a TFA entry for a user."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/access/tfa/:userid?challenge=string&description=string&password=string&totp=string&type=totp&value=string",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"access",
														"tfa",
														":userid"
													],
													"query": [
														{
															"key": "challenge",
															"value": "string",
															"description": "When responding to a u2f challenge: the original challenge string"
														},
														{
															"key": "description",
															"value": "string",
															"description": "A description to distinguish multiple entries from one another"
														},
														{
															"key": "password",
															"value": "string",
															"description": "The current password of the user performing the change."
														},
														{
															"key": "totp",
															"value": "string",
															"description": "A totp URI."
														},
														{
															"key": "type",
															"value": "totp",
															"description": "(Required) TFA Entry Type."
														},
														{
															"key": "value",
															"value": "string",
															"description": "The current value for the provided totp URI, or a Webauthn/U2F challenge response"
														}
													],
													"variable": [
														{
															"key": "userid"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"challenge\": \"string\",\n  \"id\": \"string\",\n  \"recovery\": [\n    \"string\",\n    \"string\"\n  ]\n}"
										}
									]
								}
							]
						},
						{
							"name": "List TFA configurations of users.",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/access/tfa",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"access",
										"tfa"
									]
								},
								"description": "List TFA configurations of users."
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/access/tfa",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"access",
												"tfa"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"entries\": [\n      {\n        \"created\": 3429,\n        \"description\": \"string\",\n        \"enable\": 1,\n        \"id\": \"string\",\n        \"type\": \"yubico\"\n      },\n      {\n        \"created\": 4961,\n        \"description\": \"string\",\n        \"enable\": 1,\n        \"id\": \"string\",\n        \"type\": \"recovery\"\n      }\n    ],\n    \"tfa-locked-until\": 9576,\n    \"totp-locked\": true,\n    \"userid\": \"string\"\n  },\n  {\n    \"entries\": [\n      {\n        \"created\": 6599,\n        \"description\": \"string\",\n        \"enable\": 1,\n        \"id\": \"string\",\n        \"type\": \"totp\"\n      },\n      {\n        \"created\": 364,\n        \"description\": \"string\",\n        \"enable\": 1,\n        \"id\": \"string\",\n        \"type\": \"yubico\"\n      }\n    ],\n    \"tfa-locked-until\": 5869,\n    \"totp-locked\": false,\n    \"userid\": \"string\"\n  }\n]"
								}
							]
						}
					]
				},
				{
					"name": "ticket",
					"item": [
						{
							"name": "Dummy. Useful for formatters which want to provide a login page.",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/access/ticket",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"access",
										"ticket"
									]
								},
								"description": "Dummy. Useful for formatters which want to provide a login page."
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/access/ticket",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"access",
												"ticket"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "null"
								}
							]
						},
						{
							"name": "Create or verify authentication ticket.",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/access/ticket?new-format=1&otp=string&password=string&path=string&privs=string&realm=string&tfa-challenge=string&username=string",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"access",
										"ticket"
									],
									"query": [
										{
											"key": "new-format",
											"value": "1",
											"description": "This parameter is now ignored and assumed to be 1."
										},
										{
											"key": "otp",
											"value": "string",
											"description": "One-time password for Two-factor authentication."
										},
										{
											"key": "password",
											"value": "string",
											"description": "(Required) The secret password. This can also be a valid ticket."
										},
										{
											"key": "path",
											"value": "string",
											"description": "Verify ticket, and check if user have access 'privs' on 'path'"
										},
										{
											"key": "privs",
											"value": "string",
											"description": "Verify ticket, and check if user have access 'privs' on 'path'"
										},
										{
											"key": "realm",
											"value": "string",
											"description": "You can optionally pass the realm using this parameter. Normally the realm is simply added to the username <username>@<realm>."
										},
										{
											"key": "tfa-challenge",
											"value": "string",
											"description": "The signed TFA challenge string the user wants to respond to."
										},
										{
											"key": "username",
											"value": "string",
											"description": "(Required) User name"
										}
									]
								},
								"description": "Create or verify authentication ticket."
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/access/ticket?new-format=1&otp=string&password=string&path=string&privs=string&realm=string&tfa-challenge=string&username=string",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"access",
												"ticket"
											],
											"query": [
												{
													"key": "new-format",
													"value": "1",
													"description": "This parameter is now ignored and assumed to be 1."
												},
												{
													"key": "otp",
													"value": "string",
													"description": "One-time password for Two-factor authentication."
												},
												{
													"key": "password",
													"value": "string",
													"description": "(Required) The secret password. This can also be a valid ticket."
												},
												{
													"key": "path",
													"value": "string",
													"description": "Verify ticket, and check if user have access 'privs' on 'path'"
												},
												{
													"key": "privs",
													"value": "string",
													"description": "Verify ticket, and check if user have access 'privs' on 'path'"
												},
												{
													"key": "realm",
													"value": "string",
													"description": "You can optionally pass the realm using this parameter. Normally the realm is simply added to the username <username>@<realm>."
												},
												{
													"key": "tfa-challenge",
													"value": "string",
													"description": "The signed TFA challenge string the user wants to respond to."
												},
												{
													"key": "username",
													"value": "string",
													"description": "(Required) User name"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"CSRFPreventionToken\": \"string\",\n  \"clustername\": \"string\",\n  \"ticket\": \"string\",\n  \"username\": \"string\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "password",
					"item": [
						{
							"name": "Change user password.",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/access/password?confirmation-password=string&password=string&userid=string",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"access",
										"password"
									],
									"query": [
										{
											"key": "confirmation-password",
											"value": "string",
											"description": "The current password of the user performing the change."
										},
										{
											"key": "password",
											"value": "string",
											"description": "(Required) The new password."
										},
										{
											"key": "userid",
											"value": "string",
											"description": "(Required) Full User ID, in the `name@realm` format."
										}
									]
								},
								"description": "Change user password."
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/access/password?confirmation-password=string&password=string&userid=string",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"access",
												"password"
											],
											"query": [
												{
													"key": "confirmation-password",
													"value": "string",
													"description": "The current password of the user performing the change."
												},
												{
													"key": "password",
													"value": "string",
													"description": "(Required) The new password."
												},
												{
													"key": "userid",
													"value": "string",
													"description": "(Required) Full User ID, in the `name@realm` format."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "null"
								}
							]
						}
					]
				},
				{
					"name": "permissions",
					"item": [
						{
							"name": "Retrieve effective permissions of given user/token.",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/access/permissions?path=string&userid=",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"access",
										"permissions"
									],
									"query": [
										{
											"key": "path",
											"value": "string",
											"description": "Only dump this specific path, not the whole tree."
										},
										{
											"key": "userid",
											"value": "",
											"description": "User ID or full API token ID"
										}
									]
								},
								"description": "Retrieve effective permissions of given user/token."
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/access/permissions?path=string&userid=",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"access",
												"permissions"
											],
											"query": [
												{
													"key": "path",
													"value": "string",
													"description": "Only dump this specific path, not the whole tree."
												},
												{
													"key": "userid",
													"value": "",
													"description": "User ID or full API token ID"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{}"
								}
							]
						}
					]
				},
				{
					"name": "Directory index.",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/access",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"access"
							]
						},
						"description": "Directory index."
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/access",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"access"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n  {\n    \"subdir\": \"string\"\n  },\n  {\n    \"subdir\": \"string\"\n  }\n]"
						}
					]
				}
			]
		},
		{
			"name": "pools",
			"item": [
				{
					"name": "{poolid}",
					"item": [
						{
							"name": "Delete pool (deprecated, no support for nested pools, use 'DELETE /pools/?poolid={poolid}').",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/pools/:poolid",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pools",
										":poolid"
									],
									"variable": [
										{
											"key": "poolid",
											"value": "string",
											"description": "(Required) "
										}
									]
								},
								"description": "Delete pool (deprecated, no support for nested pools, use 'DELETE /pools/?poolid={poolid}')."
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/pools/:poolid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"pools",
												":poolid"
											],
											"variable": [
												{
													"key": "poolid"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "null"
								}
							]
						},
						{
							"name": "Get pool configuration (deprecated, no support for nested pools, use 'GET /pools/?poolid={poolid}').",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/pools/:poolid?type=qemu",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pools",
										":poolid"
									],
									"query": [
										{
											"key": "type",
											"value": "qemu"
										}
									],
									"variable": [
										{
											"key": "poolid",
											"value": "string",
											"description": "(Required) "
										}
									]
								},
								"description": "Get pool configuration (deprecated, no support for nested pools, use 'GET /pools/?poolid={poolid}')."
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/pools/:poolid?type=qemu",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"pools",
												":poolid"
											],
											"query": [
												{
													"key": "type",
													"value": "qemu"
												}
											],
											"variable": [
												{
													"key": "poolid"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"comment\": \"string\",\n  \"members\": [\n    {\n      \"id\": \"string\",\n      \"node\": \"string\",\n      \"storage\": \"string\",\n      \"type\": \"storage\",\n      \"vmid\": 8365,\n      \"key_0\": 1\n    },\n    {\n      \"id\": \"string\",\n      \"node\": \"string\",\n      \"storage\": \"string\",\n      \"type\": \"openvz\",\n      \"vmid\": 1497\n    }\n  ],\n  \"key_0\": {},\n  \"key_1\": {}\n}"
								}
							]
						},
						{
							"name": "Update pool data (deprecated, no support for nested pools - use 'PUT /pools/?poolid={poolid}' instead).",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/pools/:poolid?allow-move=0&comment=string&delete=0&storage=string&vms=string",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pools",
										":poolid"
									],
									"query": [
										{
											"key": "allow-move",
											"value": "0",
											"description": "Allow adding a guest even if already in another pool. The guest will be removed from its current pool and added to this one."
										},
										{
											"key": "comment",
											"value": "string"
										},
										{
											"key": "delete",
											"value": "0",
											"description": "Remove the passed VMIDs and/or storage IDs instead of adding them."
										},
										{
											"key": "storage",
											"value": "string",
											"description": "List of storage IDs to add or remove from this pool."
										},
										{
											"key": "vms",
											"value": "string",
											"description": "List of guest VMIDs to add or remove from this pool."
										}
									],
									"variable": [
										{
											"key": "poolid",
											"value": "string",
											"description": "(Required) "
										}
									]
								},
								"description": "Update pool data (deprecated, no support for nested pools - use 'PUT /pools/?poolid={poolid}' instead)."
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/pools/:poolid?allow-move=0&comment=string&delete=0&storage=string&vms=string",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"pools",
												":poolid"
											],
											"query": [
												{
													"key": "allow-move",
													"value": "0",
													"description": "Allow adding a guest even if already in another pool. The guest will be removed from its current pool and added to this one."
												},
												{
													"key": "comment",
													"value": "string"
												},
												{
													"key": "delete",
													"value": "0",
													"description": "Remove the passed VMIDs and/or storage IDs instead of adding them."
												},
												{
													"key": "storage",
													"value": "string",
													"description": "List of storage IDs to add or remove from this pool."
												},
												{
													"key": "vms",
													"value": "string",
													"description": "List of guest VMIDs to add or remove from this pool."
												}
											],
											"variable": [
												{
													"key": "poolid"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "null"
								}
							]
						}
					]
				},
				{
					"name": "Delete pool.",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/pools?poolid=string",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pools"
							],
							"query": [
								{
									"key": "poolid",
									"value": "string",
									"description": "(Required) "
								}
							]
						},
						"description": "Delete pool."
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/pools?poolid=string",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pools"
									],
									"query": [
										{
											"key": "poolid",
											"value": "string",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "null"
						}
					]
				},
				{
					"name": "List pools or get pool configuration.",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/pools?poolid=string&type=qemu",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pools"
							],
							"query": [
								{
									"key": "poolid",
									"value": "string"
								},
								{
									"key": "type",
									"value": "qemu"
								}
							]
						},
						"description": "List pools or get pool configuration."
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/pools?poolid=string&type=qemu",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pools"
									],
									"query": [
										{
											"key": "poolid",
											"value": "string"
										},
										{
											"key": "type",
											"value": "qemu"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n  {\n    \"comment\": \"string\",\n    \"members\": [\n      {\n        \"id\": \"string\",\n        \"node\": \"string\",\n        \"storage\": \"string\",\n        \"type\": \"openvz\",\n        \"vmid\": 3851\n      },\n      {\n        \"id\": \"string\",\n        \"node\": \"string\",\n        \"storage\": \"string\",\n        \"type\": \"openvz\",\n        \"vmid\": 1389\n      }\n    ],\n    \"poolid\": \"string\"\n  },\n  {\n    \"comment\": \"string\",\n    \"members\": [\n      {\n        \"id\": \"string\",\n        \"node\": \"string\",\n        \"storage\": \"string\",\n        \"type\": \"qemu\",\n        \"vmid\": 7185,\n        \"key_0\": 1,\n        \"key_1\": 1,\n        \"key_2\": 1\n      },\n      {\n        \"id\": \"string\",\n        \"node\": \"string\",\n        \"storage\": \"string\",\n        \"type\": \"lxc\",\n        \"vmid\": 2041\n      }\n    ],\n    \"poolid\": \"string\"\n  }\n]"
						}
					]
				},
				{
					"name": "Create new pool.",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/pools?comment=string&poolid=string",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pools"
							],
							"query": [
								{
									"key": "comment",
									"value": "string"
								},
								{
									"key": "poolid",
									"value": "string",
									"description": "(Required) "
								}
							]
						},
						"description": "Create new pool."
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/pools?comment=string&poolid=string",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pools"
									],
									"query": [
										{
											"key": "comment",
											"value": "string"
										},
										{
											"key": "poolid",
											"value": "string",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "null"
						}
					]
				},
				{
					"name": "Update pool.",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/pools?allow-move=0&comment=string&delete=0&poolid=string&storage=string&vms=string",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pools"
							],
							"query": [
								{
									"key": "allow-move",
									"value": "0",
									"description": "Allow adding a guest even if already in another pool. The guest will be removed from its current pool and added to this one."
								},
								{
									"key": "comment",
									"value": "string"
								},
								{
									"key": "delete",
									"value": "0",
									"description": "Remove the passed VMIDs and/or storage IDs instead of adding them."
								},
								{
									"key": "poolid",
									"value": "string",
									"description": "(Required) "
								},
								{
									"key": "storage",
									"value": "string",
									"description": "List of storage IDs to add or remove from this pool."
								},
								{
									"key": "vms",
									"value": "string",
									"description": "List of guest VMIDs to add or remove from this pool."
								}
							]
						},
						"description": "Update pool."
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/pools?allow-move=0&comment=string&delete=0&poolid=string&storage=string&vms=string",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pools"
									],
									"query": [
										{
											"key": "allow-move",
											"value": "0",
											"description": "Allow adding a guest even if already in another pool. The guest will be removed from its current pool and added to this one."
										},
										{
											"key": "comment",
											"value": "string"
										},
										{
											"key": "delete",
											"value": "0",
											"description": "Remove the passed VMIDs and/or storage IDs instead of adding them."
										},
										{
											"key": "poolid",
											"value": "string",
											"description": "(Required) "
										},
										{
											"key": "storage",
											"value": "string",
											"description": "List of storage IDs to add or remove from this pool."
										},
										{
											"key": "vms",
											"value": "string",
											"description": "List of guest VMIDs to add or remove from this pool."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "null"
						}
					]
				}
			]
		},
		{
			"name": "version",
			"item": [
				{
					"name": "API version details, including some parts of the global datacenter config.",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/version",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"version"
							]
						},
						"description": "API version details, including some parts of the global datacenter config."
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/version",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"version"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"console\": \"vv\",\n  \"release\": \"string\",\n  \"repoid\": \"be0e41e2cE3DA0835790e\",\n  \"version\": \"string\"\n}"
						}
					]
				}
			]
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "/"
		}
	]
}